TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	OpenLiberty/ci.common	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(newFile(configDirectory,""STR""),configFile);"	9.832934141159058	0	1	0	0	0
	1	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue()`:);	10.253222942352295	0	1	0	0	0
	2	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	10.06633973121643	0	1	0	0	0
	4	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	26.70328712463379	0	1	0	0	0
	5	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	10.052353143692017	1	0	0	0	0
	6	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory()`isaplausibleconfigFile.isDirectory());	10.462420225143433	0	1	0	0	0
	7	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(""STR"",configFile.getName());"	10.274610996246338	0	1	0	0	0
	8	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile);	9.77223801612854	0	1	0	0	0
	9	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile()`isaplausibleconfigFile.isFile());	10.27466106414795	0	1	0	0	0
	10	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(configDirectory,configFile.getParentFile()`isaplausibleconfigDirectory);	11.244543075561523	0	1	0	0	0
1	7	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertTrue(true);	102.32175397872925	0	1	0	0	0
	13	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertTrue(true);	28.95151400566101	0	1	0	0	0
	14	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertFalse(false);	30.026326179504395	0	1	0	0	0
0	0	rockagen/commons-lib	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	21.908709049224854	1	0	0	0	0
	3	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	10.124104976654053	0	1	0	0	0
	4	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertFalse(value.isEmpty());	11.710806846618652	0	1	0	0	0
	10	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	21.118159294128418	0	1	0	0	0
	12	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertTrue(value.length()>0);	13.10173487663269	0	1	0	0	0
	13	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	34.071038007736206	0	1	0	0	0
	14	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	21.217615127563477	0	1	0	0	0
	16	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertTrue(value.length()>0`isaplausiblevalue.length()>0);	11.521028995513916	0	1	0	0	0
0	0	sofastack/sofa-bolt	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,client2.isConnectionMonitorSwitchOn());	88.34516620635986	0	1	0	0	0
	1	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	17.59914207458496	1	0	0	0	0
	2	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	36.58660578727722	1	0	0	0	0
	3	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(!client2.isConnectionMonitorSwitchOn());	18.867268085479736	0	1	0	0	0
	4	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	18.296766996383667	0	1	0	0	0
	5	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(client2`isaplausibleclient2);	18.055086135864258	0	1	0	0	0
	6	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	18.6418399810791	0	1	0	0	0
	7	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNull(System.getProperty(Configs.CONN_RECONNECT_SWITCH)`isaplausibleSystem.getProperty(Configs.CONN_RECONNECT_SWITCH));	18.78080725669861	0	1	0	0	0
	8	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,System.getProperties().containsKey(Configs.CONN_MONITOR_SWITCH)`isaplausiblefalse);	19.43147587776184	0	1	0	0	0
	9	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,client1.isConnectionMonitorSwitchOn()`isaplausiblefalse);	18.477685928344727	0	1	0	0	0
1	0	sofastack/sofa-bolt	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	18.62561273574829	1	0	0	0	0
	1	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertTrue(url.contains(btUrl.getIp()));	18.996066093444824	0	1	0	0	0
	2	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(btUrl);	17.74220108985901	0	1	0	0	0
	3	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertNotEquals(""STR"",btUrl.getIp());"	18.449687719345093	0	1	0	0	0
	4	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertFalse(url.isEmpty());	18.11511492729187	0	1	0	0	0
	5	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().startsWith(""STR""));"	17.65286874771118	0	1	0	0	0
	6	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertEquals(2000,btUrl.getConnectTimeout()`isaplausible2000);	18.662365913391113	0	1	0	0	0
	7	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotEquals(0,btUrl.getConnectTimeout()`isaplausible0);	18.462083101272583	0	1	0	0	0
	8	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(url.contains(""STR""));"	18.813817977905273	0	1	0	0	0
	9	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(parser`isaplausibleparser);	19.355298042297363	0	1	0	0	0
2	0	sofastack/sofa-bolt	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd1));	61.897518157958984	0	1	0	0	0
	3	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue()`tocheckifthereturnedprocessorfrom`getProcessor()`isaninstanceof`RpcRequestProcessor`?);	19.273802042007446	0	1	0	0	0
	5	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotSame(rpcRequestProcessor1,rpcRequestProcessor2);	18.501629114151	0	1	0	0	0
	6	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(cmd1,cmd2);	17.70615315437317	0	1	0	0	0
	7	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue()`cmd1==cmd2);	18.551156044006348	0	1	0	0	0
	8	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	18.176252841949463	0	1	0	0	0
	9	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotEquals(rpcRequestProcessor1,rpcRequestProcessor2);	19.384422063827515	0	1	0	0	0
	11	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	38.64783501625061	0	1	0	0	0
	12	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor2,processorManager.getProcessor(cmd2));	19.471097946166992	0	1	0	0	0
	14	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	33.82220721244812	0	1	0	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	9.106549978256226	1	0	0	0	0
	2	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.BAD_SIGNATURE);	8.888773918151855	0	1	0	0	0
	3	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotNull(response);	7.845679759979248	0	1	0	0	0
	4	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus()`isaplausibleResponseStatus.OK);	8.30915117263794	0	1	0	0	0
	5	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()!=ResponseStatus.BAD_SIGNATURE);	7.295735120773315	0	1	0	0	0
	6	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertSame(ResponseStatus.BAD_SIGNATURE,response.getStatus()`isaplausibleResponseStatus.BAD_SIGNATURE);	8.548052787780762	0	1	0	0	0
	7	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	8.385918855667114	0	1	0	0	0
	8	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus()`isaplausibleResponseStatus.OK,response.getStatus());	8.417434215545654	0	1	0	0	0
	10	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.OK);	8.554984092712402	0	1	0	0	0
	11	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNull(response.getErrorMessage()`isaplausibleresponse.getErrorMessage());	8.108927249908447	0	1	0	0	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	28.185191869735718	1	0	0	0	0
	1	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	350.3576419353485	1	0	0	0	0
	6	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	25.3098201751709	1	0	0	0	0
	16	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	16.022451400756836	0	1	0	0	0
	17	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	16.369006872177124	0	1	0	0	0
	19	/	YubicoClientTest	testBadOTP	assertNotNull(response);	"assertNotEquals(""STR"",response.getStatus());"	16.10702109336853	0	1	0	0	0
	20	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	31.09860396385193	0	1	0	0	0
	25	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	69.26641082763672	1	0	0	0	0
	28	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	16.892603158950806	1	0	0	0	0
0	0	adlnet/jxapi	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	9.916224002838135	0	1	0	0	0
	1	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	10.43197512626648	0	1	0	0	0
	2	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(condition)`.Thisactual.containsAll(expected));	10.906095266342163	0	1	0	0	0
	3	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	9.790902137756348	0	1	0	0	0
	5	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	29.424020051956177	0	1	0	0	0
	6	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(condition)`.Here'sanexampleofhowyoucanuseit:);	10.628642082214355	0	1	0	0	0
	7	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected,actual)`?Thisexpected,actual);	11.608808040618896	0	1	0	0	0
	8	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNull(actual`.Thisactual);	10.843557119369507	0	1	0	0	0
	9	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertFalse(condition)`?Here'sanexampleofhowyoucanuseit:);	11.641946077346802	0	1	0	0	0
	11	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertSame(expected,actual`);	12.431404113769531	0	1	0	0	0
1	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(score.serialize(),actual);	31.860689878463745	0	1	0	0	0
	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	9.87000298500061	0	1	0	0	0
	2	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	9.207226037979126	1	0	0	0	0
	3	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(null,actual`isaplausiblenull);	9.878397941589355	0	1	0	0	0
	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	26.671669006347656	1	0	0	0	0
	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(expected,actual)`.This)`,youcanhavethefollowing5,getActualValue());	12.379887819290161	0	1	0	0	0
	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	18.129783153533936	1	0	0	0	0
	10	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	37.32758021354675	1	0	0	0	0
	11	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(condition)`?Here'sanexample:);	10.95595121383667	0	1	0	0	0
	12	/	ScoreTest	testSerialize	assertNotNull(actual);	assertFalse(condition)`?Here'sanexample:);	9.336832046508789	0	1	0	0	0
2	0	adlnet/jxapi	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	16.32974910736084	0	1	0	0	0
	1	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	10.517309188842773	1	0	0	0	0
	2	/	VerbTest	testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	10.271332025527954	0	1	0	0	0
	4	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.182982921600342	0	1	0	0	0
	5	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	28.25290822982788	0	1	0	0	0
	8	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	10.71540904045105	0	1	0	0	0
	11	/	VerbTest	testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsValue(""STR""));"	9.442958116531372	0	1	0	0	0
	12	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	18.481799840927124	0	1	0	0	0
	16	/	VerbTest	testSetDisplay	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	27.936145067214966	0	1	0	0	0
	18	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.isEmpty());	9.604578256607056	0	1	0	0	0
3	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	9.635453939437866	0	1	0	0	0
	1	/	StatementTest	testGetId	assertNotNull(actual);	assertTrue(actual!=null);	11.116940021514893	0	1	0	0	0
	2	/	StatementTest	testGetId	assertNotNull(actual);	assertNotNull()`:);	9.558784008026123	0	1	0	0	0
	3	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.694628715515137	0	1	0	0	0
	4	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	19.917812824249268	0	1	0	0	0
	7	/	StatementTest	testGetId	assertNotNull(actual);	assertFalse(boolean)`?Thiscondition);	10.09257197380066	0	1	0	0	0
	8	/	StatementTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	9.873646974563599	0	1	0	0	0
	9	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.658690690994263	0	1	0	0	0
	10	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.68924379348755	0	1	0	0	0
	14	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	18.852977991104126	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertFalse(frame.isFin());	15.47086501121521	0	1	0	0	0
	1	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertFalse(frame.isFin());	24.434577226638794	0	1	0	0	0
	2	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertTrue(frame.getOpcode()==Opcode.BINARY);	12.64392900466919	0	1	0	0	0
	3	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertEquals(Opcode.BINARY,frame.getOpcode());	12.713484764099121	0	1	0	0	0
	4	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotNull(frame);	12.231440782546997	0	1	0	0	0
	5	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertFalse(frame.isFin());	23.809690237045288	0	1	0	0	0
	6	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotEquals(Opcode.TEXT,frame.getOpcode());	13.556037902832031	0	1	0	0	0
	7	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertEquals(false,frame.isFin()`isaplausiblefalse);	13.210174083709717	0	1	0	0	0
	8	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertTrue(frameinstanceofFramedataImpl1);	13.169770956039429	0	1	0	0	0
	9	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNull(frame.getPayloadData()`isaplausibleframe.getPayloadData());	12.679264068603516	0	1	0	0	0
0	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	28.903817892074585	1	0	0	0	0
	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	29.07640790939331	0	1	0	0	0
	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	58.49128007888794	0	1	0	0	0
	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	30.729192972183228	0	1	0	0	0
	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	47.13757514953613	0	1	0	0	0
	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	92.8024251461029	0	1	0	0	0
	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	69.87002110481262	1	0	0	0	0
	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	29.802026987075806	0	1	0	0	0
	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(condition)`,whichchecksthatthespecifiedconditionistrue.Forexample:);	30.217737913131714	0	1	0	0	0
	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(expected,actual)`isaplausible5,qResult.size());	30.395146131515503	0	1	0	0	0
1	0	orientechnologies/orientdb	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(3,names.size());	41.37633800506592	0	1	0	0	0
	1	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR""));"	41.582119941711426	1	0	0	0	0
	2	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertFalse(names.isEmpty());	41.98376822471619	0	1	0	0	0
	3	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotNull(names);	40.75951409339905	0	1	0	0	0
	4	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotEquals(0,names.size());	42.61526608467102	0	1	0	0	0
	5	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertFalse(names.contains(""STR""));"	42.785521030426025	0	1	0	0	0
	6	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertEquals(names`isaplausibleSet.of(""foo"",""foo.bar"",""""),names);"	42.923410177230835	0	1	0	0	0
	7	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.containsAll(Arrays.asList(""foo"",""foo.bar"",""""))`isaplausiblenames.containsAll(Arrays.asList(""foo"",""foo.bar"","""")));"	42.56236791610718	0	1	0	0	0
	8	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotSame(names,elem.getPropertyNames()`isaplausiblenames,elem.getPropertyNames());	42.388323068618774	0	1	0	0	0
	10	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertTrue(names.size()>0);	42.08818507194519	0	1	0	0	0
3	1	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(ddl.replace(""STR"",""STR""),ddl.toLowerCase(Locale.ENGLISH).trim());"	79.104975938797	0	1	0	0	0
	2	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.matches(""STR""));"	123.50518584251404	0	1	0	0	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertFalse(ddl.isEmpty());	38.622236013412476	0	1	0	0	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertNotNull(ddl);	38.37054395675659	0	1	0	0	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertNotEquals(ddl`isaplausible"""",ddl);"	38.89389991760254	0	1	0	0	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertNotSame(oldDdl,ddl`isaplausibleoldDdl,ddl);	39.87110996246338	0	1	0	0	0
	7	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	39.313050746917725	0	1	0	0	0
	8	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertFalse(condition`isaplausiblecondition);	38.839759826660156	0	1	0	0	0
	11	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.contains(""STR""));"	153.98129892349243	0	1	0	0	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertTrue(ddl.endsWith(indexType)`isaplausibleddl.endsWith(indexType));	38.506057262420654	0	1	0	0	0
4	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	37.67242908477783	1	0	0	0	0
	1	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	146.75606393814087	1	0	0	0	0
	2	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue()`statementtocheckifthedeserializedvalueisgreaterthanorequaltoaminimumvalueandlessthanorequaltoamaximumvalue.);	43.41918897628784	0	1	0	0	0
	3	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	39.344592809677124	0	1	0	0	0
	4	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals()`tocheckifthedeserializedvalueisnotequaltoaspecificvalue?);	39.789002895355225	0	1	0	0	0
	5	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue()`tocheckifaspecificconditionistrue?Here'sanexample:);	40.81648302078247	0	1	0	0	0
	6	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertFalse()`tocheckifaspecificconditionisfalse?Here'sanexample:);	40.31675910949707	0	1	0	0	0
	8	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	144.1144299507141	0	1	0	0	0
	10	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotSame(OBJECT,v);	38.36019706726074	0	1	0	0	0
	11	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNull(v`isaplausiblev);	39.25888276100159	0	1	0	0	0
5	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	37.6487250328064	1	0	0	0	0
	1	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	38.811453104019165	0	1	0	0	0
	2	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	76.74980998039246	1	0	0	0	0
	4	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	38.849467754364014	0	1	0	0	0
	5	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	39.40777802467346	0	1	0	0	0
	6	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	105.2976279258728	0	1	0	0	0
	7	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	111.53583598136902	1	0	0	0	0
	8	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(5,doc.getVersion());	39.014549016952515	0	1	0	0	0
	9	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc`isaplausibledoc);	39.883102893829346	0	1	0	0	0
	10	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	71.77258515357971	1	0	0	0	0
6	0	orientechnologies/orientdb	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(4,r.size());	84.80555868148804	1	0	0	0	0
	1	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.size()>0);	43.41242218017578	0	1	0	0	0
	2	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertFalse(r.stream().anyMatch(doc->doc.field(""STR"").equals(""STR"")));"	85.12086200714111	0	1	0	0	0
	3	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertEquals(""STR"".toLowerCase(),r.get(0).field(""STR"").toString().toLowerCase());"	166.2237319946289	0	1	0	0	0
	4	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(r`isaplausibler);	44.06546497344971	0	1	0	0	0
	5	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotEquals(0,r.size()`isaplausible0);	42.71394920349121	0	1	0	0	0
	6	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertSame(r.get(0),r.get(1)`isaplausibler.get(0));	43.08010292053223	0	1	0	0	0
	7	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.isEmpty());	43.994295597076416	0	1	0	0	0
	8	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertNotNull(db.getMetadata().getSchema().getClass(""STR"").getProperty(""STR"")`isaplausibledb.getMetadata().getSchema().getClass(""STR"").getProperty(""STR""));"	43.39773678779602	0	1	0	0	0
	9	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	86.39772605895996	0	1	0	0	0
7	0	orientechnologies/orientdb	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotNull(index);	1314.8090119361877	0	1	0	0	0
	1	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(index.getSize(),4);	51.626657009124756	1	0	0	0	0
	3	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotEquals(0,index.getSize());	40.312341928482056	0	1	0	0	0
	4	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertFalse(index.contains(""STR""));"	24.844532012939453	0	1	0	0	0
	5	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertTrue(index.contains(""Luigi"")`isaplausibleindex.contains(""Luigi""));"	27.561242818832397	0	1	0	0	0
	6	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotSame(0,index.getSize());	25.395434856414795	0	1	0	0	0
	7	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getSize()>0);	25.887968063354492	0	1	0	0	0
	8	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertTrue(index.getAlgorithm().equalsIgnoreCase(""FULLTEXT"")`isaplausibleindex.getAlgorithm().equalsIgnoreCase(""FULLTEXT""));"	26.26602077484131	0	1	0	0	0
	9	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	27.528429746627808	0	1	0	0	0
	11	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertTrue(index.getName().startsWith(""STR""));"	25.439934015274048	0	1	0	0	0
0	1	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR""));"	33.34721112251282	0	1	0	0	0
	3	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR""));"	14.401078939437866	0	1	0	0	0
	4	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR""));"	39.79388880729675	0	1	0	0	0
	5	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(whichchecksifthevalueof`""CIRCLE_TAG""`inthe`env`mapisnotnull.);"	12.624926805496216	0	1	0	0	0
	6	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertFalse(env.isEmpty());	11.788021087646484	0	1	0	0	0
	7	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",env.get(""STR""));"	12.589016199111938	0	1	0	0	0
	8	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsValue(""STR""));"	11.803494930267334	0	1	0	0	0
	9	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotSame(""master"",env.get(""CIRCLE_BRANCH"")`isaplausible""master"",env.get(""CIRCLE_BRANCH""));"	12.757530927658081	0	1	0	0	0
	10	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""CIRCLE_BRANCH"")&&env.get(""CIRCLE_BRANCH"").equals(""master"")`isaplausibleenv.containsKey(""CIRCLE_BRANCH"")&&env.get(""CIRCLE_BRANCH"").equals(""master""));"	12.908058881759644	0	1	0	0	0
	11	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotSame(""v2"",env.get(""CIRCLE_TAG"")`isaplausible""v2"",env.get(""CIRCLE_TAG""));"	12.468869924545288	0	1	0	0	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(CIEnvironment.detect(env));	11.006879091262817	1	0	0	0	0
	1	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(CIEnvironment.detect(env));	24.082231044769287	1	0	0	0	0
	11	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(null,CIEnvironment.detect(env));	12.215298891067505	0	1	0	0	0
	14	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(CIEnvironment.detect(env)==null||CIEnvironment.detect(env)instanceofCIEnvironment);	11.747379064559937	0	1	0	0	0
	27	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(CIEnvironment.detect(env)!=null);	12.568984746932983	0	1	0	0	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	13.206401824951172	1	0	0	0	0
	1	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(yaml.contains(config.toYaml(""STR"")));"	12.849838018417358	0	1	0	0	0
	2	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotEquals(""STR"",config.toYaml(""STR""));"	13.1005220413208	0	1	0	0	0
	3	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotNull(config.toYaml(""STR""));"	12.30100393295288	0	1	0	0	0
	4	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	assertFalse(yaml.isEmpty()`isaplausibleyaml.isEmpty());	12.285672903060913	0	1	0	0	0
	5	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotSame(yaml,config.toYaml(""STR""));"	13.319169044494629	0	1	0	0	0
	6	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertSame(yaml,config.toYaml(""cucumberpro"")`isaplausibleyaml);"	12.89813780784607	0	1	0	0	0
	7	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.toYaml(""STR"").startsWith(""STR""));"	12.848773956298828	0	1	0	0	0
	8	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertFalse(yaml.endsWith(""cucumberpro"")`isaplausibleyaml.endsWith(""cucumberpro""));"	12.566474914550781	0	1	0	0	0
	10	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",yaml.split(""STR"")[0].trim());"	34.70890212059021	0	1	0	0	0
0	0	tradier/dropwizard-raven	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNull(factory.getDsn());	20.277167797088623	0	1	0	0	0
	3	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNotNull(factory);	10.595634937286377	0	1	0	0	0
0	0	arnohaase/a-foundation	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key2);	31.845106840133667	0	1	0	0	0
	1	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(key1,key2);	16.641438007354736	1	0	0	0	0
	6	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.get(key1).isEmpty());	31.447304010391235	0	1	0	0	0
	7	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key3);	32.40453815460205	0	1	0	0	0
	8	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.isEmpty()`isaplausiblemap.isEmpty());	16.244561195373535	0	1	0	0	0
	9	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size()`isaplausible0);	16.438435792922974	0	1	0	0	0
	11	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	"assertEquals(AOption.none(),map.get(""STR""));"	32.77192306518555	0	1	0	0	0
	13	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	"assertFalse(map.containsKey(""STR""));"	16.258344888687134	0	1	0	0	0
	14	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map.keys());	31.425911903381348	0	1	0	0	0
	16	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	"assertFalse(map.containsValue(""value"")`isaplausiblemap.containsValue(""value""));"	17.314992904663086	0	1	0	0	0
1	0	arnohaase/a-foundation	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedSize,result.size());	17.19092607498169	0	1	0	0	0
	1	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.contains(expectedElement));	16.783205032348633	0	1	0	0	0
	2	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(result.isEmpty());	16.965522050857544	0	1	0	0	0
	3	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(expectedList,result);	16.346946001052856	0	1	0	0	0
	4	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result`isaplausibleresult);	16.28498411178589	0	1	0	0	0
	5	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(resultinstanceofList);	16.43249201774597	0	1	0	0	0
	6	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertSame(expectedResult,result`isaplausibleexpectedResult);	16.33905792236328	0	1	0	0	0
	8	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.isEmpty());	15.92096495628357	0	1	0	0	0
	9	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertArrayEquals(expectedArray,result.toArray()`isaplausibleexpectedArray);	16.465496063232422	0	1	0	0	0
	10	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotSame(expectedList,result`isaplausibleexpectedList,result);	16.11223077774048	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a.toString(),b.toString());	11.522839784622192	0	1	0	0	0
	1	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	12.166474103927612	0	1	0	0	0
	2	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(expected,actual)`.This){);	17.630698919296265	0	1	0	0	0
	3	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(java.util.Arrays.equals(a.getCells(),b.getCells()));	36.8607702255249	0	1	0	0	0
	4	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(a,b`isaplausiblea);	12.522112846374512	0	1	0	0	0
	5	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a`isaplausiblea);	12.206235885620117	0	1	0	0	0
	6	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	24.565802097320557	0	1	0	0	0
	7	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(a.equals(b)`isaplausiblea.equals(b));	12.34270429611206	0	1	0	0	0
	8	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertSame(a,b`isaplausiblea);	12.50777816772461	0	1	0	0	0
	9	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(a,b`isaplausiblea,b);	12.217273950576782	0	1	0	0	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	15.682212114334106	1	0	0	0	0
	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	28.983585119247437	0	1	0	0	0
	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse()`.Here'sanexample:);	17.698471069335938	0	1	0	0	0
	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals()`:);	17.823583126068115	0	1	0	0	0
	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals()`?Here'sanexample:);	17.199727773666382	0	1	0	0	0
	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertArrayEquals()`isaplausibleexpectedArray,actualArray);	19.286881923675537	0	1	0	0	0
	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(condition)`?Here'sanexample:);	17.868831872940063	0	1	0	0	0
	10	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals()`isaplausibleexpected,actual);	17.64587378501892	0	1	0	0	0
	11	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNull()`?Here'sanexample:);	16.383620023727417	0	1	0	0	0
	12	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame()`?Here'sanexample:);	18.09279489517212	0	1	0	0	0
0	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	29.754523992538452	1	0	0	0	0
	11	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	14.465967893600464	0	1	0	0	0
	17	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	28.41356611251831	1	0	0	0	0
1	2	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	53.859737157821655	1	0	0	0	0
	3	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	27.785115957260132	1	0	0	0	0
	4	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	14.184539079666138	0	1	0	0	0
	10	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	48.23286819458008	0	0	0	0	1
	11	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	36.1351420879364	1	0	0	0	0
	14	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	43.324021100997925	1	0	0	0	0
	22	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	38.031253814697266	1	0	0	0	0
	26	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals()`.ThisexpectedValue,actualValue);	16.814118146896362	0	1	0	0	0
0	0	fluent/fluent-logger-java	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	14.592068910598755	0	1	0	0	0
	2	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	18.1486599445343	0	1	0	0	0
	3	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	70.92719292640686	0	1	0	0	0
	4	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isClosed()`?This){);	12.083065032958984	0	1	0	0	0
	5	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.sender);	16.680065870285034	0	1	0	0	0
	14	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	28.1984920501709	0	1	0	0	0
	16	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	16.864115953445435	0	1	0	0	0
	17	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	23.08253502845764	0	1	0	0	0
	19	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	29.018913984298706	0	1	0	0	0
	21	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.sender);	17.18890905380249	0	1	0	0	0
0	8	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(mockParameterReplacer!=null);	33.82255506515503	0	1	0	0	0
	9	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	22.50812005996704	0	1	0	0	0
	12	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(mockParameterReplacer,preparer.getParameterReplacer());	26.81912398338318	0	1	0	0	0
	13	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(preparer.getParameterReplacer()instanceofParameterReplacer);	17.68472909927368	0	1	0	0	0
	19	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(mockParameterReplacer);	35.31717801094055	0	1	0	0	0
	20	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	33.703614950180054	0	1	0	0	0
	22	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(preparer.getParameterReplacer()instanceofParameterReplacer);	9.416673183441162	0	1	0	0	0
	23	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	29.64842128753662	0	1	0	0	0
	24	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(mockParameterReplacer,testTarget001);	32.28647804260254	0	1	0	0	0
	26	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	18.15100598335266	0	1	0	0	0
1	0	amlinv/stat-collection-utils	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	19.9585919380188	0	1	0	0	0
	1	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertTrue(factory.getTargetDescription()!=null);	9.714239120483398	0	1	0	0	0
	2	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertFalse(factory.getTargetDescription().isEmpty());	9.966507196426392	0	1	0	0	0
	3	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertNotNull(factory.getTargetDescription());	10.507972240447998	0	1	0	0	0
	4	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotEquals(""jmx:url=invalid-url"",factory.getTargetDescription()`isaplausible)`isnotequaltotheexpectedvalue""jmx:url=invalid-url"".);"	11.52152705192566	0	1	0	0	0
	5	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotSame(""jmx:url=x-jmx-service-url-x"",factory.getTargetDescription()`isaplausible""jmx:url=x-jmx-service-url-x"",factory.getTargetDescription());"	10.762218952178955	0	1	0	0	0
	7	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertFalse(factory.getTargetDescription().contains(""STR""));"	9.65442705154419	0	1	0	0	0
	8	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotSame(""STR"",factory.getTargetDescription());"	10.513856887817383	0	1	0	0	0
	9	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertTrue(factory.getTargetDescription().startsWith(""STR""));"	9.981527090072632	0	1	0	0	0
	10	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotEquals(factory.getTargetDescription()`isaplausible""jmx:url=invalid-url"",factory.getTargetDescription());"	10.574913024902344	0	1	0	0	0
0	1	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	61.068543910980225	0	1	0	0	0
	7	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method==null||newAnnotatedMethodRetriever(AnnotationTestClass.class,Prepare.class).findAll().size()<=1);	58.11517786979675	0	1	0	0	0
	9	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	60.788410902023315	0	1	0	0	0
	15	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	55.01063013076782	0	1	0	0	0
	16	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method!=null);	15.693513870239258	0	1	0	0	0
	27	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	41.65613794326782	0	1	0	0	0
1	15	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(null,""STR"",""STR""));"	44.84681296348572	0	1	0	0	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertEquals(expectedResult,bind0(object,property,value)`?);	353.18726420402527	0	1	0	0	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(com.hazelcast.simulator.utils.PropertyBindingSupport.bind0(newObject(),""STR"",""STR""));"	46.609386920928955	0	1	0	0	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertNotNull(PropertyBindingSupport.bind0(newPropertyBindingSupport_bind0_NumericalTest(),""STR"",""STR""));"	47.99072003364563	0	1	0	0	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	15.154573917388916	0	1	0	0	0
	21	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(object,""property"",""value"")`isaplausiblebind0(object,""property"",""value""));"	16.529688119888306	0	1	0	0	0
	28	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(null,""STR"",""STR""));"	15.4427809715271	0	1	0	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	184.02769470214844	1	0	0	0	0
	1	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertTrue(""STR"".equals(OpenKoreanTextProcessorJava.detokenize(words)));"	130.0006000995636	0	1	0	0	0
	3	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertNotNull(OpenKoreanTextProcessorJava.detokenize(words));	148.9670352935791	0	1	0	0	0
	4	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	331.06630301475525	0	1	0	0	0
	5	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertFalse(""늘[]경제관하commiter_lein이니까?테스트689중"".equals(OpenKoreanTextProcessorJava.detokenize(words))`isaplausible""늘[]경제관하commiter_lein이니까?테스트689중"".equals(OpenKoreanTextProcessorJava.detokenize(words)));"	116.62310910224915	0	1	0	0	0
	6	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotSame(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	155.4515769481659	0	1	0	0	0
	7	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertArrayEquals(newString[]{""늘"",""평온"",""하게"",""누워"",""있"",""는"",""루루""},words.toArray()`isaplausiblenewString[]{""늘"",""평온"",""하게"",""누워"",""있"",""는"",""루루""},words.toArray());"	155.2962851524353	0	1	0	0	0
	9	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertTrue(words.contains(""STR""));"	54.57365918159485	0	1	0	0	0
	10	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertEquals(7,words.size()`isaplausible7);	54.912079095840454	0	1	0	0	0
	15	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertTrue(!OpenKoreanTextProcessorJava.detokenize(words).isEmpty());	159.46770787239075	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,testServer.cookiesToSend.size());	38.892192125320435	0	1	0	0	0
	1	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(testServer.cookiesToSend.size(),4);	29.44960904121399	0	1	0	0	0
	3	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	31.439682960510254	0	1	0	0	0
	10	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(testServer);	14.70378303527832	0	1	0	0	0
	12	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	40.166216135025024	0	1	0	0	0
	16	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotEquals(0,testServer.cookiesToSend.size());	15.058919906616211	0	1	0	0	0
	22	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,testServer.cookiesToSend.size());	14.779191017150879	0	1	0	0	0
	23	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(!testServer.cookiesToSend.isEmpty());	14.54242491722107	0	1	0	0	0
0	1	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	17.681182384490967	0	1	0	0	0
	2	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNotNull(properties.getProperty(""STR""));"	16.923004150390625	0	1	0	0	0
	3	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertFalse(properties.isEmpty());	16.33968210220337	0	1	0	0	0
	4	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(5,properties.size());	16.443610906600952	1	0	0	0	0
	5	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNotEquals(properties.getProperty(""shippable_build_url"")`isaplausible""shippable_build_url"",properties.getProperty(""shippable_build_url""));"	17.9493989944458	0	1	0	0	0
	6	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""branch""))`isaplausibleproperties.containsKey(""branch""));"	17.30986976623535	0	1	0	0	0
	7	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNull(properties.getProperty(""commit_sha"")`isaplausibleproperties.getProperty(""commit_sha""));"	17.14498496055603	0	1	0	0	0
	9	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotSame(properties,newProperties());	16.704097986221313	0	1	0	0	0
	11	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertFalse(properties.getProperty(""STR"").isEmpty());"	17.284887075424194	0	1	0	0	0
	12	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	31.745208024978638	0	1	0	0	0
0	0	fluenda/ParCEFone	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	17.824065685272217	1	0	0	0	0
	5	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	24.70911693572998	1	0	0	0	0
	7	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	25.780603885650635	1	0	0	0	0
	9	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue()`?Here'sanexample:);	10.021181344985962	0	1	0	0	0
	11	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	23.014297008514404	1	0	0	0	0
	14	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals()`:);	10.870977640151978	0	1	0	0	0
	22	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	35.00776720046997	1	0	0	0	0
0	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(""STR"",m.markdown(""STR""));"	19.77405285835266	0	1	0	0	0
	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	24.633630990982056	0	1	0	0	0
	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	14.237057209014893	0	1	0	0	0
	9	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertTrue(m.markdown(""STR"").length()>0);"	8.593854188919067	0	1	0	0	0
	10	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertFalse(condition)`,whichchecksifthegivenconditionisfalse.);	9.170883893966675	0	1	0	0	0
	11	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(m.markdown(""txt"")`isaplausible""expected"",m.markdown(""txt""));"	8.884878873825073	0	1	0	0	0
	12	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	16.814736127853394	0	1	0	0	0
	19	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	41.46367812156677	0	1	0	0	0
	20	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	15.134495973587036	0	1	0	0	0
	21	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertTrue(m.markdown(""txt"").length()>0`isaplausiblem.markdown(""txt"").length()>0);"	8.874969244003296	0	1	0	0	0
0	0	retog/wymiwyg-commons-core	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	26.626244068145752	1	0	0	0	0
	1	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertNotNull(node.getPath());	10.405550956726074	0	1	0	0	0
	3	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().endsWith(""STR""));"	11.20562195777893	0	1	0	0	0
	5	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertFalse(node.getPath().isEmpty());	10.383460760116577	0	1	0	0	0
	6	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	20.363865852355957	0	1	0	0	0
	7	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().contains(""b/end"")`isaplausiblenode.getPath().contains(""b/end""));"	10.96053409576416	0	1	0	0	0
	8	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotEquals(node.getPath()`isaplausible""foo/bar/a/b/end"",node.getPath());"	11.236779928207397	0	1	0	0	0
	9	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertArrayEquals(newString[]{node.getPath()}`isaplausiblenewString[]{""foo/bar/a/b/end""},newString[]{node.getPath()});"	11.972560167312622	0	1	0	0	0
	11	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	11.089915752410889	0	1	0	0	0
	12	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	20.726658821105957	0	1	0	0	0
0	1	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertTrue(execs.getAppName()!=null);	9.2069411277771	0	1	0	0	0
	2	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs.getAppName());	8.237644672393799	0	1	0	0	0
	3	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotEquals(""STR"",execs.getAppName());"	8.751898050308228	0	1	0	0	0
	4	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertFalse(execs.getAppName().isEmpty());	8.435794830322266	0	1	0	0	0
	5	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotSame(""expectedAppName"",execs.getAppName()`isaplausible""expectedAppName"",execs.getAppName());"	9.197726011276245	0	1	0	0	0
	18	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs.getAppName());	16.37023401260376	0	1	0	0	0
	20	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotEquals(""STR"",execs.getAppName().toUpperCase());"	9.036655902862549	0	1	0	0	0
	21	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertTrue(execs.getAppName().contains(""expectedPartOfString"")`isaplausibleexecs.getAppName().contains(""expectedPartOfString""));"	9.058483839035034	0	1	0	0	0
	22	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNull(execs.getAppName()`isaplausibleexecs.getAppName());	8.694754123687744	0	1	0	0	0
	26	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotSame(""STR"",execs.getAppName());"	8.799309968948364	0	1	0	0	0
0	1	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(123456789)!=null);	67.7068989276886	0	1	0	0	0
	2	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(987654321).length>0);	22.082113027572632	0	1	0	0	0
	4	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(123456789));	21.889580965042114	0	1	0	0	0
	5	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expectedArray,convertToBytes(inputValue)`isaplausible)throwsException{);	23.65188503265381	0	1	0	0	0
	7	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(987654321));	66.56040906906128	0	1	0	0	0
	10	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(123456L).length>0);	65.81484484672546	0	1	0	0	0
	11	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(expectedValue,convertToBytes(inputValue)`isaplausibleexpectedValue);	22.462641716003418	0	1	0	0	0
	18	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(-123456789).length>0);	22.02799105644226	0	1	0	0	0
	20	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedValue,convertToBytes(inputValue).length`isaplausibleexpectedValue);	22.57234501838684	0	1	0	0	0
	26	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(123456789L));	64.30374312400818	0	1	0	0	0
