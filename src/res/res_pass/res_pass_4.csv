TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	5	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	???;	49.43036079406738	0	1	0	0	0
	10	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertThrows(java.lang.NoSuchMethodException.class,()->cm.getClass().getDeclaredMethod(""STR"",byte.class));"	34.20602297782898	0	1	0	0	0
	15	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm);	29.330824851989746	0	1	0	0	0
0	0	orientechnologies/orientdb	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343,OVarIntSerializer.readAsLong(bytes));	38.7432541847229	0	1	0	0	0
	1	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)==20432343);	40.123915910720825	0	1	0	0	0
	2	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0,OVarIntSerializer.readAsLong(bytes));	38.74397301673889	0	1	0	0	0
	3	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	38.618444204330444	0	1	0	0	0
	4	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(null,OVarIntSerializer.readAsLong(bytes));	38.7875919342041	0	1	0	0	0
	5	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)==0`isaplausibleOVarIntSerializer.readAsLong(bytes)==0);	39.403717041015625	0	1	0	0	0
	6	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0`isaplausibleOVarIntSerializer.readAsLong(bytes)!=0);	38.63182020187378	0	1	0	0	0
	7	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0,OVarIntSerializer.readAsLong(bytes));	40.16236996650696	0	1	0	0	0
	8	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)>0`isaplausibleOVarIntSerializer.readAsLong(bytes)>0);	39.16918706893921	0	1	0	0	0
	9	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0);	40.752805948257446	0	1	0	0	0
1	0	orientechnologies/orientdb	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	37.62787628173828	1	0	0	0	0
	1	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()==0);	39.570395946502686	0	1	0	0	0
	2	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()>0);	90.32010912895203	0	1	0	0	0
	3	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(1,treeBucket.size()`isaplausible1);	39.040809869766235	0	1	0	0	0
	4	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket);	38.74635910987854	0	1	0	0	0
	5	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(null,treeBucket`isaplausiblenull,treeBucket);	39.08277487754822	0	1	0	0	0
	6	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertSame(treeBucket,treeBucket);	41.714197874069214	0	1	0	0	0
	7	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	38.086976051330566	0	1	0	0	0
	9	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	116.67450761795044	1	0	0	0	0
	10	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	116.22696924209595	1	0	0	0	0
2	0	orientechnologies/orientdb	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	27.69233512878418	1	0	0	0	0
	1	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(server.existsDatabase(""STR""));"	26.401320934295654	0	1	0	0	0
	2	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	45.7558228969574	1	0	0	0	0
	3	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertEquals(true,server.existsDatabase(""STR""));"	27.77627420425415	0	1	0	0	0
	5	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	49.43999409675598	1	0	0	0	0
	10	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertNotNull(server);	26.843240976333618	0	1	0	0	0
	11	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	45.48472499847412	1	0	0	0	0
	12	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertNotEquals(false,server.existsDatabase(""STR""));"	360.07506108283997	0	1	0	0	0
	14	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertNotNull(server.existsDatabase(""STR""));"	26.41804790496826	0	1	0	0	0
	16	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertEquals(1,server.listDatabases().size());	26.56206774711609	0	1	0	0	0
3	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotNull(res);	20.57721710205078	0	1	0	0	0
	1	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>=0);	53.65910196304321	0	1	0	0	0
	2	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	55.09645891189575	0	1	0	0	0
	3	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	59.29101300239563	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	42.5525438785553	1	0	0	0	0
	5	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotEquals(0,res.size()`isaplausible0);	21.45376205444336	0	1	0	0	0
	6	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.contains(expectedResult)`isaplausibleres.contains(expectedResult));	22.499490976333618	0	1	0	0	0
	9	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertTrue(res.stream().allMatch(doc->doc.field(""STR"")instanceofFloat));"	42.25716209411621	0	1	0	0	0
	10	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty()`isaplausibleres.isEmpty());	21.922819137573242	0	1	0	0	0
	11	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0`isaplausibleres.size()>0);	21.702358961105347	0	1	0	0	0
4	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	114.5472948551178	0	1	0	0	0
	1	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	38.803943157196045	1	0	0	0	0
	2	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(!compositeKey.equals(anotherCompositeKey));	38.581947803497314	0	1	0	0	0
	3	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	41.61720585823059	0	1	0	0	0
	4	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()!=anotherCompositeKey.hashCode());	39.98043513298035	0	1	0	0	0
	6	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	38.97059488296509	0	1	0	0	0
	7	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode()`isaplausiblecompositeKey.hashCode());	39.41803789138794	0	1	0	0	0
	8	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey.hashCode(),anotherCompositeKey.hashCode());	38.887404918670654	0	1	0	0	0
	9	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey`isaplausiblecompositeKey);	37.93626308441162	0	1	0	0	0
	10	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNull(anotherCompositeKey`isaplausibleanotherCompositeKey`isaplausibleanotherCompositeKey`isaplausibleanotherCompositeKey);	38.5966739654541	0	1	0	0	0
5	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	111.75992512702942	1	0	0	0	0
	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	79.0201849937439	1	0	0	0	0
	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue()`method:);	39.8932089805603	0	1	0	0	0
	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull()`:);	38.426013231277466	0	1	0	0	0
	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"assertTrue(expectedResult.contains(newOCompositeKey(12,1,""STR"")));"	40.48461198806763	0	1	0	0	0
	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals()`methodtonull,result);	39.17189621925354	0	1	0	0	0
	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),2);	77.46316504478455	0	1	0	0	0
	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	39.447649002075195	0	1	0	0	0
	10	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	77.86963391304016	1	0	0	0	0
	11	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"assertTrue(expectedResult.contains(newOCompositeKey(12,2,""STR"")));"	40.5034921169281	0	1	0	0	0
6	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property);	42.93641495704651	0	1	0	0	0
	1	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(""STR"",property.getName());"	43.47065019607544	0	1	0	0	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.isString()`.So);	42.526344776153564	0	1	0	0	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getType().equals(OType.STRING));	78.0834801197052	0	1	0	0	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.isMandatory());	42.51253628730774	0	1	0	0	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals(OType.STRING,property.getType());	42.21816396713257	0	1	0	0	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertSame(companyClass,property.getOwnerClass()`isaplausiblecompanyClass);	44.29044198989868	0	1	0	0	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.isIndexed());	42.200539112091064	0	1	0	0	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed());	42.92929410934448	0	1	0	0	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertNotEquals(""STR"",property.getName());"	42.69852089881897	0	1	0	0	0
7	0	orientechnologies/orientdb	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	44.64052724838257	0	1	0	0	0
	2	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(timeLine.getMultiValueChangeEvents().isEmpty());	82.3943202495575	0	1	0	0	0
	3	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()>0);	44.638108015060425	0	1	0	0	0
	4	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()>=1);	155.71384596824646	0	1	0	0	0
	5	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,timeLine.getMultiValueChangeEvents().size());	42.97561597824097	0	1	0	0	0
	6	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(0,timeLine.getMultiValueChangeEvents().size());	42.77204704284668	0	1	0	0	0
	7	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(!timeLine.getMultiValueChangeEvents().isEmpty());	43.324933767318726	0	1	0	0	0
	10	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(expected,actual)`.Thisexpected,actual);	44.395801067352295	0	1	0	0	0
	11	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertSame(expected,actual)`.Thisexpected,actual`isaplausibleexpected,actual)`.Thisexpected,actual);	42.720767974853516	0	1	0	0	0
	15	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().contains(event)`isaplausibletimeLine.getMultiValueChangeEvents().contains(event));	42.829508781433105	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	13.618347883224487	1	0	0	0	0
	1	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	15.575039148330688	0	1	0	0	0
	2	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	31.741631031036377	1	0	0	0	0
	3	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	15.170931816101074	0	1	0	0	0
	10	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	36.496642112731934	1	0	0	0	0
	13	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(w);	14.414126873016357	0	1	0	0	0
	14	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	37.65109419822693	1	0	0	0	0
	21	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(locītājs);	14.911566972732544	0	1	0	0	0
	24	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	53.30198693275452	1	0	0	0	0
	27	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	43.75338411331177	1	0	0	0	0
1	5	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(viņš.isRecognized());	47.99543499946594	1	0	0	0	0
	6	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(viņš.isRecognized());	42.507014989852905	1	0	0	0	0
	28	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotNull(viņš);	29.409334182739258	0	1	0	0	0
	29	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expected,actual`?);	17.447509288787842	0	1	0	0	0
0	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertEquals(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR""),flattened);"	18.17914915084839	0	1	0	0	0
	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertTrue(flattened.containsAll(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"")));"	16.868705987930298	0	1	0	0	0
	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	16.382554054260254	0	1	0	0	0
	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(0,flattened.size()`isaplausible0);	16.671321868896484	0	1	0	0	0
	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(set.containsAll(ACollectionHelper.flatten(Collections.singleton(set))));	49.72124195098877	0	1	0	0	0
	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(set.isEmpty()`isaplausibleset.isEmpty());	16.62825608253479	0	1	0	0	0
	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened`isaplausibleflattened);	16.25619077682495	0	1	0	0	0
	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened`.Thisset.size(),flattened.size());	19.361639976501465	0	1	0	0	0
	10	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR""},flattened.toArray());"	20.44256091117859	0	1	0	0	0
	11	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened`isaplausibleset,flattened);	17.514934062957764	0	1	0	0	0
1	9	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	???;	40.688217878341675	0	1	0	0	0
	10	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertNotNull()`result);	17.764142274856567	0	1	0	0	0
	13	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNotEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR"",""STR"",""STR""));"	120.75143098831177	0	1	0	0	0
	14	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertTrue(ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR"",""STR"",""STR"").length()>0);"	18.074404001235962	0	1	0	0	0
	15	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNotSame(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR"",""STR"",""STR""));"	17.461270093917847	0	1	0	0	0
	16	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertTrue()`withacustomcondition?Here'sanexample:);	18.099847078323364	0	1	0	0	0
0	0	OpenLiberty/ci.common	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	162.04572367668152	0	1	0	0	0
	1	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	21.417727947235107	0	1	0	0	0
	7	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotNull(sourceFile);	10.167910814285278	0	1	0	0	0
	8	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(srcDir.exists());	10.273544788360596	0	1	0	0	0
	9	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(targetDir.isDirectory());	10.091535091400146	0	1	0	0	0
	11	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	"assertEquals(""STR"",sourceFile.getName());"	10.115793704986572	0	1	0	0	0
	12	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	"assertNotEquals(""STR"",sourceFile.getName());"	9.525159120559692	0	1	0	0	0
	14	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	21.830420970916748	0	1	0	0	0
	15	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotSame(targetDir,srcDir);	10.809711217880249	0	1	0	0	0
	16	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertEquals(srcDir.getParent(),targetDir.getParent());	21.539397954940796	0	1	0	0	0
1	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertTrue(newFile(targetDir,""STR"").exists());"	23.290153980255127	0	1	0	0	0
	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertNotNull(newFile(targetDir,""STR""));"	10.964111089706421	0	1	0	0	0
	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertTrue(newFile(targetDir,""STR"").exists());"	31.262532234191895	0	1	0	0	0
	14	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	???;	19.97411298751831	0	1	0	0	0
	17	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertFalse(newFile(targetDir,""STR"").isDirectory());"	10.63085412979126	0	1	0	0	0
	19	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(targetDir.isDirectory());	11.791215896606445	0	1	0	0	0
	21	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	38.97324085235596	1	0	0	0	0
	22	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(targetDir.isFile());	11.430526971817017	0	1	0	0	0
	26	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertEquals(""STR"",tempClass.getName());"	10.072379112243652	0	1	0	0	0
	27	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(0,targetDir.listFiles().length);	20.1147038936615	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	11.419638872146606	1	0	0	0	0
	1	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	15.826347589492798	0	1	0	0	0
	2	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(result`isaplausible""FizzBuzz"",result);"	13.092943906784058	0	1	0	0	0
	3	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	63.16836977005005	0	1	0	0	0
	4	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertFalse(result.contains(""Buzz"")`isaplausibleresult.contains(""Buzz""));"	13.022073745727539	0	1	0	0	0
	5	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	12.694783926010132	0	1	0	0	0
	6	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR"")||result.equals(""STR"")||result.equals(""STR"")||result.matches(""STR""));"	13.398313999176025	0	1	0	0	0
	7	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	12.210433959960938	0	1	0	0	0
	8	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	25.658962965011597	1	0	0	0	0
	9	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(FizzBuzzTDD.convert(15)`isaplausible""FizzBuzz"",FizzBuzzTDD.convert(15));"	12.686063766479492	0	1	0	0	0
0	0	amlinv/stat-collection-utils	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertEquals(newJMXServiceURL(""STR""),result);"	10.535392999649048	0	1	0	0	0
	1	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(resultinstanceofJMXServiceURL);	9.630608797073364	0	1	0	0	0
	2	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	9.747888088226318	1	0	0	0	0
	3	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	19.27814793586731	1	0	0	0	0
	6	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	23.66509175300598	1	0	0	0	0
	7	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertTrue(result.toString().startsWith(""STR""));"	27.136483907699585	0	1	0	0	0
	8	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertNotEquals(result.toString()`isaplausible""different-url"",result.toString());"	9.80644679069519	0	1	0	0	0
	9	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotSame(result,null);	10.191962957382202	0	1	0	0	0
	10	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertEquals(result.toString()`isaplausible""service:jmx:rmi://127.0.0.1:1099/jndi/rmi://127.0.0.1:1099/jmxrmi"",result.toString());"	12.118586778640747	0	1	0	0	0
	11	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertFalse(result.toString().isEmpty()`isaplausibleresult.toString().isEmpty());	9.435635805130005	0	1	0	0	0
1	1	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	24.492316961288452	0	1	0	0	0
	2	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getJmxServiceUrlFactory());	10.499070167541504	0	1	0	0	0
	3	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	11.35546612739563	0	1	0	0	0
	7	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory);	11.886593103408813	0	1	0	0	0
	9	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(DefaultJmxServiceUrlFactory.class,factory.getJmxServiceUrlFactory().getClass());	11.710354328155518	0	1	0	0	0
	10	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(null,factory.getJmxServiceUrlFactory()`isaplausiblenull);	10.70472502708435	0	1	0	0	0
	11	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(factory.getJmxServiceUrlFactory()==null);	10.86093282699585	0	1	0	0	0
	12	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	19.437638998031616	0	1	0	0	0
	13	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory`isaplausiblefactory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory);	10.963327884674072	0	1	0	0	0
	14	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getJmxServiceUrlFactory()`isaplausiblefactory.getJmxServiceUrlFactory());	10.027538776397705	0	1	0	0	0
0	0	myabc/markdownj	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertNotNull(m.markdown(null));	6.909468173980713	0	1	0	0	0
	1	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null));"	16.58070206642151	1	0	0	0	0
	2	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertTrue(m.markdown(""STR"").startsWith(""STR""));"	9.464726209640503	0	1	0	0	0
	3	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertFalse(m.markdown(""STR"").isEmpty());"	7.291274785995483	0	1	0	0	0
	4	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotEquals(""STR"",m.markdown(""STR""));"	8.203941106796265	0	1	0	0	0
	5	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertTrue(m.markdown(""STR"").contains(""STR""));"	8.068104982376099	0	1	0	0	0
	6	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotSame(m.markdown(""Hello,World""),m.markdown(""Hello,World"")`isaplausiblem.markdown(""Hello,World""),m.markdown(""Hello,World""));"	8.640560150146484	0	1	0	0	0
	7	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null).trim());"	34.154366970062256	0	1	0	0	0
	8	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotEquals(m.markdown(""Hello,World"")`isaplausible"""",m.markdown(""Hello,World""));"	8.338740110397339	0	1	0	0	0
	9	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertTrue(m.markdown(""Hello,World"").endsWith(""</p>"")`isaplausiblem.markdown(""Hello,World"").endsWith(""</p>""));"	8.931557893753052	0	1	0	0	0
0	1	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertTrue(deflateExtension.getProvidedExtensionAsServer().startsWith(""STR""));"	13.0574049949646	0	1	0	0	0
	2	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertNotNull(deflateExtension.getProvidedExtensionAsServer());	12.637136936187744	0	1	0	0	0
	3	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertNotEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	12.648292064666748	0	1	0	0	0
	4	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertFalse(deflateExtension.getProvidedExtensionAsServer().isEmpty());	12.019487142562866	0	1	0	0	0
	5	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertNotSame(""STR"",deflateExtension.getProvidedExtensionAsServer());"	12.924640893936157	0	1	0	0	0
	6	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertNotEquals(null,deflateExtension.getProvidedExtensionAsServer()`isaplausiblenull);	347.205326795578	0	1	0	0	0
	7	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertTrue(!deflateExtension.getProvidedExtensionAsServer().isEmpty()`isaplausible!deflateExtension.getProvidedExtensionAsServer().isEmpty());	12.832303047180176	0	1	0	0	0
	8	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertNotSame("""",deflateExtension.getProvidedExtensionAsServer()`isaplausible"""",deflateExtension.getProvidedExtensionAsServer());"	13.149168014526367	0	1	0	0	0
	12	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertTrue(deflateExtension.getProvidedExtensionAsServer().contains(""STR""));"	13.712628841400146	0	1	0	0	0
	13	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertFalse(deflateExtension.getProvidedExtensionAsServer().contains(""STR""));"	12.77764368057251	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	11.659903049468994	1	0	0	0	0
	1	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	25.342299699783325	0	1	0	0	0
	2	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	38.11606502532959	1	0	0	0	0
	3	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension1.hashCode());	12.850372791290283	0	1	0	0	0
	4	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode()`isaplausibledefaultExtension0.hashCode());	13.354295015335083	0	1	0	0	0
	5	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0`isaplausibledefaultExtension0);	13.548254013061523	0	1	0	0	0
	6	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0,defaultExtension1`isaplausibledefaultExtension0);	12.921308994293213	0	1	0	0	0
	10	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension1));	13.55205512046814	0	1	0	0	0
	11	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.equals(defaultExtension1)`isaplausibledefaultExtension0.equals(defaultExtension1));	13.095541000366211	0	1	0	0	0
	13	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode()`isaplausibledefaultExtension0.hashCode());	13.751208305358887	0	1	0	0	0
0	1	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c.yModeProbs);	101.85567021369934	0	1	0	0	0
	4	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.getYModeProbs().length>0);	24.33262801170349	0	1	0	0	0
	5	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(condition`?Youcanreplace`<AssertPlaceHolder>`with`c.getYModeProbs().length==0);	24.938350200653076	0	1	0	0	0
	6	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,c.getYModeProbs().length`tocheckthatthe`c.getYModeProbs()`arrayhasanon-zerolength.);	29.140421867370605	0	1	0	0	0
	7	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.getYModeProbs()[0][0]>=0);	24.041231870651245	0	1	0	0	0
	8	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(null,c.getYModeProbs());	24.226943969726562	0	1	0	0	0
	9	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertArrayEquals(Y_MODE_PROBS,c.getYModeProbs()`isaplausibleY_MODE_PROBS);	25.011404037475586	0	1	0	0	0
	10	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c)`isaplausiblec);	24.158331871032715	0	1	0	0	0
	11	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(null,c.yModeProbs)`isaplausiblenull,c.yModeProbs);	24.084563970565796	0	1	0	0	0
	14	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(c.yModeProbs,Y_MODE_PROBS);	24.307780981063843	0	1	0	0	0
0	1	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertEquals(""STR"",actual.getId().toString());"	27.4280002117157	0	1	0	0	0
	2	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertTrue(actual.getId().toString().contains(""STR""));"	10.579813957214355	0	1	0	0	0
	3	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual.getId());	11.122622966766357	0	1	0	0	0
	4	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual);	21.679630994796753	1	0	0	0	0
	5	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual.getId());	17.55747079849243	0	1	0	0	0
	6	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertNotEquals(actual.getId().toString()`isaplausible""empty"",actual.getId().toString());"	10.749067068099976	0	1	0	0	0
	7	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(null,actual.getId()`isaplausiblenull);	9.868317127227783	0	1	0	0	0
	8	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame(null,actual.getId()`isaplausiblenull`isaplausiblenull,actual.getId()`isaplausiblenull);	10.263087034225464	0	1	0	0	0
	9	/	VerbsTest	testRegistered	assertNotNull(actual);	assertFalse(actual.getId().isEmpty()`isaplausibleactual.getId().isEmpty());	9.849102020263672	0	1	0	0	0
	11	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertTrue(actual.getId().toString().endsWith(""STR""));"	35.60656476020813	0	1	0	0	0
1	0	adlnet/jxapi	VerbsTest	testImported	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	18.696514129638672	0	1	0	0	0
	1	/	VerbsTest	testImported	assertNotNull(actual);	"assertTrue(actual.toString().contains(""STR""));"	9.787119150161743	0	1	0	0	0
	2	/	VerbsTest	testImported	assertNotNull(actual);	assertNotNull(actual);	10.056365013122559	1	0	0	0	0
	3	/	VerbsTest	testImported	assertNotNull(actual);	"assertNotEquals(actual.toString()`isaplausible""notimported"",actual.toString());"	10.181990146636963	0	1	0	0	0
	4	/	VerbsTest	testImported	assertNotNull(actual);	"assertFalse(actual.toString().equals(""notimported"")`isaplausibleactual.toString().equals(""notimported""));"	9.898536920547485	0	1	0	0	0
	5	/	VerbsTest	testImported	assertNotNull(actual);	"assertNotSame(""STR"",actual.toString());"	9.368448972702026	0	1	0	0	0
	7	/	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	9.81758999824524	0	1	0	0	0
	8	/	VerbsTest	testImported	assertNotNull(actual);	assertNotSame(Verbs.imported(),actual);	10.531774997711182	0	1	0	0	0
	9	/	VerbsTest	testImported	assertNotNull(actual);	assertNotEquals(Verbs.notImported(),actual`isaplausibleVerbs.notImported());	10.37258005142212	0	1	0	0	0
	10	/	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.equals(Verbs.notImported())`isaplausibleactual.equals(Verbs.notImported()));	10.06200122833252	0	1	0	0	0
2	1	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	47.93106508255005	1	0	0	0	0
	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	19.90900492668152	1	0	0	0	0
	3	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	9.606971025466919	0	1	0	0	0
	4	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.getId());"	79.24211478233337	0	1	0	0	0
	5	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	21.844331979751587	0	1	0	0	0
	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(actual,Verbs.initialized()`isaplausibleactual);	10.03999924659729	0	1	0	0	0
	7	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(actual.getName()`isaplausible""initialized"",actual.getName());"	9.575232982635498	0	1	0	0	0
	8	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	22.391995906829834	1	0	0	0	0
	11	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotSame(Verbs.initialized(),actual);	10.21019196510315	0	1	0	0	0
	12	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertTrue(actual.getName().contains(""init"")`isaplausibleactual.getName().contains(""init""));"	9.769957304000854	0	1	0	0	0
3	1	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(!statement.getId().equals(actual.getId()));	10.09716796875	0	1	0	0	0
	2	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(actual.getId());	10.499128103256226	0	1	0	0	0
	10	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(this.statement.getContext().getLanguage());	21.4469211101532	0	1	0	0	0
	13	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(Long.parseLong(statement.getStored())<=System.currentTimeMillis());	19.590147018432617	0	1	0	0	0
	14	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getTimestamp().equals(statement.getStored()));	9.541039943695068	0	1	0	0	0
	15	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getAttachments());	33.921396017074585	0	1	0	0	0
	16	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	10.599130153656006	0	1	0	0	0
	17	/	StatementTest	testToString	assertNotNull(actual);	"assertEquals(""STR"",statement.getContext().getLanguage());"	27.246805906295776	0	1	0	0	0
	18	/	StatementTest	testToString	assertNotNull(actual);	"assertTrue(statement.getVersion().equals(""1.0"")`isaplausiblestatement.getVersion().equals(""1.0""));"	10.01089096069336	0	1	0	0	0
	20	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getActor());	8.670391082763672	0	1	0	0	0
4	0	adlnet/jxapi	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	8.747883081436157	0	1	0	0	0
	1	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertTrue()`:);	10.377250671386719	0	1	0	0	0
	2	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals()`withacustommessage:);	10.99532413482666	0	1	0	0	0
	3	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNull()`?Here'showitcanbeusedinthetestcase:);	11.856096982955933	0	1	0	0	0
	4	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotEquals()`?Thisexpected,actual);	11.344619035720825	0	1	0	0	0
	5	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotNull(activity.getObjectType());	10.799124240875244	0	1	0	0	0
	6	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	18.01837396621704	0	1	0	0	0
	9	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertFalse()`?Thiscondition);	10.753438949584961	0	1	0	0	0
	10	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertArrayEquals()`.This){);	12.46120285987854	0	1	0	0	0
	11	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotSame()`.Thisexpected,actual`isaplausible)`.Thisexpected,actual);	11.01786184310913	0	1	0	0	0
0	5	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotNull(moneyToStrUAHRUS.convert(0.0));	18.857706785202026	0	1	0	0	0
	6	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(123.45));"	20.626622915267944	0	1	0	0	0
	7	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertTrue(moneyToStrUAHRUS.convert(100.0).startsWith(""STR""));"	11.0088210105896	0	1	0	0	0
	8	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrUAHRUS.convert(100.0));"	11.225219964981079	0	1	0	0	0
	10	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertTrue(moneyToStrUAHRUS.convert(123.45).contains(""STR""));"	32.678422927856445	0	1	0	0	0
	13	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertFalse(moneyToStrUAHRUS.convert(0.0).isEmpty());	11.499292850494385	0	1	0	0	0
	14	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(0.0));"	9.791977882385254	0	1	0	0	0
	15	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertTrue(moneyToStrUAHRUS.convert(10.0).length()>0);	9.692754030227661	0	1	0	0	0
	16	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotEquals(null,moneyToStrUAHRUS.convert(10.0)`isaplausiblenull);	10.113243341445923	0	1	0	0	0
	19	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotSame(moneyToStrUAHRUS.convert(100.0),moneyToStrRURRUS.convert(100.0));	11.899563789367676	0	1	0	0	0
1	0	javadev/moneytostr-russian	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotNull(moneyToStrPER100);	8.993147134780884	0	1	0	0	0
	2	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertNotEquals(""STR"",moneyToStrUSD.toString());"	9.852699756622314	0	1	0	0	0
	3	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertTrue(moneyToStrUAHENGinstanceofMoneyToStr);	9.016772031784058	0	1	0	0	0
	4	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertTrue(moneyToStrRURRUSinstanceofMoneyToStr);	18.26582908630371	0	1	0	0	0
	5	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertTrue(moneyToStrUSDENGinstanceofMoneyToStr);	19.106229305267334	0	1	0	0	0
	6	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotSame(moneyToStrUAH,moneyToStrRUR);	9.611573934555054	0	1	0	0	0
	7	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertFalse(moneyToStrUSDENG.equals(moneyToStrPER1000));	9.945480823516846	0	1	0	0	0
	8	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotSame(moneyToStrUAHRUS,moneyToStrUSDENG`isaplausiblemoneyToStrUAHRUS,moneyToStrUSDENG);	10.072070837020874	0	1	0	0	0
	9	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotNull(moneyToStrCustom`isaplausiblemoneyToStrCustom);	9.517075777053833	0	1	0	0	0
	10	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotEquals(3,moneyToStrUAHENG.hashCode()`isaplausible3);	9.9931058883667	0	1	0	0	0
0	0	1337joe/cubesensors-for-java	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	9.121494054794312	1	0	0	0	0
	1	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	9.071412801742554	0	1	0	0	0
	2	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(actual`.This){);	9.17125678062439	0	1	0	0	0
	3	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,actual);	14.232501029968262	0	1	0	0	0
	6	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(condition`);	9.254932165145874	0	1	0	0	0
	8	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	7.896327018737793	0	1	0	0	0
	10	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual)`.);	10.32301115989685	0	1	0	0	0
	11	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertSame(expected,actual`isaplausibleexpected);	7.899632930755615	0	1	0	0	0
	15	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	19.360169887542725	1	0	0	0	0
1	0	1337joe/cubesensors-for-java	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	7.5832929611206055	1	0	0	0	0
	1	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	8.173280000686646	0	1	0	0	0
	2	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual`.This){);	10.007824897766113	0	1	0	0	0
	4	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual)`to){);	9.90059494972229	0	1	0	0	0
	5	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	14.413713932037354	1	0	0	0	0
	6	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	16.232862949371338	1	0	0	0	0
	7	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(condition)`.Thisactual>expected);	9.17159390449524	0	1	0	0	0
	8	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(condition`);	9.647230863571167	0	1	0	0	0
	9	/	TestPressure	testToInHg	assertEquals(expected,actual);	"assertNotEquals(""STR"",actual);"	28.570558786392212	0	1	0	0	0
	10	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(actual`isaplausibleactual);	7.622708082199097	0	1	0	0	0
0	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	15.430718898773193	0	1	0	0	0
	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value%2==0);	61.14389705657959	0	1	0	0	0
	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	15.177433967590332	0	1	0	0	0
	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	31.926110982894897	0	1	0	0	0
	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	32.39473009109497	0	1	0	0	0
	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(expectedValue,actualValue`);	17.45334815979004	0	1	0	0	0
	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(100,value);	31.371869802474976	0	1	0	0	0
	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertFalse(value>100);	15.740861892700195	0	1	0	0	0
	10	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(expectedList,actualList`isaplausibleexpectedList);	16.388904094696045	0	1	0	0	0
	11	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	15.76331615447998	0	1	0	0	0
1	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""STR"",""STR""));"	16.827427864074707	0	1	0	0	0
	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(newObject(),""STR"",""STR""));"	16.068324089050293	0	1	0	0	0
	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	16.604259729385376	0	1	0	0	0
	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	45.961047887802124	0	1	0	0	0
	11	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	60.04348015785217	0	1	0	0	0
	12	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	31.63038182258606	0	1	0	0	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNull(bind0(null,""propertyName"",""value"")`isaplausiblebind0(null,""propertyName"",""value""));"	16.136934995651245	0	1	0	0	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	15.870542764663696	0	1	0	0	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	30.633248805999756	0	1	0	0	0
	24	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	46.038896799087524	0	1	0	0	0
2	28	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""STR"",""STR""));"	60.26293087005615	0	1	0	0	0
0	0	jribble/Java-Websockify	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	11.07979702949524	0	1	0	0	0
	2	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(response);	7.548168897628784	0	1	0	0	0
	3	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	7.782253265380859	0	1	0	0	0
	5	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(XML.getBytes(),resp.getBytes());	8.142030239105225	0	1	0	0	0
	7	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	7.415136098861694	0	1	0	0	0
	8	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	58.138596057891846	0	1	0	0	0
	10	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.startsWith(""STR""));"	7.763862133026123	0	1	0	0	0
	11	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(XML,resp);	7.924144268035889	0	1	0	0	0
	12	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML.length(),resp.length());	8.114340782165527	0	1	0	0	0
	13	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	15.788915157318115	0	1	0	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	208.6586799621582	0	1	0	0	0
	1	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.nonEmpty());	124.86728596687317	0	1	0	0	0
	3	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	147.95813298225403	0	1	0	0	0
	5	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	167.91562700271606	0	1	0	0	0
	9	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.exists(token->token.text().equals(""STR"")&&token.pos().toString().equals(""STR"")));"	297.2203528881073	0	1	0	0	0
	15	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens.head());	104.74235892295837	0	1	0	0	0
	17	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.exists(token->token.text().equals(""STR"")));"	157.39396929740906	0	1	0	0	0
	19	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedSize,tokens.size()`isaplausibleexpectedSize);	183.04049396514893	0	1	0	0	0
	22	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0);	191.40672087669373	0	1	0	0	0
	23	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>=expectedSize`isaplausibletokens.size()>=expectedSize);	179.1612310409546	0	1	0	0	0
0	5	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	???;	11.890740156173706	0	1	0	0	0
	8	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	21.135371923446655	0	1	0	0	0
	10	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertFalse(false);	8.438796997070312	0	1	0	0	0
	12	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	"assertNotNull(""STR"");"	17.25739598274231	0	1	0	0	0
	19	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(Collectors.toImmutableList());	31.786612272262573	0	1	0	0	0
	26	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	8.55298113822937	0	1	0	0	0
0	0	fluenda/ParCEFone	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	18.131151914596558	1	0	0	0	0
	1	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1)instanceofCommonEvent);	9.416356801986694	0	1	0	0	0
	2	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	16.868282079696655	1	0	0	0	0
	6	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertFalse(parser.parse(sample1)==null);	8.392170906066895	0	1	0	0	0
	7	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedValue,actualValue`isaplausibleexpectedValue);	8.720836162567139	0	1	0	0	0
	8	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotEquals(expectedValue,actualValue`isaplausibleexpectedValue);	8.811326026916504	0	1	0	0	0
	9	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(condition`isaplausiblecondition);	8.550195932388306	0	1	0	0	0
	11	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotSame(expectedValue,actualValue`.);	9.405767917633057	0	1	0	0	0
	13	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	17.222872018814087	1	0	0	0	0
	16	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	17.203345775604248	1	0	0	0	0
0	9	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(env.get(""STR""));"	43.54540181159973	0	1	0	0	0
	10	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR""));"	11.646015167236328	0	1	0	0	0
	11	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR""));"	12.298361778259277	0	1	0	0	0
	12	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(env.get(""STR""),""STR"");"	48.215070962905884	0	1	0	0	0
	13	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR"")&&env.get(""STR"").equals(""STR""));"	12.825831174850464	0	1	0	0	0
	14	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",env.get(""STR""));"	12.373769044876099	0	1	0	0	0
	15	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(env.get(""GIT_BRANCH"")`isaplausibleenv.get(""GIT_BRANCH""));"	12.081974744796753	0	1	0	0	0
	16	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertFalse(env.containsKey(""GIT_TAG_NAME"")`isaplausibleenv.containsKey(""GIT_TAG_NAME""));"	12.021914005279541	0	1	0	0	0
	17	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNull(env.get(""SOME_KEY"")`isaplausibleenv.get(""SOME_KEY""));"	12.597293138504028	0	1	0	0	0
	19	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",env.get(""STR""));"	12.414760828018188	0	1	0	0	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	7.523475885391235	1	0	0	0	0
	1	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.isMemberClass());	15.76492691040039	0	1	0	0	0
	2	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.isLocalClass());	15.039507389068604	0	1	0	0	0
	3	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.isAssignableFrom(Object.class)`isaplausiblehelloClass.isAssignableFrom(Object.class));	7.86346173286438	0	1	0	0	0
	4	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getDeclaredMethod(""STR"").invoke(helloClass.getDeclaredConstructor().newInstance()));"	8.314801216125488	0	1	0	0	0
	5	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertTrue(helloClass.getName().contains(""HelloClass"")`isaplausiblehelloClass.getName().contains(""HelloClass""));"	7.976991176605225	0	1	0	0	0
	6	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertNotEquals(helloClass.getDeclaredMethod(""hello"").invoke(helloClass.getDeclaredConstructor().newInstance())`isaplausible""hello"",helloClass.getDeclaredMethod(""hello"").invoke(helloClass.getDeclaredConstructor().newInstance()));"	8.363605976104736	0	1	0	0	0
	7	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertTrue(Arrays.asList(helloClass.getDeclaredMethods()).stream().anyMatch(method->method.getName().equals(""hello""))`isaplausibleArrays.asList(helloClass.getDeclaredMethods()).stream().anyMatch(method->method.getName().equals(""hello"")));"	8.650649070739746	0	1	0	0	0
	8	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredConstructors().length);	7.886167049407959	0	1	0	0	0
	9	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertTrue(Modifier.isPrivate(helloClass.getDeclaredField(""inner"").getModifiers())`isaplausibleModifier.isPrivate(helloClass.getDeclaredField(""inner"").getModifiers()));"	8.439442873001099	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotNull(""STR"");"	49.33534002304077	0	1	0	0	0
	4	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(this.httpclient.getCookieStore().getCookies().contains(clientCookie));	26.382303953170776	0	1	0	0	0
	6	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",this.httpclient.getCookieStore().getCookies().get(0).getName());"	29.042208909988403	0	1	0	0	0
	7	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(this.httpclient.getCookieStore().getCookies().size()>0);	14.658632278442383	0	1	0	0	0
	8	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotEquals(""STR"",this.httpclient.getCookieStore().getCookies().get(0).getValue());"	60.462332248687744	0	1	0	0	0
	9	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals(1,this.httpclient.getCookieStore().getCookies().size());	30.215062618255615	0	1	0	0	0
	10	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertFalse(this.httpclient.getCookieStore().getCookies().isEmpty());	14.99290919303894	0	1	0	0	0
	12	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull(this.httpclient.getCookieStore().getCookies().get(0));	62.57333302497864	0	1	0	0	0
	14	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotSame(""STR"",this.httpclient.getCookieStore().getCookies().get(0).getValue());"	15.856328010559082	0	1	0	0	0
	15	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull(this.httpclient.getCookieStore().getCookies());	31.61601996421814	0	1	0	0	0
