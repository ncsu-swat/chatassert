TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	orientechnologies/orientdb	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343,OVarIntSerializer.readAsLong(bytes));	34.326627016067505	0	1	0	0	0
	1	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0);	34.91153311729431	0	1	0	0	0
	2	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0,OVarIntSerializer.readAsLong(bytes));	36.76017999649048	0	1	0	0	0
	3	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes)`isaplausibleOVarIntSerializer.readAsLong(bytes));	34.182206869125366	0	1	0	0	0
	4	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(null,OVarIntSerializer.readAsLong(bytes)`isaplausiblenull);	36.128823041915894	0	1	0	0	0
	5	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)>0`isaplausibleOVarIntSerializer.readAsLong(bytes)>0);	34.69045400619507	0	1	0	0	0
	6	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes)`isaplausible20432343L);	37.03692126274109	0	1	0	0	0
	7	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0);	36.49387311935425	0	1	0	0	0
	8	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0,OVarIntSerializer.readAsLong(bytes))`isaplausible0,OVarIntSerializer.readAsLong(bytes)));	35.42195200920105	0	1	0	0	0
	9	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0,OVarIntSerializer.readAsLong(bytes))`isaplausible0,OVarIntSerializer.readAsLong(bytes)));	35.17582607269287	0	1	0	0	0
1	2	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	37.36987066268921	0	1	0	0	0
	3	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket);	37.45965003967285	0	1	0	0	0
	4	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(expectedSize,treeBucket.size()`isaplausibleexpectedSize);	35.34578490257263	0	1	0	0	0
	6	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	69.77597308158875	1	0	0	0	0
	7	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(0,treeBucket.size()`isaplausible0);	34.11902904510498	0	1	0	0	0
	8	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()<=0);	64.40268802642822	0	1	0	0	0
	10	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	64.40341973304749	1	0	0	0	0
	13	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()>0);	34.43358516693115	0	1	0	0	0
	17	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	72.28671884536743	1	0	0	0	0
	24	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	69.34214901924133	0	1	0	0	0
2	0	orientechnologies/orientdb	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	21.756574869155884	1	0	0	0	0
	1	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertFalse()`:);	25.660665273666382	0	1	0	0	0
	2	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertEquals()`false,server.existsDatabase(""test""));"	26.135006189346313	0	1	0	0	0
	3	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertNotNull(server.existsDatabase(""STR""));"	25.0558340549469	0	1	0	0	0
	4	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertNull(server.existsDatabase(""test"")`isaplausibleserver.existsDatabase(""test""));"	22.978296995162964	0	1	0	0	0
	5	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	35.33039426803589	1	0	0	0	0
	6	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertNotEquals(expectedValue,actualValue`);	24.90621519088745	0	1	0	0	0
	7	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	46.664599895477295	1	0	0	0	0
	8	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	45.70532417297363	1	0	0	0	0
	9	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(server.existsDatabase(""STR""));"	21.841595888137817	0	1	0	0	0
3	2	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertTrue(res.get(0).containsField(""STR""));"	21.580466985702515	0	1	0	0	0
	3	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotNull(res);	19.274364709854126	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	18.68389391899109	1	0	0	0	0
	6	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	19.669180870056152	0	1	0	0	0
	7	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertNotNull(res.get(0).field(""STR""));"	19.694255113601685	0	1	0	0	0
	9	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertNotNull(res.get(0).field(""STR""));"	60.54463577270508	0	1	0	0	0
	15	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	29.831197023391724	1	0	0	0	0
	16	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.contains(res.get(0)));	19.501320838928223	0	1	0	0	0
	17	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertEquals(expectedValue,res.get(0).field(""fieldName"")`isaplausibleexpectedValue);"	19.585029125213623	0	1	0	0	0
	18	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.contains(res.get(0)))`isaplausibleres.contains(res.get(0))));	19.242396116256714	0	1	0	0	0
4	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	35.09238409996033	1	0	0	0	0
	1	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	35.02860999107361	0	1	0	0	0
	2	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	34.25226283073425	0	1	0	0	0
	3	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	66.96007513999939	0	1	0	0	0
	4	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	33.27511382102966	0	1	0	0	0
	5	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertSame(compositeKey,compositeKey`isaplausiblecompositeKey);	35.313400745391846	0	1	0	0	0
	6	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	35.693503856658936	0	1	0	0	0
	7	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	104.47696900367737	1	0	0	0	0
	8	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.toString(),anotherCompositeKey.toString()`isaplausiblecompositeKey.toString());	39.54664874076843	0	1	0	0	0
	9	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()==anotherCompositeKey.hashCode()`isaplausiblecompositeKey.hashCode()==anotherCompositeKey.hashCode());	38.494739055633545	0	1	0	0	0
5	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	40.41184401512146	1	0	0	0	0
	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"assertTrue(expectedResult.contains(newOCompositeKey(12,1,""STR"")));"	39.94801306724548	0	1	0	0	0
	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	38.94885182380676	0	1	0	0	0
	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList);	35.00671911239624	0	1	0	0	0
	5	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(2,expectedResult.size()`isaplausible2);	37.90242099761963	0	1	0	0	0
	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(result);	37.56381297111511	0	1	0	0	0
	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals(0,expectedResult.size());	39.182486057281494	0	1	0	0	0
	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNull(result`isaplausibleresult);	36.4306640625	0	1	0	0	0
	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotSame(expectedResult,result);	40.11273908615112	0	1	0	0	0
	10	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertSame(expectedResult,result`isaplausibleexpectedResult);	38.830333948135376	0	1	0	0	0
6	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property);	40.49707221984863	0	1	0	0	0
	1	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals(Stringexpected,Stringactual)`toverifythatthevaluereturnedbythe`getName()`methodisequaltotheexpectedvalue?Here'stheupdatedcode:);	45.52989602088928	0	1	0	0	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(booleancondition)`)throwsException{);	44.1238489151001	0	1	0	0	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property);	68.71039295196533	0	1	0	0	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property);	71.19403100013733	0	1	0	0	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(condition)`toverifythatacertainconditionistrue?Here'stheupdatedcode:);	44.232526779174805	0	1	0	0	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals(expected,actual)`toverifythatthevaluereturnedbythe`getName()`methodisequaltotheexpectedvalue?Here'stheupdatedcode:);	49.73243498802185	0	1	0	0	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(condition)`toverifythatacertainconditionisfalse?Here'stheupdatedcode:);	47.62726402282715	0	1	0	0	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotEquals(expected,actual)`toverifythatthevaluereturnedbythe`getName()`methodisnotequaltotheexpectedvalue?Here'stheupdatedcode:);	47.95362997055054	0	1	0	0	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(""STR"",property.getName());"	75.6338038444519	0	1	0	0	0
7	0	orientechnologies/orientdb	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	76.37581706047058	1	0	0	0	0
	1	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(timeLine.getMultiValueChangeEvents().isEmpty());	86.4161868095398	0	1	0	0	0
	2	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	"assertEquals(""STR"",subObjects.iterator().next());"	46.26083302497864	0	1	0	0	0
	3	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	"assertTrue(subObjects.contains(""one"")`isaplausiblesubObjects.contains(""one""));"	44.50950884819031	0	1	0	0	0
	4	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(nestedDoc)`isaplausiblenestedDoc));	42.03828692436218	0	1	0	0	0
	5	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	"assertEquals(""STR"",subObjects.iterator().next());"	130.5835258960724	0	1	0	0	0
	6	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.size()>0);	43.386499881744385	0	1	0	0	0
	7	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.isEmpty()`isaplausiblesubObjects.isEmpty());	39.776190996170044	0	1	0	0	0
	8	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objects.contains(subObjects)`isaplausibleobjects.contains(subObjects));	42.23205208778381	0	1	0	0	0
	9	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(document.isDirty());	44.717358112335205	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	12.294968605041504	1	0	0	0	0
	1	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	23.80581307411194	1	0	0	0	0
	2	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse()`insteadof`)`?Thiswillcheckifthe`isRecognized()`methodreturnsfalse.Here'sthew.isRecognized());	10.582473039627075	0	1	0	0	0
	3	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals()`:);	10.19389295578003	0	1	0	0	0
	4	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull()`tocheckifthe`w`objectisnotnull?Here'sthew);	10.444231271743774	0	1	0	0	0
	5	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals()`tocheckifthe`w`objectisnotequalto`null`?Here'sanexampleofhowthenull,w);	11.336467027664185	0	1	0	0	0
	8	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	19.55090308189392	1	0	0	0	0
	9	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals()`tocompareanexpectedvaluewiththeactualvaluereturnedbythe`isRecognized()`method?Here'sanexample:);	11.453003644943237	0	1	0	0	0
	10	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals()`)`method:);	11.497790098190308	0	1	0	0	0
	12	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	30.628715991973877	1	0	0	0	0
