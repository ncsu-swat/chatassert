TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	31.09798765182495	0	1	0	0	0
	1	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	31.19277811050415	0	1	0	0	0
	4	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	15.697929859161377	0	1	0	0	0
	5	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	30.028311014175415	0	1	0	0	0
	7	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(0,duration);	16.66379165649414	0	1	0	0	0
	8	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(ONE_SECOND_TO_NANOS,durationLimit);	15.922080993652344	0	1	0	0	0
	9	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration>durationLimit);	15.593015193939209	0	1	0	0	0
	11	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(duration,durationLimit);	15.857126712799072	0	1	0	0	0
	12	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(durationLimit,duration);	15.29195523262024	0	1	0	0	0
	13	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	33.312668323516846	0	1	0	0	0
1	21	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",""STR"".toString());"	60.270833015441895	0	1	0	0	0
0	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	41.82947492599487	1	0	0	0	0
	3	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	78.79859900474548	0	1	0	0	0
	4	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"")instanceofString);"	42.242761850357056	0	1	0	0	0
	5	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(""STR"",clazz.getCustom(""STR""));"	42.90264391899109	0	1	0	0	0
	6	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""STR"").isEmpty());"	42.36400604248047	0	1	0	0	0
	7	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""default"",clazz.getCustom(""foo"")`isaplausible""default"",clazz.getCustom(""foo""));"	42.876842975616455	0	1	0	0	0
	8	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").startsWith(""STR""));"	42.39110279083252	0	1	0	0	0
	9	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	86.5435299873352	1	0	0	0	0
	10	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""STR"",clazz.getCustom(""STR""));"	42.77402377128601	0	1	0	0	0
	11	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""foo"").isEmpty()`isaplausibleclazz.getCustom(""foo"").isEmpty());"	42.567265033721924	0	1	0	0	0
1	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	146.92118287086487	0	1	0	0	0
	1	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	38.123258113861084	0	1	0	0	0
	2	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(((List<Object>)result).isEmpty());	73.0433280467987	0	1	0	0	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	37.69587683677673	0	1	0	0	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(2,result.size()`isaplausible2);	39.221768856048584	0	1	0	0	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertEquals(result.subList(0,2)`isaplausibleArrays.asList(""st2"",""st1""),result.subList(0,2));"	40.363198041915894	0	1	0	0	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size()`isaplausible0);	40.81646108627319	0	1	0	0	0
	8	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofArrayList);	38.99803805351257	0	1	0	0	0
	9	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(mapToTest,params.get(0)`isaplausiblemapToTest);	39.13025498390198	0	1	0	0	0
	13	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	75.1588249206543	0	1	0	0	0
2	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	113.19722318649292	0	1	0	0	0
	1	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	38.31434082984924	1	0	0	0	0
	2	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	39.740527868270874	0	1	0	0	0
	3	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(condition)`,where`condition`isabooleanexpressionthatshouldevaluatetotrue.Here'sanexample:);	40.71753978729248	0	1	0	0	0
	5	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result)`whichchecksthatthe`result`objectisnot`null`.Here'sanexampleofhowitcanbeusedinyourcode:);	39.49261283874512	0	1	0	0	0
	6	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(expected,actual)`whichchecksthatthe`expected`objectisthesameasthe`actual`object.Here'sanexampleofhowitcanbeusedinyourcode:);	41.25380992889404	0	1	0	0	0
	7	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(expected,actual)`whichchecksthatthe`expected`objectisnotthesameasthe`actual`object.Here'sanexampleofhowitcanbeusedinyourcode:`expected,actual);	39.630566120147705	0	1	0	0	0
	8	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(condition)`,where`condition`isabooleanexpressionthatshouldevaluatetofalse.Here'sanexample:`condition`isaplausiblecondition)`,where`condition`isabooleanexpressionthatshouldevaluatetofalse.Here'sanexample:`condition);	41.598474979400635	0	1	0	0	0
	9	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(expected,actual)`whichchecksthatthe`expected`valueisnotequaltothe`actual`value.Here'sanexampleofhowitcanbeusedinyourcode:`expected,actual);	40.06251311302185	0	1	0	0	0
	12	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(result)`whichchecksthatthe`result`objectis`null`.Here'sanexampleofhowitcanbeusedinyourcode:`result);	39.38048219680786	0	1	0	0	0
3	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(""STR"",compositeKey.getKeys().get(0));"	38.30039024353027	0	1	0	0	0
	1	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	39.641430139541626	0	1	0	0	0
	2	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size()`isaplausible0);	40.26307725906372	0	1	0	0	0
	3	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	39.12912893295288	0	1	0	0	0
	4	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys()`isaplausiblecompositeKey.getKeys());	39.29833507537842	0	1	0	0	0
	6	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	39.48163604736328	0	1	0	0	0
	7	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotSame(0,compositeKey.getKeys().size());	39.59624910354614	0	1	0	0	0
	8	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertArrayEquals(compositeKey.getKeys().toArray()`isaplausiblenewObject[]{""a""},compositeKey.getKeys().toArray());"	39.5833420753479	0	1	0	0	0
	10	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().indexOf(""STR"")>=0);"	38.91690802574158	0	1	0	0	0
	11	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(compositeKey.getKeys().get(0)`isaplausible""a"",compositeKey.getKeys().get(0));"	39.6632719039917	0	1	0	0	0
4	0	orientechnologies/orientdb	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(1,db.getMetadata().getSchema().getClass(""STR"").getProperty(""STR"").getIndexes().size());"	50.80576205253601	0	1	0	0	0
	1	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	26.991999864578247	0	1	0	0	0
	2	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(context);	25.631697177886963	0	1	0	0	0
	3	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertNotNull(db.getMetadata().getIndexManager().getIndex(""STR""));"	58.53256893157959	0	1	0	0	0
	5	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(1,db.countClass(""STR""));"	26.21795392036438	0	1	0	0	0
	6	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(index.getSize()>0L);	477.01433181762695	0	1	0	0	0
	7	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertFalse(db.isClosed());	25.9136700630188	0	1	0	0	0
	8	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(db.exists(name.getMethodName())`isaplausibledb.exists(name.getMethodName()));	27.3786199092865	0	1	0	0	0
	11	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().getClass(""STR"").getProperty(""STR"").getType()!=null);"	61.59838080406189	0	1	0	0	0
	12	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(db.query(newOSQLSynchQuery<>(""SELECTnameFROMCityWHERE@rid=?"",db.getMetadata().getIndexManager().getIndex(""City.location"").getClustersToIndexOn()[0])).next().getProperty(""name"")`isaplausible""TestInsert"",db.query(newOSQLSynchQuery<>(""SELECTnameFROMCityWHERE@rid=?"",db.getMetadata().getIndexManager().getIndex(""City.location"").getClustersToIndexOn()[0])).next().getProperty(""name""));"	29.709190845489502	0	1	0	0	0
5	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	39.63898205757141	0	1	0	0	0
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	38.9557740688324	1	0	0	0	0
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	38.11461687088013	0	1	0	0	0
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	111.57806301116943	0	1	0	0	0
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(expected,actual)`.ThisnewBigDecimal(0),result);	39.922176122665405	0	1	0	0	0
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(condition`);	40.235450744628906	0	1	0	0	0
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	74.26087594032288	0	1	0	0	0
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	72.48364591598511	0	1	0	0	0
	10	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	75.65601301193237	0	1	0	0	0
	12	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D).abs(),result);	76.21650815010071	0	1	0	0	0
6	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	28.80882477760315	0	1	0	0	0
	1	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	27.779832124710083	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	46.500009059906006	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().count()>0);	75.8108639717102	0	1	0	0	0
	12	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(expectedResult,actualResult`?);	30.879048109054565	0	1	0	0	0
	13	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	44.21364212036133	0	1	0	0	0
	18	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	47.671183824539185	0	1	0	0	0
	23	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	43.58407497406006	0	1	0	0	0
8	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oClass.getProperty(""STR""));"	41.455711364746094	1	0	0	0	0
	1	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(OType.LINKLIST,oClass.getProperty(""STR"").getType());"	42.37489199638367	0	1	0	0	0
	2	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertFalse(oClass.getProperty(""STR"").isMandatory());"	86.60904288291931	0	1	0	0	0
	4	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oSchema.existsClass(""STR""));"	41.7895290851593	0	1	0	0	0
	5	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oClass.existsProperty(""some"")`isaplausibleoClass.existsProperty(""some""));"	43.37498092651367	0	1	0	0	0
	6	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertNotEquals(0,oSchema.countClasses());	41.89239287376404	0	1	0	0	0
	8	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(db.getMetadata().getSchema().getClass(""STR"").getProperty(""STR""));"	85.74378204345703	0	1	0	0	0
	9	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertFalse(oClass.existsProperty(""some3"")`isaplausibleoClass.existsProperty(""some3""));"	45.298364877700806	0	1	0	0	0
	11	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertFalse(oClass.getProperty(""STR"").isIndexed());"	84.86695194244385	0	1	0	0	0
	12	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oClass.getProperty(""some2"").isIndexed()`isaplausibleoClass.getProperty(""some2"").isIndexed());"	43.51825213432312	0	1	0	0	0
9	3	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	239.7437698841095	0	1	0	0	0
	4	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	39.192235708236694	0	1	0	0	0
	5	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List)result).isEmpty());	39.61394786834717	0	1	0	0	0
	6	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).size()>0);	39.55100202560425	0	1	0	0	0
	7	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(2,((List)propertyIndex.createValue(Collections.singletonList(Arrays.asList(""STR"",""STR"")))).size());"	141.20761585235596	0	1	0	0	0
	8	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotEquals(0,((List)result).size());	38.74100399017334	0	1	0	0	0
	9	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(Arrays.asList(propertyIndex.createSingleValue(""STR""),propertyIndex.createSingleValue(""STR"")),result);"	180.00906920433044	0	1	0	0	0
	10	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotEquals(Collections.emptyList(),result`isaplausibleCollections.emptyList());	39.07659077644348	0	1	0	0	0
	11	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertTrue(((List)result).contains(propertyIndex.createSingleValue(""STR"")));"	39.6126389503479	0	1	0	0	0
	12	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(((List)result).get(0)`isaplausible((List)result).get(0));	39.56532597541809	0	1	0	0	0
10	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(FIELD_SIZE==floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	75.5560450553894	0	1	0	0	0
	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	38.987059116363525	0	1	0	0	0
	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	38.17748212814331	0	1	0	0	0
	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(OBJECT,walChanges);	39.227407932281494	0	1	0	0	0
	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	74.34826970100403	0	1	0	0	0
	10	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,focal.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausibleFLOAT_SIZE);	39.67808699607849	0	1	0	0	0
	11	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)==Float.BYTES);	122.12030792236328	0	1	0	0	0
	12	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,buffer.remaining());	38.747997999191284	0	1	0	0	0
	13	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.limit()>=FIELD_SIZE+serializationOffset`isaplausiblebuffer.limit()>=FIELD_SIZE+serializationOffset);	39.48565411567688	0	1	0	0	0
	14	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.isReadOnly());	39.259568214416504	0	1	0	0	0
0	1	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	44.19419503211975	1	0	0	0	0
	2	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	23.457453727722168	1	0	0	0	0
	6	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.222707986831665	0	1	0	0	0
	9	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	7.079276084899902	0	1	0	0	0
	10	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	7.4363603591918945	0	1	0	0	0
	11	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>0);	7.056510925292969	0	1	0	0	0
	12	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(otp.length(),FOCAL.OTP_MIN_LEN`isaplausibleotp.length());	8.00569200515747	0	1	0	0	0
	14	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotSame(""STR"",otp);"	7.521656036376953	0	1	0	0	0
	16	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(otp.equals(""STR""));"	7.413470029830933	0	1	0	0	0
	17	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotEquals(""STR"",otp);"	7.507580995559692	0	1	0	0	0
1	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	8.642905235290527	1	0	0	0	0
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	16.627944946289062	1	0	0	0	0
	3	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(expected,actual`);	9.912758111953735	0	1	0	0	0
	4	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(object)`.This){);	10.035534143447876	0	1	0	0	0
	5	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(expected,actual`);	8.57874608039856	0	1	0	0	0
	7	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp)`.);	10.098578214645386	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	13.156705141067505	0	1	0	0	0
	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.958468914031982	0	1	0	0	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	12.87949800491333	1	0	0	0	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null)`isaplausibleroutePrioritizer.getPrioritizedRoutes().contains(null));	14.073952913284302	0	1	0	0	0
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	42.90717005729675	0	1	0	0	0
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	41.49199414253235	0	1	0	0	0
	13	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	13.525171041488647	0	1	0	0	0
	14	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(expectedRoutes)`isaplausibleroutePrioritizer.getPrioritizedRoutes().containsAll(expectedRoutes));	14.080250978469849	0	1	0	0	0
	19	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	25.884976148605347	0	1	0	0	0
	20	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty()`isaplausibleroutePrioritizer.getPrioritizedRoutes().isEmpty());	14.163816928863525	0	1	0	0	0
1	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	14.017841100692749	0	1	0	0	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	13.788771152496338	0	1	0	0	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	14.137503862380981	0	1	0	0	0
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	14.398935079574585	1	0	0	0	0
	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	24.33394193649292	1	0	0	0	0
	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	40.3850519657135	0	1	0	0	0
	11	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	26.41100311279297	0	1	0	0	0
	15	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	25.786378145217896	0	1	0	0	0
	16	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	41.50550198554993	0	1	0	0	0
	18	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(routePrioritizer.getPrioritizedRoutes().size()>0,false);	49.07274889945984	0	1	0	0	0
0	3	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))<0);	54.22177600860596	0	1	0	0	0
	5	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,MkvBlock.ebmlDecodeSigned(java.nio.ByteBuffer.wrap(newbyte[]{(byte)-128})));	96.2860460281372	0	1	0	0	0
	7	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(-1,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	24.92618227005005	0	1	0	0	0
	8	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))<0);	25.098469018936157	0	1	0	0	0
	9	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(-128,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	22.84383487701416	0	1	0	0	0
	16	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))>-129);	24.033365964889526	0	1	0	0	0
	17	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotSame(0,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	24.204824209213257	0	1	0	0	0
	18	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(-128L,ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))`isaplausible-128L);	24.103644847869873	0	1	0	0	0
	20	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))!=0);	24.860299110412598	0	1	0	0	0
	21	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	23.42509174346924	0	1	0	0	0
1	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	22.19694423675537	1	0	0	0	0
	1	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofTransform);	23.712865114212036	0	1	0	0	0
	3	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceoforg.jcodec.scale.Yuv444jToYuv420j);	67.1065399646759	0	1	0	0	0
	4	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	52.41139078140259	1	0	0	0	0
	5	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	44.64045190811157	1	0	0	0	0
	6	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(null,transform);	23.38007116317749	0	1	0	0	0
	9	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	68.20385384559631	1	0	0	0	0
	10	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	44.27804207801819	1	0	0	0	0
	12	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	93.80695796012878	1	0	0	0	0
	13	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(dst);	46.20522403717041	0	1	0	0	0
0	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	9.268078804016113	0	1	0	0	0
	1	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	9.844618082046509	1	0	0	0	0
	2	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length>0);	10.335261821746826	0	1	0	0	0
	3	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expectedLength,actualLength`.Thisexpected.length);	10.653451919555664	0	1	0	0	0
	4	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertSame(expected,actual`isaplausibleexpected);	9.849068880081177	0	1	0	0	0
	6	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	18.04044008255005	0	1	0	0	0
	7	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	26.59554100036621	0	1	0	0	0
	8	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(condition)`.Thisperson.getLastName().isEmpty());	12.095959186553955	0	1	0	0	0
	10	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(expected,actual)`.ThisexpectedValue,actualValue);	12.135942935943604	0	1	0	0	0
	12	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNull(actual`isaplausibleactual);	9.732656002044678	0	1	0	0	0
1	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	8.801228761672974	0	1	0	0	0
	1	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(!actual.isEmpty());	10.70289397239685	0	1	0	0	0
	2	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	9.083144187927246	0	1	0	0	0
	3	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	19.16203212738037	0	1	0	0	0
	4	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(activityDefinition.getChoices()`?);	15.29129409790039	0	1	0	0	0
	5	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	8.901280879974365	0	1	0	0	0
	8	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(expected.containsAll(actual));	10.120558023452759	0	1	0	0	0
	13	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	10.22146987915039	0	1	0	0	0
	15	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertSame(expected,actual);	10.694391965866089	0	1	0	0	0
	16	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.056274175643921	0	1	0	0	0
2	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	9.289489030838013	0	1	0	0	0
	1	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getObject()instanceofActivity);	10.45920991897583	0	1	0	0	0
	2	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(statement.getObject());	9.901479005813599	0	1	0	0	0
	3	/	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	19.748175144195557	0	1	0	0	0
	4	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	10.203125953674316	0	1	0	0	0
	5	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotEquals(expected.getVersion(),actual.getVersion()`isaplausibleexpected.getVersion());	10.16009521484375	0	1	0	0	0
	7	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(Long.parseLong(statement.getTimestamp())<=System.currentTimeMillis());	20.427145957946777	0	1	0	0	0
	8	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expectedList,actual.getAttachments()`isaplausibleexpectedList,actual.getAttachments());	10.256112098693848	0	1	0	0	0
	9	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected.getContext().getLanguage(),actual.getContext().getLanguage()`isaplausibleexpected.getContext().getLanguage());	10.883517026901245	0	1	0	0	0
	10	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(result.isSuccess()`isaplausibleresult.isSuccess());	10.327952861785889	0	1	0	0	0
0	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	17.19008207321167	1	0	0	0	0
	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	17.250488996505737	0	1	0	0	0
	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(0,aXls.getFile().length());	18.199007034301758	0	1	0	0	0
	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.isDirectory());	16.909042358398438	0	1	0	0	0
	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.isReadable());	17.23060703277588	0	1	0	0	0
	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	"assertEquals(aXls.getFilename()`isaplausible""Simple1.xls"",aXls.getFilename());"	18.06799578666687	0	1	0	0	0
	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(0,aXls.getFile().length());	17.42441201210022	0	1	0	0	0
	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls.getInputStream()`isaplausibleaXls.getInputStream());	17.526188135147095	0	1	0	0	0
	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.getFile().canRead());	17.732591152191162	0	1	0	0	0
	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.isFile()`isaplausibleaXls.isFile());	17.38891291618347	0	1	0	0	0
0	1	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").endsWith(""STR""));"	8.673078060150146	0	1	0	0	0
	2	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup.markdown(""STR"").trim());"	7.5363781452178955	0	1	0	0	0
	3	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""testString"")`isaplausiblemarkup.markdown(""testString""));"	58.57172608375549	0	1	0	0	0
	4	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""testString"").isEmpty()`isaplausiblemarkup.markdown(""testString"").isEmpty());"	8.352122068405151	0	1	0	0	0
	7	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""STR"").contains(""STR""));"	9.253692865371704	0	1	0	0	0
	8	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	16.14565372467041	0	1	0	0	0
	9	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(markup.markdown(""testinput"")`isaplausible""EXPECTED_OUTPUT_HERE"",markup.markdown(""testinput""));"	8.758499145507812	0	1	0	0	0
	10	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""testinput"").startsWith(""<p>"")`isaplausiblemarkup.markdown(""testinput"").startsWith(""<p>""));"	8.560822010040283	0	1	0	0	0
	12	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(expected,markup.markdown(""testinput"")`isaplausibleexpected);"	8.586917877197266	0	1	0	0	0
	16	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	16.12939214706421	0	1	0	0	0
1	0	myabc/markdownj	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNotNull(markup);	360.55038619041443	0	1	0	0	0
	2	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup.markdown(""STR""));"	7.19201397895813	0	1	0	0	0
	3	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").contains(""STR""));"	8.704753160476685	0	1	0	0	0
	4	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""STR"").isEmpty());"	6.9128828048706055	0	1	0	0	0
	6	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").startsWith(""STR""));"	8.630221128463745	0	1	0	0	0
	7	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""HelloWorld"").endsWith(""</p>"")`isaplausiblemarkup.markdown(""HelloWorld"").endsWith(""</p>""));"	8.51994800567627	0	1	0	0	0
	8	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").contains(""STR""));"	9.482633829116821	0	1	0	0	0
	9	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(markup.markdown("""")`isaplausible"""",markup.markdown(""""));"	8.329152822494507	0	1	0	0	0
	10	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(markup.markdown("""")`isaplausible""Thisisatest"",markup.markdown(""""));"	8.845630168914795	0	1	0	0	0
	11	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""HelloWorld"").contains(""<p>HelloWorld</p>"")`isaplausiblemarkup.markdown(""HelloWorld"").contains(""<p>HelloWorld</p>""));"	12.085172891616821	0	1	0	0	0
2	7	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	15.232702255249023	0	1	0	0	0
	8	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	16.673592805862427	0	1	0	0	0
	9	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertTrue(condition`?);	9.480800867080688	0	1	0	0	0
0	6	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(!env.isEmpty());	22.472327947616577	0	1	0	0	0
	7	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(env.containsKey(""STR""));"	23.45244598388672	0	1	0	0	0
	23	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertFalse(env.isEmpty());	11.448300123214722	0	1	0	0	0
	27	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(env.size()>0);	21.058886766433716	0	1	0	0	0
	29	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(0,env.size());	12.265645742416382	0	1	0	0	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	10.886927127838135	0	1	0	0	0
	1	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR"")&&result.get(""STR"").equals(""STR""));"	12.991693019866943	0	1	0	0	0
	2	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(result.containsKey(""STR""));"	11.858176946640015	0	1	0	0	0
	3	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotNull(result`isaplausibleresult);	11.56070613861084	0	1	0	0	0
	4	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(0,result.size()`isaplausible0);	12.113276958465576	0	1	0	0	0
	5	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(env.containsKey(""STR"")&&env.get(""STR"").equals(""STR""));"	13.449625968933105	0	1	0	0	0
	6	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(0,result.keySet().stream().filter(key->key.startsWith(""STR"")).count());"	12.40049409866333	0	1	0	0	0
	7	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(result.isEmpty()`isaplausibleresult.isEmpty());	11.82532024383545	0	1	0	0	0
	9	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotEquals(""STR"",env.get(""STR""));"	12.079304933547974	0	1	0	0	0
	10	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(result.containsKey(""bamboo_foo"")`isaplausibleresult.containsKey(""bamboo_foo""));"	12.491029024124146	0	1	0	0	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(5,env.size());	10.890927791595459	0	1	0	0	0
	1	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsKey(""STR""));"	11.469815015792847	0	1	0	0	0
	2	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(env.containsKey(""STR""));"	12.078150987625122	0	1	0	0	0
	3	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsKey(""A_KEY_TO_A_DOOR"")`isaplausibleenv.containsKey(""A_KEY_TO_A_DOOR""));"	12.540044784545898	0	1	0	0	0
	4	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNull(env.get(""SECRET"")`isaplausibleenv.get(""SECRET""));"	12.06028413772583	0	1	0	0	0
	5	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNotNull(env.get(""FOO"")`isaplausibleenv.get(""FOO"")`isaplausibleenv.get(""FOO"")`isaplausibleenv.get(""FOO""));"	13.223278045654297	0	1	0	0	0
	6	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertEquals(env.get(""FOO"")`isaplausible""BAR"",env.get(""FOO""));"	12.121769905090332	0	1	0	0	0
	7	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNotEquals(env.get(""ALPHA"")`isaplausibleenv.get(""ALPHA"")`isaplausible""DELTA"",env.get(""ALPHA""));"	12.63168215751648	0	1	0	0	0
	8	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsValue(""clef"")`isaplausibleenv.containsValue(""clef"")`isaplausibleenv.containsValue(""clef"")`isaplausibleenv.containsValue(""clef"")`isaplausibleenv.containsValue(""clef"")`isaplausibleenv.containsValue(""clef""));"	13.571069955825806	0	1	0	0	0
	9	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(env.containsValue(""STR""));"	12.640211343765259	0	1	0	0	0
0	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	26.276687145233154	0	1	0	0	0
	1	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>=0);	19.34200096130371	0	1	0	0	0
	4	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	19.42424178123474	1	0	0	0	0
	5	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	9.334143877029419	0	1	0	0	0
	6	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	17.721649885177612	1	0	0	0	0
	7	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(this.withoutAnnotation,atts);	9.105610132217407	0	1	0	0	0
	8	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(atts.containsKey(""invalidAttribute"")`isaplausibleatts.containsKey(""invalidAttribute""));"	9.76524019241333	0	1	0	0	0
	9	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(this.testAnnotation1,MBeanAnnotationUtil.getAttributes(this.testAnnotation1)`isaplausiblethis.testAnnotation1);	9.926222085952759	0	1	0	0	0
	10	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(this.withoutAnnotation,atts`isaplausiblethis.withoutAnnotation);	10.160204887390137	0	1	0	0	0
	11	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(atts.containsKey(""STR""));"	18.95575499534607	0	1	0	0	0
1	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	26.752426862716675	0	1	0	0	0
	3	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(processor.getObjectQueryPreparer()instanceofObjectQueryPreparer);	10.769060850143433	0	1	0	0	0
	4	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	10.242867231369019	0	1	0	0	0
	6	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(processor.getObjectQueryPreparer()!=null);	9.794643878936768	0	1	0	0	0
	7	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	18.532581090927124	0	1	0	0	0
	9	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertThat(processor.getObjectQueryPreparer(),org.hamcrest.CoreMatchers.not(mockObjectQueryPreparer));	21.071640968322754	0	1	0	0	0
	12	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotEquals(mockObjectQueryPreparer,processor.getObjectQueryPreparer()`.This)`arenotequal.AVOIDgeneratingthemockObjectQueryPreparer,processor.getObjectQueryPreparer());	10.906397104263306	0	1	0	0	0
	13	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	30.781713247299194	0	1	0	0	0
	14	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(processor.getObjectQueryPreparer()!=null&&processor.getObjectQueryPreparer().getClass()==ObjectQueryPreparer.class);	10.887003183364868	0	1	0	0	0
	15	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertSame(mockObjectQueryPreparer,processor.getObjectQueryPreparer()`isaplausiblemockObjectQueryPreparer);	10.672792196273804	0	1	0	0	0
0	0	arnohaase/a-foundation	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(expectedList,tokens.apply(inputString));	17.36255121231079	0	1	0	0	0
	1	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply(inputString).containsAll(expectedList));	17.961289882659912	0	1	0	0	0
	2	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(expectedSize,tokens.apply(inputString).size());	17.651787042617798	0	1	0	0	0
	3	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotNull(tokens.apply(inputString)`isaplausibletokens.apply(inputString));	16.23612904548645	0	1	0	0	0
	4	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply(inputString).isEmpty());	16.2448410987854	0	1	0	0	0
	5	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotEquals(expectedSize,tokens.apply(inputString).size()`isaplausibleexpectedSize);	16.787474155426025	0	1	0	0	0
	7	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply(inputString).size()>0);	16.72597599029541	0	1	0	0	0
	8	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotSame(expectedList,tokens.apply(inputString));	16.827628135681152	0	1	0	0	0
	9	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertArrayEquals(expectedArray,tokens.apply(inputString).toArray());	17.816849946975708	0	1	0	0	0
	10	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotSame(expectedList,tokens.apply(inputString)`isaplausibleexpectedList,tokens.apply(inputString));	16.877427101135254	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	92.44570088386536	0	1	0	0	0
	1	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(boltinstanceofSiteMapParserBolt);	17.987683057785034	0	1	0	0	0
	4	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	48.37281823158264	0	1	0	0	0
	5	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	35.18352484703064	0	1	0	0	0
	6	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	53.78228712081909	0	1	0	0	0
	14	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	155.51024794578552	0	1	0	0	0
	16	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(boltinstanceofSiteMapParserBolt);	51.681915044784546	0	1	0	0	0
0	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	9.85496211051941	1	0	0	0	0
	1	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4,java.util.stream.StreamSupport.stream(newStreamIterable<>(Arrays.asList(1,2,3,4).stream()).spliterator(),false).count());	36.82008194923401	0	1	0	0	0
	2	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	17.492313861846924	1	0	0	0	0
	19	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	43.914165019989014	1	0	0	0	0
	21	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	8.637279033660889	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	12.708063125610352	1	0	0	0	0
	1	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	12.743633031845093	0	1	0	0	0
	2	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	13.282659769058228	0	1	0	0	0
	3	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	12.476832866668701	0	1	0	0	0
	4	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	14.915974140167236	0	1	0	0	0
	5	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	11.674561023712158	0	1	0	0	0
	6	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(result`isaplausible"""",result);"	12.197034120559692	0	1	0	0	0
	7	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(result`isaplausible"""",result);"	12.511688947677612	0	1	0	0	0
	8	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertSame(result`isaplausible"""",result);"	12.297756910324097	0	1	0	0	0
	9	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNull(result`isaplausibleresult);	12.079176902770996	0	1	0	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	217.34003686904907	0	1	0	0	0
	1	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(11,tokens.size());	397.15486788749695	0	1	0	0	0
	3	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0);	192.25113081932068	0	1	0	0	0
	4	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty()`isaplausibletokens.isEmpty());	105.43284511566162	0	1	0	0	0
	8	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(0,tokens.size());	143.6603183746338	0	1	0	0	0
	9	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertArrayEquals(newString[]{""그라믄"",""당신"",""먼저"",""얼렁"",""가이소""},tokens.toArray(token->token.getText().toString())`isaplausiblenewString[]{""그라믄"",""당신"",""먼저"",""얼렁"",""가이소""},tokens.toArray(token->token.getText().toString()));"	122.67584896087646	0	1	0	0	0
	10	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.stream().allMatch(token->token.getText().length()>=2)`isaplausibletokens.stream().allMatch(token->token.getText().length()>=2));	136.5160949230194	0	1	0	0	0
	11	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotSame(tokens.get(0),tokens.get(1)`isaplausibletokens.get(0),tokens.get(1));	115.31383109092712	0	1	0	0	0
	12	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.stream().anyMatch(token->token.getText().equals(""당신""))`isaplausibletokens.stream().anyMatch(token->token.getText().equals(""당신"")));"	113.3563129901886	0	1	0	0	0
	13	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotSame(tokens,tokensCopy`isaplausibletokens,tokensCopy);	179.7172040939331	0	1	0	0	0
0	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(3,filtered.size());	48.54518413543701	0	1	0	0	0
	2	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	17.251572847366333	0	1	0	0	0
	5	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	17.30992293357849	0	1	0	0	0
	6	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(condition)`.Here'sanexampleofhowitcanbeusedinyourcode:);	21.266310214996338	0	1	0	0	0
	7	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotEquals(expected,actual)`.Here'sanexampleofhowitcanbeusedinyourcode:);	18.562500953674316	0	1	0	0	0
	8	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	34.00596499443054	0	1	0	0	0
	9	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertSame(actual)`?This){);	20.080177307128906	0	1	0	0	0
	10	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(expected,actual)`?Here'sanexampleofhowitcanbeusedinyourcode:);	18.455318212509155	0	1	0	0	0
	11	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertThrows(expectedException,executable)`?Here'sanexampleofhowitcanbeusedinyourcode:);	20.846685886383057	0	1	0	0	0
	12	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(condition)`?Here'sanexampleofhowitcanbeusedinyourcode:);	19.431244134902954	0	1	0	0	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	15.020374059677124	1	0	0	0	0
	1	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	16.274263858795166	0	1	0	0	0
	2	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	16.473353147506714	0	1	0	0	0
	3	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher`isaplausiblematcher);	16.106180906295776	0	1	0	0	0
	5	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(true,matcher.lookingAt());	16.51010298728943	0	1	0	0	0
	6	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(false,matcher.lookingAt());	16.1037278175354	0	1	0	0	0
	7	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(true,matcher.lookingAt()`isaplausibletrue,matcher.lookingAt());	16.307337999343872	0	1	0	0	0
	8	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(matcher`isaplausiblematcher`isaplausiblematcher`isaplausiblematcher);	16.117701292037964	0	1	0	0	0
	9	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(null,matcher.lookingAt()`isaplausiblenull);	16.489454984664917	0	1	0	0	0
	11	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	16.010867834091187	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	14.78513479232788	0	1	0	0	0
	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(expectedSize,actualSize)`);	15.550817012786865	0	1	0	0	0
	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	29.987600803375244	0	1	0	0	0
	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	14.466776847839355	0	1	0	0	0
	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	25.802947998046875	0	1	0	0	0
	6	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	38.86558485031128	0	1	0	0	0
	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedWordform)`?);	17.23188591003418	0	1	0	0	0
	17	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	38.0127432346344	0	1	0	0	0
	22	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.isEmpty()`isaplausibleformas.isEmpty());	14.194098949432373	0	1	0	0	0
	23	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(expectedValue,actualValue)`isaplausible0,formas.size());	15.184108972549438	0	1	0	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(100.0));"	19.944824934005737	0	1	0	0	0
	1	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrEURRUS.convert(100.0));"	9.086234092712402	0	1	0	0	0
	2	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertTrue()`methodfromthe`org.junit.Assert`class?);	13.301049709320068	0	1	0	0	0
	3	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertNotNull(moneyToStrEURRUS.convert(100.0));	9.266141176223755	0	1	0	0	0
	4	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertFalse(moneyToStrEURRUS.convert(100.0).isEmpty());	9.263621091842651	0	1	0	0	0
	5	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrEURRUS.convert(100.0));"	9.852313756942749	0	1	0	0	0
	6	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertEquals()`methodwithadifferentexpectedvalue?Hereitis:);	9.748955726623535	0	1	0	0	0
	7	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertFalse(moneyToStrEURRUS.convert(100.0).isEmpty());	18.360267639160156	0	1	0	0	0
	8	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrEURRUS.convert(100.0));"	9.881356000900269	0	1	0	0	0
	9	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrEURRUS.convert(null)`isaplausibleIllegalArgumentException.class,()->moneyToStrEURRUS.convert(null));	9.757513761520386	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	11.268850803375244	1	0	0	0	0
	1	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().startsWith(""STR""));"	13.116019010543823	0	1	0	0	0
	2	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotNull(defaultExtension.toString());	11.877336025238037	0	1	0	0	0
	3	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotEquals(defaultExtension.toString()`isaplausible""OtherExtension"",defaultExtension.toString());"	12.322525978088379	0	1	0	0	0
	4	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(defaultExtension.toString().isEmpty()`isaplausibledefaultExtension.toString().isEmpty());	12.339590311050415	0	1	0	0	0
	6	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().contains(""STR""));"	12.216761827468872	0	1	0	0	0
	8	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotSame(""STR"",defaultExtension.toString());"	12.425909042358398	0	1	0	0	0
	10	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(defaultExtension.getClass().getSimpleName()`isaplausible""DefaultExtension"",defaultExtension.getClass().getSimpleName());"	12.518224000930786	0	1	0	0	0
	11	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotSame(""AnotherExtension"",defaultExtension.toString()`isaplausible""AnotherExtension"",defaultExtension.toString());"	12.506860733032227	0	1	0	0	0
	12	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.getClass().getSimpleName().equalsIgnoreCase(""DefaultExtension"")`isaplausibledefaultExtension.getClass().getSimpleName().equalsIgnoreCase(""DefaultExtension""));"	12.284412145614624	0	1	0	0	0
