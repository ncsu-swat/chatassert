TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	1	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	8.90074896812439	0	0
/	2	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>=0);	8.715198993682861	0	0
/	3	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(0,duration);	8.594239950180054	0	0
/	5	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>0);	8.884650945663452	0	0
/	6	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration<0);	8.387558937072754	0	0
/	12	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>0&&duration<=durationLimit);	8.829026937484741	0	0
/	14	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(duration,0);	8.268175840377808	0	0
/	15	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration>durationLimit);	8.643536806106567	0	0
/	16	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(duration,0);	8.479440927505493	0	0
/	17	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	7.759734869003296	0	0
/	7	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(""STR"".isEmpty());"	16.942881107330322	0	0
/	12	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(""STR"".isEmpty());"	8.282275915145874	0	0
/	18	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(""STR"".startsWith(""STR""));"	8.09994387626648	0	0
/	23	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(""STR"".equals(""STR""));"	8.883229970932007	0	0
/	29	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",""STR"".toString());"	9.03580904006958	0	0
2	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	38.15545988082886	1	0
2	1	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").equals(""STR""));"	36.943907737731934	0	0
/	2	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	37.60294771194458	0	0
/	3	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(""STR"",clazz.getCustom(""STR""));"	37.43048071861267	0	0
/	4	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""STR"").isEmpty());"	39.171974897384644	0	0
/	5	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").contains(""STR""));"	37.38494896888733	0	0
/	6	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""STR"",clazz.getCustom(""STR""));"	37.77142786979675	0	0
/	7	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""STR"").startsWith(""STR""));"	37.27527928352356	0	0
/	8	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").endsWith(""STR""));"	37.61365103721619	0	0
/	9	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""STR"",clazz.getCustom(""STR""));"	35.052417039871216	0	0
3	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(result,result);	195.50055575370789	0	0
/	1	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	33.12349581718445	0	0
/	2	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(mapToTest.size()>0);	186.23162508010864	0	0
/	3	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(mapToTest.isEmpty());	33.44948101043701	0	0
/	4	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(propertyIndexByValue,result);	217.72687697410583	0	0
/	5	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(mapToTest,mapToTest);	34.913614988327026	0	0
/	6	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(propertyIndexByIntegerKey,result);	33.10395383834839	0	0
/	15	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(mapToTest);	69.01404118537903	0	0
/	18	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(mapToTest.isEmpty());	114.20166993141174	0	0
/	21	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(result,result);	1282.4708800315857	0	0
4	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	36.073108196258545	0	0
/	1	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	33.560569047927856	0	0
/	2	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result,result);	364.1755909919739	0	0
/	3	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	34.389382123947144	0	0
/	8	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.LONG,result[0]);	32.89435124397278	0	0
/	16	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(result.length==0);	35.197869062423706	0	0
/	17	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.BOOLEAN,result[0]);	33.79604506492615	0	0
/	22	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	33.42106485366821	0	0
/	26	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	33.824087619781494	0	0
/	27	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.LINK,result[0]);	32.81517219543457	0	0
/	1	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	34.10212993621826	0	0
/	2	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	36.55104899406433	0	0
/	3	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	33.710318088531494	0	0
5	4	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	33.47712302207947	1	0
/	5	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size());	32.122714042663574	0	0
/	6	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	34.834996938705444	0	0
/	24	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().contains(null));	35.39561581611633	0	0
/	2	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	58.54327702522278	0	0
/	6	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	20.975857973098755	0	0
/	7	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	43.34671688079834	0	0
/	8	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getIndexManager().existsIndex(""STR""));"	21.559422969818115	0	0
/	11	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	112.25686192512512	0	0
/	2	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	33.45107913017273	0	0
/	12	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(function,result);	92.96096110343933	0	0
/	18	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	34.28634023666382	0	0
/	24	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(result==null);	32.87313270568848	0	0
/	25	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertSame(function,function);	33.75483322143555	0	0
/	26	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(function,result);	88.80463218688965	0	0
8	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(2,qResult.stream().count());	44.40863513946533	0	0
/	2	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(DB_NAME.isEmpty());	87.82548189163208	0	0
/	3	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	20.692260026931763	0	0
/	4	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	21.43719506263733	0	0
/	6	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(0,qResult.stream().count());	21.800595998764038	0	0
/	20	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(DB_NAME);	21.378417015075684	0	0
/	24	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(DB_NAME.isBlank());	22.524579763412476	0	0
/	26	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().noneMatch(f->DB_STORAGE.isEmpty()));	74.95339012145996	0	0
/	5	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	91.36007881164551	0	0
/	19	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	580.1362290382385	0	0
/	20	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	304.27359890937805	0	0
10	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oClass.getProperty(""STR""));"	37.80826497077942	1	0
10	1	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oSchema.existsClass(""STR""));"	37.49871516227722	0	0
/	2	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertTrue(oClass.declaredProperties().size()>=2);	40.30560111999512	0	0
/	3	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertEquals(2,oClass.declaredProperties().size());	38.80066776275635	0	0
/	4	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertFalse(oClass.isAbstract());	40.43605923652649	0	0
/	5	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotEquals(OType.STRING,oClass.getProperty(""STR"").getType());"	38.560755014419556	0	0
/	6	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	38.265180826187134	0	0
/	7	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertNotSame(oClass,oClass.getSuperClass());	38.603442907333374	0	0
/	8	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertTrue(oClass.getClassIndexes().isEmpty());	37.762678146362305	0	0
/	9	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertFalse(oClass.isEdgeType());	37.91642999649048	0	0
/	1	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	813.538703918457	0	0
/	2	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	783.401043176651	0	0
/	14	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotEquals(Collections.emptyList(),result);	35.07716393470764	0	0
/	3	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.hasChanges());	33.16511106491089	0	0
/	4	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	33.79968285560608	0	0
/	5	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	36.25191593170166	0	0
/	6	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,data.length);	33.593047857284546	0	0
/	10	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	33.05807185173035	0	0
/	14	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.remaining()>=serializationOffset+OBJECT);	260.9452221393585	0	0
