TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	16.817117929458618	0	0
/	1	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(0,duration);	16.783506870269775	0	0
/	2	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	14.976567029953003	0	0
/	3	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(0,duration%10);	15.158139705657959	0	0
/	4	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>0);	15.212307929992676	0	0
/	5	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(0,duration);	14.777055978775024	0	0
/	6	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration>durationLimit);	15.262198686599731	0	0
/	7	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(started,System.nanoTime());	15.991946935653687	0	0
/	8	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(durationLimit,duration);	14.426526069641113	0	0
/	9	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(durationLimit,Math.abs(duration-started));	14.666733741760254	0	0
1	3	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertNotNull(toString());	15.853732824325562	0	0
/	4	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertFalse(toString().isEmpty());	14.85867691040039	0	0
/	6	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(toString().startsWith(""STR""));"	14.92292594909668	0	0
/	7	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",toString());"	14.909214973449707	0	0
/	8	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(toString().endsWith(""STR""));"	14.614821910858154	0	0
/	10	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",toString());"	14.803056955337524	0	0
/	11	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(toString().contains(""STR""));"	15.062768936157227	0	0
/	12	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertTrue(toString().length()>0);	15.225605964660645	0	0
/	13	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",toString());"	14.681104898452759	0	0
/	14	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertNotSame(null,toString());	14.241286039352417	0	0
2	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	46.17215585708618	1	0
2	1	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").equals(""STR""));"	44.02805995941162	0	0
/	2	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	43.17118692398071	0	0
/	3	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(""STR"",clazz.getCustom(""STR""));"	43.302391052246094	0	0
/	4	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	assertTrue(schema.existsClass(className));	44.01636505126953	0	0
/	5	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(clazz,schema.getClass(""STR""));"	42.565773725509644	0	0
/	6	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNull(clazz.getProperty(""STR""));"	42.950380086898804	0	0
/	7	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(schema.existsClass(""STR""));"	43.77303385734558	0	0
/	8	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	assertNotSame(result,null);	43.082443952560425	0	0
/	10	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	assertEquals(0,result.getExecutionPlan().getCost());	6.4486682415008545	0	0
3	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	40.45916390419006	0	0
/	2	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	6.81158185005188	0	0
/	4	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	6.777620077133179	0	0
/	6	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(expectedResult,result);	6.597289800643921	0	0
/	9	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(result.size()>=expectedMinSize);	6.931987762451172	0	0
/	11	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(expectedResult,result);	6.320699214935303	0	0
/	14	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(expectedResult.getClass(),result.getClass());	6.859058856964111	0	0
/	21	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofArrayList);	6.544135093688965	0	0
4	1	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	41.26409912109375	0	0
/	2	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	38.83891987800598	0	0
/	3	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	40.88226795196533	0	0
/	4	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	40.09773111343384	0	0
/	5	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.LINK,result[0]);	40.11872410774231	0	0
/	7	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(Arrays.asList(result).isEmpty());	39.27843379974365	0	0
/	8	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.BOOLEAN,result[0]);	40.0616660118103	0	0
/	11	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	40.90858602523804	0	0
/	13	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.LINK,result[0]);	40.37407612800598	0	0
/	19	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.BOOLEAN,result[0]);	39.51183104515076	0	0
5	1	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	7.451972007751465	0	0
/	3	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	39.38017725944519	0	0
/	4	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	39.81685519218445	0	0
/	6	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size());	40.380385875701904	0	0
/	7	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(!compositeKey.getKeys().isEmpty());	39.94239783287048	0	0
5	8	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	39.371150970458984	1	0
/	9	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertSame(""STR"",compositeKey.getKeys().get(0));"	41.026484966278076	0	0
/	10	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertNotSame(""STR"",compositeKey.getKeys().get(0));"	39.381200075149536	0	0
/	12	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertFalse(compositeKey.getKeys().contains(""STR""));"	41.12961411476135	0	0
/	13	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().indexOf(""STR"")!=-1);"	40.81899690628052	0	0
6	1	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(index.getSize()>0);	26.94890594482422	0	0
/	2	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	25.53672432899475	0	0
7	1	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	6.896909713745117	0	0
/	3	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(expectedValue,result);	6.818926095962524	0	0
/	7	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(expectedValue,result);	8.656750917434692	0	0
/	10	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertSame(expectedObject,result);	6.707580089569092	0	0
/	12	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(condition);	6.843210935592651	0	0
8	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	30.41407799720764	0	0
/	7	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	29.292354106903076	0	0
9	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	25.76453185081482	0	0
/	11	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(db.exists());	25.23381495475769	0	0
10	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oClass.declaredProperties().stream().anyMatch(p->p.getName().equals(""STR"")));"	44.423638105392456	0	0
10	1	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oClass.getProperty(""STR""));"	44.809633016586304	1	0
/	2	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertEquals(2,oClass.declaredProperties().size());	43.84591317176819	0	0
/	3	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertFalse(oClass.isAbstract());	42.983047008514404	0	0
/	4	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertTrue(oClass.getSubclasses().isEmpty());	44.299259185791016	0	0
/	5	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(OType.LINKLIST,oClass.getProperty(""STR"").getType());"	42.95027494430542	0	0
/	8	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertTrue(oSchema.getClasses().contains(oClass));	6.712255001068115	0	0
/	10	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(db.getMetadata().getSchema().getClass(""STR""));"	6.054318189620972	0	0
/	12	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertFalse(oClass.getDeclaredProperties().isEmpty());	6.269532203674316	0	0
/	13	//	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(""STR"",oClass.getName());"	44.104137897491455	0	0
11	3	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	39.76876187324524	0	0
/	10	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertSame(expectedObject,result);	8.49852705001831	0	0
/	15	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(result.contains(expectedElement));	6.271147727966309	0	0
/	17	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(result.contains(unexpectedElement));	6.784832000732422	0	0
/	29	//	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(result.containsAll(expectedElements));	6.713742971420288	0	0
12	1	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(expectedData,actualData);	8.203927755355835	0	0
/	3	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	39.72255301475525	0	0
/	5	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(data.length,buffer.position()-serializationOffset);	7.070840120315552	0	0
/	6	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	39.10236883163452	0	0
/	8	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,buffer.remaining());	6.79217791557312	0	0
/	9	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.isReadOnly());	39.203593015670776	0	0
/	11	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(data.length+serializationOffset,buffer.position());	6.64349889755249	0	0
/	13	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	39.621437072753906	0	0
/	14	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE+serializationOffset);	39.67911911010742	0	0
/	17	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.remaining()>=FIELD_SIZE);	6.800356149673462	0	0
13	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	7.077663898468018	0	0
/	1	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	6.322310209274292	0	0
/	2	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(OTP_MIN_LEN,otp.length());	6.086827993392944	0	0
/	3	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(OTP_MAX_LEN,otp.length());	6.158332109451294	0	0
/	4	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.351997137069702	0	0
/	6	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(expected,actual);	6.411909818649292	0	0
/	7	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertArrayEquals(expectedArray,actualArray);	6.606335878372192	0	0
/	9	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(condition);	6.6717188358306885	0	0
/	10	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(condition);	6.6588287353515625	0	0
/	11	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(expected,actual);	6.566586971282959	0	0
14	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	6.910730838775635	0	0
/	1	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	6.424810886383057	0	0
/	2	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(6,otp.length());	7.765475034713745	0	0
/	3	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.571719169616699	0	0
/	4	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotEquals(""STR"",otp);"	7.407973766326904	0	0
/	5	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(otp.startsWith(""STR""));"	7.312319993972778	0	0
/	7	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertEquals(""STR"",otp);"	7.378062963485718	0	0
/	8	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotSame(""STR"",otp);"	7.839313983917236	0	0
/	9	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	7.544381141662598	0	0
/	10	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(otp.contains(""STR""));"	8.244862079620361	0	0
15	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	9.731020212173462	1	0
15	1	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	7.920077800750732	0	0
/	2	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	7.564949989318848	0	0
/	3	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.EMPTY_LIST,routePrioritizer.getPrioritizedRoutes());	7.775642156600952	0	0
/	4	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	7.9246320724487305	0	0
/	5	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(uriResource));	7.974745273590088	0	0
/	6	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	8.044458866119385	0	0
/	7	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	7.962165117263794	0	0
/	8	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer.getPrioritizedRoutes(),Collections.emptyList());	7.768471002578735	0	0
/	9	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(expectedRoutes));	7.836006164550781	0	0
16	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	7.905156135559082	0	0
/	1	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizerinstanceofProvidedPriorityRoutePrioritizer);	7.8452160358428955	0	0
16	2	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	8.063549995422363	1	0
/	3	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.getPrioritizedRoutes().size());	7.726602792739868	0	0
/	4	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	7.7865400314331055	0	0
/	5	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(expectedSize,routePrioritizer.getPrioritizedRoutes().size());	9.633341312408447	0	0
/	6	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	7.88293981552124	0	0
/	7	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(expectedObject,actualObject);	7.563153982162476	0	0
/	8	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(expectedObject,actualObject);	7.646677017211914	0	0
/	9	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(condition);	8.116568803787231	0	0
17	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(expectedSvgString,a.getSvg());	8.389661073684692	0	0
/	1	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(expectedWidth,a.getWidth());	7.357391119003296	0	0
/	2	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	7.608155012130737	0	0
/	3	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getScaleX()>0&&a.getScaleY()>0);	7.182857036590576	0	0
/	4	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotEquals(expectedWidth,a.getHeight());	6.769436836242676	0	0
/	5	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getRotate()>=0&&a.getRotate()<360);	7.275381088256836	0	0
/	6	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(expectedUnit,a.getUnit());	7.518174171447754	0	0
/	7	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().contains(expectedSvgSubstring));	7.628123760223389	0	0
/	8	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertFalse(a.getSvg().isEmpty());	6.876041889190674	0	0
/	9	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotEquals(expectedHeight,a.getWidth());	7.441743850708008	0	0
18	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.opts.get(""STR""));"	9.662881851196289	0	0
/	1	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.args.contains(""STR""));"	6.658653974533081	0	0
/	2	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.opts.isEmpty());	6.915434122085571	0	0
/	3	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNull(opts.opts.get(""STR""));"	8.054406881332397	0	0
/	4	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(3,opts.args.size());	7.069746255874634	0	0
/	5	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR""));"	6.797430753707886	0	0
/	6	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	7.064002990722656	0	0
/	7	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.args.isEmpty());	7.277860641479492	0	0
/	8	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsValue(""STR""));"	7.205669164657593	0	0
/	9	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotEquals(0,opts.args.size());	7.540284872055054	0	0
