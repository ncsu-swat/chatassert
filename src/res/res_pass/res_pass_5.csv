TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	31.46952533721924	0	1	0	0	0
	1	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	31.132113218307495	0	1	0	0	0
	3	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration>durationLimit);	15.74407410621643	0	1	0	0	0
	4	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	32.337138175964355	0	1	0	0	0
	8	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue((duration%2)==0||(duration%2)==1);	46.57145380973816	0	1	0	0	0
	9	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(0,duration`isaplausible0);	16.718238353729248	0	1	0	0	0
	10	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	15.105668067932129	0	1	0	0	0
	11	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=ONE_SECOND_TO_NANOS);	31.497804164886475	0	1	0	0	0
	12	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(duration,ONE_SECOND_TO_NANOS);	15.946442127227783	0	1	0	0	0
	13	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(durationLimit,ONE_SECOND_TO_NANOS);	15.350759744644165	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",this.toString());"	44.432661056518555	0	1	0	0	0
	3	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertFalse(newSimulatorAddressTest().toString().isEmpty());	15.449947118759155	0	1	0	0	0
	5	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertNotNull(newSimulatorAddressTest().toString());	16.086853981018066	0	1	0	0	0
	6	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotSame(""STR"",newSimulatorAddressTest().toString());"	16.179564952850342	0	1	0	0	0
	7	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",newSimulatorAddressTest().toString());"	15.977714776992798	0	1	0	0	0
	15	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotSame(""STR"",newSimulatorAddressTest().toString());"	16.4915931224823	0	1	0	0	0
	16	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(newSimulatorAddressTest().toString().contains(""STR""));"	15.84937334060669	0	1	0	0	0
	19	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotSame(""STR"",newSimulatorAddressTest().toString());"	16.204044103622437	0	1	0	0	0
	26	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",newSimulatorAddressTest().toString());"	16.40795588493347	0	1	0	0	0
0	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	42.00473713874817	1	0	0	0	0
	1	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").equals(""STR""));"	42.23674011230469	0	1	0	0	0
	2	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	43.18810701370239	0	1	0	0	0
	3	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""STR"").isEmpty());"	42.39194703102112	0	1	0	0	0
	4	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(clazz.getCustom(""foo"")`isaplausible""xyz"",clazz.getCustom(""foo""));"	42.355985164642334	0	1	0	0	0
	5	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNull(clazz.getCustom(""foo"")`isaplausibleclazz.getCustom(""foo""));"	42.01747107505798	0	1	0	0	0
	6	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""bar"",clazz.getCustom(""foo"")`isaplausible""bar"",clazz.getCustom(""foo""));"	43.59339714050293	0	1	0	0	0
	7	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertSame(""bar"",clazz.getCustom(""foo"")`isaplausible""bar"",clazz.getCustom(""foo"")`isaplausible""bar"",clazz.getCustom(""foo"")`isaplausible""bar"",clazz.getCustom(""foo""));"	42.817180156707764	0	1	0	0	0
	8	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(clazz.getCustom(""foo"")`isaplausible""baz"",clazz.getCustom(""foo""));"	45.55276584625244	0	1	0	0	0
	9	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""foo"").equalsIgnoreCase(""bar"")`isaplausibleclazz.getCustom(""foo"").equalsIgnoreCase(""bar""));"	42.43221616744995	0	1	0	0	0
1	2	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	73.76231813430786	0	1	0	0	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertNotNull(result`tocheckifthevariable""result""isnotnull.);"	42.652113914489746	0	1	0	0	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	74.12921810150146	0	1	0	0	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).size()>0);	75.05610799789429	0	1	0	0	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	598.9613919258118	0	1	0	0	0
	7	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(((List<?>)result).size(),mapToTest.size());	76.20604395866394	0	1	0	0	0
	8	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,((List<?>)result).size()`isaplausible0);	40.38251209259033	0	1	0	0	0
	9	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).isEmpty()`isaplausible((List<?>)result).isEmpty());	39.22201108932495	0	1	0	0	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	74.05081868171692	0	1	0	0	0
	13	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList`isaplausibleresultinstanceofList);	42.939488887786865	0	1	0	0	0
2	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	38.46636891365051	0	1	0	0	0
	1	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	39.434624910354614	0	1	0	0	0
	2	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	38.866724729537964	0	1	0	0	0
	3	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	38.82407188415527	0	1	0	0	0
	4	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(null,result`isaplausiblenull);	38.61376690864563	0	1	0	0	0
	5	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]`isaplausibleOType.INTEGER);	40.04561710357666	0	1	0	0	0
	6	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.STRING,result[0]`isaplausibleOType.STRING,result[0]);	40.26447629928589	0	1	0	0	0
	7	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER)`isaplausibleArrays.asList(result).contains(OType.INTEGER));	39.93964123725891	0	1	0	0	0
	9	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.STRING,result[0]);	38.947304010391235	0	1	0	0	0
	10	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.LONG,result[0]`isaplausibleOType.LONG,result[0]);	39.570565700531006	0	1	0	0	0
3	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	39.60590600967407	0	1	0	0	0
	1	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	146.4320478439331	0	1	0	0	0
	2	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	40.054259061813354	1	0	0	0	0
	3	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	39.71446919441223	0	1	0	0	0
	4	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys()`isaplausiblecompositeKey.getKeys());	38.87610697746277	0	1	0	0	0
	5	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size()`isaplausible0);	38.54572606086731	0	1	0	0	0
	6	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertSame(Collections.unmodifiableList(keys),compositeKey.getKeys()`isaplausibleCollections.unmodifiableList(keys));	39.48191785812378	0	1	0	0	0
	7	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertFalse(compositeKey.getKeys().contains(""b"")`isaplausiblecompositeKey.getKeys().contains(""b""));"	39.05899691581726	0	1	0	0	0
	8	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNull(compositeKey.getKeys()`isaplausiblecompositeKey.getKeys()`isaplausiblecompositeKey.getKeys()`isaplausiblecompositeKey.getKeys());	39.27353096008301	0	1	0	0	0
	9	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	40.65094494819641	0	1	0	0	0
4	1	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	662.7194261550903	0	1	0	0	0
	2	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOIndex);	25.710274696350098	0	1	0	0	0
	3	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(1,db.countClass(""City"")`isaplausible1);"	27.129443645477295	0	1	0	0	0
	5	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getSize());	25.02712607383728	0	1	0	0	0
	6	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	76.69356083869934	0	1	0	0	0
	7	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getIndexManager().existsIndex(""City.location"")`isaplausibledb.getMetadata().getIndexManager().existsIndex(""City.location""));"	27.09067392349243	0	1	0	0	0
	8	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(8,db.getMetadata().getSchema().getClass(""STR"").getClusterIds().length);"	26.384331941604614	0	1	0	0	0
	9	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	25.15674328804016	0	1	0	0	0
	10	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertNotEquals(0,db.countClass(""City"")`isaplausible0);"	26.38022017478943	0	1	0	0	0
	12	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertTrue(db.getMetadata().getSchema().getClass(""STR"").getProperty(""STR"").getType().isEmbedded());"	26.968329906463623	0	1	0	0	0
5	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	75.13311004638672	0	1	0	0	0
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	73.31659483909607	0	1	0	0	0
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	109.79269599914551	0	1	0	0	0
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5),result);	142.30508017539978	0	1	0	0	0
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(ifyouexpectthe`result`tobea`String`);	41.032224893569946	0	1	0	0	0
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	110.43564891815186	0	1	0	0	0
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	39.1603639125824	1	0	0	0	0
	10	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	146.7685022354126	0	1	0	0	0
	11	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5),result);	38.9035427570343	0	1	0	0	0
	12	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofNumber);	38.99867081642151	0	1	0	0	0
6	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	28.295695066452026	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().count()>0);	28.53624391555786	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	45.31854701042175	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult.getExecutionPlan());	27.265716075897217	0	1	0	0	0
	9	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.getExecutionPlan().isPresent());	47.172956228256226	0	1	0	0	0
	16	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	46.44079113006592	0	1	0	0	0
	18	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	47.98670291900635	0	1	0	0	0
	21	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	85.74630093574524	0	1	0	0	0
	25	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	50.82975697517395	0	1	0	0	0
7	5	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	24.18640375137329	0	1	0	0	0
	9	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(null,listener);	24.865065813064575	0	1	0	0	0
	13	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	40.9762179851532	0	1	0	0	0
8	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oSchema.getClass(""STR"").getProperty(""STR""));"	156.61525201797485	0	1	0	0	0
	1	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oSchema.getClass(""STR"").getProperty(""STR""));"	43.749823808670044	0	1	0	0	0
	2	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oSchema.getClass(""STR"").existsProperty(""STR""));"	43.345207929611206	0	1	0	0	0
	3	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertFalse(oSchema.getClass(""STR"").existsProperty(""STR""));"	43.45960283279419	0	1	0	0	0
	4	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(OType.LINKLIST,oSchema.getClass(""STR"").getProperty(""STR"").getType());"	43.64180898666382	0	1	0	0	0
	5	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oSchema.getClass(""STR""));"	126.08672380447388	0	1	0	0	0
	6	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertEquals(1,oSchema.getClasses().size()`isaplausible1);	43.540632009506226	0	1	0	0	0
	9	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oSchema.getClasses().contains(oSchema.getClass(""STR"")));"	44.38536500930786	0	1	0	0	0
	10	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertFalse(oSchema.getClasses().isEmpty()`isaplausibleoSchema.getClasses().isEmpty());	42.777257204055786	0	1	0	0	0
	11	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	assertNotEquals(0,oSchema.getClasses().size());	43.59985899925232	0	1	0	0	0
9	1	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	39.10786318778992	0	1	0	0	0
	2	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	370.51887226104736	0	1	0	0	0
	3	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List<?>)result).isEmpty());	40.484601974487305	0	1	0	0	0
	4	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(expectedValues,result`isaplausibleexpectedValues);	38.93955087661743	0	1	0	0	0
	5	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	208.63143014907837	0	1	0	0	0
	7	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	75.41790890693665	0	1	0	0	0
	8	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(!((List<?>)result).isEmpty());	41.18412923812866	0	1	0	0	0
	9	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(expectedSize,((List<?>)result).size()`isaplausibleexpectedSize);	39.66194009780884	0	1	0	0	0
	11	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotEquals(expectedValues,result`isaplausibleexpectedValues);	39.535284996032715	0	1	0	0	0
	12	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	263.81359004974365	0	1	0	0	0
10	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(Float.BYTES==floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	113.25422096252441	0	1	0	0	0
	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(Float.BYTES!=floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.97613501548767	0	1	0	0	0
	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.48955321311951	0	1	0	0	0
	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.31496810913086	0	1	0	0	0
	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.95275902748108	0	1	0	0	0
	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)>0);	39.385191917419434	0	1	0	0	0
	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)<=0`isaplausiblefloatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)<=0);	39.96055006980896	0	1	0	0	0
	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausible0);	42.346235036849976	0	1	0	0	0
	10	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausible0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.905555963516235	0	1	0	0	0
	11	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausiblefloatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.709583044052124	0	1	0	0	0
0	1	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertion(i.e.,validatingthatthe	expectedresultis`true`).);	31.586702823638916	0	1	0	0	0
	3	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	50.090147972106934	0	1	0	0	0
	5	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	8.421573162078857	0	1	0	0	0
	7	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	22.68579912185669	0	1	0	0	0
	9	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(expected,actual)`.Thisotp)`is`false`usingthe`false,FOCAL.isValidOTPFormat(otp));	10.242037057876587	0	1	0	0	0
	10	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(client);	7.295275926589966	0	1	0	0	0
	11	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(null)`isaplausibleclient.isValidOTPFormat(null));	7.871835947036743	0	1	0	0	0
	13	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(expected,actual)`?);	58.53518795967102	0	1	0	0	0
	16	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNull(object)`tocheckifanobjectisnull.Here'sanexample:);	8.76989483833313	0	1	0	0	0
	17	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertArrayEquals(expectedArray,actualArray)`toexpectedArray,actualArray);	8.564194679260254	0	1	0	0	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assert(focal.isValidOTPFormat(otp));(a,s,s,e,r,t,(,f,o,c,a,l,.,i,s,V,a,l,i,d,O,T,P,F,o,r,m,a,t,(,o,t,p,),),;);	33.544082164764404	0	1	0	0	0
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	13.399311065673828	0	1	0	0	0
	6	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	23.23445200920105	1	0	0	0	0
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	29.285183906555176	1	0	0	0	0
	15	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	7.525335073471069	0	1	0	0	0
	18	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(otp.length(),6);	7.458139896392822	0	1	0	0	0
	19	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	37.53684425354004	0	1	0	0	0
	20	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.333515882492065	0	1	0	0	0
	24	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	15.063488006591797	0	1	0	0	0
0	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	37.2129168510437	0	1	0	0	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.393546104431152	0	1	0	0	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	13.849181890487671	1	0	0	0	0
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	13.645511150360107	0	1	0	0	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes()`isaplausibleCollections.emptyList(),routePrioritizer.getPrioritizedRoutes());	15.421108961105347	0	1	0	0	0
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().size()>=0`isaplausibleroutePrioritizer.getPrioritizedRoutes().size()>=0);	14.905012130737305	0	1	0	0	0
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	26.939043760299683	1	0	0	0	0
	11	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty()||routePrioritizer.getPrioritizedRoutes().size()>0);	15.78623080253601	0	1	0	0	0
	12	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes()`isaplausiblenull);	14.115795850753784	0	1	0	0	0
	13	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(!routePrioritizer.getPrioritizedRoutes().contains(null)`isaplausible!routePrioritizer.getPrioritizedRoutes().contains(null));	14.030147075653076	0	1	0	0	0
1	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	28.966784954071045	0	1	0	0	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.937228918075562	0	1	0	0	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	26.21380090713501	0	1	0	0	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	14.228255271911621	1	0	0	0	0
	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	41.865901947021484	0	1	0	0	0
	14	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	38.25452208518982	0	1	0	0	0
	25	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	39.755253076553345	1	0	0	0	0
	27	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	52.728522062301636	0	1	0	0	0
0	5	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,<FOCAL_CODE>;);	73.27649903297424	0	1	0	0	0
0	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	8.689576864242554	0	1	0	0	0
	1	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected.length,actual.length);	11.070234298706055	0	1	0	0	0
	2	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	21.070598125457764	0	1	0	0	0
	3	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(condition`.Thisactual.length>0);	10.980193138122559	0	1	0	0	0
	4	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	9.411334037780762	1	0	0	0	0
	5	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(expected,actual)`.Thisexpected,actual);	11.801614046096802	0	1	0	0	0
	6	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNull(actual`isaplausibleactual);	9.863337993621826	0	1	0	0	0
	8	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(condition)`.Thisactual.length>0);	12.769691944122314	0	1	0	0	0
	10	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	21.623481035232544	0	1	0	0	0
	11	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(condition)`?This);	11.54870319366455	0	1	0	0	0
1	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	8.603891134262085	0	1	0	0	0
	1	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	10.880797147750854	0	1	0	0	0
	2	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertSame(expected,actual);	11.561528205871582	0	1	0	0	0
	4	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	22.277014017105103	0	1	0	0	0
	5	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.contains(expected.get(0)));	23.753877878189087	0	1	0	0	0
	6	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.665949821472168	0	1	0	0	0
	7	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	10.249731063842773	0	1	0	0	0
	10	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	30.09531593322754	0	1	0	0	0
	11	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>0);	10.003845930099487	0	1	0	0	0
	12	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray()`isaplausibleexpected.toArray());	10.671337127685547	0	1	0	0	0
2	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	9.333940029144287	0	1	0	0	0
	1	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(actualinstanceofActivity);	9.906471014022827	0	1	0	0	0
	2	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	10.781231880187988	1	0	0	0	0
	3	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(expected.equals(actual));	10.663051128387451	0	1	0	0	0
	4	/	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(actual.isEmpty()`isaplausibleactual.isEmpty());	10.220528841018677	0	1	0	0	0
	5	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	10.254586219787598	0	1	0	0	0
	7	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.230838060379028	0	1	0	0	0
	10	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	30.82564902305603	0	1	0	0	0
	12	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(statement.getObject());	18.78410029411316	0	1	0	0	0
	13	/	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	10.884027004241943	0	1	0	0	0
0	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	24.89799666404724	0	1	0	0	0
	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXlsinstanceofCodeListDocument);	18.25040364265442	0	1	0	0	0
	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	19.014788150787354	1	0	0	0	0
	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(0,aXls.getFile().length()`isaplausible0);	18.35382914543152	0	1	0	0	0
	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.isDirectory()`isaplausibleaXls.isDirectory());	18.060758113861084	0	1	0	0	0
	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(0,aXls.getFile().length());	17.909770011901855	0	1	0	0	0
	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertSame(CGenericode.GENERICODE_04_XSDS,aXls.getSchema());	19.08892798423767	0	1	0	0	0
	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(null,aXls.getSource());	17.923242807388306	0	1	0	0	0
	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	"assertEquals(aXls.getFileName()`isaplausible""Simple1.xls"",aXls.getFileName());"	18.854655981063843	0	1	0	0	0
	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(0,aXls.getInputStream().available()`isaplausible0);	18.45317792892456	0	1	0	0	0
0	4	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(getClass().getName());	59.404266119003296	0	1	0	0	0
	8	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotEquals(""STR"",""STR"");"	31.29665207862854	0	1	0	0	0
0	1	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"")!=null);"	7.864158868789673	0	1	0	0	0
	3	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""STR"").isEmpty());"	8.477524995803833	0	1	0	0	0
	4	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup.markdown(""STR""));"	8.514596939086914	0	1	0	0	0
	5	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""example"")`isaplausiblemarkup.markdown(""example""));"	8.605619192123413	0	1	0	0	0
	6	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotSame(""STR"",markup.markdown(""STR""));"	9.336834192276001	0	1	0	0	0
	7	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(markup.markdown(""example2"")`isaplausible"""",markup.markdown(""example2""));"	8.702811241149902	0	1	0	0	0
	8	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").startsWith(""STR""));"	7.843576192855835	0	1	0	0	0
	9	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""example"").isEmpty()`isaplausiblemarkup.markdown(""example"").isEmpty());"	8.680975198745728	0	1	0	0	0
	10	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(markup.markdown(""Hello"")`isaplausible""<p>Hello</p>"",markup.markdown(""Hello""));"	8.80367398262024	0	1	0	0	0
	11	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""example"").contains(""<p>"")`isaplausiblemarkup.markdown(""example"").contains(""<p>""));"	9.151253938674927	0	1	0	0	0
1	1	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR"").trim());"	33.34157371520996	0	1	0	0	0
	2	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").trim().startsWith(""STR"")&&markup.markdown(""STR"").trim().endsWith(""STR""));"	10.064213037490845	0	1	0	0	0
	3	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""inputText"").isEmpty()`isaplausiblemarkup.markdown(""inputText"").isEmpty());"	8.705161809921265	0	1	0	0	0
	4	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup.markdown(""STR"").trim());"	8.464753866195679	0	1	0	0	0
	5	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	8.40867280960083	0	1	0	0	0
	6	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotSame(markup.markdown(""inputText1""),markup.markdown(""inputText2"")`isaplausiblemarkup.markdown(""inputText1""),markup.markdown(""inputText2""));"	9.37710428237915	0	1	0	0	0
	7	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	22.2241473197937	0	1	0	0	0
	8	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(10,markup.markdown(""inputText"").length()`isaplausible10);"	10.340609788894653	0	1	0	0	0
	9	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(null,markup.markdown(""inputText"")`isaplausiblenull);"	8.963038921356201	0	1	0	0	0
	11	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	18.576812982559204	0	1	0	0	0
2	5	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(m);	26.53831195831299	0	1	0	0	0
	10	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertTrue(ifyouwanttoverifythataspecificvariable`result`isgreaterthan0);	10.380910158157349	0	1	0	0	0
	11	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(m);	19.46561312675476	0	1	0	0	0
	13	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertTrue(condition`?);	9.235791206359863	0	1	0	0	0
0	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertEquals()`from`org.junit.Assert`:);	15.869094133377075	0	1	0	0	0
	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue()`condition);	11.342144012451172	0	1	0	0	0
	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNull()`?Here'sanexample:);	10.718797206878662	0	1	0	0	0
	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotEquals()`expectedValue,actualValue);	12.278928995132446	0	1	0	0	0
	7	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNull()`?Here'sanexample:);	10.338738918304443	0	1	0	0	0
	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertFalse()`condition);	10.386726140975952	0	1	0	0	0
0	9	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(env.get(""STR""));"	20.04776668548584	0	1	0	0	0
	10	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(1,env.size());	31.978427171707153	0	1	0	0	0
	12	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	???;	29.303529024124146	0	1	0	0	0
	15	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertFalse(env.isEmpty());	35.29384994506836	0	1	0	0	0
	21	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(env.containsKey(""STR""));"	12.847307205200195	0	1	0	0	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	11.16074800491333	0	1	0	0	0
	1	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(env.containsKey(""STR""));"	13.20742392539978	0	1	0	0	0
	2	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertFalse(env.isEmpty());	11.510596752166748	0	1	0	0	0
	3	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(""X""put(""BAR"",""Y""}};);"	17.936502933502197	0	1	0	0	0
	4	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(2,env.size());	12.884898900985718	0	1	0	0	0
	5	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertSame(env,result`isaplausibleenv);	12.42174506187439	0	1	0	0	0
	6	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotSame(env,result);	12.813056945800781	0	1	0	0	0
	7	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(!result.isEmpty()`isaplausible!result.isEmpty());	12.301061153411865	0	1	0	0	0
	8	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(env,result);	12.24741005897522	0	1	0	0	0
	9	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	12.471014976501465	0	1	0	0	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,filter(env).size());	11.877864837646484	0	1	0	0	0
	1	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(filter(env).containsKey(""STR""));"	11.908559083938599	0	1	0	0	0
	2	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	12.135960102081299	0	1	0	0	0
	3	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertEquals(filter(env).get(""FOO"")`isaplausible""BAR"",filter(env).get(""FOO""));"	12.699365854263306	0	1	0	0	0
	4	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNull(filter(env).get(""SECRET"")`isaplausiblefilter(env).get(""SECRET""));"	12.330261945724487	0	1	0	0	0
	5	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNotEquals(filter(env).get(""MY_SECRET_TOKEN"")`isaplausible""abcd"",filter(env).get(""MY_SECRET_TOKEN""));"	12.68740200996399	0	1	0	0	0
	6	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsKey(""ALPHA"")`isaplausibleenv.containsKey(""ALPHA""));"	12.361769914627075	0	1	0	0	0
	7	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(env.containsKey(""BETA"")`isaplausible`env.containsKey(""BETA"")`isaplausibleenv.containsKey(""BETA"")`isaplausible`env.containsKey(""BETA""));"	13.516469955444336	0	1	0	0	0
	9	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(filter(env).containsValue(""clef"")`isaplausiblefilter(env).containsValue(""clef""));"	12.546200037002563	0	1	0	0	0
	11	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNotNull(filter(env).get(""STR""));"	11.79627275466919	0	1	0	0	0
0	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	17.27982211112976	0	1	0	0	0
	1	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	26.80784010887146	0	1	0	0	0
	3	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(atts.containsKey(""STR""));"	354.4651927947998	0	1	0	0	0
	15	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(!atts.isEmpty());	9.543252944946289	0	1	0	0	0
	26	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	31.53728485107422	0	1	0	0	0
	29	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>0);	10.207718133926392	0	1	0	0	0
1	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	19.630882024765015	0	1	0	0	0
	1	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	30.206291913986206	0	1	0	0	0
	2	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(polledObjects.contains(polled001));	10.411632061004639	0	1	0	0	0
	5	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(resultAttributeMap.size(),1);	19.629046201705933	0	1	0	0	0
	6	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertFalse(polledObjects.isEmpty());	9.637672901153564	0	1	0	0	0
	7	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAttributeInjector);	27.379595041275024	0	1	0	0	0
	8	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(mockObjectQueryPreparerinstanceofObjectQueryPreparer);	10.771102905273438	0	1	0	0	0
	9	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotEquals(Mockito.mock(TestClass001.class),polled001`isaplausibleMockito.mock(TestClass001.class));	11.05583906173706	0	1	0	0	0
	10	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(mockAccessConnectioninstanceofMBeanBatchCapableAccessConnection);	10.668859958648682	0	1	0	0	0
	11	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(polledObjects.size(),1`isaplausiblepolledObjects.size());	10.495770931243896	0	1	0	0	0
0	0	arnohaase/a-foundation	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").containsAll(Arrays.asList(""STR"",""STR"")));"	17.61573028564453	0	1	0	0	0
	1	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),tokens.apply(""STR""));"	17.410483837127686	0	1	0	0	0
	2	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertNotEquals(Arrays.asList(""STR"",""STR""),tokens.apply(""STR""));"	17.61510419845581	0	1	0	0	0
	3	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertNotNull(tokens.apply(""STR""));"	17.18848705291748	0	1	0	0	0
	4	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertNull(tokens.apply("""")`isaplausibletokens.apply(""""));"	16.668848037719727	0	1	0	0	0
	5	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertArrayEquals(newString[]{""Hello"",""World""},tokens.apply(""HelloWorld"").toArray(newString[0])`isaplausiblenewString[]{""Hello"",""World""},tokens.apply(""HelloWorld"").toArray(newString[0]));"	17.870169162750244	0	1	0	0	0
	6	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertNotSame(Arrays.asList(""Hello"",""World""),tokens.apply(""HelloJava"")`isaplausibleArrays.asList(""Hello"",""World""),tokens.apply(""HelloJava""));"	17.4137179851532	0	1	0	0	0
	8	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").isEmpty());"	17.490859985351562	0	1	0	0	0
	9	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertFalse(tokens.apply(""HelloWorld"").isEmpty()`isaplausibletokens.apply(""HelloWorld"").isEmpty());"	16.71493697166443	0	1	0	0	0
	11	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertThrows(IllegalArgumentException.class,()->tokens.apply(null));	17.14253807067871	0	1	0	0	0
0	2	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	18.624375104904175	0	1	0	0	0
	7	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.43990516662598	0	1	0	0	0
	23	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.92202591896057	0	1	0	0	0
	24	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(false);	19.117341995239258	0	1	0	0	0
1	26	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(null,fields.get(""STR""));"	74.5120780467987	0	1	0	0	0
	27	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	19.197203874588013	0	1	0	0	0
	29	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertFalse(fields.containsKey(""STR""));"	19.963786125183105	0	1	0	0	0
2	2	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(newMetadata());	35.82354378700256	0	1	0	0	0
	5	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.91167688369751	0	1	0	0	0
	10	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	???;	19.486878871917725	0	1	0	0	0
	12	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(condition)`.This5>2);	18.34519100189209	0	1	0	0	0
0	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	9.607316017150879	1	0	0	0	0
	1	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	9.774708986282349	0	1	0	0	0
	2	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	19.83250594139099	1	0	0	0	0
	5	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(expectedSize,actualSize`);	15.840497970581055	0	1	0	0	0
	6	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotEquals(expectedSize,actualSize`isaplausibleexpectedSize);	10.2548987865448	0	1	0	0	0
	7	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	???;	24.76327610015869	0	1	0	0	0
	8	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext()`isaplausibleiterator.hasNext());	9.516399145126343	0	1	0	0	0
	9	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(Integer.valueOf(1),iterator.next());	22.44449806213379	0	1	0	0	0
	11	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	25.14425015449524	0	1	0	0	0
	12	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotSame(newStreamIterable<>(Arrays.asList(1,2,3,4).stream()).iterator(),iterator);	20.543859004974365	0	1	0	0	0
1	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	27.35337495803833	1	0	0	0	0
	1	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.equals(Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet())));	11.862490177154541	0	1	0	0	0
	2	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotNull(expected);	9.698132991790771	0	1	0	0	0
	3	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertFalse(expected.isEmpty());	9.76816201210022	0	1	0	0	0
	4	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected.size(),3);	9.70716905593872	0	1	0	0	0
	5	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotEquals(expected.size(),0`isaplausibleexpected.size());	10.110832929611206	0	1	0	0	0
	6	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertSame(expected.getClass(),LinkedHashSet.class`isaplausibleexpected.getClass());	10.38706088066101	0	1	0	0	0
	7	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.containsAll(Arrays.asList(1,2,3)));	10.388123989105225	0	1	0	0	0
	8	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotSame(expected,newLinkedHashSet<>()`isaplausibleexpected,newLinkedHashSet<>());	10.198023080825806	0	1	0	0	0
	9	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertArrayEquals(expected.toArray(),Arrays.asList(1,2,3).toArray()`isaplausibleexpected.toArray());	11.244821071624756	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	11.549494981765747	1	0	0	0	0
	1	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR"")&&result.contains(""STR""));"	13.997983932495117	0	1	0	0	0
	2	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	24.332043170928955	1	0	0	0	0
	3	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	12.903037071228027	0	1	0	0	0
	4	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	12.107893943786621	0	1	0	0	0
	5	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertTrue(resultinstanceofString`isaplausibleresultinstanceofString);	12.40950870513916	0	1	0	0	0
	6	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotSame("""",result`isaplausible"""",result);"	13.087177991867065	0	1	0	0	0
	7	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	11.786364078521729	0	1	0	0	0
	8	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotEquals(null,result`isaplausiblenull);	12.711266040802002	0	1	0	0	0
	9	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotSame(null,result`isaplausiblenull,result);	12.59362006187439	0	1	0	0	0
0	1	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	99.87227010726929	0	1	0	0	0
	2	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(11,tokens.size());	250.99620985984802	0	1	0	0	0
	3	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	145.78982591629028	0	1	0	0	0
	4	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(0,tokens.size());	112.93153929710388	0	1	0	0	0
	5	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0);	97.7907919883728	0	1	0	0	0
	6	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(!tokens.isEmpty()`isaplausible!tokens.isEmpty());	116.18777513504028	0	1	0	0	0
	7	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotSame(0,tokens.size()`isaplausible0,tokens.size());	110.20679187774658	0	1	0	0	0
	12	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	293.0787630081177	0	1	0	0	0
	14	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens.apply(0));	214.8785810470581	0	1	0	0	0
	15	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.stream().anyMatch(t->t.getPos()==KoreanPosJava.Noun)`isaplausibletokens.stream().anyMatch(t->t.getPos()==KoreanPosJava.Noun));	188.0959916114807	0	1	0	0	0
0	1	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	67.71603488922119	0	1	0	0	0
	2	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.size()>0);	19.95222020149231	0	1	0	0	0
	3	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	17.54234528541565	0	1	0	0	0
	8	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(getAllTestData(),filtered);	32.91649913787842	0	1	0	0	0
	13	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	490.3417420387268	0	1	0	0	0
	14	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.contains(null));	17.52864098548889	0	1	0	0	0
	15	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotEquals(getAllTestData(),filtered);	17.609986066818237	0	1	0	0	0
	16	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(getAllTestData(),filtered`isaplausiblegetAllTestData(),filtered);	18.844566106796265	0	1	0	0	0
	18	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.contains(null)`isaplausiblefiltered.contains(null));	18.53824782371521	0	1	0	0	0
	19	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.stream().allMatch(item->item!=null)`isaplausiblefiltered.stream().allMatch(item->item!=null));	18.80976104736328	0	1	0	0	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	15.633222818374634	1	0	0	0	0
	1	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	16.405639171600342	0	1	0	0	0
	2	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	16.879590034484863	0	1	0	0	0
	3	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt()`isaplausiblefalse);	17.6363787651062	0	1	0	0	0
	4	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(matcher.lookingAt());	16.7570481300354	0	1	0	0	0
	5	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt()`isaplausiblematcher.lookingAt());	16.927196741104126	0	1	0	0	0
	6	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(expectedValue,actualValue);	17.16859221458435	0	1	0	0	0
	7	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(expectedValue,actualValue`isaplausibleexpectedValue);	17.063523054122925	0	1	0	0	0
	8	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(expectedValue,actualValue);	17.656845808029175	0	1	0	0	0
	9	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(expectedValue,actualValue`isaplausibleexpectedValue);	17.524291038513184	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	14.171725749969482	1	0	0	0	0
	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	30.76347064971924	0	1	0	0	0
	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	15.426937818527222	0	1	0	0	0
	11	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	14.982931852340698	0	1	0	0	0
	13	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	15.209659099578857	0	1	0	0	0
	14	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	15.355250358581543	0	1	0	0	0
	15	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	14.992966890335083	0	1	0	0	0
	17	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	39.19123911857605	0	1	0	0	0
	18	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas.get(0));	57.00306701660156	0	1	0	0	0
	19	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size()`?This0,formas.size());	15.975067853927612	0	1	0	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",""STR""+moneyToStrEURRUS.convert(56.63)+""STR"");"	29.53317618370056	0	1	0	0	0
	1	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertTrue(moneyToStrEURRUS.convert(56.63).equals(""STR""));"	13.66070818901062	0	1	0	0	0
	2	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertNotNull(moneyToStrEURRUS.convert(56.63));	9.490346193313599	0	1	0	0	0
	3	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrEURRUS.convert(56.63));"	11.018084049224854	0	1	0	0	0
	4	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertFalse(moneyToStrEURRUS.convert(56.63).isEmpty());	10.212260007858276	0	1	0	0	0
	5	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrEURRUS.convert(56.63));"	11.20565390586853	0	1	0	0	0
	6	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	???;	10.532914876937866	0	1	0	0	0
	7	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	10.095741033554077	0	1	0	0	0
	8	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertTrue(moneyToStrEURRUS.convert(56.63).contains(""STR""));"	10.408811092376709	0	1	0	0	0
	9	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(12.34,Double.parseDouble(moneyToStrEURRUS.convert(12.34).replaceAll(""[^\\d.]"","""")),0.001`isaplausible12.34,Double.parseDouble(moneyToStrEURRUS.convert(12.34).replaceAll(""[^\\d.]"","""")),0.001);"	12.831126689910889	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	13.560563802719116	1	0	0	0	0
	1	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().startsWith(""STR""));"	12.917872667312622	0	1	0	0	0
	2	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotNull(defaultExtension.toString());	12.885370254516602	0	1	0	0	0
	3	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotEquals(""STR"",defaultExtension.toString());"	12.205798864364624	0	1	0	0	0
	4	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertTrue(!defaultExtension.toString().isEmpty());	13.33669114112854	0	1	0	0	0
	5	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(defaultExtension.toString().isEmpty()`isaplausibledefaultExtension.toString().isEmpty());	13.345958948135376	0	1	0	0	0
	6	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotEquals(null,defaultExtension.toString()`isaplausiblenull);	13.186866760253906	0	1	0	0	0
	7	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotSame("""",defaultExtension.toString()`isaplausible"""",defaultExtension.toString());"	13.178725719451904	0	1	0	0	0
	8	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertFalse(defaultExtension.toString().equals(""STR""));"	13.237446784973145	0	1	0	0	0
	9	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotSame(defaultExtension.toString(),""""`isaplausibledefaultExtension.toString(),"""");"	12.969413995742798	0	1	0	0	0
0	18	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	61.9887318611145	1	0	0	0	0
