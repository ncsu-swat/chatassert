TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	11.423462152481079	0	0
/	2	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(0,duration,1639302);	17.23001194000244	0	0
/	3	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	7.876363039016724	0	0
/	4	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(0,duration);	7.970793962478638	0	0
/	5	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(started,duration);	8.093102216720581	0	0
/	6	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(duration);	24.01467204093933	0	0
/	7	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(duration<=0);	8.280751943588257	0	0
/	9	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(started,duration);	7.949380159378052	0	0
/	10	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>0);	8.884645938873291	0	0
/	13	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(durationLimit,duration);	8.548887968063354	0	0
2	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	40.23978018760681	1	0
2	1	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").equals(""STR""));"	38.360193967819214	0	0
/	2	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	37.97442007064819	0	0
/	3	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.getCustom(""STR"").isEmpty());"	37.38892197608948	0	0
/	4	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(""STR"",clazz.getCustom(""STR""));"	37.138510942459106	0	0
/	5	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").contains(""STR""));"	37.84378910064697	0	0
/	6	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""STR"",clazz.getCustom(""STR""));"	37.787201166152954	0	0
/	7	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	77.38690519332886	1	0
/	8	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotSame(""STR"",clazz.getCustom(""STR""));"	38.0728120803833	0	0
/	9	//	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").startsWith(""STR""));"	36.456104040145874	0	0
/	2	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	31.900037050247192	0	0
/	3	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(mapToTest.isEmpty());	301.9886209964752	0	0
/	4	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(propertyIndexByKey,result);	224.6931610107422	0	0
/	8	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	84.99085521697998	0	0
/	14	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(!mapToTest.isEmpty());	262.59462094306946	0	0
/	15	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(mapToTest,result);	35.626123905181885	0	0
4	1	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	38.22138524055481	0	0
/	2	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	33.21747612953186	0	0
/	3	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	35.288918018341064	0	0
/	5	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.BOOLEAN,result[0]);	34.62357831001282	0	0
/	7	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	34.102643966674805	0	0
4	8	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	33.79751110076904	1	0
/	9	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.LINK,result[0]);	35.76527810096741	0	0
/	11	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	34.87933421134949	0	0
/	12	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(Arrays.asList(result).isEmpty());	35.44123888015747	0	0
/	13	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.STRING,result[0]);	32.93774080276489	0	0
5	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	34.5349760055542	1	0
5	1	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	33.02724599838257	0	0
/	2	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	34.23426413536072	0	0
/	3	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size());	34.286739110946655	0	0
/	4	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	33.98960518836975	0	0
/	6	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotSame(0,compositeKey.getKeys().size());	33.61173892021179	0	0
/	7	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey);	71.62032318115234	0	0
/	8	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.toString().contains(""STR""));"	34.8859179019928	0	0
/	10	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotSame(2,compositeKey.getKeys().size());	35.34490394592285	0	0
/	12	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(java.util.Arrays.asList(""STR""),compositeKey.getKeys());"	440.9558482170105	0	0
/	1	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(index.getSize()>0);	21.814610242843628	0	0
/	2	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	22.54409408569336	0	0
/	5	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(index.getSize()>=0);	22.39210820198059	0	0
/	6	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertFalse(index.getSize()<0);	23.047205209732056	0	0
