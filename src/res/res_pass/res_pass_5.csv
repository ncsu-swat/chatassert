TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,data);	857.5922560691833	0	0
/	1	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.remaining()>=FIELD_SIZE+serializationOffset);	36.75312876701355	0	0
/	2	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.hasChanges());	38.00733733177185	0	0
/	3	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,buffer.remaining()-serializationOffset);	36.35370874404907	0	0
/	5	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	34.58101677894592	0	0
/	6	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.isReadOnly());	34.20401620864868	0	0
/	7	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,OBJECT);	151.73029899597168	0	0
/	9	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(null,walChanges);	34.357608795166016	0	0
/	10	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(walChanges,buffer);	92.5276448726654	0	0
/	11	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(FIELD_SIZE,buffer.remaining()-serializationOffset);	34.12744879722595	0	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(false,YubicoClient.isValidOTPFormat(otp));	8.209448099136353	0	0
/	1	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(!YubicoClient.isValidOTPFormat(otp));	6.294857978820801	0	0
/	2	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(true,YubicoClient.isValidOTPFormat(otp));	5.73012900352478	0	0
1	3	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	4.732793092727661	1	0
/	4	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(true,YubicoClient.isValidOTPFormat(otp));	4.977819204330444	0	0
/	5	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.getClient(this.clientId,apiKey));	5.51289701461792	0	0
/	7	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	22.418078899383545	1	0
/	10	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.getClient(this.clientId,apiKey));	11.63167691230774	0	0
2	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	5.829140901565552	1	0
2	1	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(false,YubicoClient.isValidOTPFormat(otp));	5.506659984588623	0	0
/	2	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(true,YubicoClient.isValidOTPFormat(otp));	5.074467182159424	0	0
/	4	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.getClient(this.clientId,apiKey));	4.652294874191284	0	0
/	9	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.getClient(clientId,apiKey));	5.047076940536499	0	0
/	10	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,YubicoClient.getClient(clientId,apiKey));	5.938485860824585	0	0
/	11	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>0);	5.388245105743408	0	0
/	12	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotSame(""STR"",otp);"	4.667633295059204	0	0
/	15	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	4.805660009384155	0	0
/	16	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotEquals(""STR"",otp);"	4.687642812728882	0	0
3	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	17.00400686264038	1	0
3	1	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	11.87956190109253	0	0
/	2	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNull(routePrioritizer.getPrioritizedRoutes());	11.981037855148315	0	0
/	3	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.getPrioritizedRoutes().size());	12.083317041397095	0	0
/	4	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	11.791382074356079	0	0
/	5	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	11.595763921737671	0	0
/	8	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(0,routePrioritizer.getPrioritizedRoutes().size());	12.134239912033081	0	0
/	9	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(routePrioritizer,routePrioritizer.getPrioritizedRoutes().size());	64.74274206161499	0	0
/	10	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(0,routePrioritizer.getPrioritizedRoutes().size());	12.221307039260864	0	0
/	11	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(routePrioritizer));	238.6327188014984	0	0
4	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	13.364121198654175	1	0
4	1	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	11.888606071472168	0	0
/	2	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	11.725042819976807	0	0
/	3	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	11.70896601676941	0	0
/	4	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(routePrioritizer));	236.6053330898285	0	0
/	6	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	12.114922761917114	0	0
/	7	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(ProvidedPriorityRoutePrioritizer.class,routePrioritizer.getClass());	11.904813051223755	0	0
/	8	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	25.014041900634766	0	0
/	11	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	556.4071228504181	0	0
/	14	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(0,routePrioritizer.getPrioritizedRoutes().size());	12.400005102157593	0	0
5	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(SVG,a.getSvg());	58.84950304031372	1	0
/	2	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	22.35906195640564	0	0
/	3	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertFalse(a.getSvg().isEmpty());	23.137809991836548	0	0
/	4	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertNotEquals(""STR"",a.getSvg());"	23.482003927230835	0	0
/	5	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().startsWith(""STR""));"	22.70611000061035	0	0
/	6	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	54.886812925338745	0	0
/	8	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().contains(""STR""));"	59.883079051971436	0	0
/	9	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertFalse(a.getSvg().equals(""STR""));"	23.530055046081543	0	0
/	10	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotEquals(null,a.getSvg());	22.715972185134888	0	0
/	11	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().matches(""STR""));"	24.20832896232605	0	0
/	1	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertFalse(opts.opts.containsKey(""STR""));"	55.249356746673584	0	0
/	2	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.args.contains(""STR""));"	22.368216037750244	0	0
/	4	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	22.929380893707275	0	0
/	5	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNotEquals(""STR"",opts.opts.get(""STR""));"	23.70892906188965	0	0
/	6	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.opts.isEmpty());	38.3064329624176	0	0
/	7	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.size()!=0);	23.42668104171753	0	0
/	8	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR""));"	23.019351720809937	0	0
/	9	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotEquals(1,opts.args.size());	53.89612913131714	0	0
/	10	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNull(opts.opts.get(""STR""));"	23.215898036956787	0	0
/	13	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsValue(""STR""));"	22.82853102684021	0	0
8	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	27.337964057922363	1	0
8	1	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(ColorSpace.YUV420J,dst.getColor());	25.442331075668335	0	0
/	2	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(dst.getWidth()==2);	24.312913179397583	0	0
/	4	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotSame(srcPix,dst.getPlaneData(0));	24.980625867843628	0	0
/	5	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(dst.getPlaneHeight(0)==2);	24.860764026641846	0	0
/	7	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertSame(ColorSpace.YUV444J,src.getColor());	27.81019687652588	0	0
/	9	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(0,transform);	25.3039870262146	0	0
/	10	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(dst.getPlaneWidth(0)>0);	24.723459243774414	0	0
/	11	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	51.16294813156128	1	0
/	13	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(0,transform.hashCode());	25.671568155288696	0	0
9	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	9.120857238769531	0	0
/	1	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	88.5559618473053	0	0
9	4	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	6.28679895401001	1	0
/	5	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected,actual);	157.86337804794312	0	0
/	6	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(MBOX);	93.9311580657959	0	0
/	7	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length>0);	6.191290855407715	0	0
/	8	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	18.469555139541626	0	0
10	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	7.888411998748779	0	0
/	1	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&actual.size()==expected.size());	6.61453914642334	0	0
/	3	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	7.041265964508057	0	0
/	4	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertSame(expected,actual);	19.911888122558594	0	0
/	6	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	6.503089904785156	0	0
/	7	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>=expected.size());	6.909787178039551	0	0
/	9	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertSame(expected.size(),actual.size());	6.93034815788269	0	0
/	11	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	7.1036951541900635	0	0
10	22	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(actual);	6.470759153366089	1	0
/	27	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()<=expected.size());	7.091929912567139	0	0
11	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	8.147392988204956	0	0
/	3	//	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(actual.equals(expected));	6.305393218994141	0	0
/	5	//	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	7.374860048294067	0	0
11	6	//	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	6.931489706039429	1	0
/	7	//	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(ID.isEmpty());	214.72301983833313	0	0
/	8	//	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	18.330389976501465	1	0
/	12	//	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(ID);	138.04954600334167	0	0
/	14	//	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(expected.equals(actual));	8.63561224937439	0	0
12	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	12.412091255187988	0	0
12	1	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	11.18051815032959	1	0
/	2	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual);	10.935035943984985	0	0
/	3	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	11.198237895965576	0	0
/	5	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition);	11.087454795837402	0	0
/	6	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expectedArray,actualArray);	12.519524812698364	0	0
/	7	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual);	11.261887311935425	0	0
/	9	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual,delta);	12.692133903503418	0	0
/	10	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	11.2983238697052	0	0
/	14	//	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	11.414100885391235	0	0
14	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	14.592105150222778	1	0
/	2	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(root);	189.09623885154724	0	0
/	10	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(root);	342.4329652786255	0	0
/	2	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	5.7855589389801025	0	0
/	3	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup);"	20.30225110054016	0	0
/	5	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	12.196147918701172	0	0
/	6	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNotNull(markup);	44.555432081222534	0	0
/	25	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",markup);"	13.532222032546997	0	0
/	3	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	13.45142674446106	0	0
/	9	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertFalse(markup.markdown(""STR"").isEmpty());"	5.646085023880005	0	0
/	10	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").startsWith(""STR""));"	6.393611907958984	0	0
/	11	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(EXPECTED,markup.markdown(""STR""));"	5.616660118103027	0	0
/	13	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	12.077537059783936	0	0
/	14	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotSame(EXPECTED,markup.markdown(""STR""));"	5.820780992507935	0	0
/	17	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	12.782688856124878	0	0
/	20	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertTrue(markup.markdown(""STR"").contains(""STR""));"	6.067392110824585	0	0
/	21	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(EXPECTED,markup.markdown(""STR""));"	13.872388124465942	0	0
/	22	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	12.52168083190918	0	0
/	2	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	7.448019027709961	0	0
/	3	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotEquals(""STR"",m.markdown(""STR""));"	5.322744131088257	0	0
/	4	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertFalse(m.markdown(""STR"").isEmpty());"	5.501299142837524	0	0
/	6	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	35.55025315284729	0	0
/	7	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotEquals(""STR"",m.markdown(""STR""));"	5.710783004760742	0	0
/	8	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	11.791240215301514	0	0
/	9	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	16.51470184326172	0	0
/	13	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotSame(m,m.markdown(""STR""));"	20.60192108154297	0	0
/	15	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertFalse(m.markdown(""STR"").isEmpty());"	5.751713752746582	0	0
/	22	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	13.021846055984497	0	0
18	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertTrue(headers.containsKey(""STR""));"	12.457244157791138	0	0
/	1	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertEquals(""STR"",headers.get(""STR"").iterator().next());"	8.18699598312378	0	0
/	2	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertNotNull(headers.get(""STR""));"	7.019415616989136	0	0
/	3	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertFalse(headers.isEmpty());	7.151928901672363	0	0
/	4	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertFalse(headers.containsKey(""STR""));"	7.482048988342285	0	0
/	5	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertEquals(0,headers.size());	7.4939000606536865	0	0
/	6	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertNull(headers.get(""STR""));"	6.829808950424194	0	0
/	7	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotEquals(5,headers.size());	6.627178192138672	0	0
/	8	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertNull(headers.get(""STR""));"	6.876034259796143	0	0
/	9	//	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"assertNotSame(""STR"",headers.get(""STR"").iterator().next());"	7.261190176010132	0	0
19	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	36.56257891654968	0	0
/	1	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(env.containsKey(""STR""));"	11.943346977233887	0	0
/	2	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(env.containsKey(""STR""));"	12.488527774810791	0	0
/	3	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNull(env.get(""STR""));"	11.505372047424316	0	0
/	4	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(env.get(""STR""));"	11.042456865310669	0	0
/	5	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(1,env.size());	10.560282945632935	0	0
/	6	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(0,env.size());	10.688710927963257	0	0
/	10	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(env.containsKey(""STR"")&&env.get(""STR"").equals(""STR""));"	11.667493104934692	0	0
/	11	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotEquals(""STR"",env.get(""STR""));"	11.199418783187866	0	0
/	12	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotSame(""STR"",env.get(""STR""));"	11.21629524230957	0	0
20	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	12.253082990646362	1	0
20	1	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsKey(""STR""));"	12.317295789718628	0	0
/	2	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotNull(convertedEnv);	11.098660707473755	0	0
/	3	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(null,convertedEnv);	10.999502897262573	0	0
/	4	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertFalse(convertedEnv.isEmpty());	11.575239896774292	0	0
/	5	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotSame(env,convertedEnv);	11.162551164627075	0	0
/	6	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertSame(env,convertedEnv);	11.333208084106445	0	0
/	7	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(0,convertedEnv.size());	11.781091213226318	0	0
/	9	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsValue(""STR""));"	11.264035940170288	0	0
/	10	//	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsKey(""STR""));"	11.072746276855469	0	0
21	1	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(filteredEnv.containsKey(""STR""));"	16.0015127658844	0	0
/	2	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedSize,filteredEnv.size());	11.182424068450928	0	0
/	3	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(filteredEnv.containsKey(""STR""));"	11.459481000900269	0	0
/	4	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(filteredEnv.containsKey(""STR""));"	11.298419952392578	0	0
/	5	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(filteredEnv.containsKey(""STR""));"	11.390894174575806	0	0
/	6	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filteredEnv.isEmpty());	11.313106298446655	0	0
/	7	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(result);	11.651525735855103	0	0
/	8	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(expectedSize,filteredEnv.size());	11.246534824371338	0	0
/	10	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotSame(expectedResult,actualResult);	11.49447512626648	0	0
/	11	//	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(filteredEnv.containsValue(""STR""));"	11.138298273086548	0	0
22	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	4.769905090332031	0	0
/	1	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR""));"	4.6681389808654785	0	0
/	2	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	4.274734973907471	0	0
/	3	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNotNull(atts.get(""STR""));"	4.528332948684692	0	0
/	4	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(0,atts.size());	4.691039323806763	0	0
/	5	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(expectedObject,actualObject);	3.4738428592681885	0	0
/	6	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsValue(expectedMethod));	3.647739887237549	0	0
/	7	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(unexpectedObject,actualObject);	4.14474081993103	0	0
/	8	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNull(atts.get(""STR""));"	3.579338788986206	0	0
/	9	//	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(atts.containsKey(""STR""));"	3.4355669021606445	0	0
23	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	3.966156005859375	0	0
/	1	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	???;	4.393114805221558	0	0
/	2	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotEquals(null,processor.getObjectQueryPreparer());	3.545599937438965	0	0
/	3	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertSame(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	3.879758834838867	0	0
/	4	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	"assertTrue(processor.getObjectQueryPreparer()!=null&&processor.getObjectQueryPreparer().getClass().getSimpleName().equals(""STR""));"	4.734494209289551	0	0
/	6	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(ObjectQueryPreparer.class,processor.getObjectQueryPreparer().getClass());	3.7951149940490723	0	0
/	9	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertFalse(processor.getObjectQueryPreparer()==null);	3.780590057373047	0	0
/	10	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	4.132965803146362	0	0
/	11	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(mockObjectQueryPreparer.equals(processor.getObjectQueryPreparer()));	4.234044313430786	0	0
/	12	//	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotSame(mockAttributeInjector,processor.getAttributeInjector());	4.157599925994873	0	0
26	0	DigitalPebble/storm-crawler	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	33.95478892326355	0	0
/	3	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertNotNull(fields);	35.959163188934326	0	0
/	4	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNotEquals(""STR"",fields.get(""STR""));"	15.845452070236206	0	0
/	6	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	37.25099420547485	0	0
/	7	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertFalse(fields.isEmpty());	38.94284701347351	0	0
/	10	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertFalse(fields.containsKey(""STR""));"	50.44925594329834	0	0
/	13	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertTrue(fields.size()>0);	16.38607120513916	0	0
/	16	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertFalse(fields.containsValue(""STR""));"	17.229196786880493	0	0
/	18	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertNotNull(fields);	17.529022932052612	0	0
/	23	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNotSame(config,fields.get(""STR""));"	54.395232915878296	0	0
27	0	DigitalPebble/storm-crawler	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	16.568583011627197	0	0
28	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	10.517467021942139	1	0
/	4	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	7.181725978851318	0	0
/	5	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotEquals(0L,iterator);	20.730059146881104	0	0
/	7	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertSame(iterator,iterator);	34.464674949645996	0	0
/	12	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	73.95514798164368	0	0
/	20	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	12.687119007110596	0	0
/	2	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.containsAll(Arrays.asList(1,2,3)));	6.570774078369141	0	0
/	3	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.stream().allMatch(Arrays.asList(1,2,3)::contains));	6.5943732261657715	0	0
/	7	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.containsAll(Arrays.asList(1,2,3))&&expected.size()==3);	9.950495958328247	0	0
/	8	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected.size(),3);	6.460050106048584	0	0
/	9	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.contains(1)&&expected.contains(2)&&expected.contains(3));	8.207521200180054	0	0
/	12	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotEquals(0,expected.size());	8.039515018463135	0	0
/	13	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(3,expected.size());	8.27358102798462	0	0
/	14	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertFalse(expected.isEmpty());	6.426891803741455	0	0
/	15	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.size()>0);	6.167614221572876	0	0
/	18	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotNull(expected);	5.3350441455841064	0	0
30	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	8.74362587928772	1	0
30	1	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	9.559177160263062	0	0
/	3	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	8.3990478515625	0	0
/	4	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertTrue(!result.isEmpty());	8.011826992034912	0	0
/	5	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	7.726294994354248	0	0
/	6	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertEquals(result,result);	24.91018319129944	0	0
/	8	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertFalse(result.equals(""STR""));"	8.673814058303833	0	0
/	9	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertTrue(result.length()<=8);	8.123548984527588	0	0
/	10	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	7.882918119430542	0	0
/	13	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR"")||result.contains(""STR""));"	7.808712005615234	0	0
31	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",String.join(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens)));"	91.67239713668823	0	0
/	1	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertNotEquals(""STR"",String.join(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens)));"	30.198747873306274	0	0
/	2	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.length()>0);	27.40663170814514	0	0
/	3	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	27.882209062576294	0	0
/	4	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	27.233631134033203	0	0
/	5	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(11,tokens.size());	355.3323538303375	0	0
/	7	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotSame(0,tokens.size());	27.838889122009277	0	0
/	9	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(11,tokens.toList().size());	56.62951111793518	0	0
/	11	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(0,tokens.size());	27.850394010543823	0	0
/	12	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.length()>5);	28.304244995117188	0	0
32	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(contains(filtered,""STR""));"	29.614717960357666	1	0
/	2	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	13.205491065979004	0	0
/	3	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	10.779145002365112	0	0
/	4	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotEquals(0,filtered.size());	11.588894844055176	0	0
/	5	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(excludes,filtered);	57.94749116897583	0	0
/	6	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(test->test.getName().equals(""STR"")));"	195.09851908683777	0	0
/	9	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.contains(null));	11.966458082199097	0	0
/	13	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(test->test.getName().equals(""STR"")));"	12.0483717918396	0	0
/	14	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(includes,filtered);	11.638546228408813	0	0
/	17	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	23.120775938034058	0	0
/	23	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.size()>0);	11.497272968292236	0	0
33	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	14.261411905288696	1	0
33	1	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	12.413872957229614	0	0
/	2	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	10.486623048782349	0	0
/	3	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	10.806188821792603	0	0
/	4	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	"assertNotEquals(""STR"",matcher.group());"	9.965007305145264	0	0
/	5	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(matcher.group());	9.555637836456299	0	0
/	6	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.hitEnd());	11.096341133117676	0	0
/	7	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(pattern,matcher.pattern());	9.312751054763794	0	0
/	8	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	10.013580083847046	0	0
/	9	//	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	"assertNotSame(""STR"",matcher.group());"	11.756059169769287	0	0
34	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	15.238055229187012	1	0
34	1	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	12.743024826049805	0	0
/	2	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	11.619685888290405	0	0
/	3	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	11.366415023803711	0	0
/	4	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	11.031347274780273	0	0
/	5	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	10.725905895233154	0	0
/	6	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	10.494150876998901	0	0
/	8	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.contains(null));	10.683829069137573	0	0
/	12	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertTrue(formas.stream().allMatch(forma->forma.getToken().startsWith(""STR"")));"	10.717509746551514	0	0
/	13	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(formas,formas.size());	39.05039191246033	0	0
35	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D).replaceAll(""STR"",""STR"").trim());"	50.627792835235596	0	0
/	1	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	12.149885892868042	0	0
/	2	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertNotNull(moneyToStrEURRUS.convert(V_300D));	12.263556241989136	0	0
/	4	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertFalse(moneyToStrEURRUS.convert(V_300D).isEmpty());	11.326314926147461	0	0
/	5	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrEURRUS.convert(V_300D));"	15.049818754196167	0	0
/	6	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertTrue(moneyToStrEURRUS.convert(V_300D).contains(""STR""));"	11.835547924041748	0	0
/	8	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	12.48104214668274	0	0
/	9	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertTrue(moneyToStrEURRUS.convert(V_300D).startsWith(""STR""));"	12.90591812133789	0	0
/	10	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertNotNull()`,asitdoesnotprovideameaningfulcomparison.

However,hereisanothercompletelydifferentassertstatement:
```java
assertNull(moneyToStrEURRUS.convert(null));"	11.363243579864502	0	0
/	13	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertTrue(!moneyToStrEURRUS.convert(V_300D).isEmpty());	11.468035221099854	0	0
36	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	10.757280111312866	1	0
36	1	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().startsWith(""STR""));"	8.364693880081177	0	0
/	2	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotNull(defaultExtension);	7.175109148025513	0	0
/	5	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.acceptProvidedExtensionAsServer(""STR""));"	8.101933002471924	0	0
/	6	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(0,defaultExtension.getProvidedExtensionAsClient().length());	7.338579893112183	0	0
/	7	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotSame(defaultExtension,defaultExtension.copyInstance());	7.475101947784424	0	0
/	10	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertTrue(defaultExtension.equals(defaultExtension));	8.184162616729736	0	0
/	11	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotEquals(""STR"",""STR"");"	155.73861503601074	0	0
/	12	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(true,true);	19.989008903503418	0	0
/	13	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(false);	8.802414894104004	0	0
/	1	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertTrue(srcDir.exists());	16.887154817581177	0	0
/	3	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNotNull(configDirectory);	38.524380922317505	0	0
/	17	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNotNull(configDirectory);	150.49999117851257	0	0
/	18	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertTrue(targetDir.isDirectory());	5.691490173339844	0	0
