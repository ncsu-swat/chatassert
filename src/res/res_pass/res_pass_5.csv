TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	1	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertNotNull(config);	8.524688005447388	0	1	0	0	0
1	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	11.212955951690674	1	0	0	0	0
	1	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.size()>0);	12.768403053283691	0	1	0	0	0
	2	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	9.383105993270874	0	1	0	0	0
	8	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	9.622599124908447	0	1	0	0	0
	9	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(0,result.size());	10.102782964706421	0	1	0	0	0
	11	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertSame(data.get(1),result.get(1));	10.054059982299805	0	1	0	0	0
	12	/	ProcessorConfigTest	order	assertEquals(2,result.size());	"assertArrayEquals(""t4""},result.stream().map(TestNamed::getName).toArray());"	10.752714157104492	0	1	0	0	0
	13	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data,result);	10.821935653686523	0	1	0	0	0
	14	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.contains(data.get(0)));	10.490578174591064	0	1	0	0	0
	18	/	ProcessorConfigTest	order	assertEquals(2,result.size());	"assertEquals(2,result.stream().filter(r->r.getName().startsWith(""t"")).count());"	11.159265995025635	0	1	0	0	0
0	0	PeterisP/morphology	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	9.664367198944092	1	0	0	0	0
	1	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotNull(sentences);	11.85327696800232	0	1	0	0	0
	2	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(!sentences.isEmpty());	9.499645233154297	0	1	0	0	0
	3	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertSame(LinkedList.class,sentences.getClass());	9.260443925857544	0	1	0	0	0
	4	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotEquals(null,sentences);	9.302287817001343	0	1	0	0	0
	5	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	"assertArrayEquals(newLinkedList[]{sentences},newLinkedList[]{Splitting.tokenizeSentences(locītājs,""Sertificētiirvisiproduktadzīvesciklaposmi–sākotnosaimniecībaslīdzveikalaplauktam.»"")});"	13.31380295753479	0	1	0	0	0
	6	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	9.029797077178955	0	1	0	0	0
	7	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotSame(null,sentences);	9.657469987869263	0	1	0	0	0
	9	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNull(null);	8.73197603225708	0	1	0	0	0
	10	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotNull(sentences);	11.356805801391602	0	1	0	0	0
1	1	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertTrue(tokens.size()>0);	14.449400663375854	0	1	0	0	0
	2	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotNull(tokens);	8.49370527267456	0	1	0	0	0
	3	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertFalse(tokens.isEmpty());	9.138046026229858	0	1	0	0	0
	4	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotEquals(0,tokens.size());	9.555216073989868	0	1	0	0	0
	5	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertSame(tokens.getClass(),LinkedList.class);	10.011963844299316	0	1	0	0	0
	7	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotSame(null,tokens);	8.976714849472046	0	1	0	0	0
	9	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotEquals(null,tokens);	8.963693857192993	0	1	0	0	0
	12	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertNotEquals(newWord(""test""),tokens.getFirst());"	10.22723913192749	0	1	0	0	0
	13	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertEquals(tokens.toString(),Splitting.tokenize(locītājs,""1995.gads"",false).toString());"	29.094746828079224	0	1	0	0	0
	17	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertFalse(tokens.isEmpty());	8.826191186904907	0	1	0	0	0
0	3	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertSame(""STR"",""STR"");"	13.167661905288696	0	0	1	0	0
	6	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertArrayEquals(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"");"	13.785068035125732	0	0	1	0	0
	9	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	assertThrows(Exception.class,() -> { // Code that should throw an exception });	12.718210220336914	0	0	1	0	0
	13	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotEquals(""STR"",""STR"");"	11.90412712097168	0	0	1	0	0
	15	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	assertTimeout(Duration.ofMillis(100),() -> { // Code that should not exceed 100 milliseconds });	12.941066980361938	0	0	1	0	0
	20	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotSame(""STR"",""STR"");"	11.855666160583496	0	0	1	0	0
	27	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	assertTimeoutPreemptively(Duration.ofMillis(100),() -> { // Code that should not exceed 100 milliseconds });	13.929564952850342	0	0	1	0	0
1	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	13.669485092163086	0	0	1	0	0
	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.903831958770752	0	0	1	0	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	12.913140058517456	0	0	1	0	0
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes());	13.185689926147461	0	0	1	0	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().size() > 0);	12.929614067077637	0	0	1	0	0
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(new UriResource[] {},routePrioritizer.getPrioritizedRoutes().toArray());	13.025449991226196	0	0	1	0	0
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertThrows(UnsupportedOperationException.class,() -> {);	22.64192485809326	0	0	1	0	0
	10	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(null,routePrioritizer.getPrioritizedRoutes());	12.716578006744385	0	0	1	0	0
	11	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	12.746579885482788	0	0	1	0	0
	12	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes());	12.728915214538574	0	0	1	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertFalse(Arrays.equals(a.getCells(),b.getCells()));	9.088638067245483	0	1	0	0	0
	1	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a.toString(),b.toString());	9.93263292312622	0	1	0	0	0
	2	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(!a.equals(b));	8.13645076751709	0	1	0	0	0
	3	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	8.005106925964355	0	1	0	0	0
	4	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotNull(a);	7.8637189865112305	0	1	0	0	0
	5	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertArrayEquals(getSolution(),a.getCells());	8.635086297988892	0	1	0	0	0
	6	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals(Arrays.toString(getSolution()),Arrays.toString(a.getCells()));	8.580450057983398	0	1	0	0	0
	7	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(Arrays.hashCode(a.getCells()),Arrays.hashCode(b.getCells()));	20.570073127746582	0	1	0	0	0
	8	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getCells(),b.getCells());	27.08840298652649	0	1	0	0	0
	9	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(!Arrays.equals(a.getCells(),b.getCells()));	9.542517900466919	0	1	0	0	0
