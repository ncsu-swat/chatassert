TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	9.655607223510742	0	0
/	1	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(expected.equals(actual));	9.524119853973389	0	0
0	2	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	9.010832071304321	1	0
/	4	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	105.55027318000793	0	0
/	5	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(activityDefinition.getType().equals(expected));	8.86378026008606	0	0
/	6	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(activityDefinition.getType().isEmpty());	9.188041925430298	0	0
/	12	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	9.21854281425476	0	0
/	15	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	114.00868821144104	0	0
/	17	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	105.3658013343811	0	0
/	24	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	"assertTrue(activityDefinition.getType().contains(""STR""));"	8.944127082824707	0	0
/	3	//	VerbsTest	testVoided	assertNotNull(actual);	"assertTrue(actual.getId().endsWith(""STR""));"	26.974697828292847	0	0
/	6	//	VerbsTest	testVoided	assertNotNull(actual);	"assertTrue(actual.getId().contains(""STR""));"	8.839793920516968	0	0
/	7	//	VerbsTest	testVoided	assertNotNull(actual);	"assertNotSame(""STR"",actual.getId());"	45.78573799133301	0	0
/	8	//	VerbsTest	testVoided	assertNotNull(actual);	assertFalse(actual.getId().isEmpty());	8.603341817855835	0	0
/	9	//	VerbsTest	testVoided	assertNotNull(actual);	"assertFalse(""STR"".equals(actual.getId()));"	33.223777055740356	0	0
/	12	//	VerbsTest	testVoided	assertNotNull(actual);	"assertTrue(actual.getId().endsWith(""STR""));"	23.97536587715149	0	0
/	13	//	VerbsTest	testVoided	assertNotNull(actual);	"assertNotSame(""STR"",actual.getId());"	8.820805072784424	0	0
/	14	//	VerbsTest	testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual.getDisplay().toString());"	25.896290063858032	0	0
/	15	//	VerbsTest	testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual.getId());"	26.37674617767334	0	0
/	17	//	VerbsTest	testVoided	assertNotNull(actual);	"assertFalse(""STR"".equals(actual.getId()));"	32.12589693069458	0	0
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	8.64844274520874	0	0
2	1	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(actual);	9.7478928565979	1	0
/	3	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual!=null);	10.54446005821228	0	0
/	4	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	28.462409257888794	0	0
/	5	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	255.92142486572266	0	0
/	7	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(actual.isEmpty());	9.359025001525879	0	0
/	8	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	25.655245065689087	0	0
/	9	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	254.38073778152466	0	0
/	21	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	9.989274263381958	0	0
/	22	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	253.54872822761536	0	0
3	0	orientechnologies/orientdb	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	40.76392912864685	1	0
/	2	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	41.32486414909363	0	0
/	3	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(IllegalArgumentException.class,db.getActiveIntent().getClass());	1119.0300250053406	0	0
/	4	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	2025.3375601768494	1	0
/	5	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	76.39650511741638	1	0
/	6	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	73.77175283432007	0	0
/	10	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	3014.1320209503174	1	0
/	13	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(ODatabaseDocumentTx.class,db.getActiveIntent().getClass());	77.11597228050232	0	0
/	16	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(ODatabaseDocumentTx.class,db.getActiveIntent().getClass());	41.68299698829651	0	0
/	17	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertFalse(db.getActiveIntent()==null);	41.37037801742554	0	0
4	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	38.03889298439026	1	0
4	1	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>0);	38.68948411941528	0	0
/	2	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	74.06960391998291	1	0
/	4	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	38.220887899398804	0	0
/	5	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1,buffer2);	38.10431504249573	0	0
/	6	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(42,storedVar);	112.70811104774475	0	0
/	7	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.position()>0);	38.5804169178009	0	0
/	8	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(var,storedVar&0xFFFF);	642.6974039077759	0	0
/	9	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1.position(),buffer2.position());	38.00207781791687	0	0
/	10	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.remaining()>=0);	38.00568199157715	0	0
5	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(2,qResult.size());	56.96905016899109	1	0
5	1	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	29.59066915512085	0	0
/	2	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	28.940397024154663	0	0
/	3	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.isEmpty());	28.28735899925232	0	0
/	4	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotEquals(0,qResult.size());	28.247948169708252	0	0
/	7	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.contains(null));	28.38979935646057	0	0
/	9	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotSame(0,qResult.size());	28.524567127227783	0	0
/	10	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertEquals(""STR"",qResult.get(0).getProperty(""STR""));"	72.75292921066284	0	0
/	11	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertNotEquals(""STR"",qResult.get(0).getProperty(""STR""));"	29.10190486907959	0	0
/	12	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertTrue(qResult.get(0).containsField(""STR""));"	367.83523297309875	0	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	37.72528791427612	1	0
6	1	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()==1);	38.442002296447754	0	0
/	2	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,keyIndexDefinition.getParamCount());	37.8526611328125	0	0
/	3	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyIndexDefinition.getParamCount());	38.269001960754395	0	0
/	4	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	114.25802278518677	1	0
/	5	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount()!=1);	38.72419190406799	0	0
/	6	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(0,keyIndexDefinition.getParamCount());	38.407472133636475	0	0
/	7	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>0);	38.50950908660889	0	0
/	9	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(1,keyIndexDefinition.getParamCount());	38.58537578582764	0	0
/	10	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>=1);	38.12742018699646	0	0
7	0	orientechnologies/orientdb	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager);	36.90908098220825	0	0
7	4	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	75.85955500602722	1	0
/	5	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	38.0500762462616	0	0
/	6	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	38.3548469543457	0	0
/	7	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	38.509501218795776	0	0
/	9	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	88.62290692329407	0	0
/	10	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.getIdentity().isNew());	75.42615413665771	0	0
/	11	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	728.7889850139618	0	0
/	13	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	666.2183268070221	1	0
/	17	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	37.91024613380432	1	0
/	3	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	102.00824904441833	0	0
/	19	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	252.35248398780823	0	0
9	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	41.03132700920105	1	0
9	1	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertEquals((Object)1L,result.next().getProperty(""STR""));"	76.27643990516663	0	0
/	2	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	40.98812699317932	0	0
/	3	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(db.isClosed());	240.75596594810486	0	0
/	4	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	124.90221500396729	0	0
/	5	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertEquals((Object)2L,result.next().getProperty(""STR""));"	41.28464698791504	0	0
/	6	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertEquals(""STR"",db.getURL());"	126.3089337348938	0	0
/	7	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	41.50411009788513	0	0
/	8	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	82.06799507141113	1	0
/	9	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	82.51704907417297	0	0
10	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	37.83179521560669	1	0
10	1	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	37.62955117225647	0	0
/	2	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	37.83469581604004	0	0
/	3	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	37.94499397277832	0	0
/	8	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	37.4231071472168	0	0
/	12	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	37.67140507698059	0	0
/	14	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	38.30394983291626	0	0
/	18	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	74.79537606239319	1	0
/	19	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	1424.8824708461761	0	0
/	21	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	75.4969220161438	1	0
11	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	77.61326289176941	1	0
11	1	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	26.85224485397339	0	0
/	2	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	405.74770402908325	1	0
/	3	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	406.3284800052643	1	0
/	4	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	410.7108371257782	0	0
/	5	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	406.3603501319885	1	0
/	6	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(DB_NAME.isEmpty());	73.39369702339172	0	0
/	7	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertEquals(""STR"",qResult.next().getProperty(""STR""));"	449.54031586647034	0	0
/	8	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	26.60040807723999	0	0
/	9	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	786.9885523319244	0	0
12	0	jcodec/jcodec	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals((long)11,(long)test.get(24));	39.99448323249817	0	0
/	1	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	360.2908709049225	0	0
/	14	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(null,test.get(24));	20.88230299949646	0	0
/	25	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	358.16589999198914	0	0
