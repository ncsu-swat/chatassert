TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	hazelcast/hazelcast-simulator	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	10.250334024429321	0	1	0	0	0
	1	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertTrue(method.getReturnType().equals(Void.TYPE));	10.747456073760986	0	1	0	0	0
	2	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertEquals(expected,actual)`isalsoaverycommon)`doesn'treturnanyvalueandthereisnoexpectedvaluetocomparewith,wecannotuse`methods!=null&&!methods.isEmpty());	14.575111865997314	0	1	0	0	0
	3	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertFalse(condition));	9.370045185089111	0	1	0	0	0
	4	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	"assertNotEquals(expected,""STR"");"	12.95392394065857	0	1	0	0	0
	5	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertSame(expected,actual));	9.07779574394226	0	1	0	0	0
	6	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertTrue(condition)`isaplausiblecondition));	10.277953863143921	0	1	0	0	0
	7	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertNull(object));	10.28367304801941	0	1	0	0	0
	8	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertNotSame(expected,actual));	10.183274984359741	0	1	0	0	0
	9	/	AnnotationFilterTest	testLocalTeardownFilter	"assertEquals(""STR"",method.getName());"	assertArrayEquals(expected,actual);	9.435825109481812	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotNull(m);	8.76594090461731	0	1	0	0	0
	1	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertTrue(minstanceofBusySpinningMetronome);	11.870710134506226	0	1	0	0	0
	2	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.class,m.getClass());	10.345559120178223	1	0	0	0	0
	3	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.INSTANCE,m);	10.988500118255615	0	1	0	0	0
	4	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertTrue(m.tick()>=0);	10.703273296356201	0	1	0	0	0
	5	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotEquals(null,m);	10.077818155288696	0	1	0	0	0
	6	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	9.834757804870605	0	1	0	0	0
	7	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotSame(BusySpinningMetronome.class,m.getClass());	9.722668170928955	0	1	0	0	0
	8	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertTrue(m.tick()<10);	10.84059190750122	0	1	0	0	0
	9	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertTrue(m!=null);	10.43991208076477	0	1	0	0	0
2	0	hazelcast/hazelcast-simulator	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	9.95314908027649	1	0	0	0	0
	1	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertEquals(""STR"",""STR"");"	13.775913000106812	0	1	0	0	0
	2	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertNotNull(""STR"");"	9.477815866470337	0	1	0	0	0
	3	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertTrue(""STR"");"	13.163094997406006	0	1	0	0	0
	4	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertFalse(""STR"");"	10.759283065795898	0	1	0	0	0
	5	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertNotEquals(""STR"",""STR"");"	8.982783079147339	0	1	0	0	0
	6	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertTrue(""STR"");"	10.292590856552124	0	1	0	0	0
	7	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertEquals(""STR"",""STR"");"	11.336380958557129	0	1	0	0	0
	8	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertNotEquals(""STR"",""STR"");"	8.500509977340698	0	1	0	0	0
	9	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"assertTrue(""STR"");"	8.715001106262207	0	1	0	0	0
3	0	hazelcast/hazelcast-simulator	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	"assertTrue(""STR"");"	10.788537979125977	0	1	0	0	0
	1	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertTrue(workerProcessManager.getProcessWorkers().isEmpty());	11.006647109985352	0	1	0	0	0
	2	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertEquals(expectedValue,actualValue));	10.421251058578491	0	1	0	0	0
	3	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotNull(workerProcessFailureMonitor.getFailureTimes().get(workerProcess));	16.117825031280518	0	1	0	0	0
	4	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	"assertThrows(IllegalArgumentException.class,""STR"");"	11.622903823852539	0	1	0	0	0
	5	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertFalse(workerProcessManager.getWorkerProcessMap().containsKey(worker.getPid())`isanotherplausibleworkerProcessManager.getWorkerProcessMap().containsKey(worker.getPid()));	11.946725130081177	0	1	0	0	0
	6	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotEquals(expectedValue,actualValue));	10.803498029708862	0	1	0	0	0
	7	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertArrayEquals(expectedArray,actualArray));	10.588218927383423	0	1	0	0	0
	8	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotSame(expectedObject,actualObject);	10.317935228347778	0	1	0	0	0
	9	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotEquals(notExpectedValue,actualValue));	10.879335165023804	0	1	0	0	0
4	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals(parent,file.getParentFile().getParentFile());	9.4128098487854	0	1	0	0	0
	1	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	12.084768056869507	0	1	0	0	0
	2	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.isFile());	11.413151025772095	0	1	0	0	0
	3	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	10.275021076202393	1	0	0	0	0
	4	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	"assertTrue(""STR"");"	12.55810809135437	0	1	0	0	0
	5	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	"assertTrue(""STR"");"	11.576131105422974	0	1	0	0	0
	6	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.canRead());	10.184143781661987	0	1	0	0	0
	7	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(null,file);	10.030065059661865	0	1	0	0	0
	8	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.getPath().startsWith(parent.getPath()));	11.903104066848755	0	1	0	0	0
	9	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	"assertEquals(file.getParentFile().getAbsolutePath(),""STR"");"	12.503326177597046	0	1	0	0	0
5	0	hazelcast/hazelcast-simulator	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotNull(uuid);	9.223546981811523	1	0	0	0	0
	1	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotEquals(newUUID(0,0),uuid);	12.827715158462524	0	1	0	0	0
	2	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuidinstanceofUUID);	11.362261056900024	0	1	0	0	0
	3	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotEquals(null,uuid);	9.987498044967651	0	1	0	0	0
	4	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertEquals(expected,actual));	10.161976099014282	0	1	0	0	0
	5	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid.getLeastSignificantBits()!=0||uuid.getMostSignificantBits()!=0));	10.227030992507935	0	1	0	0	0
	6	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertFalse(uuid.toString().isEmpty());	11.064848899841309	0	1	0	0	0
	7	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid.version()==4||uuid.version()==3);	11.190167903900146	0	1	0	0	0
	8	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotSame(newUnsecureUUID(),newUnsecureUUID());	9.761332988739014	0	1	0	0	0
	9	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertSame(uuid,uuid);	11.072782039642334	0	1	0	0	0
0	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertNotNull(anno.getResource());	17.72119116783142	0	1	0	0	0
	1	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	"assertEquals(""STR"",((ImageContent)anno.getResource()).getId());"	18.73671579360962	0	1	0	0	0
	2	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertTrue(anno.getResource()instanceofImageContent);	18.29029607772827	0	1	0	0	0
	3	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertEquals(1500,((ImageContent)anno.getResource()).getWidth());	19.057069778442383	0	1	0	0	0
	4	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertEquals(2000,((ImageContent)anno.getResource()).getHeight());	19.405739068984985	0	1	0	0	0
	5	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertEquals(ImageApiProfile.LEVEL_TWO,((ImageContent)anno.getResource()).getServices().get(0).getProfile());	18.917842388153076	0	1	0	0	0
	6	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	"assertEquals(""STR"",anno.getOn().getId());"	17.868696212768555	0	1	0	0	0
	7	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertEquals(Motivation.PAINTING,anno.getMotivation());	17.327361822128296	0	1	0	0	0
	8	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	assertTrue(img.getServices().get(0)instanceofImageService);	16.964315176010132	0	1	0	0	0
	9	/	SpecExamplesSerializationTest	testImageResource	"assertSerializationEqualsSpec(anno,""STR"");"	"assertEquals(""STR"",((ImageContent)anno.getResource()).getServices().get(0).getId());"	19.989890098571777	0	1	0	0	0
1	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	"assertTrue(""STR"");"	19.01635503768921	0	1	0	0	0
	1	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertNotNull(seq.getLabel().get(0)));	17.63404417037964	0	1	0	0	0
	2	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	"assertEquals(""STR"",seq.getLabel().get(0).getValue());"	18.351534843444824	0	1	0	0	0
	3	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertFalse(seq.getLabel().isEmpty());	18.045669078826904	0	1	0	0	0
	4	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	"assertNotEquals(""STR"",seq.getLabel().get(0).getValue());"	17.746358156204224	0	1	0	0	0
	5	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertSame(seq.getLabel().get(0),label`:Thisseq.getLabel().get(0));	25.103421926498413	0	1	0	0	0
	6	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(seq.getCanvases().isEmpty());	16.23630690574646	0	1	0	0	0
	7	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertNotSame(seq.getLabel(),newPropertyValue());	18.652609825134277	0	1	0	0	0
	8	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	"assertArrayEquals(""STR"",manifest.getWithin().toArray()));"	19.52670383453369	0	1	0	0	0
	9	/	SpecExamplesSerializationTest	testGenericService	"assertSerializationEqualsSpec(service,""STR"");"	assertFalse(manifest.getRenderings().isEmpty()`isanotherplausiblemanifest.getRenderings().isEmpty());	18.97873306274414	0	1	0	0	0
2	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotNull(authService);	16.459939002990723	0	1	0	0	0
	1	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertFalse(authService.getServices().isEmpty()));	16.980276823043823	0	1	0	0	0
	2	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotNull(authService.getServices()`<br>);	18.366701126098633	0	1	0	0	0
	3	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertEquals(expectedSize,authService.getServices().size());	17.743132829666138	0	1	0	0	0
	4	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(authService.getServices().containsAll(expectedServices));	16.935441970825195	0	1	0	0	0
	5	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotEquals(unexpected,authService.getServices()`isaplausibleunexpected);	17.78681516647339	0	1	0	0	0
	6	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(authService.getServices().stream().allMatch(service->service.isActive()));	18.029140949249268	0	1	0	0	0
	7	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertFalse(authService.getServices().isEmpty()`isaplausibleauthService.getServices().isEmpty());	17.636062383651733	0	1	0	0	0
	8	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertSame(expectedService,authService.getServices().get(serviceIndex));	17.007790088653564	0	1	0	0	0
	9	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotSame(unexpectedService,authService.getServices().get(serviceIndex));	17.561351776123047	0	1	0	0	0
0	0	sharneng/gm4java	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(4,sut.getCmdArgs().size());	10.210669755935669	0	1	0	0	0
	1	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertTrue(""STR"");"	11.61786413192749	0	1	0	0	0
	2	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotNull(sut);	8.882873058319092	0	1	0	0	0
	3	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertThrows(IllegalArgumentException.class,()->{);	7.14895486831665	0	1	0	0	0
	4	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(0,sut.getCmdArgs().size());	7.439233064651489	0	1	0	0	0
	5	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertNotSame(""STR"",sut,sut.rotate(90.0,RotationAnnotation.HeightExceedsWidthOnly));"	9.001404047012329	0	1	0	0	0
	6	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertTrue(""STR"");"	7.750274896621704	0	1	0	0	0
	7	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertNotSame(""STR"",null,sut);"	8.297180891036987	0	1	0	0	0
	8	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertFalse(sut.getCmdArgs().isEmpty());	5.832712888717651	0	1	0	0	0
	9	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(RotationAnnotation.HeightExceedsWidthOnly,annotation);	7.917201995849609	0	1	0	0	0
0	0	orientechnologies/orientdb	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	33.084195137023926	1	0	0	0	0
	1	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertEquals(original.size(),trackedSet.returnOriginalState(firedEvents).size());	36.17537784576416	0	1	0	0	0
	2	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	"assertTrue(""STR"");"	32.32528519630432	0	1	0	0	0
	3	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	"assertFalse(""STR"");"	32.45485997200012	0	1	0	0	0
	4	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	"assertTrue(""STR"");"	34.41995620727539	0	1	0	0	0
	5	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertEquals(4,firedEvents.size());	34.5266809463501	0	1	0	0	0
	6	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	"assertTrue(""STR"");"	34.40150308609009	0	1	0	0	0
	7	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertFalse(trackedSet.isEmpty());	33.4639458656311	0	1	0	0	0
	8	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertFalse(original.equals(trackedSet.returnOriginalState(firedEvents)));	36.327462911605835	0	1	0	0	0
	9	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertNotSame(original,trackedSet`isaplausibleoriginal,trackedSet);	36.300992012023926	0	1	0	0	0
1	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	35.200034856796265	1	0	0	0	0
	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	35.89490509033203	0	1	0	0	0
	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getRecord().getDirtyFields());	35.79072093963623	0	1	0	0	0
	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.getRecord().isDirty());	35.61504411697388	0	1	0	0	0
	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(0,doc.getRecord().getVersion().getCounter());	34.63600993156433	0	1	0	0	0
	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.getRecord().isContentChanged());	35.21548008918762	0	1	0	0	0
	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getRecord().getOriginalValue());	33.75567579269409	0	1	0	0	0
	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(ODocument.RECORD_TYPE,doc.getRecord().getRecordType());	33.670543909072876	0	1	0	0	0
	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isNew());	35.13991093635559	0	1	0	0	0
	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc.getRecord());	34.75446701049805	0	1	0	0	0
2	0	orientechnologies/orientdb	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(0,getNewRecords().size());	34.026381969451904	0	1	0	0	0
	1	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(getNewRecords().isEmpty());	35.392417907714844	0	1	0	0	0
	2	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertNull(manager.getImmutableSchemaSnapshot())`,whichchecksthatthe`immutableSchemaSnapshot`fieldofthe`manager`objectisnull.Here'showyoucouldincorporateitintothecode:);	39.9942352771759	0	1	0	0	0
	3	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc.isDirty())`.Thischecksthatthe`isDirty`methodofthe`doc`objectreturnsfalse.Here'showyoucanincorporateitintothecode:);	35.457706928253174	0	1	0	0	0
	4	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc,doc2)`whichchecksthatthe`doc`objectand`doc2`objectarenotthesameobject(i.e.,havedifferentreferenceaddresses)?Here'showyoucanincorporateitintothecode:);	39.91959595680237	0	1	0	0	0
	5	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	"assertNotNull(""STR"");"	39.224311113357544	0	1	0	0	0
	6	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	"assertTrue(""STR"");"	40.74351906776428	0	1	0	0	0
	7	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	"assertFalse(""STR"");"	37.549673080444336	0	1	0	0	0
	8	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	"assertThrows(IllegalArgumentException.class,""STR"");"	44.328046798706055	0	1	0	0	0
	9	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	"assertTrue(""STR"");"	34.709818840026855	0	1	0	0	0
3	0	orientechnologies/orientdb	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSize(newDouble(0)));	33.51740074157715	0	1	0	0	0
	1	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(16,getObjectSize(null));	37.59767198562622	0	1	0	0	0
	2	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(newDouble(0))>=8);	33.87676692008972	0	1	0	0	0
	3	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(-1,getObjectSize(Double.NaN));	33.48038411140442	0	1	0	0	0
	4	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertNotNull(doubleSerializer);	34.29336214065552	0	1	0	0	0
	5	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	"assertTrue(""STR"");"	36.656381368637085	0	1	0	0	0
	6	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(Double.MAX_VALUE)>DOUBLE_SIZE);	35.16113090515137	0	1	0	0	0
	7	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	"assertNotEquals(DOUBLE_SIZE,""STR"");"	35.623374700546265	0	1	0	0	0
	8	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertFalse(getObjectSize(newDouble(-10.0))<0);	33.6906681060791	0	1	0	0	0
	9	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertSame(doubleSerializer,newODoubleSerializer());	34.023940086364746	0	1	0	0	0
4	0	orientechnologies/orientdb	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertEquals(defaultAnalyzer,""STR"");"	16.818993091583252	0	1	0	0	0
	1	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertTrue(""STR"");"	17.63875722885132	0	1	0	0	0
	2	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertNotEquals(defaultAnalyzer,""STR"");"	17.36115598678589	0	1	0	0	0
	3	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertNotNull(""STR"");"	17.29769206047058	0	1	0	0	0
	4	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertNotEquals(""STR"",defaultAnalyzer);"	18.05928921699524	0	1	0	0	0
	5	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertTrue(""STR"");"	17.137041807174683	0	1	0	0	0
	6	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"assertTrue(""STR"");"	16.628873109817505	0	1	0	0	0
	7	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	assertEquals(2,fieldAnalyzers.size());	19.031373023986816	0	1	0	0	0
	8	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	assertSame(defaultAnalyzer,getWrappedAnalyzer(null));	18.048421144485474	0	1	0	0	0
	9	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	"assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	assertFalse(fieldAnalyzers.isEmpty());	17.701330184936523	0	1	0	0	0
5	0	orientechnologies/orientdb	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertTrue(""STR"");"	16.614479064941406	0	1	0	0	0
	1	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertEquals(""STR"",out);"	20.570931911468506	0	1	0	0	0
	2	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	assertFalse(out.isEmpty());	15.058305025100708	0	1	0	0	0
	3	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertTrue(""STR"");"	14.900118827819824	0	1	0	0	0
	4	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertNotEquals(""STR"",out.trim());"	15.574788093566895	0	1	0	0	0
	5	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	assertNotNull(out);	15.054424047470093	0	1	0	0	0
	6	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	assertTrue(out.length()>0);	14.756677865982056	0	1	0	0	0
	7	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	assertNotEquals(null,out);	14.554307222366333	0	1	0	0	0
	8	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertTrue(""STR"");"	14.510761976242065	0	1	0	0	0
	9	/	OETLLogTransformerTest	testPostfix	"assertThat(out).contains(""STR"");"	"assertTrue(""STR"");"	15.500158309936523	0	1	0	0	0
6	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.get(41).intValue());	34.57190299034119	0	1	0	0	0
	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd);	36.82194375991821	0	1	0	0	0
	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotEquals(1,keysToRemove.get(42).intValue());	34.55188012123108	0	1	0	0	0
	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(41));	35.34482717514038	0	1	0	0	0
	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(41));	32.778111934661865	0	1	0	0	0
	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToRemove.size());	36.62220215797424	0	1	0	0	0
	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(41));	35.47208380699158	0	1	0	0	0
	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	34.264113903045654	0	1	0	0	0
	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.containsKey(42)`isaplausibleremovedKeys.containsKey(42));	36.33450198173523	0	1	0	0	0
	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.values().size());	34.16155385971069	0	1	0	0	0
7	0	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(1,manager.getLockCount());	35.735968828201294	0	1	0	0	0
	1	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(lock.isHeldByCurrentThread());	37.568747758865356	0	1	0	0	0
	2	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.tryLock());	34.133405923843384	0	1	0	0	0
	3	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.releaseLock(null));	34.2020161151886	0	1	0	0	0
	4	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(manager.get(null));	33.8955512046814	0	1	0	0	0
	5	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(lock));	36.27630686759949	0	1	0	0	0
	6	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotEquals(-1,lock.getLockCount());	34.12627601623535	0	1	0	0	0
	7	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0,manager.getNumberOfActiveReaderForTesting());	34.101831912994385	0	1	0	0	0
	8	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.isWriteLockedForKey(null));	33.856050968170166	0	1	0	0	0
	9	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(manager.writeLockHolderForKey(null));	34.03246283531189	0	1	0	0	0
8	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(5,qResult.size());	42.520679235458374	0	1	0	0	0
	1	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(qResult.contains(doc));	45.21528601646423	0	1	0	0	0
	2	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertFalse(qResult.isEmpty());	44.65489101409912	0	1	0	0	0
	3	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult);	44.57519793510437	0	1	0	0	0
	4	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(0,qResult.size());	43.77512764930725	0	1	0	0	0
	5	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotSame(qResult,qResult2);	44.286760091781616	0	1	0	0	0
	6	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertArrayEquals(qResult2.toArray(),qResult3.toArray()`isaplausibleqResult2.toArray());	45.507386922836304	0	1	0	0	0
	7	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(qResult.containsAll(qResult2));	44.76278305053711	0	1	0	0	0
	8	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotSame(qResult,qResult4);	42.32335376739502	0	1	0	0	0
	9	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	"assertTrue(""STR"");"	42.23931908607483	0	1	0	0	0
9	0	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(1,res.size());	15.855049848556519	0	1	0	0	0
	1	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertTrue(""STR"");"	15.368465185165405	0	1	0	0	0
	2	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(res);	15.613348960876465	0	1	0	0	0
	3	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(res.isEmpty());	14.751801252365112	0	1	0	0	0
	4	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotEquals(0,res.size());	13.846545219421387	0	1	0	0	0
	5	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertSame(db,proc.getLoader().getDatabaseDocumentTx());	15.517794132232666	0	1	0	0	0
	6	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertTrue(""STR"");"	15.013726949691772	0	1	0	0	0
	7	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertEquals(""STR"",""STR"");"	16.207690000534058	0	1	0	0	0
	8	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(db.isClosed()));	14.462809085845947	0	1	0	0	0
	9	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertEquals(""STR"",AVOIDgeneratingthe1);"	16.431413888931274	0	1	0	0	0
10	0	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(g);	15.942219018936157	0	1	0	0	0
	1	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue()`asfollows:);	18.559211015701294	0	1	0	0	0
	2	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(expected,actual));	16.56756567955017	0	1	0	0	0
	3	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse()`g.isClosed());	16.645367860794067	0	1	0	0	0
	4	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertThrows()`asfollows:);	18.824955224990845	0	1	0	0	0
	6	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotEquals(expected,actual);	16.232034921646118	0	1	0	0	0
	7	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(g.isClosed());	17.80677580833435	0	1	0	0	0
	8	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertSame(expected,actual);	16.62912893295288	0	1	0	0	0
	9	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNull(variable);	16.39368438720703	0	1	0	0	0
	10	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotSame(expected,actual);	16.963958024978638	0	1	0	0	0
11	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	14.048944234848022	0	1	0	0	0
	1	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	16.7521870136261	0	1	0	0	0
	2	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	15.536801099777222	0	1	0	0	0
	3	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertEquals(""STR"",""STR"");"	17.305402040481567	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	14.642695903778076	1	0	0	0	0
	5	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertNull(""STR"");"	14.498905897140503	0	1	0	0	0
	6	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertNotEquals(null,""STR"");"	15.433544158935547	0	1	0	0	0
	7	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertNotEquals(""STR"",""STR"");"	15.656057834625244	0	1	0	0	0
	8	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertTrue(""STR"");"	16.208086013793945	0	1	0	0	0
	9	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	15.39908504486084	0	1	0	0	0
12	0	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(0,res.size());	37.209582805633545	1	0	0	0	0
	1	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(res.isEmpty());	38.36525368690491	0	1	0	0	0
	2	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(res);	37.59894919395447	0	1	0	0	0
	3	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(res.isEmpty());	38.106842041015625	0	1	0	0	0
	4	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotEquals(0,res.size());	36.9180109500885	0	1	0	0	0
	5	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertNull(""STR"");"	37.03437399864197	0	1	0	0	0
	6	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(doc1.getIdentity().isValid());	36.94148874282837	0	1	0	0	0
	7	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(""STR"",""STR"");"	39.27624297142029	0	1	0	0	0
	8	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(doc.getIdentity());	37.26017498970032	0	1	0	0	0
	9	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertNotEquals(null,""STR"");"	37.013558864593506	0	1	0	0	0
13	0	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	33.15492606163025	0	1	0	0	0
	1	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue((Boolean)parent.getValue(ATTRIBUTES.VALIDATION));	35.93304991722107	0	1	0	0	0
	2	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertEquals(""STR"",settings.getValue(OGlobalConfiguration.CLIENT_CONNECTION_STRATEGY));"	35.93341422080994	0	1	0	0	0
	3	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(getValue(iConfig)`isanothervalid){);	43.004820346832275	0	1	0	0	0
	4	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(parent.getValue(OGlobalConfiguration.DB_POOL_MAX)```);	40.372840881347656	0	1	0	0	0
	6	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotEquals(settings.getValue(OGlobalConfiguration.DB_POOL_MAX),parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	35.687299966812134	0	1	0	0	0
	7	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent`isanotherplausibleparent);	36.27924394607544	0	1	0	0	0
	8	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(settings.getAttributes().get(ATTRIBUTES.VALIDATION.toString()).equals(false)`isanotherplausiblesettings.getAttributes().get(ATTRIBUTES.VALIDATION.toString()).equals(false));	35.60065007209778	0	1	0	0	0
	9	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(parent.getValue(ATTRIBUTES.VALIDATION),true);	35.896734952926636	0	1	0	0	0
	10	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNull(settings.getValue(OGlobalConfiguration.DB_POOL_MAX));	34.84155988693237	0	1	0	0	0
14	0	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotNull(execute);	22.052238941192627	0	1	0	0	0
	1	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(2,execute.size());	20.518019676208496	0	1	0	0	0
	2	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	20.30599808692932	0	1	0	0	0
	3	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertFalse(execute.isEmpty());	20.070204973220825	0	1	0	0	0
	4	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertNotEquals(0,""STR"");"	19.77072787284851	0	1	0	0	0
	5	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	20.595879077911377	0	1	0	0	0
	6	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(1,execute.get(0).getPropertyNames().size());	19.939140796661377	0	1	0	0	0
	7	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	21.457709074020386	0	1	0	0	0
	8	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	21.73733878135681	0	1	0	0	0
	9	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	20.160877227783203	0	1	0	0	0
15	0	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(m2,m1);	19.278444051742554	1	0	0	0	0
	1	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(collection.getNumGeometries(),geometryCollection.getNumGeometries());	23.602536916732788	0	1	0	0	0
	2	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue(collection.equalsExact(fromDoc(geometryCollection)));	22.149017095565796	0	1	0	0	0
	3	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertFalse(collection.isEmpty());	22.23505997657776	0	1	0	0	0
	4	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(collection.getGeometryN(0));	20.333075046539307	0	1	0	0	0
	5	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertFalse(collection.isEmpty()`isaplausiblecollection.isEmpty());	20.51598596572876	0	1	0	0	0
	6	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	21.065641164779663	0	1	0	0	0
	7	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	22.225641012191772	0	1	0	0	0
	8	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(collection.getNumGeometries(),geometryCollection.getNumGeometries());	21.987761735916138	0	1	0	0	0
	9	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	19.4893901348114	0	1	0	0	0
16	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	35.55385708808899	0	1	0	0	0
	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE+serializationOffset);	35.56597375869751	0	1	0	0	0
	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,walChanges.binaryValueLength(buffer));	35.48681402206421	0	1	0	0	0
	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(Arrays.equals(data,Arrays.copyOfRange(buffer.array(),serializationOffset,serializationOffset+FIELD_SIZE)));	36.34829020500183	0	1	0	0	0
	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,walChanges.getBinaryValue(buffer,serializationOffset,data));	34.497395753860474	0	1	0	0	0
	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset,newbyte[FIELD_SIZE]));	36.19899392127991	0	1	0	0	0
	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	34.09995484352112	0	1	0	0	0
	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(Arrays.equals(OBJECT_BYTES,data)`whichArrays.equals(OBJECT_BYTES,data));	37.41288113594055	0	1	0	0	0
	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	34.4331169128418	0	1	0	0	0
	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(Arrays.equals(newbyte[FIELD_SIZE],data));	34.47794795036316	0	1	0	0	0
17	0	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	33.31133794784546	0	1	0	0	0
	1	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	35.59561514854431	0	1	0	0	0
	2	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(null));	36.193872928619385	0	1	0	0	0
	3	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(""STR"");"	38.87074828147888	0	1	0	0	0
	4	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(""STR"");"	37.00581979751587	0	1	0	0	0
	5	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(multiKey.hashCode(),multiKey.hashCode());	35.26694107055664	0	1	0	0	0
	6	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(""STR"");"	33.962146043777466	0	1	0	0	0
	7	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(""STR"");"	35.554725885391235	0	1	0	0	0
	8	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newOMultiKey(Collections.emptyList())));	33.14214587211609	0	1	0	0	0
	9	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newObject()));	32.96657586097717	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keystoreStream);	12.873486995697021	0	1	1	0	0
	1	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(!keystore.aliases().hasMoreElements());	20.534183979034424	0	1	1	0	0
	2	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertEquals(KeyStore.getDefaultType(),keystore.getType());	13.376047134399414	0	1	1	0	0
	3	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(keyManagerFactory.getKeyManagers().length>0);	14.399218320846558	0	1	1	0	0
	4	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keystore);	13.012800931930542	0	1	1	0	0
	5	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keyManagerFactory);	13.03945803642273	0	1	1	0	0
	6	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream`);	22.873876094818115	0	1	1	0	0
	7	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream.read()!=-1));	12.787028074264526	0	1	1	0	0
	8	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(""STR"");"	13.014231204986572	0	1	1	0	0
	9	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(keyManagerFactory.getAlgorithm().equals(KeyManagerFactory.getDefaultAlgorithm()));	13.767076015472412	0	1	1	0	0
0	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().stream().allMatch(UserProcessor::isStarted));	10.952805042266846	0	1	0	0	0
	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertEquals(0,userProcessors.size());	13.212890863418579	0	1	0	0	0
	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionManager);	11.126375913619995	0	1	0	0	0
	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(reconnectManager.isStarted());	11.075247287750244	0	1	0	0	0
	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(connectionMonitor.isStarted());	10.406038999557495	0	1	0	0	0
	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertEquals(""STR"",logger.getLastLog());"	10.623931169509888	0	1	0	0	0
	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(taskScanner.isShutdown());	9.440189838409424	0	1	0	0	0
	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().isEmpty());	10.780067920684814	0	1	0	0	0
	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(connectionManager.getConnectionPool().isEmpty());	10.849338054656982	0	1	0	0	0
	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(reconnectManager.isReconnecting());	10.005151271820068	0	1	0	0	0
1	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(2,""STR"");"	14.821698904037476	0	1	0	0	0
	1	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(conn1.isReusable());	17.91407585144043	0	1	0	0	0
	2	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(conn1.isMarkedReusable());	15.1471529006958	0	1	0	0	0
	3	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(cm.get(conn1.getRoute()));	15.33208703994751	0	1	0	0	0
	4	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,""STR"");"	15.940366268157959	0	1	0	0	0
	5	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(conn1.getId(),conn2.getId());	15.63458514213562	0	1	0	0	0
	6	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(pool.contains(conn1));	15.45468807220459	0	1	0	0	0
	7	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(pool.size(),2`isanotherplausiblepool.size());	16.734174966812134	0	1	0	0	0
	8	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(addressParser.getUrl());	15.52936601638794	0	1	0	0	0
	9	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(server.isStarted());	15.060027122497559	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	6.945164918899536	1	0	0	0	0
	1	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull()`:);	9.356082916259766	0	1	0	0	0
	2	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.getProvidedProtocol());	11.32288122177124	0	1	0	0	0
	3	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""STR"",protocol0.getProvidedProtocol());"	8.262345314025879	0	1	0	0	0
	4	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertFalse(protocol0.getProvidedProtocol().isEmpty())`canbeanotherplausibleprotocol0.getProvidedProtocol().isEmpty()));	7.98833703994751	0	1	0	0	0
	5	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""STR"",protocol0.getProvidedProtocol());"	7.056816101074219	0	1	0	0	0
	6	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertSame(""STR"",protocol0.getProvidedProtocol());"	8.09542202949524	0	1	0	0	0
	7	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	9.85261607170105	1	0	0	0	0
	8	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""STR"",protocol1.getProvidedProtocol());"	8.049695253372192	0	1	0	0	0
	9	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(""STR"");"	8.372083902359009	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	8.116171836853027	1	0	0	0	0
	1	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse()`method:);	8.175619125366211	0	1	0	0	0
	2	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals()`tocompareanexpectedvaluewiththeactualvaluereturnedbythefocalmethod`isServerNoContextTakeover()`?);	9.297613143920898	0	1	0	0	0
	5	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension);	7.6729841232299805	0	1	0	0	0
	6	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals()`tocomparetwodifferentobjects.);	7.5676000118255615	0	1	0	0	0
	8	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotSame(deflateExtension,newPerMessageDeflateExtension());	7.893557071685791	0	1	0	0	0
	9	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse(deflateExtension.isClientNoContextTakeover());	8.133878946304321	0	1	0	0	0
	10	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertThrows()`toverifyifaspecificexceptionisthrownbyacodeblock.);	9.28201699256897	0	1	0	0	0
	11	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNull(deflateExtension.getName());	7.424720048904419	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME,new<ClassName>().getName());	8.583262920379639	0	1	0	0	0
	1	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(new<ClassName>().getName().equals(APPVEYOR_NAME));	10.816876888275146	0	1	0	0	0
	2	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotNull(new<ClassName>().getName());	8.88706111907959	0	1	0	0	0
	3	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotEquals(""STR"",new<ClassName>().getName());"	10.125584840774536	0	1	0	0	0
	4	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertFalse(new<ClassName>().getName().isEmpty());	10.421332836151123	0	1	0	0	0
	5	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotEquals(null,new<ClassName>().getName()`isanotherplausiblenull);	10.053174018859863	0	1	0	0	0
	6	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(!new<ClassName>().getName().isEmpty());	9.999505996704102	0	1	0	0	0
	7	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotSame(""STR"",new<ClassName>().getName());"	10.451122999191284	0	1	0	0	0
	8	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME,new<ClassName>().getName().trim());	11.417675018310547	0	1	0	0	0
	9	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertTrue(""STR"");"	10.828510046005249	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(value,attributes.get(attribute));	10.058237075805664	0	1	0	0	0
	1	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(attributes.containsKey(attribute));	10.683414697647095	0	1	0	0	0
	2	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(attributes.get(attribute));	11.061185121536255	0	1	0	0	0
	3	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertNotEquals(""STR"",attributes.get(attribute));"	10.690289974212646	0	1	0	0	0
	4	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(attributes.isEmpty());	10.172220230102539	0	1	0	0	0
	5	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertNull(""STR"");"	10.68487811088562	0	1	0	0	0
	6	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotSame(expectedObj,actualObj));	9.749597787857056	0	1	0	0	0
	7	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertArrayEquals(expectedArray,resultArray);	9.110170125961304	0	1	0	0	0
	8	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(condition);	8.941222906112671	0	1	0	0	0
	9	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotSame(obj1,obj2);	8.927297115325928	0	1	0	0	0
1	0	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertEquals(""STR"",tu.getValue(AttributeNames.i_Person));"	9.110739946365356	0	1	0	0	0
	1	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(tu.contains(AttributeNames.i_Laiks));	10.14558482170105	0	1	0	0	0
	2	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(aizkost);	10.357219934463501	0	1	0	0	0
	3	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotEquals(0,aizkost.size());	62.88331913948059	0	1	0	0	0
	4	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertTrue(""STR"");"	11.862196922302246	0	1	0	0	0
	5	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(tu)));	10.99777889251709	0	1	0	0	0
	6	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(AttributeNames.v_Verb,tu.getValue(AttributeNames.i_PartOfSpeech));	10.543859004974365	0	1	0	0	0
	7	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertTrue(""STR"");"	9.575948715209961	0	1	0	0	0
	8	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs);	9.691526174545288	0	1	0	0	0
	9	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertFalse(""STR"");"	12.817636013031006	0	1	0	0	0
2	0	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	8.99092411994934	0	1	0	0	0
	1	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.wordforms.size()>0);	12.261430025100708	0	1	0	0	0
	2	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	11.838478088378906	0	1	0	0	0
	3	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.wordformsExceeded);	9.638215065002441	0	1	0	0	0
	4	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.isAmbiguous());	10.707550764083862	0	1	0	0	0
	5	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(1,locītājs.wordforms.size());	10.795130014419556	0	1	0	0	0
	6	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	"assertEquals(""STR"",""STR"");"	12.632481098175049	0	1	0	0	0
	7	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.guessVerbs);	10.205376863479614	0	1	0	0	0
	8	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessParticiples);	9.821973085403442	0	1	0	0	0
	9	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locitajs.getWordforms().get(0).getWordType().equals(WordType.VERB));	14.30679726600647	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	14.47616982460022	0	1	0	0	0
	1	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.md.isEmpty());	15.739121913909912	0	1	0	0	0
	2	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(expectedSize,actualSize);	14.896763801574707	0	1	0	0	0
	3	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.md.containsKey(key));	14.738364934921265	0	1	0	0	0
	4	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertArrayEquals(expectedArray,actualArray)`isanotherplausibleexpected,actual);	18.467411041259766	0	1	0	0	0
	5	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(expected,actual);	15.29622197151184	0	1	0	0	0
	6	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertSame(expected,actual);	15.059757232666016	0	1	0	0	0
	9	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(expected,actual);	14.738590002059937	0	1	0	0	0
1	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	9.03507924079895	0	1	0	0	0
	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	10.461826086044312	0	1	0	0	0
	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl,normalizedUrl);	12.647120237350464	0	1	0	0	0
	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	8.88689112663269	0	1	0	0	0
	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	9.81557583808899	0	1	0	0	0
	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testSourceUrl,normalizedUrl);	8.915247917175293	0	1	0	0	0
	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(""STR"");"	12.262975931167603	0	1	0	0	0
	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	10.013317823410034	0	1	0	0	0
	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testSourceUrl,newURL(normalizedUrl));	10.087318181991577	0	1	0	0	0
	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	10.430772066116333	0	1	0	0	0
2	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	10.235944986343384	0	1	0	0	0
	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	11.142383098602295	0	1	0	0	0
	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	10.076112031936646	0	1	0	0	0
	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl,normalizedUrl);	10.62705683708191	0	1	0	0	0
	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	13.204898118972778	0	1	0	0	0
	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	12.631783246994019	0	1	0	0	0
	6	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testSourceUrl,normalizedUrl);	11.743268966674805	0	1	0	0	0
	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	12.254900932312012	0	1	0	0	0
	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(""STR"");"	13.920750856399536	0	1	0	0	0
	9	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(""STR"");"	12.918200731277466	0	1	0	0	0
