TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	5	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(null);	173.20287084579468	0	0
/	26	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertEquals(""STR"",""STR"");"	339.7512950897217	0	0
/	27	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotEquals(""STR"",""STR"");"	10.54291296005249	0	0
2	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(loader);	48.60005569458008	0	0
/	2	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factory.equals(LoaderUriDownloader.createJsonSchemaFactory(loader)));	121.51644229888916	0	0
/	3	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(factory==null);	10.63561224937439	0	0
/	4	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	333.6673240661621	0	0
/	5	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(factory,LoaderUriDownloader.createJsonSchemaFactory(loader));	10.597179889678955	0	0
/	6	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	121.36840867996216	0	0
/	15	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	233.7758948802948	0	0
/	23	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	120.04500603675842	0	0
/	27	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	344.0128700733185	0	0
/	28	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factory!=null);	233.7921597957611	0	0
/	1	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(null,event);	8.021030902862549	0	0
3	2	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	7.893894910812378	1	0
/	6	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	211.54308080673218	1	0
/	14	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	203.65014100074768	1	0
4	0	redraiment/jactiverecord	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	51.52601099014282	1	0
4	1	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString());"	7.845875978469849	0	0
/	4	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	7.822695970535278	0	0
/	5	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	7.542009115219116	0	0
/	6	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotEquals(null,sql.toString());	7.727992057800293	0	0
/	7	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	39.64859318733215	0	0
/	8	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(sql.toString().length()>0);	8.332999229431152	0	0
/	9	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotSame(""STR"",sql.toString());"	7.720909118652344	0	0
/	12	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(!sql.toString().isEmpty());	7.751801013946533	0	0
/	21	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().replaceAll(""STR"",""STR"").contains(""STR""));"	33.23769497871399	0	0
/	22	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString().replaceAll(""STR"",""STR"").toLowerCase());"	9.552600622177124	0	0
5	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	6.709417819976807	0	0
5	2	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	7.1299660205841064	1	0
/	3	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	6.6960670948028564	0	0
/	4	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.contains(""STR""));"	6.9135589599609375	0	0
/	5	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(5,res.size());	7.081965684890747	0	0
/	7	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	22.23267912864685	0	0
/	10	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	29.80474591255188	0	0
/	12	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass!=null);	14.81808614730835	0	0
/	15	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(null,res);	204.31742572784424	0	0
/	16	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	15.41224193572998	1	0
6	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	254.86241602897644	1	0
/	1	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	27.216229915618896	1	0
6	6	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(true,ceļu.isRecognized());	14.10826325416565	0	0
/	7	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotEquals(false,ceļu.isRecognized());	13.588469982147217	0	0
/	10	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu);	13.6302809715271	0	0
/	1	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	9.095808029174805	0	0
/	2	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()!=null);	15.718885898590088	0	0
/	9	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	16.648385047912598	0	0
/	14	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	8.832214832305908	0	0
/	18	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(poller.getObjectQueryPreparer()==null);	9.12992000579834	0	0
/	29	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	412.8259108066559	0	0
/	7	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(notFoundHandler);	996.6795382499695	0	0
9	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	16.87707209587097	1	0
/	2	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK||response.getStatus()==ResponseStatus.REPLAYED_OTP);	8.456330060958862	0	0
/	3	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	8.603839874267578	0	0
/	6	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	301.81528973579407	0	0
/	8	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null);	8.17326283454895	0	0
/	9	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==null);	8.075597047805786	0	0
/	13	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	15.179564714431763	1	0
/	15	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	8.608902931213379	0	0
/	22	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null&&(response.getStatus()==ResponseStatus.OK||response.getStatus()==ResponseStatus.REPLAYED_OTP));	9.122422695159912	0	0
/	24	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	7.88031792640686	0	0
/	1	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<p.getCells().length);	25.56723189353943	0	0
/	2	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	12.042983055114746	0	0
/	3	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotSame(-1,p.getBlankIndex());	11.257904291152954	0	0
/	4	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotNull(p.getBlankIndex());	11.693265199661255	0	0
/	5	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==-1);	11.979483127593994	0	0
/	6	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(null,p.getBlankIndex());	11.794885158538818	0	0
/	7	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotSame(null,p.getBlankIndex());	11.743265628814697	0	0
/	8	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	11.646775007247925	0	0
/	9	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()<0);	11.912853002548218	0	0
/	12	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	33.586456060409546	0	0
12	0	rockagen/commons-lib	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('A',3));"	69.68850088119507	0	0
/	1	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertTrue(CommUtil.repeatChar('Z',0).isEmpty());	10.273544311523438	0	0
/	3	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotNull(CommUtil.repeatChar('C',5));	9.670374155044556	0	0
/	4	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(!""STR"".equals(CommUtil.repeatChar('D',2)));"	30.698216915130615	0	0
/	5	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertFalse(""STR"".equals(CommUtil.repeatChar('E',4)));"	10.715433120727539	0	0
/	6	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('F',3));"	117.2521619796753	0	0
/	8	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotSame(CommUtil.repeatChar('H',2),CommUtil.repeatChar('H',3));	10.506180047988892	0	0
/	9	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertEquals(5,CommUtil.repeatChar('I',5).length());	11.970192193984985	0	0
/	11	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertTrue(CommUtil.repeatChar('J',0).isEmpty());	10.556481122970581	0	0
/	12	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('K',0));"	10.101823091506958	0	0
