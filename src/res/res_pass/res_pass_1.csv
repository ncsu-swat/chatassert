TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	10.826933145523071	0	0
/	1	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	9.322917938232422	0	0
/	2	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	7.327953100204468	0	0
0	13	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	8.02205204963684	1	0
1	0	adlnet/jxapi	VerbsTest	testVoided	assertNotNull(actual);	assertEquals(actual,actual);	54.20639896392822	0	0
1	1	//	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	36.444111824035645	1	0
/	8	//	VerbsTest	testVoided	assertNotNull(actual);	assertEquals(actual,actual);	54.198014974594116	0	0
/	17	//	VerbsTest	testVoided	assertNotNull(actual);	assertSame(actual,actual);	13.891088962554932	0	0
/	19	//	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	38.95619583129883	1	0
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	7.928208112716675	0	0
/	1	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual.equals(expected));	5.930487155914307	0	0
2	2	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(actual);	5.883119106292725	1	0
/	4	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(actual.isEmpty());	6.591742992401123	0	0
/	5	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	6.349003076553345	0	0
/	6	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(actual);	14.410741090774536	1	0
/	11	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual.contains(expected));	6.508152961730957	0	0
3	2	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	40.993386030197144	1	0
/	6	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(db,db.getActiveIntent());	589.0306708812714	0	0
/	7	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	858.9615702629089	0	0
/	8	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(null,db.getActiveIntent());	38.31787300109863	0	0
/	10	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertFalse(db.getActiveIntent()==null);	38.70654606819153	0	0
/	14	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	39.222845792770386	0	0
/	15	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	116.21005296707153	1	0
/	16	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(db,db.getActiveIntent());	129.0638289451599	0	0
/	22	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(db,db.getActiveIntent());	127.53260397911072	0	0
4	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	36.99037289619446	1	0
4	1	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(-1,storedVar);	35.39205622673035	0	0
/	2	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>=0);	33.51386904716492	0	0
/	3	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	35.676494121551514	0	0
/	4	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(10,buffer1.position());	73.90988421440125	0	0
/	6	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer1,buffer2);	34.89375615119934	0	0
/	7	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.remaining()>=0&&buffer2.remaining()>=0);	37.61582684516907	0	0
/	8	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(buffer1.isDirect()||buffer2.isDirect());	34.15585374832153	0	0
/	9	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer1.array(),buffer2.array());	35.174256324768066	0	0
/	11	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.capacity()>=buffer2.capacity());	33.914907693862915	0	0
5	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(2,qResult.size());	48.033950090408325	1	0
5	1	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.isEmpty());	44.56585097312927	0	0
/	3	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	20.89599895477295	0	0
/	4	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotEquals(0,qResult.size());	21.228089094161987	0	0
/	5	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>=2);	21.394039154052734	0	0
/	6	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertSame(qResult,qResult);	76.47349882125854	0	0
/	8	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	451.32496213912964	0	0
/	9	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	23.12317419052124	0	0
/	17	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()<=10);	22.749815940856934	0	0
/	18	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotSame(DB_STORAGE,qResult);	61.68377375602722	0	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	36.46039295196533	1	0
6	1	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,keyIndexDefinition.getParamCount());	34.4798538684845	0	0
/	2	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>=0);	37.71565389633179	0	0
/	3	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount()<0);	35.68365216255188	0	0
/	4	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(0,keyIndexDefinition.getParamCount());	35.520634174346924	0	0
/	5	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>0);	35.0341579914093	0	0
/	7	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyIndexDefinition.getFields());	35.30871796607971	0	0
/	8	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getFields().isEmpty());	34.31395506858826	0	0
/	14	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getFields().contains(null));	37.20134210586548	0	0
/	15	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(0,keyIndexDefinition.getFields().size());	70.96703100204468	0	0
7	1	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	36.48583698272705	1	0
/	2	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	35.578901052474976	0	0
/	3	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	39.26844811439514	0	0
/	4	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	33.5894501209259	0	0
/	5	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	36.34300899505615	0	0
/	6	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(!manager.getNewRecords().isEmpty());	34.47210907936096	0	0
/	7	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(0,manager.getNewRecords().size());	36.265620946884155	0	0
/	9	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(null));	41.94901990890503	0	0
/	13	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(2,manager.getNewRecords().size());	35.11984205245972	0	0
/	14	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().containsAll(Collections.singleton(doc)));	37.5959370136261	0	0
/	2	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(ODatabaseDocument.class);	134.09473705291748	0	0
9	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	38.76002907752991	1	0
9	1	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	41.34469389915466	0	0
/	2	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	79.16579389572144	0	0
/	3	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	154.7915518283844	1	0
/	5	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	1342.6165108680725	0	0
/	6	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.stream().findFirst().isPresent());	40.66060018539429	0	0
/	18	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(1L,result.stream().count());	153.20313811302185	0	0
/	19	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertTrue(result.stream().anyMatch(r->r.getProperty(""STR"").equals(1L)&&r.getProperty(""STR"").equals(2L)));"	39.940443992614746	0	0
/	20	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertFalse(result.stream().anyMatch(r->r.getProperty(""STR"").equals(2L)&&r.getProperty(""STR"").equals(3L)));"	37.097707986831665	0	0
/	21	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNotEquals(0,result.stream().filter(r->r.getProperty(""STR"").equals(1L)&&r.getProperty(""STR"").equals(2L)).count());"	81.49166202545166	0	0
10	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	37.59611916542053	1	0
10	1	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getSchemaClass());	35.19565296173096	0	0
/	2	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	35.17505979537964	0	0
/	3	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().getClusterId());	34.05325484275818	0	0
/	4	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isNew());	35.496984243392944	0	0
/	5	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	34.28409194946289	0	0
/	21	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	1374.2546203136444	0	0
11	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	25.86775493621826	1	0
11	1	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	21.87365412712097	0	0
/	2	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	43.74024701118469	0	0
/	3	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(DB_STORAGE.isEmpty());	56.64048886299133	0	0
/	4	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(DB_STORAGE.isEmpty());	472.3973376750946	0	0
/	5	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	24.454614877700806	0	0
/	6	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	476.1709940433502	1	0
/	8	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(db);	52.7444589138031	0	0
/	16	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(db);	452.8416938781738	0	0
/	26	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(db);	52.882108211517334	0	0
12	1	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	29.095605850219727	0	0
/	2	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24).intValue());	25.38388466835022	0	0
/	3	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.size()==1);	24.503867864608765	0	0
/	4	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(23));	23.82777500152588	0	0
/	5	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.keys().length==1);	24.00706911087036	0	0
/	6	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(0,test.size());	24.01192283630371	0	0
/	8	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(null,test.get(24));	26.08276915550232	0	0
/	10	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(25));	24.167700052261353	0	0
/	11	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	503.88572883605957	0	0
/	12	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertSame(11,test.get(24));	24.621511936187744	0	0
/	1	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(decoder.isFullyRead());	25.183672189712524	0	0
/	4	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(decoder);	23.59606671333313	0	0
14	1	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(thirdKindAndName,kindAndName);	17.510350227355957	0	0
/	3	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(secondKindAndName));	11.517884969711304	0	0
/	4	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.equals(fifthKindAndName));	10.490164041519165	0	0
/	5	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(fourthKindAndName,kindAndName);	10.815755844116211	0	0
/	6	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertEquals(""STR"",kindAndName.getKind());"	11.318331003189087	0	0
/	7	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(kindAndName);	10.57715892791748	0	0
/	8	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertNotEquals(""STR"",kindAndName.getName());"	22.372292041778564	0	0
/	9	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.getName().isEmpty());	10.417371034622192	0	0
/	10	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(thirdKindAndName,secondKindAndName);	10.759952068328857	0	0
/	11	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertTrue(fourthKindAndName.toString().contains(""STR""));"	10.448662996292114	0	0
/	3	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	34.099995136260986	0	0
/	5	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	19.627726078033447	0	0
/	6	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(configMap.containsKey(""STR""));"	8.546688079833984	0	0
/	7	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(configMap.size()>0);	7.641085863113403	0	0
/	8	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertFalse(configMap.isEmpty());	6.908618211746216	0	0
/	10	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertEquals(1,configMap.size());	9.273428201675415	0	0
/	13	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotEquals(0,configMap.size());	7.867891073226929	0	0
/	17	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",map.get(""STR""));"	7.2576987743377686	0	0
/	20	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotSame(configMap,config.getRawConfig());	23.71666383743286	0	0
/	22	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(configMap.containsKey(""STR"")&&configMap.get(""STR"").containsKey(""STR""));"	7.852039098739624	0	0
/	2	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	12.604804039001465	0	0
/	4	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	10.647714138031006	0	0
/	6	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertTrue(!filtered.isEmpty());	10.987040996551514	0	0
/	7	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.isEmpty());	204.09262895584106	0	0
