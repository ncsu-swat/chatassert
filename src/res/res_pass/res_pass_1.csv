TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	38.24905061721802	0	1	0	0	0
	1	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	18.54958438873291	0	1	0	0	0
	2	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(result,query.execute(list));	37.401705741882324	0	1	0	0	0
	3	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.containsAll(result));	17.216936111450195	0	1	0	0	0
	4	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(0,result.size());	19.116236209869385	0	1	0	0	0
	6	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.size()>0);	18.029495000839233	0	1	0	0	0
	7	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result`isaplausibleresult);	19.05317497253418	0	1	0	0	0
	8	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(list,result`isaplausiblelist,result);	18.251585245132446	0	1	0	0	0
	10	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	68.93061780929565	0	1	0	0	0
	11	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().findAny().isPresent());	58.08859038352966	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	68.85888624191284	1	0	0	0	0
	1	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()>=0);	18.824947118759155	0	1	0	0	0
	2	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	18.77563500404358	0	1	0	0	0
	3	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertFalse(registry.agentCount()>0);	18.16016912460327	0	1	0	0	0
	4	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	38.50390577316284	1	0	0	0	0
	5	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(5,registry.agentCount());	18.587085008621216	0	1	0	0	0
	7	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()<=10);	53.93608260154724	0	1	0	0	0
	8	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(0,registry.agentCount()`isaplausible0);	18.852854013442993	0	1	0	0	0
	9	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	70.26437425613403	1	0	0	0	0
	10	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(3,registry.agentCount());	17.97071146965027	0	1	0	0	0
2	0	hazelcast/hazelcast-simulator	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	19.436532020568848	1	0	0	0	0
	1	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agentCount()>0);	19.396764755249023	0	1	0	0	0
	2	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotNull(registry);	17.16925072669983	0	1	0	0	0
	3	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.agentCount()==0);	18.103570222854614	0	1	0	0	0
	4	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.agentCount()`isaplausible0);	18.58449697494507	0	1	0	0	0
	6	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agentCount()>=0);	18.45939588546753	0	1	0	0	0
	8	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(null,registry);	18.832708835601807	0	1	0	0	0
	9	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	37.89853119850159	1	0	0	0	0
	11	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(registry,newRegistry());	20.38931918144226	0	1	0	0	0
	12	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(!registry.isEmpty()`isaplausible!registry.isEmpty());	18.09017848968506	0	1	0	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.0));"	17.89597511291504	0	1	0	0	0
	1	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertNotEquals(""STR"",moneyToStrPER100.convert(100.0));"	9.3982412815094	0	1	0	0	0
	2	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(moneyToStrPER100.convert(100.0));	9.141895771026611	0	1	0	0	0
	3	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertTrue(!moneyToStrPER100.convert(100.0).isEmpty());	9.515697002410889	0	1	0	0	0
	4	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertFalse(moneyToStrPER100.convert(100.0).isEmpty());	8.792145729064941	0	1	0	0	0
	10	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertNotEquals(""STR"",moneyToStrPER100.convert(100.0));"	10.632256031036377	0	1	0	0	0
	11	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertTrue(moneyToStrPER100.convert(100.0).contains(""STR""));"	10.460351943969727	0	1	0	0	0
	12	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertFalse(moneyToStrPER100.convert(100.0).isEmpty()`isaplausiblemoneyToStrPER100.convert(100.0).isEmpty());	8.790954113006592	0	1	0	0	0
	13	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.0));"	26.655377626419067	0	1	0	0	0
	14	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertNotEquals(""STR"",moneyToStrPER100.convert(100.0));"	8.06926155090332	0	1	0	0	0
0	3	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	48.62458682060242	0	1	0	0	0
	4	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	62.786208152770996	0	1	0	0	0
	5	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	22.121091604232788	0	1	0	0	0
	8	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	22.120240926742554	0	1	0	0	0
	13	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	22.305291175842285	0	1	0	0	0
	19	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(expectedValue,actualValue`tocheckthattheactualvalueisnotequaltotheexpectedvalue.);	23.168145179748535	0	1	0	0	0
	21	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	41.13458490371704	0	1	0	0	0
	22	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	76.39541292190552	1	0	0	0	0
	23	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	90.15669989585876	1	0	0	0	0
	24	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	58.667099475860596	0	1	0	0	0
0	12	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	64.00631093978882	0	1	0	0	0
	14	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	57.988816022872925	0	1	0	0	0
0	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	7.091219663619995	1	0	0	0	0
	1	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	17.17220640182495	1	0	0	0	0
	7	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	20.682117462158203	1	0	0	0	0
	13	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	20.34953260421753	1	0	0	0	0
	27	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	16.31359887123108	1	0	0	0	0
0	0	redraiment/jactiverecord	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	6.008729457855225	0	1	0	0	0
	1	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	26.34454846382141	1	0	0	0	0
	2	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	7.037511110305786	0	1	0	0	0
	3	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString()!=null&&!sql.toString().equals(""STR""));"	9.76257872581482	0	1	0	0	0
	4	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString());"	6.728298187255859	0	1	0	0	0
	5	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	7.868849754333496	0	1	0	0	0
	6	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotSame(""STR"",sql.toString());"	7.6704676151275635	0	1	0	0	0
	7	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().startsWith(""STR""));"	6.907896518707275	0	1	0	0	0
	8	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql);	6.240469932556152	0	1	0	0	0
	9	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	11.824883222579956	0	1	0	0	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	7.145428895950317	0	1	0	0	0
	1	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	8.11719536781311	1	0	0	0	0
	2	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	6.700739860534668	0	1	0	0	0
	3	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	25.381746292114258	0	1	0	0	0
	4	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceofList);	7.37372350692749	0	1	0	0	0
	5	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	14.49262261390686	0	1	0	0	0
	8	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(java.util.Collections.emptyList().equals(res));	15.118330955505371	0	1	0	0	0
	9	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertTrue(res.contains(""Hello"")`isaplausibleres.contains(""Hello""));"	6.981118202209473	0	1	0	0	0
	10	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.contains(""STR""));"	6.911389350891113	0	1	0	0	0
	11	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(expectedSize,res.size()`isaplausibleexpectedSize);	7.475048780441284	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	49.21802639961243	1	0	0	0	0
	2	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu.wordforms);	23.58830428123474	0	1	0	0	0
	5	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	57.246116161346436	1	0	0	0	0
	6	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	68.76488423347473	1	0	0	0	0
	7	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.wordforms.isEmpty());	25.57930874824524	0	1	0	0	0
	10	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.wordforms.size()>0);	51.6280300617218	0	1	0	0	0
	11	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(expectedValue,actualValue`);	36.79887127876282	0	1	0	0	0
	17	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	46.06420946121216	1	0	0	0	0
	23	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.isRecognized());	94.25241923332214	0	0	0	0	1
0	1	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	18.50164008140564	0	1	0	0	0
	2	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	14.82439136505127	0	1	0	0	0
	3	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()instanceofObjectQueryPreparer);	9.627528667449951	0	1	0	0	0
	7	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(expectedValue,actualValue`.);	11.300464630126953	0	1	0	0	0
	9	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()!=null);	9.11853814125061	0	1	0	0	0
	11	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	32.00303292274475	0	1	0	0	0
	14	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	8.992398738861084	0	1	0	0	0
	18	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(poller.getObjectQueryPreparer()==null);	9.454566955566406	0	1	0	0	0
	19	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	22.719515323638916	0	1	0	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	13.794127702713013	1	0	0	0	0
	1	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue()`tocheckifacertainconditionistrue.Here'sanexample:);	10.53436803817749	0	1	0	0	0
	2	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull()`tocheckifavariableorobjectisnotnull.Here'sanexample:);	7.523166179656982	0	1	0	0	0
	3	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse()`tocheckifacertainconditionisfalse.Here'sanexample:);	8.737910032272339	0	1	0	0	0
	4	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals()`tocheckiftwovaluesareequal.Here'sanexample:);	8.265947818756104	0	1	0	0	0
	5	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals()`tocheckiftwovaluesarenotequal.Here'sanexample:);	8.640033960342407	0	1	0	0	0
	6	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertArrayEquals()`tocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	7.428560256958008	0	1	0	0	0
	8	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame()`tocheckiftwoobjectsrefertothesameinstance.Here'sanexample:);	8.875684022903442	0	1	0	0	0
	9	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame()`tocheckiftwoobjectsdonotrefertothesameinstance.Here'sanexample:`expectedObject,actualObject`isaplausible)`tocheckiftwoobjectsdonotrefertothesameinstance.Here'sanexample:`expectedObject,actualObject);	9.718206882476807	0	1	0	0	0
	13	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull()`tocheckifavariableorobjectisnull.Here'sanexample:);	8.973859786987305	0	1	0	0	0
0	1	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	20.47047257423401	0	1	0	0	0
	20	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	18.529917001724243	0	1	0	0	0
	29	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	16.07012414932251	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	32.65622067451477	0	1	0	0	0
	1	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(booleancondition)`.Here'sanexampleofhowitcanbeusedinthiscontext:);	19.70591902732849	0	1	0	0	0
	2	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(expected,actual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	18.83643889427185	0	1	0	0	0
	3	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotNull(Objectobject)`.This){);	19.903245449066162	0	1	0	0	0
	4	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(booleancondition)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	19.85145378112793	0	1	0	0	0
	5	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNull(Objectobject)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	18.50856065750122	0	1	0	0	0
	6	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertArrayEquals(expectedArray,actualArray)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	19.47735047340393	0	1	0	0	0
	7	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotSame(expected,actual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:`expected,p.getBlankIndex());	18.235097646713257	0	1	0	0	0
	10	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertSame(expected,actual)```.Here'sanexampleofhowitcanbeusedinthegivencontext:```expected,p.getBlankIndex());	18.934706449508667	0	1	0	0	0
	13	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(Objectunexpected,Objectactual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:`null,p.getBlankIndex());	17.426183700561523	0	1	0	0	0
0	0	rockagen/commons-lib	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertEquals(ProjectName.Repeated.repeatChar([],''=>'');	47.818283796310425	0	1	0	0	0
	1	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',3));"	29.788618326187134	0	1	0	0	0
	2	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',3));"	18.329400062561035	0	1	0	0	0
	3	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(CommUtil.repeatChar('a',5).contains(""STR""));"	8.69763469696045	0	1	0	0	0
	4	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertFalse(CommUtil.repeatChar('a',5).isEmpty()`isaplausibleCommUtil.repeatChar('a',5).isEmpty());	8.777925729751587	0	1	0	0	0
	5	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertEquals(0,CommUtil.repeatChar('a',0).length()`isaplausible0);	8.814754009246826	0	1	0	0	0
	6	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(CommUtil.repeatChar('a',5)`isaplausible"""",CommUtil.repeatChar('a',5));"	8.946932315826416	0	1	0	0	0
	7	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotNull(CommUtil.repeatChar('a',5)`isaplausibleCommUtil.repeatChar('a',5));	8.480456829071045	0	1	0	0	0
	8	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotSame(CommUtil.repeatChar('a',3)`isaplausible"""",CommUtil.repeatChar('a',3)`isaplausibleCommUtil.repeatChar('a',3)`isaplausible"""",CommUtil.repeatChar('a',3));"	9.64071536064148	0	1	0	0	0
	10	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(CommUtil.repeatChar('a',3).startsWith(""STR""));"	8.876484632492065	0	1	0	0	0
