TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
1	0	adlnet/jxapi	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	11.244473934173584	1	0
1	1	//	VerbsTest	testVoided	assertNotNull(actual);	"assertTrue(actual.getId().contains(""STR""));"	17.73976707458496	0	0
/	2	//	VerbsTest	testVoided	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	9.112615823745728	0	0
/	10	//	VerbsTest	testVoided	assertNotNull(actual);	assertNotSame(Verbs.voided(),actual);	9.199947118759155	0	0
/	26	//	VerbsTest	testVoided	assertNotNull(actual);	"assertTrue(actual.getDisplay().containsKey(""STR""));"	9.861262083053589	0	0
/	29	//	VerbsTest	testVoided	assertNotNull(actual);	"assertNull(actual.getDisplay().get(""STR""));"	9.311737775802612	0	0
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	8.455216884613037	0	0
/	1	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual.contains(expected));	10.165810823440552	0	0
2	2	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(actual);	8.765290021896362	1	0
/	3	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(actual.isEmpty());	9.491701126098633	0	0
/	8	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	28.10080623626709	0	0
/	10	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	9.434189081192017	0	0
/	18	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	32.249067068099976	0	0
/	24	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	8.630175828933716	0	0
3	2	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	38.63673377037048	1	0
/	3	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	43.465481996536255	0	0
/	10	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(expectedIntent,db.getActiveIntent());	10.263749122619629	0	0
/	12	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertFalse(db.getActiveIntent()==null);	40.214661836624146	0	0
/	13	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()!=null);	39.45871686935425	0	0
4	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	40.60256004333496	1	0
4	2	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(var==storedVar);	9.839599847793579	0	0
/	3	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(storedVar);	35.47123694419861	0	0
/	5	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>=0);	41.09621620178223	0	0
/	7	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1,buffer2);	38.07442116737366	0	0
/	8	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.position()!=buffer2.position());	38.73425507545471	0	0
/	10	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.capacity()>0);	42.33292579650879	0	0
/	13	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.capacity()>=10&&buffer2.capacity()>=10);	38.72461700439453	0	0
/	14	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(buffer1.isDirect()||buffer2.isDirect());	39.45281100273132	0	0
/	15	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertSame(buffer1.getClass(),buffer2.getClass());	39.26804971694946	0	0
5	1	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	26.234286069869995	0	0
/	2	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	24.386982917785645	0	0
/	3	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.isEmpty());	24.861170768737793	0	0
/	4	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotEquals(0,qResult.size());	24.74241805076599	0	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	38.62738585472107	1	0
6	1	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>=0);	41.3675172328949	0	0
/	2	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyIndexDefinition);	36.83015275001526	0	0
/	3	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,keyIndexDefinition.getParamCount());	38.93741989135742	0	0
/	4	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount()<0);	36.07480192184448	0	0
/	7	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.isAutomatic());	39.77417016029358	0	0
/	11	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(null,keyIndexDefinition);	40.10921311378479	0	0
/	12	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	"assertTrue(keyIndexDefinition.toString().contains(""STR""));"	41.30283308029175	0	0
/	14	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(keyIndexDefinition,keyIndexDefinition);	40.0076379776001	0	0
/	17	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>0);	11.105117321014404	0	0
7	2	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	9.875116109848022	0	0
/	3	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()>0);	35.744741678237915	0	0
/	4	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	37.07873201370239	0	0
/	6	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	39.31852388381958	0	0
/	7	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(!manager.getNewRecords().isEmpty());	37.896032094955444	0	0
/	8	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(0,manager.getNewRecords().size());	40.57265019416809	0	0
/	13	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().stream().anyMatch(record->record.getClass().equals(ODocument.class)));	40.13631081581116	0	0
/	27	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	"assertTrue(manager.getNewRecords().stream().anyMatch(record->record.getClass().getSimpleName().equals(""STR"")));"	12.435097932815552	0	0
/	29	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords().toArray());	41.50685787200928	0	0
/	2	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNotNull(proc.getContext().getVariable(""STR""));"	17.8407039642334	0	0
/	6	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNull(proc.getContext().getVariable(""STR""));"	58.86038398742676	0	0
/	9	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc.getContext());	28.95278000831604	0	0
/	12	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getContext().getVariables().isEmpty());	21.547120809555054	0	0
/	14	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNull(proc.getContext().getVariable(""STR""));"	37.95082902908325	0	0
/	15	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertFalse(proc.getContext().getVariables().containsKey(""STR""));"	21.183230876922607	0	0
/	20	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc.getContext().getVariables());	60.20463585853577	0	0
9	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	47.62045097351074	0	0
9	2	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	9.597553968429565	1	0
/	3	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNotNull(result)`and`assertTrue(result.hasNext())`,Iwillprovideyouwithadifferentassertstatement:

Considerusing`assertEquals(expectedValue,actualValue)`toverifythecorrectnessofaspecificpropertyvalueintheresultset.

Forexample:

```java
assertEquals(expectedValue,result.next().getProperty(""propertyKey""));"	39.88238716125488	0	0
/	5	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.stream().count()>0);	9.079977989196777	0	0
/	11	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertFalse(result.stream().anyMatch(element->element.getProperty(""STR"").equals(""STR"")));"	11.568212032318115	0	0
/	18	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertTrue(result.stream().anyMatch(element->element.getPropertyNames().contains(""STR"")));"	11.96498727798462	0	0
/	20	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertFalse(result.elementStream().anyMatch(element->element.getProperty(""STR"")==null));"	9.284637928009033	0	0
/	25	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(result.elementStream().anyMatch(element->element.getPropertyNames().isEmpty()));	11.124583721160889	0	0
/	27	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertTrue(result.vertexStream().anyMatch(vertex->vertex.getProperty(""STR"").equals(expectedValue)));"	12.86757516860962	0	0
/	28	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(expectedSize,result.stream().collect(Collectors.toList()).size());	12.665832996368408	0	0
10	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	40.98725700378418	0	0
10	1	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	39.776103019714355	1	0
/	3	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	36.125937938690186	0	0
/	5	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(expectedObject,actualObject);	13.795270919799805	0	0
/	6	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(obj);	9.868795156478882	0	0
11	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	25.02903699874878	1	0
/	2	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	23.69306993484497	0	0
/	3	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	35.11213207244873	1	0
/	4	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	57.40400004386902	0	0
12	1	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	30.731943130493164	0	0
/	2	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.get(24)==11);	28.859631299972534	0	0
/	3	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(1,test.size());	26.892520904541016	0	0
/	4	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(0));	26.49694299697876	0	0
/	5	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(0,test.size());	25.815757989883423	0	0
/	7	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertSame(11,test.get(24));	27.671441078186035	0	0
/	8	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(20,test.get(24));	27.716409921646118	0	0
/	11	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.size()>0);	28.20836091041565	0	0
/	13	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(0,test.keys().length);	27.22210717201233	0	0
/	19	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(0,test.size());	29.55656123161316	0	0
/	5	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(true);	49.58706307411194	0	0
/	10	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(5>3);	28.095462799072266	0	0
14	0	fabric8io/fabric8-maven-plugin	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(kindAndName,secondKindAndName);	15.719696760177612	0	0
/	1	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(secondKindAndName));	14.206166744232178	0	0
/	3	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(thirdKindAndName,fourthKindAndName);	14.031056880950928	0	0
/	4	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(fifthKindAndName,secondKindAndName);	13.497227907180786	0	0
/	5	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(thirdKindAndName.equals(fourthKindAndName));	13.18884801864624	0	0
/	6	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(fifthKindAndName);	13.031714916229248	0	0
/	7	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(thirdKindAndName);	43.4379608631134	0	0
/	8	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(kindAndName,fifthKindAndName);	13.798203945159912	0	0
/	9	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName==fourthKindAndName);	13.143014907836914	0	0
/	10	//	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(fourthKindAndName.hashCode()!=fifthKindAndName.hashCode());	13.952322959899902	0	0
/	2	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	30.225830793380737	0	0
/	6	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	27.357287883758545	0	0
/	7	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertFalse(config.getRawConfig().isEmpty());	18.19847822189331	0	0
/	8	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertEquals(1,config.getRawConfig().size());	10.567882061004639	0	0
/	12	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotEquals(null,config);	10.690295934677124	0	0
/	16	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotSame(null,config);	10.20645809173584	0	0
/	18	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	17.2182400226593	0	0
/	24	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(config.getRawConfig().values().containsAll(map.values()));	29.44421100616455	0	0
/	28	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertFalse(config.getRawConfig().isEmpty());	10.76258373260498	0	0
/	29	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config);	19.796800136566162	0	0
16	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	14.84656810760498	0	0
/	1	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(3,filtered.size());	27.907287120819092	0	0
/	8	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertTrue(!filtered.isEmpty());	29.266550064086914	0	0
/	10	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.contains(null));	13.843760251998901	0	0
/	11	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertNotEquals(Arrays.asList(""STR"",""STR"",""STR""),filtered);"	14.41265082359314	0	0
/	12	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().noneMatch(test->""STR"".equals(test.getName())));"	18.547924995422363	0	0
/	17	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(Collections.disjoint(filtered,Arrays.asList(""STR"",""STR"",""STR"")));"	38.600005865097046	0	0
/	18	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotEquals(4,filtered.stream().map(TestNamed::getName).distinct().count());	26.510560035705566	0	0
/	19	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().noneMatch(test->test.getName().startsWith(""STR"")));"	14.355668067932129	0	0
/	20	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertFalse(filtered.stream().anyMatch(test->test.getName().contains(""STR"")));"	13.893643856048584	0	0
/	1	//	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(is.available()>0);	16.50927209854126	0	0
/	2	//	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(35,0);	45.96668601036072	0	0
/	3	//	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(is.markSupported());	14.175582885742188	0	0
/	4	//	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(is.read()==-1);	13.39030408859253	0	0
/	5	//	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(35,is.read());	26.476174116134644	0	0
/	8	//	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(is.markSupported());	24.16198205947876	0	0
/	9	//	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(is.available()==0);	14.309141874313354	0	0
17	11	//	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(is);	14.342821836471558	1	0
/	2	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertEquals(2,builder.build().getSpec().getInitContainers().size());	11.238224983215332	0	0
/	3	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertNotNull(builder.build().getSpec().getInitContainers().get(0));	10.074805974960327	0	0
/	5	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertFalse(builder.build().getSpec().getInitContainers().isEmpty());	9.80112600326538	0	0
/	6	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertNotEquals(0,builder.build().getSpec().getInitContainers().size());	10.309854984283447	0	0
/	9	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertNull(builder.build().getSpec().getInitContainers().get(0).getResources());	10.436308860778809	0	0
/	13	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertEquals(""STR"",builder.build().getSpec().getInitContainers().get(0).getName());"	27.473389148712158	0	0
/	14	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(builder.build().getSpec().getInitContainers().stream().anyMatch(initContainer->initContainer.getName().equals(""STR"")));"	11.86040186882019	0	0
/	15	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertEquals(0,builder.build().getSpec().getInitContainers().stream().filter(initContainer->initContainer.getPorts().size()>0).count());	20.929672956466675	0	0
/	17	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(builder.build().getSpec().getInitContainers().stream().anyMatch(initContainer->initContainer.getName().equalsIgnoreCase(""STR"")));"	10.890954971313477	0	0
/	19	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertNotNull(builder.build().getSpec().getInitContainers().get(0).getImage());	11.709281921386719	0	0
19	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	15.790148735046387	1	0
19	1	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertTrue(url.startsWith(""STR""));"	16.645442724227905	0	0
/	2	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertNotNull(url);	14.871830940246582	0	0
/	3	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertNotEquals(""STR"",url);"	14.361798286437988	0	0
/	4	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertFalse(url.isEmpty());	14.394919872283936	0	0
/	5	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertTrue(url.endsWith(""STR""));"	14.230581045150757	0	0
/	6	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertNotSame(""STR"",url);"	14.33118486404419	0	0
/	7	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertTrue(url.contains(""STR""));"	14.506201028823853	0	0
/	8	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertFalse(url.isBlank());	14.785547018051147	0	0
/	9	//	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertNotSame(url,""STR"");"	16.14272403717041	0	0
20	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	14.921359062194824	1	0
20	1	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	14.650498867034912	0	0
/	2	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertNull(config.getString(""STR""));"	15.650572061538696	0	0
/	3	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertNotNull(config.getString(""STR""));"	14.82770299911499	0	0
/	4	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	30.51288604736328	0	0
/	5	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertNotEquals(""STR"",config.getString(""STR""));"	14.134673118591309	0	0
/	8	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.getString(""STR"").isEmpty());"	14.636498928070068	0	0
/	9	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertTrue(config.getString(""STR"").contains(""STR""));"	14.453936338424683	0	0
/	11	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	13.966475009918213	1	0
/	12	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.getBoolean(""STR""));"	14.764441013336182	0	0
/	2	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBak.exists());	9.275540828704834	0	0
/	5	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnv.exists()&&serverEnv.isFile());	9.075663805007935	0	0
/	7	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotNull(serverEnv);	9.713818311691284	0	0
/	14	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBak.length()>0);	9.633087873458862	0	0
/	15	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertNotEquals(""STR"",serverEnvBak.getName());"	9.372995853424072	0	0
/	17	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnv.isDirectory());	8.800693988800049	0	0
/	19	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBak.canWrite());	9.63631534576416	0	0
/	20	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBak.isDirectory());	8.996622085571289	0	0
/	21	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertArrayEquals(""STR"".getBytes(),Files.readAllBytes(serverEnvBak.toPath()));"	9.571455955505371	0	0
/	24	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals(2,Files.list(serverDirectory.toPath()).count());	9.811211824417114	0	0
22	0	OpenLiberty/ci.common	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	10.36410117149353	0	0
/	1	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.contains(""STR""));"	9.285393953323364	0	0
/	2	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	11.713313102722168	0	0
/	3	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotEquals(""STR"",fileString);"	10.3103768825531	0	0
/	4	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""fileString.length(),4);"	10.80362606048584	0	0
/	5	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertFalse(fileString.isEmpty());	9.634646892547607	0	0
/	6	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotSame(""STR"",fileString);"	9.590622901916504	0	0
/	8	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.startsWith(""STR""));"	9.097452163696289	0	0
/	12	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	26.03267192840576	0	0
/	15	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotEquals(""STR"",fileString);"	8.89602518081665	0	0
23	0	OpenLiberty/ci.common	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	9.632223844528198	1	0
23	1	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(""STR"",targetFile.getName());"	8.666543245315552	0	0
/	2	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isDirectory());	10.161552906036377	0	0
/	3	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	10.33514404296875	0	0
/	4	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(configFile.length(),targetFile.length());	9.295192956924438	0	0
/	5	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile.getParentFile());	9.048847913742065	0	0
/	6	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.length());	10.58157992362976	0	0
/	7	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	9.782084941864014	0	0
/	9	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotSame(configFile,targetFile);	10.067723989486694	0	0
/	11	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.lastModified()>0);	10.202860832214355	0	0
24	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	9.97949504852295	1	0
24	1	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.NEUTRAL,filter.decide(evt));	7.937415838241577	0	0
/	2	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.DENY);	8.260716676712036	0	0
/	3	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.ACCEPT);	7.876357078552246	0	0
/	4	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	8.166254758834839	0	0
/	5	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotNull(filter.decide(evt));	8.605044841766357	0	0
/	6	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	7.514948129653931	0	0
/	7	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	7.932814121246338	0	0
/	8	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(Arrays.asList(FilterReply.values()).contains(filter.decide(evt)));	7.656451940536499	0	0
/	9	//	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNull(filter.decide(evt));	7.799144268035889	0	0
25	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	25.422880172729492	1	0
25	1	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.startsWith(""STR""));"	18.852680921554565	0	0
/	2	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	18.337266206741333	0	0
/	4	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	18.640465021133423	0	0
/	5	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	19.145169258117676	0	0
/	9	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR"")&&normalizedUrl.contains(""STR"")&&normalizedUrl.contains(""STR""));"	18.822230100631714	0	0
/	10	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(null,normalizedUrl);	19.819716930389404	0	0
/	13	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.endsWith(""STR""));"	19.77027916908264	0	0
/	14	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(testSourceUrl,normalizedUrl);	28.122708320617676	0	0
/	15	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR"")||normalizedUrl.contains(""STR""));"	20.47550892829895	0	0
26	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	21.069390058517456	1	0
/	2	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	20.590526819229126	0	0
/	3	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(null,normalizedUrl);	17.947112798690796	0	0
/	4	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	19.92487335205078	0	0
/	5	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	19.234261989593506	0	0
/	6	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,normalizedUrl);	19.663572072982788	0	0
/	7	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR""));"	18.15521812438965	0	0
/	9	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotSame(testSourceUrl.toString(),normalizedUrl);	19.889860153198242	0	0
/	10	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR""));"	17.789939880371094	0	0
/	11	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertNotEquals(""STR"",normalizedUrl);"	19.960215091705322	0	0
27	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	22.30976390838623	1	0
27	1	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	20.39515519142151	0	0
/	2	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	18.65728187561035	0	0
/	3	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	53.038885831832886	0	0
/	4	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	19.637290954589844	0	0
/	6	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	"assertEquals(""STR"",normalizedUrl);"	37.24115586280823	0	0
/	7	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	"assertNotEquals(""STR"",normalizedUrl);"	19.085700750350952	0	0
/	8	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.startsWith(""STR""));"	18.9965980052948	0	0
/	9	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(null,normalizedUrl);	19.73590588569641	0	0
/	10	//	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertNotSame(urlWithEscapedCharacters,normalizedUrl);	18.930309057235718	0	0
28	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	15.406620025634766	0	0
/	1	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.containsAll(list.subList(0,2)));	13.11232876777649	0	0
/	2	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertTrue(result.stream().allMatch(worker->worker.getTags().containsValue(""STR"")));"	13.969361066818237	0	0
/	3	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	12.032725095748901	0	0
/	4	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	12.615758895874023	0	0
/	5	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(0,result.size());	12.330465078353882	0	0
/	6	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertSame(list.get(0),result.get(0));	12.942147016525269	0	0
/	8	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertTrue(result.stream().anyMatch(worker->worker.getTags().containsKey(""STR"")));"	12.532206773757935	0	0
/	10	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.size());	12.117218017578125	0	0
/	11	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(list.get(1),result.get(2));	12.37250304222107	0	0
29	0	hazelcast/hazelcast-simulator	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	11.792901039123535	1	0
29	1	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	11.068104982376099	0	0
/	2	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	33.2348849773407	0	0
/	3	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	12.48219084739685	0	0
/	4	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	12.24489974975586	0	0
/	5	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(10,registry.getAgents().size());	32.5266010761261	0	0
/	6	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotSame(null,registry);	12.082818031311035	0	0
/	7	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertSame(null,registry);	11.499757051467896	0	0
/	9	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()>0);	12.451978921890259	0	0
/	10	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotSame(0,registry.agentCount());	12.779033899307251	0	0
/	2	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.getAgents().stream().anyMatch(agentInfo->agentInfo.getPrivateAddress().equals(""STR"")&&agentInfo.getPublicAddress().equals(""STR"")));"	22.77620577812195	0	0
/	3	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	11.513869047164917	0	0
/	4	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.getAgents().size());	12.058865785598755	0	0
/	9	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.getAgents().stream().anyMatch(agentData->agentData.getPublicAddress().equals(""STR"")&&agentData.getPrivateAddress().equals(""STR"")));"	13.147475242614746	0	0
/	10	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	11.507957935333252	0	0
/	11	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.getAgents().stream().anyMatch(agentData->agentData.getPublicAddress().equals(""STR"")&&agentData.getPrivateAddress().equals(""STR"")));"	12.043461322784424	0	0
/	17	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	11.360376119613647	0	0
/	20	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.getAgents().stream().anyMatch(agentInfo->agentInfo.getTags().containsKey(""STR"")));"	12.236977100372314	0	0
/	21	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertEquals(2,registry.getAgents().stream().filter(agentInfo->agentInfo.getTags().containsKey(""STR"")).count());"	11.44377613067627	0	0
/	22	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.getAgents().stream().noneMatch(agentInfo->agentInfo.getPublicAddress().isEmpty()));	11.963615894317627	0	0
/	1	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=1);	20.374655961990356	0	0
/	3	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	19.69983696937561	0	0
/	4	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	19.98035192489624	0	0
/	5	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count(poolKey)==0);	18.461107969284058	0	0
/	6	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.count(poolKey));	19.052459955215454	0	0
/	13	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(conn.equals(cm.get(poolKey)));	40.14104413986206	0	0
/	15	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.get(poolKey));	17.820545196533203	0	0
/	18	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.get(poolKey));	27.745934009552002	0	0
/	29	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	???;	30.35124897956848	0	0
34	1	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(expectedResult,result);	9.41525912284851	0	0
/	2	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsKey(key));	6.537845849990845	0	0
/	3	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	5.943193674087524	0	0
/	4	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.isEmpty());	5.623740911483765	0	0
/	5	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotSame(expectedResult,result);	6.753489971160889	0	0
/	6	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertSame(expectedResult,result);	6.432100057601929	0	0
/	7	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(expectedSize,result.size());	6.224644184112549	0	0
/	8	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(expectedValue,actualValue);	5.943835735321045	0	0
/	9	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNull(result.get(key));	5.90188193321228	0	0
/	10	//	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsValue(perKey));	5.849545001983643	0	0
35	0	arnohaase/a-foundation	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	6.502969741821289	1	0
35	1	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(3,graph.getNodes().size());	7.0145087242126465	0	0
/	2	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertTrue(graph.getEdges().contains(edge(""STR"",""STR"")));"	7.001589059829712	0	0
/	3	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotNull(graph);	5.596826791763306	0	0
/	4	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertNotEquals(""STR"",""STR"");"	6.238632917404175	0	0
/	5	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertTrue(graph.getNodes().contains(""STR""));"	5.514509201049805	0	0
/	6	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(2,graph.getEdges().size());	5.839545011520386	0	0
/	7	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.getEdges().isEmpty());	5.919869899749756	0	0
/	8	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertNotSame(""STR"",""STR"");"	6.169408082962036	0	0
/	9	//	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertArrayEquals(expectedArray,actualArray);	6.208550930023193	0	0
36	0	arnohaase/a-foundation	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	7.461402177810669	1	0
36	1	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	6.438830137252808	0	0
/	2	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	5.810979604721069	0	0
/	3	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().contains(null));	6.37781023979187	0	0
/	4	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(5,graph.edges().size());	6.20835018157959	0	0
/	5	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().stream().allMatch(e->e.getFrom()!=null&&e.getTo()!=null));	6.800110101699829	0	0
/	6	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(Collections.emptyList(),graph.edges());	6.094997882843018	0	0
/	7	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(Collections.emptyList(),graph.edges());	6.145182847976685	0	0
/	8	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	"assertTrue(graph.edges().stream().anyMatch(e->e.getFrom().equals(""STR"")));"	6.555762052536011	0	0
/	9	//	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	"assertFalse(graph.edges().stream().anyMatch(e->e.getTo().equals(""STR"")));"	7.953588247299194	0	0
39	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	10.968712091445923	0	0
/	2	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(LoaderUriDownloader.createJsonSchemaFactory(loader),factory);	9.838356971740723	0	0
/	3	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	9.166109085083008	0	0
/	4	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertTrue(factory.toString().contains(""STR""));"	8.917427062988281	0	0
/	8	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	24.158489227294922	0	0
/	9	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	17.641583919525146	0	0
/	12	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNull(factory);	43.88967204093933	0	0
/	18	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	21.22986602783203	0	0
/	23	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	15.857755184173584	0	0
/	28	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.getValidator());	19.312630891799927	0	0
40	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	11.40644884109497	1	0
/	19	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(true);	25.338279008865356	0	0
41	2	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	28.821564197540283	1	0
/	3	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql);	8.484781980514526	0	0
/	4	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	7.740977048873901	0	0
/	5	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotEquals(0,sql.toString().length());	7.962131977081299	0	0
/	8	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotSame(null,sql);	8.457945823669434	0	0
/	10	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertSame(TSqlBuilder.class,sql.getClass());	8.663204908370972	0	0
/	11	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotEquals(null,sql);	8.813224792480469	0	0
/	12	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	8.272209882736206	0	0
/	16	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(!sql.toString().isEmpty());	9.29763913154602	0	0
/	18	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isBlank());	8.994285821914673	0	0
/	19	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotSame(null,sql.toString());	7.481894016265869	0	0
/	2	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	8.768836259841919	0	0
42	3	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	8.195538997650146	1	0
/	5	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	14.518887281417847	0	0
/	8	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	14.373234987258911	1	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	9.152731895446777	0	0
/	10	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	19.291604042053223	0	0
/	13	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.contains(""STR""));"	10.183202743530273	0	0
/	18	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.contains(""STR""));"	9.999172687530518	0	0
/	24	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.stream().anyMatch(s->s.equals(""STR"")));"	10.945579051971436	0	0
43	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	16.70160174369812	1	0
/	16	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	"assertTrue(""STR"".equals(ceļu.getToken()));"	14.74306607246399	0	0
/	21	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu);	12.027836799621582	0	0
/	22	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	"assertNotEquals(""STR"",ceļu.getCorrectWordform());"	23.916605949401855	0	0
44	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	9.571403980255127	0	0
/	1	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	6.760282754898071	0	0
/	2	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	???;	6.767772912979126	0	0
/	3	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	6.905648231506348	0	0
/	4	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNull(poller.getObjectQueryPreparer());	6.3081700801849365	0	0
/	5	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()!=null);	6.252896070480347	0	0
/	6	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(poller.getObjectQueryPreparer()==null);	6.312228202819824	0	0
/	7	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	6.406907081604004	0	0
/	8	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer().equals(mockObjectQueryPreparer));	6.441448926925659	0	0
/	9	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(poller.getObjectQueryPreparer().equals(mockObjectQueryPreparer));	7.01075005531311	0	0
45	0	NanoHttpd/nanohttpd	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),routerNanoHttpd.getNotImplementedHandler());	13.708650827407837	0	0
/	1	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	8.250785827636719	0	0
/	2	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd.getNotFoundHandler());	8.819344758987427	0	0
/	3	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(notFoundHandler.getClass(),routerNanoHttpd.getNotImplementedHandler());	8.169393301010132	0	0
/	4	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	8.079420804977417	0	0
/	5	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notFoundHandler,routerNanoHttpd.getNotImplementedHandler());	7.833189964294434	0	0
/	6	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(router,routerNanoHttpd.getRouter());	8.260548114776611	0	0
/	7	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpdinstanceofRouterNanoHTTPD);	7.611649036407471	0	0
/	8	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNull(routerNanoHttpd.getSomeOtherProperty());	8.490460872650146	0	0
/	9	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(router,routerNanoHttpd.getRouter());	7.924310922622681	0	0
46	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	22.331766605377197	1	0
/	2	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.ERROR);	8.086718082427979	0	0
/	3	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	9.942349195480347	0	0
/	6	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.INVALID_OTP);	7.203568696975708	0	0
/	8	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus());	23.488994121551514	0	0
/	11	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus().equals(ResponseStatus.SUCCESS));	7.126498699188232	0	0
/	17	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.VALID_OTP,response.getStatus());	9.91059136390686	0	0
/	18	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus().equals(ResponseStatus.SUCCESS)||response.getStatus().equals(ResponseStatus.REPLAYED_OTP));	8.060036182403564	0	0
/	20	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.ERROR,response.getStatus());	7.53972601890564	0	0
/	21	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus().isSuccess());	7.833784818649292	0	0
/	6	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",""STR"");"	31.559131145477295	0	0
/	7	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(""<ClassWithGetBuildUrl>.getBuildUrl().endsWith(getProperty(SHIPPABLE_BUILD_ID)));"	12.960114002227783	0	0
/	9	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	16.85019302368164	0	0
/	10	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertFalse(""<ClassWithGetBuildUrl>.getBuildUrl().isEmpty());"	13.7306649684906	0	0
/	11	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotNull(""STR"");"	13.913710832595825	0	0
/	21	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertTrue(5>3);	24.03712511062622	0	0
/	28	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	13.277987957000732	0	0
48	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	20.85250186920166	1	0
/	2	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	10.530289888381958	0	0
/	4	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<9);	11.507195949554443	0	0
/	5	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(4,p.getBlankIndex());	11.764608144760132	0	0
/	6	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=2);	10.247833013534546	0	0
/	7	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==6);	11.70727014541626	0	0
/	9	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	11.265774011611938	0	0
/	10	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotNull(p);	26.0656521320343	0	0
/	12	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>0&&p.getBlankIndex()<9);	11.880933284759521	0	0
/	14	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	11.255728960037231	1	0
49	0	rockagen/commons-lib	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('A',4));"	17.85349202156067	0	0
/	1	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(CommUtil.repeatChar('A',5).contains(""STR""));"	10.02271580696106	0	0
/	4	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertFalse(CommUtil.repeatChar('A',3).isEmpty());	9.48845887184143	0	0
/	6	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotNull(CommUtil.repeatChar('A',4));	9.879485130310059	0	0
/	7	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotSame(CommUtil.repeatChar('A',4),CommUtil.repeatChar('A',5));	9.811248779296875	0	0
/	8	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(CommUtil.repeatChar('A',4).startsWith(""STR""));"	9.566693782806396	0	0
/	9	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotSame(CommUtil.repeatChar('A',4),CommUtil.repeatChar('B',4));	10.078267097473145	0	0
/	10	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertEquals(4,CommUtil.repeatChar('A',4).length());	9.58472490310669	0	0
/	12	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(CommUtil.repeatChar('A',4).contains(""STR""));"	9.671082258224487	0	0
/	13	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertFalse(CommUtil.repeatChar('A',4).isEmpty());	9.576948881149292	0	0
