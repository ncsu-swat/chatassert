TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	8.628824710845947	1	0
/	1	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	19.229124069213867	1	0
/	7	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	20.651204824447632	1	0
/	14	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	18.948354959487915	1	0
/	15	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	152.40882205963135	1	0
/	17	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	154.65029978752136	1	0
/	20	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(handshakedataProtocolExtension);	314.6476306915283	0	0
/	21	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	14.182055950164795	1	0
/	23	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	13.4514639377594	1	0
/	26	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	153.7330391407013	1	0
1	5	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	55.75822901725769	1	0
/	6	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	46.515761852264404	1	0
/	7	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	15.350757122039795	1	0
/	9	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(WebSocketImpl.class,webSocketImpl.getClass());	13.428486108779907	0	0
/	12	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertSame(webSocketImpl,webSocketImpl);	8.700389862060547	0	0
/	13	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotSame(webSocketImpl,null);	7.211869239807129	0	0
/	14	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertFalse(webSocketImpl==null);	8.162758827209473	0	0
/	15	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertTrue(webSocketImpl!=null);	8.559462070465088	0	0
/	17	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketAdapter);	7.409703016281128	0	0
/	29	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(WebSocketImpl.class,webSocketImpl.getClass());	7.694648027420044	0	0
/	1	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(Float.compare(expected,actual)==0);	6.740179061889648	0	0
/	4	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	6.646777153015137	0	0
/	6	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(actual);	6.196320056915283	0	0
/	7	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(actual>0);	6.176922082901001	0	0
3	19	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual,0);	14.677820920944214	1	0
/	22	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(actual>10);	6.319797039031982	0	0
4	0	adlnet/jxapi	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	6.774410963058472	0	0
/	1	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	6.393823862075806	0	0
4	2	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotNull(actual);	6.154693841934204	1	0
/	3	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	11.457779884338379	0	0
/	4	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertFalse(result.isSuccess());	6.73178505897522	0	0
/	5	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	155.82283091545105	0	0
/	6	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	16.269188165664673	0	0
/	7	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	12.121071100234985	0	0
/	28	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	162.73776006698608	0	0
/	29	//	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	159.04160499572754	0	0
5	0	adlnet/jxapi	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	5.34286904335022	0	0
5	1	//	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	5.5392701625823975	1	0
/	2	//	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual!=null);	6.200028896331787	0	0
/	5	//	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	72.24980401992798	0	0
/	7	//	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected.toLowerCase(),actual.toLowerCase());	5.829610824584961	0	0
/	9	//	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	6.550636053085327	0	0
/	10	//	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	11.27812671661377	0	0
/	15	//	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	71.7672266960144	0	0
/	16	//	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	6.1418540477752686	0	0
/	26	//	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	76.28099822998047	0	0
6	0	adlnet/jxapi	StatementTest	testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	5.5234129428863525	0	0
6	1	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	6.65805196762085	1	0
/	2	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	115.13571882247925	1	0
/	4	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	115.01835322380066	1	0
/	5	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	5.950767993927002	0	0
/	6	//	StatementTest	testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",statement.getContext().getLanguage());"	12.230480909347534	0	0
/	7	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(statement.getId());	23.216859102249146	0	0
/	8	//	StatementTest	testGetAuthority	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	5.901723861694336	0	0
/	9	//	StatementTest	testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",statement.getVersion());"	11.460438013076782	0	0
/	10	//	StatementTest	testGetAuthority	assertNotNull(actual);	"assertTrue(statement.getStored().matches(""STR""));"	6.261283874511719	0	0
/	5	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotNull(tokens);	26.685322046279907	0	0
/	6	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotEquals(0,tokens.size());	30.57624101638794	0	0
/	7	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.size()>0);	28.849426984786987	0	0
/	8	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(8,tokens.size());	60.621800899505615	0	0
/	11	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isEmpty());	29.89116382598877	0	0
/	12	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.size()>=1);	30.027806043624878	0	0
/	21	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(!tokens.isEmpty());	26.348259925842285	0	0
/	23	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(8,tokens.size());	28.676534175872803	0	0
/	26	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.contains(null));	263.9241850376129	0	0
/	28	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.iterator().hasNext());	24.41366982460022	0	0
9	0	xmlet/XsdParser	IssuesTest	testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	16.67998504638672	0	0
/	1	//	IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	14.17490291595459	0	0
/	2	//	IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	13.722033977508545	0	0
/	3	//	IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	14.070103168487549	0	0
/	4	//	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	13.112686157226562	0	0
/	5	//	IssuesTest	testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	291.15173602104187	0	0
/	6	//	IssuesTest	testIssue23	assertTrue(true);	assertTrue(!schemas.isEmpty());	13.097142696380615	0	0
/	7	//	IssuesTest	testIssue23	assertTrue(true);	assertNotSame(0,schemas.size());	12.760254859924316	0	0
/	10	//	IssuesTest	testIssue23	assertTrue(true);	assertNull(schemas);	12.875101804733276	0	0
/	13	//	IssuesTest	testIssue23	assertTrue(true);	assertSame(1,schemas.size());	12.851518154144287	0	0
10	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	14.596138954162598	1	0
10	1	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	14.40834093093872	0	0
/	2	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	12.76025915145874	0	0
/	3	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	12.883445024490356	0	0
/	4	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(1,schemas.size());	12.955340147018433	0	0
/	6	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	12.640851974487305	0	0
/	7	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(0,schemas.size());	20.099026203155518	0	0
/	8	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(!schemas.isEmpty());	12.612620115280151	0	0
/	9	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(0,schemas.size());	12.388093948364258	0	0
/	11	//	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(null,schemas);	12.385111093521118	0	0
11	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	10.771538019180298	1	0
11	1	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	7.28161096572876	0	0
/	2	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.toString(),b.toString());	29.35324478149414	0	0
/	3	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	8.105124950408936	0	0
/	4	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.getPuzzle(),b.getPuzzle());	20.970170736312866	0	0
/	6	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	7.410325050354004	0	0
/	7	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(PuzzleState.class,a.getClass());	69.1071388721466	0	0
/	8	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getHistory());	65.29101395606995	0	0
/	11	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	24.091197967529297	0	0
/	12	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.toString().contains(b.toString()));	8.334696054458618	0	0
12	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	70.79022002220154	0	0
/	1	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestContext());	111.84368419647217	0	0
/	2	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	113.16056704521179	0	0
/	9	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestContext());	121.9640429019928	0	0
/	10	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	174.50360083580017	0	0
/	11	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	108.63305902481079	0	0
/	24	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(test);	218.641197681427	0	0
/	29	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	326.5090718269348	0	0
13	0	hazelcast/hazelcast-simulator	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	10.021247148513794	1	0
13	1	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData);	10.809638977050781	0	0
/	2	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertNotNull(registry.getTest(""STR""));"	432.69969296455383	0	0
/	3	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData);	421.04684591293335	0	0
/	4	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestIndex()>=0);	9.26320505142212	0	0
/	5	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(0,testData.getTestIndex());	9.02314305305481	0	0
/	6	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertTrue(registry.getTest(""STR"").equals(testData));"	9.58488917350769	0	0
/	7	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertNotSame(registry.getTest(""STR""),testData);"	9.178545951843262	0	0
/	9	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(registry.getTests().contains(testData));	9.16962194442749	0	0
/	10	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertNotEquals(""STR"",testData.toString());"	162.4237449169159	0	0
14	0	hazelcast/hazelcast-simulator	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	63.49312686920166	0	0
/	22	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	35.996132135391235	0	0
/	24	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(!CloudProviderUtils.isLocal(""STR""));"	8.69177508354187	0	0
/	25	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotEquals(true,CloudProviderUtils.isLocal(""STR""));"	11.072086095809937	0	0
/	26	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotNull(CloudProviderUtils.isLocal(""STR""));"	9.819464921951294	0	0
/	27	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	28.15961980819702	0	0
/	28	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotSame(true,CloudProviderUtils.isLocal(""STR""));"	9.546117305755615	0	0
15	1	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(testObject,""STR"",""STR""));"	111.4320068359375	1	0
/	2	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	38.89231991767883	0	0
/	3	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(testObject,""STR"",""STR""));"	34.83600306510925	1	0
/	4	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	9.486296653747559	0	0
/	6	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	33.03179407119751	0	0
/	7	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(testObject,""STR"",""STR""));"	140.86453199386597	1	0
/	9	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	18.32352304458618	0	0
/	10	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	27.583375930786133	0	0
/	11	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	9.894630193710327	0	0
/	12	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	18.422046184539795	0	0
/	13	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	18.729259967803955	0	0
/	14	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	19.602041959762573	0	0
16	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""STR"",""STR""));"	10.09558916091919	0	0
/	7	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(testObject,""STR"",""STR""));"	24.728830337524414	0	0
16	8	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(testObject,""STR"",""STR""));"	139.05518913269043	1	0
/	9	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	139.02007484436035	0	0
/	12	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	18.490537881851196	0	0
/	14	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	29.374281406402588	0	0
/	20	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(testObject,""STR"",""STR""));"	8.454760074615479	0	0
/	29	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	36.94112682342529	0	0
17	0	hazelcast/hazelcast-simulator	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen<secondLastSeen);	18.758103132247925	0	0
17	1	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	131.15620112419128	1	0
/	2	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(workerProcess1);	8.671362161636353	0	0
/	4	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(workerProcess1,workerProcess2);	9.663836240768433	0	0
/	5	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(workerProcess1.getLastSeen()<=System.currentTimeMillis());	10.359287023544312	0	0
/	6	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(secondLastSeen<=workerProcess2.getLastSeen());	29.662569046020508	0	0
/	7	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(workerAddress1,workerAddress2);	10.706928968429565	0	0
/	8	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(workerAddress1,workerProcess1.getAddress());	10.127433061599731	0	0
/	13	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(workerProcess2);	9.8766610622406	0	0
/	14	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(workerProcess2.getProcess());	106.96844696998596	0	0
/	3	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotNull(simulatorProperties.get(""STR"",""STR""));"	80.64682292938232	0	0
/	4	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertTrue(simulatorProperties.get(""STR"",""STR"").startsWith(""STR""));"	10.38338828086853	0	0
18	6	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	124.06283688545227	1	0
/	7	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	9.811187028884888	0	0
/	8	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertTrue(simulatorProperties.get(""STR"",""STR"").contains(""STR""));"	9.624260187149048	0	0
/	9	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertFalse(simulatorProperties.get(""STR"",""STR"").isEmpty());"	9.842736959457397	0	0
/	14	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertFalse(simulatorProperties.get(""STR"",""STR"").equalsIgnoreCase(""STR""));"	10.05056095123291	0	0
/	18	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotEquals(null,simulatorProperties.get(""STR"",""STR""));"	10.823760986328125	0	0
/	20	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	55.70406198501587	1	0
/	26	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	143.50135397911072	1	0
20	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	47.67093515396118	1	0
20	1	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()<=3);	43.43910598754883	0	0
/	2	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	43.70096015930176	0	0
/	3	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.isEmpty());	43.43584418296814	0	0
/	4	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotEquals(0,qResult.size());	42.15131402015686	0	0
/	5	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertSame(qResult,qResult);	42.37170624732971	0	0
/	6	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	84.20147109031677	1	0
/	7	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()>0);	43.42904019355774	0	0
/	8	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotSame(qResult,null);	45.77316093444824	0	0
/	10	//	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	863.7740361690521	1	0
21	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	90.17303085327148	1	0
21	1	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(qResult.size()>0);	89.90447998046875	0	0
/	2	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	46.14670991897583	0	0
/	3	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	42.91070795059204	0	0
/	4	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	968.2033851146698	0	0
/	5	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size());	43.5922429561615	0	0
/	7	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	42.999671936035156	0	0
/	10	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	975.8829772472382	0	0
/	15	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1863.5205700397491	1	0
/	21	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotSame(0,qResult.size());	43.25401496887207	0	0
22	0	orientechnologies/orientdb	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertNotNull(property);	39.8809449672699	0	0
/	1	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(""STR"",property.getName());"	40.03239703178406	0	0
/	2	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertTrue(property.getType().equals(OType.STRING));	39.815946102142334	0	0
/	3	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertFalse(property.isMandatory());	40.031145095825195	0	0
/	4	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(""STR"",property.getOwnerClass().getName());"	38.257611989974976	0	0
/	5	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertTrue(schema.existsClass(""STR""));"	39.43422794342041	0	0
/	7	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertTrue(classA.existsProperty(""STR""));"	39.539236068725586	0	0
/	8	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertNull(property.getLinkedClass());	40.279520988464355	0	0
/	9	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertFalse(property.isIndexed());	39.251975774765015	0	0
/	10	//	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertEquals(OType.STRING,property.getType());	41.717859983444214	0	0
/	6	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	35.83451008796692	0	0
/	8	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords()!=null);	36.2481050491333	0	0
/	11	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	37.587923765182495	0	0
23	12	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	34.54027318954468	1	0
/	13	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	34.896549224853516	0	0
/	15	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()>0);	35.092772006988525	0	0
/	16	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotSame(0,manager.getNewRecords().size());	37.70246410369873	0	0
/	17	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertSame(1,manager.getNewRecords().size());	127.97328305244446	0	0
/	18	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(null));	35.34772610664368	0	0
/	20	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(!manager.getNewRecords().contains(null));	36.536163091659546	0	0
/	4	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertNotNull(db);	262.7240340709686	0	0
/	5	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertFalse(db.isClosed());	213.42293190956116	0	0
/	21	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertFalse(db.getMetadata().getSchema().existsClass(""STR""));"	22.28278684616089	0	0
/	23	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertTrue(db.getMetadata().getSchema().getClass(""STR"")==null);"	23.073793172836304	0	0
/	1	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertTrue(Arrays.asList(fields).contains(""STR""));"	36.104114055633545	0	0
/	2	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	35.968636989593506	0	0
25	3	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields);	35.359858751297	1	0
/	4	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertFalse(Arrays.asList(fields).isEmpty());	32.99994397163391	0	0
/	5	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotEquals(0,fields.length);	34.93313789367676	0	0
/	6	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertEquals(""STR"",fields[0]);"	33.58243799209595	0	0
/	7	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length>0);	35.07453989982605	0	0
/	8	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotEquals(null,fields);	34.77209281921387	0	0
/	11	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertTrue(fields.length==3&&Arrays.asList(fields).containsAll(Arrays.asList(""STR"",""STR"",""STR"")));"	35.24116110801697	0	0
/	12	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotSame(null,fields);	33.38961911201477	0	0
26	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	71.37594604492188	1	0
/	5	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	379.9215319156647	1	0
/	7	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	175.05524396896362	1	0
/	13	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	210.3219690322876	1	0
/	25	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	207.12457132339478	1	0
/	1	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	151.39280009269714	0	0
/	5	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	18.547885179519653	0	0
27	7	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	17.353611946105957	1	0
/	10	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	240.30168676376343	0	0
/	11	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	162.90806102752686	0	0
/	16	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	161.256413936615	0	0
/	17	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	17.41083598136902	0	0
/	18	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	346.24749517440796	0	0
/	28	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	161.31334280967712	0	0
28	0	orientechnologies/orientdb	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	40.01975893974304	0	0
28	1	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	38.720088958740234	1	0
/	2	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	38.69562911987305	0	0
/	3	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotEquals(5,res.size());	38.471126079559326	0	0
/	4	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(res.contains(doc));	37.14655685424805	0	0
/	5	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	76.37308526039124	0	0
/	7	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	103.95129799842834	1	0
/	8	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	75.40726900100708	0	0
/	9	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	100.18686294555664	0	0
/	10	//	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	152.08409762382507	0	0
29	1	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(expectedLogger,actualLogger);	4.844763994216919	0	0
/	2	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(actualLogger);	3.4493248462677	0	0
/	3	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(condition);	3.063798189163208	0	0
/	4	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(condition);	3.03747296333313	0	0
/	5	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(expectedValue,actualValue);	3.175612211227417	0	0
/	6	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(expectedObject,actualObject);	3.5502820014953613	0	0
/	7	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(expectedObject,actualObject);	3.5710878372192383	0	0
/	11	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertArrayEquals(expectedArray,actualArray);	3.689013957977295	0	0
/	16	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNull(object);	3.49477481842041	0	0
/	26	//	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(expectedValue,actualValue);	3.5665221214294434	0	0
30	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	2.974591016769409	0	0
/	1	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result!=null);	3.6002659797668457	0	0
/	2	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObjectQueryInfo);	3.5334126949310303	0	0
/	3	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(expectedResult,result);	3.3485653400421143	0	0
/	4	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(expectedResult,result);	3.433277130126953	0	0
/	5	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(condition);	3.976191997528076	0	0
/	7	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(condition);	3.6453700065612793	0	0
/	8	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertSame(expectedResult,result);	3.002718925476074	0	0
/	9	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(expectedResult,result);	3.5247209072113037	0	0
/	12	//	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertArrayEquals(expectedArray,resultArray);	3.751636028289795	0	0
/	7	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(com.rockagen.commons.util.CommUtil.toDBC(""STR"").equals(""STR""));"	34.80794882774353	0	0
/	8	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	6.58995509147644	0	0
/	9	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	12.263895034790039	0	0
/	10	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	25.426777124404907	0	0
/	12	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertFalse(com.rockagen.commons.util.CommUtil.toDBC(""STR"").isEmpty());"	6.593848943710327	0	0
/	16	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(""STR"".equals(com.rockagen.commons.util.CommUtil.toDBC(""STR"")));"	6.77927565574646	0	0
/	19	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotSame(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	7.6946282386779785	0	0
/	20	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	8.35715103149414	0	0
/	21	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(com.rockagen.commons.util.CommUtil.toDBC(""STR"").contains(""STR""));"	6.680121183395386	0	0
/	23	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(com.rockagen.commons.util.CommUtil.toDBC(""STR"").startsWith(""STR""));"	6.612070083618164	0	0
32	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	32.54866695404053	1	0
32	1	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	16.022974967956543	0	0
/	2	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(poolKey==null||poolKey.trim().isEmpty());	629.5718779563904	0	0
/	3	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(poolKey);	68.92971110343933	0	0
/	4	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	15.788072109222412	0	0
/	5	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.count(poolKey));	16.008625745773315	0	0
/	6	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0||poolKey==null||poolKey.trim().isEmpty());	326.55313205718994	0	0
/	9	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count(poolKey)<0);	15.300009965896606	0	0
/	13	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0&&poolKey.trim().length()>0);	17.44935703277588	0	0
/	15	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count(poolKey)==0);	17.06066083908081	0	0
34	0	trautonen/coveralls-maven-plugin	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy);	9.38844084739685	0	0
/	1	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(""STR"",proxy.getHost());"	8.627211809158325	0	0
/	2	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertTrue(proxy.getPort()==8080);	8.295640230178833	0	0
/	3	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotEquals(""STR"",proxy.getProtocol());"	8.918886184692383	0	0
/	4	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(proxy.getProtocol(),""STR"");"	58.51005411148071	0	0
/	5	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertTrue(proxy.isActive());	17.248389959335327	0	0
/	6	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotSame(proxy,null);	9.1927490234375	0	0
/	8	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy.getHost());	35.46262216567993	0	0
/	9	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertTrue(proxy.getPort()>=0);	8.996137380599976	0	0
/	14	//	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotSame(proxy.getProtocol(),""STR"");"	9.06606912612915	0	0
/	2	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,targetObject.findNow(0););	785.6857011318207	0	0
/	7	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(35,SeekHeadFactory.estimeteSeekSize(10,16));	419.75666785240173	0	0
/	8	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,SeekHeadFactory.estimeteSeekSize(5,12));	471.86637711524963	0	0
/	9	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(SeekHeadFactory.estimeteSeekSize(3,6)>0);	24.479455947875977	0	0
/	4	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	24.8786678314209	0	0
/	5	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	23.46977400779724	0	0
/	6	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(34,res.length);	49.003833055496216	0	0
/	9	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(ppsList);	260.26200890541077	0	0
/	10	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(2,ppsList.size());	23.661566019058228	0	0
/	11	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(ppsList.isEmpty());	24.249671936035156	0	0
/	12	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,ppsList.size());	24.05125880241394	0	0
/	13	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	42.01861119270325	0	0
/	14	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	26.849951028823853	0	0
/	16	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res!=null);	24.712099075317383	0	0
37	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(profiles.isEmpty());	22.507889986038208	0	0
/	2	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	10.763181209564209	0	0
/	3	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.size()>0);	10.903718948364258	0	0
/	4	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotEquals(0,profiles.size());	11.454007625579834	0	0
/	6	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(!profiles.isEmpty());	10.842303037643433	0	0
/	13	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(profiles.isEmpty());	11.479045152664185	0	0
37	22	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(1,profiles.size());	54.1493239402771	1	0
/	23	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(profiles.isEmpty());	57.42038297653198	0	0
38	2	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	20.296292781829834	1	0
/	4	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	7.296858787536621	0	0
/	10	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	97.6670081615448	1	0
/	14	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	15.625014066696167	1	0
/	18	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	7.627263069152832	0	0
/	20	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	28.645221948623657	0	0
/	28	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	83.95803117752075	0	0
/	29	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNotNull(handler.getInitContainer(builder,""STR""));"	7.48124885559082	0	0
39	0	fabric8io/fabric8-maven-plugin	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	10.879024982452393	1	0
39	1	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag);	11.099238872528076	0	0
/	5	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	335.9337658882141	1	0
/	6	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	13.151352882385254	0	0
/	10	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	10.93613600730896	0	0
/	11	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	11.97688913345337	0	0
