TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(DefaultExtension.class,draft_6455.getExtension().getClass());	42.042505979537964	0	1	0	0	0
	1	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceofDefaultExtension);	13.856713056564331	0	1	0	0	0
	2	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	14.20038914680481	1	0	0	0	0
	3	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(null,draft_6455.getExtension());	13.126232147216797	0	1	0	0	0
	4	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	"assertNotSame(draft_6455.getExtension().getClass().getName(),""STR"");"	49.82884502410889	0	1	0	0	0
	5	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertSame(DefaultExtension.class,draft_6455.getExtension().getClass());	13.246134996414185	0	1	0	0	0
	6	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	"assertFalse(draft_6455.getExtension().getClass().getSimpleName().contains(""OtherExtension"")`isaplausibledraft_6455.getExtension().getClass().getSimpleName().contains(""OtherExtension""));"	13.70520806312561	0	1	0	0	0
	7	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(OtherExtension.class,draft_6455.getExtension().getClass()`isaplausibleOtherExtension.class);	13.610800981521606	0	1	0	0	0
	8	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	"assertEquals(draft_6455.getExtension().getName()`isaplausible""ExtensionName"",draft_6455.getExtension().getName());"	13.894443035125732	0	1	0	0	0
	10	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceoforg.java_websocket.extensions.IExtension);	25.7340030670166	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotNull(webSocketImpl);	12.616052150726318	0	1	0	0	0
	1	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertTrue(webSocketImplinstanceofWebSocketImpl);	13.531844139099121	0	1	0	0	0
	3	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotSame(webSocketAdapter,webSocketServerFactory.createWebSocket(webSocketAdapter,newDraft_6455()));	37.874287843704224	0	1	0	0	0
	4	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertTrue(webSocketImplinstanceofWebSocketImpl);	24.602797031402588	0	1	0	0	0
	5	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotNull(webSocketImpl);	24.982086181640625	0	1	0	0	0
	6	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotEquals(null,webSocketImpl);	13.718055009841919	0	1	0	0	0
	7	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotNull(webSocketImpl);	24.087455987930298	0	1	0	0	0
	8	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertFalse(webSocketImpl.isClosed());	12.880454063415527	0	1	0	0	0
	9	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotEquals(null,webSocketImpl.getRemoteSocketAddress()`isaplausiblenull);	14.001185178756714	0	1	0	0	0
	10	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertEquals(webSocketAdapter,webSocketServerFactory.createWebSocket(webSocketAdapter,newDraft_6455()).getAdapter()`isaplausiblewebSocketAdapter);	14.8887779712677	0	1	0	0	0
0	5	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	43.76670217514038	0	1	0	0	0
	6	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	9.233718872070312	0	1	0	0	0
	7	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").contains(""STR""));"	9.083699941635132	0	1	0	0	0
	8	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").isEmpty());"	9.25362515449524	0	1	0	0	0
	9	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotNull(Seq.join(Arrays.asList(""Hello"",""World""),"","")`isaplausibleSeq.join(Arrays.asList(""Hello"",""World""),"",""));"	9.89304804801941	0	1	0	0	0
	10	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(Seq.join(Arrays.asList(""Hello"",""World""),"","").length()>0`isaplausibleSeq.join(Arrays.asList(""Hello"",""World""),"","").length()>0);"	9.639609098434448	0	1	0	0	0
	11	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(Seq.join(Arrays.asList(""Hello"",""World""),"","").equals(""Hello,World,Java"")`isaplausibleSeq.join(Arrays.asList(""Hello"",""World""),"","").equals(""Hello,World,Java""));"	10.199043035507202	0	1	0	0	0
	14	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(Seq.join(Arrays.asList(""Hello"",""World""),"","")`isaplausible""Hello,World,Java"",Seq.join(Arrays.asList(""Hello"",""World""),"",""));"	10.300124883651733	0	1	0	0	0
	16	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").contains(""STR""));"	10.64653730392456	0	1	0	0	0
	18	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").startsWith(""STR""));"	9.129292964935303	0	1	0	0	0
0	2	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(expected==actual);	12.11587405204773	0	1	0	0	0
	3	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(actual)`.Itchecksiftheactualvalueisnotnull.Here'sthecode:);	11.246085166931152	0	1	0	0	0
	4	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(expected,actual)`?Thisexpected,actual);	10.656280040740967	0	1	0	0	0
	8	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	9.656958103179932	0	1	0	0	0
	9	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(condition)`?Thiscondition);	10.442519903182983	0	1	0	0	0
	10	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(condition)`condition);	9.855299234390259	0	1	0	0	0
	11	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNull(actual)`isaplausibleactual);	9.9722580909729	0	1	0	0	0
	14	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertArrayEquals(expectedArray,actualArray)`?ThisexpectedArray,actualArray);	11.919027328491211	0	1	0	0	0
	15	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual)`?Thiswillcheckiftheexpectedandactualobjectsarenotthesamereference.Here'sthecode:);	9.813392877578735	0	1	0	0	0
	16	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(condition)`,whichchecksifthegivenconditionistrue.Here'sthecode:);	10.61092472076416	0	1	0	0	0
1	0	adlnet/jxapi	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	9.51635217666626	0	1	0	0	0
	1	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertTrue(expected==actual);	9.715939044952393	0	1	0	0	0
	2	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotNull(actual);	10.090959787368774	1	0	0	0	0
	3	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	28.099650621414185	0	1	0	0	0
	4	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	19.808992862701416	0	1	0	0	0
	5	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	22.613792896270752	0	1	0	0	0
	6	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertFalse(expected)`.This){);	63.06762909889221	0	1	0	0	0
	16	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	19.99566411972046	0	1	0	0	0
	27	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	9.158362865447998	0	1	0	0	0
2	0	adlnet/jxapi	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	9.484557867050171	0	1	0	0	0
	1	/	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	10.588212966918945	0	1	0	0	0
	2	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual)`.Thisactual);	11.016008138656616	0	1	0	0	0
	6	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	19.553035974502563	0	1	0	0	0
	7	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	21.301324129104614	0	1	0	0	0
	9	/	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.310433864593506	0	1	0	0	0
	12	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	10.23851227760315	1	0	0	0	0
	16	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	20.25486421585083	0	1	0	0	0
	18	/	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	10.362965106964111	0	1	0	0	0
	23	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	9.865440845489502	0	1	0	0	0
3	0	adlnet/jxapi	StatementTest	testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	10.856766939163208	0	1	0	0	0
	1	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	10.98297119140625	1	0	0	0	0
	2	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority()instanceofActor);	10.383682012557983	0	1	0	0	0
	3	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	69.1075530052185	1	0	0	0	0
	5	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	20.021382093429565	0	1	0	0	0
	8	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority().equals(agent));	9.540893077850342	0	1	0	0	0
	9	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotSame(agent,actual`isaplausibleagent,actual);	10.651952981948853	0	1	0	0	0
	13	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority()==agent);	9.93993592262268	0	1	0	0	0
	14	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	23.497031927108765	1	0	0	0	0
	17	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	10.881901025772095	0	1	0	0	0
0	4	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(OpenKoreanTextProcessor.normalize(""STR""));"	216.04297995567322	0	1	0	0	0
	5	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR"").toString());"	213.31132531166077	0	1	0	0	0
	8	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertTrue(OpenKoreanTextProcessor.normalize(""STR"").length()>0);"	55.79873299598694	0	1	0	0	0
	9	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertTrue(OpenKoreanTextProcessor.normalize(""STR"").length()>0);"	110.34206223487854	0	1	0	0	0
	14	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(OpenKoreanTextProcessor.normalize(""STR""));"	54.90494394302368	0	1	0	0	0
	16	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR""));"	164.64781999588013	0	1	0	0	0
	17	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotSame(""STR"",OpenKoreanTextProcessor.normalize(""STR"").toString());"	56.01964282989502	0	1	0	0	0
1	2	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(!tokens.apply(0).unknown());	246.273334980011	0	1	0	0	0
	5	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isEmpty());	155.30216121673584	0	1	0	0	0
	6	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotNull(tokens);	119.3454840183258	0	1	0	0	0
	8	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(1,tokens.size()`.);	110.20544004440308	0	1	0	0	0
	9	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotEquals(0,tokens.size());	158.98494219779968	0	1	0	0	0
	10	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.size()>0);	167.54301285743713	0	1	0	0	0
	16	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotSame(0,tokens.size());	133.61712002754211	0	1	0	0	0
	19	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",text);"	114.0821418762207	0	1	0	0	0
	20	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertNotNull(tokens);	283.8412239551544	0	1	0	0	0
	21	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(!tokens.isEmpty());	113.45342993736267	0	1	0	0	0
0	1	/	IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	27.21769905090332	0	1	0	0	0
	2	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	15.190361022949219	0	1	0	0	0
	3	/	IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	13.559473037719727	0	1	0	0	0
	4	/	IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty()`isaplausibleschemas.isEmpty());	13.51817011833191	0	1	0	0	0
	5	/	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	14.566458940505981	0	1	0	0	0
	6	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(!schemas.isEmpty()`isaplausible!schemas.isEmpty());	13.939556121826172	0	1	0	0	0
	8	/	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(null,schemas);	14.154450178146362	0	1	0	0	0
	10	/	IssuesTest	testIssue23	assertTrue(true);	assertSame(expected,actual)`?ThisexpectedSchemas,schemas);	14.974669694900513	0	1	0	0	0
	11	/	IssuesTest	testIssue23	assertTrue(true);	assertNotSame(expected,actual)`?ThisexpectedSchemas,schemas`isaplausibleexpected,actual)`?ThisexpectedSchemas,schemas);	14.428322076797485	0	1	0	0	0
	12	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(Arrays.asList(schemas.toArray()).contains(expectedSchema)`isaplausibleArrays.asList(schemas.toArray()).contains(expectedSchema));	14.198472261428833	0	1	0	0	0
1	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	12.504029035568237	1	0	0	0	0
	2	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	13.67432689666748	0	1	0	0	0
	3	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	12.920137882232666	0	1	0	0	0
	4	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	14.175521850585938	0	1	0	0	0
	5	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	14.226012229919434	0	1	0	0	0
	6	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().allMatch(schema->schemainstanceofXsdSchema));	13.523212909698486	0	1	0	0	0
	7	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(XsdSchema.class,schemas.get(0).getClass()`isaplausibleXsdSchema.class);	13.90912413597107	0	1	0	0	0
	8	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.stream().anyMatch(schema->schemainstanceofXsdElement)`isaplausibleschemas.stream().anyMatch(schema->schemainstanceofXsdElement));	14.956331014633179	0	1	0	0	0
	10	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	26.671684741973877	0	1	0	0	0
	17	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser.getResultXsdSchemas());	64.70474290847778	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	13.125043869018555	1	0	0	0	0
	1	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	12.931752920150757	0	1	0	0	0
	4	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	11.929830312728882	0	1	0	0	0
	5	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	13.219055891036987	0	1	0	0	0
	6	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	24.523389101028442	0	1	0	0	0
	10	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(condition)`whichchecksifthegivenconditionisfalse.);	13.996716022491455	0	1	0	0	0
	11	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	26.32247495651245	1	0	0	0	0
	12	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b`isaplausiblea);	12.841458797454834	0	1	0	0	0
	13	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	36.48730707168579	1	0	0	0	0
	16	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	25.249254941940308	1	0	0	0	0
0	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	28.029032945632935	0	1	0	0	0
	1	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()instanceofBaseTest);	16.40519905090332	0	1	0	0	0
	2	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(BaseTest.class,testContainer.getTestInstance().getClass());	394.7677562236786	0	1	0	0	0
	3	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(null,testContainer.getTestInstance());	16.25297713279724	0	1	0	0	0
	4	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance()`isaplausibletest);	16.990398168563843	0	1	0	0	0
	5	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestInstance()==null);	16.522412061691284	0	1	0	0	0
	6	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(anotherTest,testContainer.getTestInstance()`isaplausibleanotherTest,testContainer.getTestInstance());	17.211835861206055	0	1	0	0	0
	7	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()!=null`isaplausibletestContainer.getTestInstance()!=null);	16.765624046325684	0	1	0	0	0
	8	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(test,anotherTest`isaplausibletest,anotherTest);	16.345942974090576	0	1	0	0	0
	10	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance().equals(test));	17.07438611984253	0	1	0	0	0
1	2	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertTrue(testData.getTestCase().toString().contains(""STR""));"	16.655790090560913	0	1	0	0	0
	3	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData.getTestCase()`?);	17.459554195404053	0	1	0	0	0
	4	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertSame(expectedObject,actualObject`.ThistestSuite);	19.17189621925354	0	1	0	0	0
	6	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertFalse(booleancondition)`.);	17.467877864837646	0	1	0	0	0
	7	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertNotEquals(expected,actual)`isaplausible""Test1"",testData.getTestCaseName());"	16.490712881088257	0	1	0	0	0
	8	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertTrue(condition)`testData.getTestCaseName().equals(""Test2""));"	16.54227900505066	0	1	0	0	0
	12	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(null,testData);	43.981842041015625	0	1	0	0	0
	13	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	16.61950993537903	0	1	0	0	0
	15	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(condition)`?Here'sanexampleusage:);	16.90707492828369	0	1	0	0	0
	19	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestIndex()>0);	61.64130187034607	0	1	0	0	0
2	0	hazelcast/hazelcast-simulator	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	31.977696180343628	0	1	0	0	0
	1	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(true,CloudProviderUtils.isLocal(""STR""));"	16.62784481048584	0	1	0	0	0
	2	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	16.447858095169067	0	1	0	0	0
	3	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(false,CloudProviderUtils.isLocal(""STR""));"	31.122879028320312	0	1	0	0	0
	4	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotEquals(true,CloudProviderUtils.isLocal(""STR""));"	16.33670997619629	0	1	0	0	0
	5	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotEquals(false,CloudProviderUtils.isLocal(""aliyun"")`isaplausiblefalse);"	16.202059984207153	0	1	0	0	0
	6	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	29.91924023628235	0	1	0	0	0
	9	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(false,CloudProviderUtils.isLocal(""STR""));"	158.1405749320984	0	1	0	0	0
	10	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertNotEquals(true,CloudProviderUtils.isLocal(""cloud"")`isaplausibletrue);"	16.338340997695923	0	1	0	0	0
	11	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""cloud"")`isaplausibleCloudProviderUtils.isLocal(""cloud""));"	16.155422925949097	0	1	0	0	0
3	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(""STR"");"	16.546884298324585	0	1	0	0	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	15.382885932922363	0	1	0	0	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotEquals(""STR"",bind0(newObject(),""STR"",""STR""));"	15.234089136123657	0	1	0	0	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	32.03423595428467	0	1	0	0	0
	23	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(true);	48.4615581035614	0	1	0	0	0
4	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	17.01280117034912	0	1	0	0	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	62.47365403175354	0	1	0	0	0
	16	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""STR"",""STR""));"	15.598389148712158	0	1	0	0	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(newObject(),""STR"",""STR""));"	16.210244178771973	0	1	0	0	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(newObject(),""STR"",""STR""));"	30.031190156936646	0	1	0	0	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""invalidProperty"",""invalidValue"")`isaplausiblebind0(null,""invalidProperty"",""invalidValue""));"	16.469279050827026	0	1	0	0	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(true);	43.544424295425415	0	1	0	0	0
0	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	47.387364864349365	1	0	0	0	0
	1	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()<=3);	47.9308397769928	0	1	0	0	0
	2	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.isEmpty());	48.78934693336487	0	1	0	0	0
	3	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	47.43631410598755	0	1	0	0	0
	4	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotEquals(0,qResult.size());	47.68363285064697	0	1	0	0	0
	8	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	83.00400996208191	1	0	0	0	0
	9	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	85.54333686828613	1	0	0	0	0
	10	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	84.09270095825195	1	0	0	0	0
	11	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	83.72776007652283	1	0	0	0	0
	19	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	121.83925294876099	0	1	0	0	0
1	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	48.86705279350281	0	1	0	0	0
	1	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	47.53545808792114	0	1	0	0	0
	2	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	118.5118019580841	0	1	0	0	0
	4	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	93.19057512283325	1	0	0	0	0
	5	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size()`isaplausible0);	48.17961812019348	0	1	0	0	0
	6	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	84.09822273254395	0	1	0	0	0
	7	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(qResult.size()>0);	89.86786794662476	0	1	0	0	0
	8	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(expectedSize,qResult.size()`isaplausibleexpectedSize);	47.48680400848389	0	1	0	0	0
	10	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	83.12910890579224	0	1	0	0	0
	12	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size());	47.29787278175354	0	1	0	0	0
2	0	orientechnologies/orientdb	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertNotNull(property);	43.198041915893555	0	1	0	0	0
	1	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(""STR"",property.getName());"	42.65221118927002	0	1	0	0	0
	2	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertTrue(property.getType()==OType.STRING);	42.38144588470459	0	1	0	0	0
	3	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertFalse(property.isMandatory());	42.35170888900757	0	1	0	0	0
	4	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(0,property.getCollate().compareToIgnoreCase(""default"")`isaplausible0);"	43.966410875320435	0	1	0	0	0
	5	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed());	42.55941200256348	0	1	0	0	0
	6	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertFalse(property.isReadOnly()`isaplausibleproperty.isReadOnly());	42.84200978279114	0	1	0	0	0
	7	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertTrue(property.isNotNull()`isaplausibleproperty.isNotNull());	42.666035890579224	0	1	0	0	0
	8	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed()`isaplausibleproperty.isIndexed()`isaplausibleproperty.isIndexed());	43.370370864868164	0	1	0	0	0
	9	/	AlterPropertyTest	testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	assertEquals(OType.STRING,property.getType());	43.08986496925354	0	1	0	0	0
3	2	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	"assertNull(doc.field(""STR""));"	167.49728202819824	0	1	0	0	0
	3	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	"assertFalse(doc.field(""STR"")instanceofHashSet);"	79.62630987167358	0	1	0	0	0
	4	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	"assertNotNull(doc.field(""STR""));"	38.06621170043945	0	1	0	0	0
	5	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,lst.size());	39.25987911224365	0	1	0	0	0
	6	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotEquals(0,set.size());	38.494125843048096	0	1	0	0	0
	7	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	"assertTrue(doc.field(""STR"").equals(""STR""));"	39.56281900405884	0	1	0	0	0
	9	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(expected,actual)`.Here'sanexample:);	45.73860788345337	0	1	0	0	0
	10	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotEquals(expected,actual)`.Here'sanexample:`5,result);	40.152384996414185	0	1	0	0	0
	11	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(condition`isaplausiblecondition);	39.02057719230652	0	1	0	0	0
	12	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(condition)`isaplausiblelst.isEmpty());	39.43248677253723	0	1	0	0	0
4	14	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotEquals(""STR"",""STR"");"	98.356036901474	0	1	0	0	0
	16	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertTrue(condition)`?This5>2);	31.99619197845459	0	1	0	0	0
	17	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertThat(actualValue,is(equalTo(expectedValue))`?);	29.469983100891113	0	1	0	0	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	39.41177725791931	1	0	0	0	0
	1	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	77.76800608634949	1	0	0	0	0
	2	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	77.7913269996643	1	0	0	0	0
	5	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	150.83374619483948	1	0	0	0	0
	10	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	74.41928887367249	1	0	0	0	0
	22	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	149.66875219345093	1	0	0	0	0
7	1	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertTrue(Double.parseDouble(res.get(0).field(""STR"").toString())==-1.0);"	22.97975182533264	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertFalse(Double.parseDouble(res.get(0).field(""STR"").toString())!=-1.0);"	22.542248010635376	0	1	0	0	0
	5	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertNotNull(res.get(0).field(""STR""));"	22.076174020767212	0	1	0	0	0
	6	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertTrue(Math.abs(Double.parseDouble(res.get(0).field(""STR"").toString())-(-1.0))<0.00001);"	24.84103798866272	0	1	0	0	0
	11	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertNotEquals(Double.parseDouble(res.get(0).field(""id"").toString()),-1.0,0.00001`isaplausibleDouble.parseDouble(res.get(0).field(""id"").toString()),-1.0,0.00001);"	22.935784101486206	0	1	0	0	0
	14	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertTrue(Math.abs(Double.parseDouble(res.get(0).field(""STR"").toString())+1.0)<0.0001);"	22.876576900482178	0	1	0	0	0
	17	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertFalse(Double.parseDouble(res.get(0).field(""STR"").toString())>-1.0);"	21.392024993896484	0	1	0	0	0
	20	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertNotSame(-1.0,Double.parseDouble(res.get(0).field(""STR"").toString()));"	22.63144016265869	0	1	0	0	0
	21	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertTrue(Double.compare(Double.parseDouble(res.get(0).field(""STR"").toString()),-1.0)==0);"	22.765113830566406	0	1	0	0	0
	22	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertNotEquals(-1.0,Double.parseDouble(res.get(0).field(""id"").toString()),0.0001`isaplausible-1.0,Double.parseDouble(res.get(0).field(""id"").toString()),0.0001);"	23.38514995574951	0	1	0	0	0
8	0	orientechnologies/orientdb	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	41.88697290420532	0	1	0	0	0
	1	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNull()`.Here'showyoucangeneratetheres);	42.2589590549469	0	1	0	0	0
	2	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	42.3320152759552	0	1	0	0	0
	3	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	41.96896195411682	1	0	0	0	0
	4	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(!res.isEmpty()`isaplausible!res.isEmpty());	42.2735550403595	0	1	0	0	0
	5	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotEquals(0,res.size()`isaplausible0);	43.19783878326416	0	1	0	0	0
	6	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(condition)`.Thisres.contains(doc));	42.90421772003174	0	1	0	0	0
	7	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(condition)`isaplausibleres.contains(doc));	42.06470584869385	0	1	0	0	0
	8	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	"assertEquals(expectedValue,actualValue)`isaplausible""some"",res.get(0).field(""name""));"	44.70134663581848	0	1	0	0	0
	9	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	"assertNotEquals(unexpectedValue,actualValue)`isaplausible""wrongValue"",res.get(0).field(""name"")`isaplausibleunexpectedValue,actualValue)`isaplausible""wrongValue"",res.get(0).field(""name""));"	43.49669671058655	0	1	0	0	0
0	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection.getLog());	13.726136684417725	0	1	0	0	0
	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(mockLogger,jolokiaConnection.getLog());	11.85612177848816	0	1	0	0	0
	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog()instanceofLogger);	11.162235021591187	0	1	0	0	0
	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(jolokiaConnection.getLog(),mockLogger);	23.310226917266846	0	1	0	0	0
	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.879741907119751	0	1	0	0	0
	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog()!=null);	11.277983903884888	0	1	0	0	0
	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.605337858200073	0	1	0	0	0
	10	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(jolokiaConnection.getLog()==null);	11.895444869995117	0	1	0	0	0
	11	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.667653799057007	0	1	0	0	0
	19	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection.getLog());	23.092232942581177	0	1	0	0	0
1	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	19.125378847122192	1	0	0	0	0
	6	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	363.48870301246643	1	0	0	0	0
	9	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue()`.Here'sanexample:);	10.144533157348633	0	1	0	0	0
	13	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	40.21477913856506	1	0	0	0	0
	14	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(condition`?Here'sanexample:);	9.895015001296997	0	1	0	0	0
	19	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	199.45618605613708	1	0	0	0	0
	20	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	34.101003885269165	1	0	0	0	0
	23	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	28.175718069076538	1	0	0	0	0
	25	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(expected,actual)`expectedValue,actualValue);	11.083811044692993	0	1	0	0	0
	26	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(expression)`?Here'sanexample:);	12.619060039520264	0	1	0	0	0
0	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	74.0982117652893	0	1	0	0	0
	1	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue()`from`org.junit.Assert`.Here'sanexample:);	20.27155303955078	0	1	0	0	0
	2	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	53.612709760665894	1	0	0	0	0
	3	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull()`from`org.junit.Assert`.Here'sanexample:);	18.922295093536377	0	1	0	0	0
	4	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse()`from`org.junit.Assert`.Here'sanexample:`condition);	18.462889909744263	0	1	0	0	0
	5	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals()`?Here'sanexample:);	19.58819580078125	0	1	0	0	0
	6	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNull()`from`org.junit.Assert`.Here'sanexample:`condition`isaplausible)`from`org.junit.Assert`.Here'sanexample:`condition);	20.813956260681152	0	1	0	0	0
	7	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotSame()`from`org.junit.Assert`.Here'sanexample:`expected,actual`isaplausible)`from`org.junit.Assert`.Here'sanexample:`expected,actual);	20.268739223480225	0	1	0	0	0
	10	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue()`:);	20.114044904708862	0	1	0	0	0
	11	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals()`:`isaplausible)`:);	18.833698987960815	0	1	0	0	0
1	0	sofastack/sofa-bolt	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	54.42830204963684	1	0	0	0	0
	1	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	38.31767511367798	0	1	0	0	0
	2	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	36.80697512626648	1	0	0	0	0
	7	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,client1.isConnectionMonitorSwitchOn());	17.8623468875885	0	1	0	0	0
	8	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	17.81382703781128	0	1	0	0	0
	13	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(condition)`.Thisclient1.isConnectionMonitorSwitchOff());	20.067516803741455	0	1	0	0	0
	14	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNull(client2`isaplausibleclient2);	18.116633892059326	0	1	0	0	0
	15	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(false,client1.isConnectionMonitorSwitchOn()`isaplausiblefalse);	22.066852807998657	0	1	0	0	0
	16	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertSame(client1,client2`isaplausibleclient1);	18.74250602722168	0	1	0	0	0
	18	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	18.6125807762146	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(""STR"",proxy.getProtocol()+""STR""+proxy.getHost()+""STR""+proxy.getPort());"	31.10972499847412	0	1	0	0	0
	1	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy);	16.488953828811646	0	1	0	0	0
	2	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertTrue(proxy.getPort()!=0);	16.578776836395264	0	1	0	0	0
	3	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(""STR"",proxy.getProtocol());"	17.673032760620117	0	1	0	0	0
	4	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotEquals(""STR"",proxy.getProtocol());"	32.16148829460144	0	1	0	0	0
	5	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertFalse(proxy.getHost().isEmpty());	16.89702820777893	0	1	0	0	0
	6	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotSame(null,proxy);	16.949935913085938	0	1	0	0	0
	7	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertTrue(proxyinstanceofProxy`isaplausibleproxyinstanceofProxy);	17.005170106887817	0	1	0	0	0
	8	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotSame(newProxy(),proxy`isaplausiblenewProxy(),proxy);	17.560854196548462	0	1	0	0	0
	9	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotEquals(proxy.getProtocol()+""://""+proxy.getHost()+"":""+proxy.getPort()`isaplausible""https://localhost:8080"",proxy.getProtocol()+""://""+proxy.getHost()+"":""+proxy.getPort());"	19.186947107315063	0	1	0	0	0
0	21	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	92.98399996757507	0	1	0	0	0
	27	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(0,0)>0);	69.753427028656	0	1	0	0	0
0	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(1,profiles.size());	20.470364809036255	1	0	0	0	0
	1	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(profiles.isEmpty());	18.27479600906372	0	1	0	0	0
	3	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	51.525562047958374	0	1	0	0	0
	4	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotEquals(0,profiles.size());	19.704540967941284	0	1	0	0	0
	5	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(!profiles.isEmpty()`isaplausible!profiles.isEmpty());	18.490156888961792	0	1	0	0	0
	6	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.size()>=expectedSize`isaplausibleprofiles.size()>=expectedSize);	18.481934070587158	0	1	0	0	0
	12	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotSame(0,profiles.size());	18.86319613456726	0	1	0	0	0
	13	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertSame(expectedProfile,profiles.get(0)`isaplausibleexpectedProfile);	18.827842950820923	0	1	0	0	0
	16	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(condition)`.Thisprofiles.contains(expectedProfile));	20.04045796394348	0	1	0	0	0
	19	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	???;	38.16830015182495	0	1	0	0	0
1	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	65.05860018730164	1	0	0	0	0
	1	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	51.064640045166016	1	0	0	0	0
	5	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	12.232292890548706	0	1	0	0	0
	8	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	31.077301025390625	0	1	0	0	0
	11	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	63.04502892494202	1	0	0	0	0
	12	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	24.171541929244995	1	0	0	0	0
	13	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	34.19803595542908	0	1	0	0	0
	17	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	77.62056088447571	1	0	0	0	0
	23	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	11.706363916397095	0	1	0	0	0
	24	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	36.84195804595947	1	0	0	0	0
2	0	fabric8io/fabric8-maven-plugin	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	18.622825384140015	1	0	0	0	0
	1	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	37.43117594718933	0	1	0	0	0
	2	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	19.982872009277344	0	1	0	0	0
	4	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,service.newerTag(oldTag,latestTag));	58.60262608528137	0	1	0	0	0
	5	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	66.93120384216309	1	0	0	0	0
	7	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	56.69823408126831	0	1	0	0	0
	8	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(service.newerTag(oldTag,latestTag)==latestTag);	39.176705837249756	0	1	0	0	0
	9	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	23.960256814956665	0	1	0	0	0
	10	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)<0||tag1Date.compareTo(tag2Date)==0||tag2Date.compareTo(tag1Date)>0`isaplausibletag1Date.compareTo(tag2Date)<0||tag1Date.compareTo(tag2Date)==0||tag2Date.compareTo(tag1Date)>0);	23.050111055374146	0	1	0	0	0
	11	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag`isaplausibleoldTag);	19.627780199050903	0	1	0	0	0
0	3	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotNull(StringHelper.bytesToHexString(newbyte[1]));	74.57230305671692	0	1	0	0	0
	4	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertTrue(StringHelper.bytesToHexString(newbyte[1]).length()>0);	17.995144844055176	0	1	0	0	0
	7	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).isEmpty());	19.06266212463379	0	1	0	0	0
	8	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertNotSame(""expectedOutputValue"",FOCAL(newbyte[]{0x01,0x02,0x03})`isaplausible""expectedOutputValue"",FOCAL(newbyte[]{0x01,0x02,0x03}));"	19.553335905075073	0	1	0	0	0
	9	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(StringHelper.bytesToHexString(null)`isaplausibleStringHelper.bytesToHexString(null));	17.001031160354614	0	1	0	0	0
	10	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertNotSame(""STR"",StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}));"	19.494817972183228	0	1	0	0	0
	11	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertArrayEquals(newbyte[]{0x01,0x02,0x03},FOCAL(newbyte[]{0x01,0x02,0x03}).getBytes()`isaplausiblenewbyte[]{0x01,0x02,0x03},FOCAL(newbyte[]{0x01,0x02,0x03}).getBytes());	19.595672130584717	0	1	0	0	0
	12	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertNotEquals(""STR"",StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}));"	20.312743186950684	0	1	0	0	0
	13	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertTrue(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).equals(""010203"")`isaplausibleStringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).equals(""010203""));"	18.064791917800903	0	1	0	0	0
	17	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).isEmpty());	17.16583275794983	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertEquals(""STR"",this.httpclient.getCookieStore().getCookies().get(0).getName());"	20.723278045654297	0	1	0	0	0
	1	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(!this.httpclient.getCookieStore().getCookies().isEmpty());	15.449123859405518	0	1	0	0	0
	2	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(this.httpclient.getCookieStore().getCookies());	15.824434995651245	0	1	0	0	0
	3	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals(1,this.httpclient.getCookieStore().getCookies().size());	16.149510145187378	0	1	0	0	0
	4	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertTrue(this.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getName().equals(""STR"")));"	16.18494987487793	0	1	0	0	0
	5	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertFalse(this.httpclient.getCookieStore().getCookies().isEmpty());	15.676829099655151	0	1	0	0	0
	6	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotEquals(0,this.httpclient.getCookieStore().getCookies().size()`isaplausible0);	16.11076807975769	0	1	0	0	0
	7	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertSame(this.httpclient.getCookieStore(),this.httpclient.getCookieStore());	15.018444776535034	0	1	0	0	0
	8	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotSame(this.testServer,this.httpclient`isaplausiblethis.testServer,this.httpclient);	15.413635015487671	0	1	0	0	0
	9	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertTrue(this.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getValue().equals(""value""))`isaplausiblethis.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getValue().equals(""value"")));"	16.80844807624817	0	1	0	0	0
0	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	10.76311707496643	1	0	0	0	0
	1	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	11.844143867492676	0	1	0	0	0
	2	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	12.96197509765625	0	1	0	0	0
	3	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY`isaplausiblefilter.decide(evt)==FilterReply.DENY);	12.59894585609436	0	1	0	0	0
	4	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt)`isaplausiblefilter.decide(evt));	11.345557689666748	0	1	0	0	0
	5	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt)`isaplausibleFilterReply.DENY,filter.decide(evt));	13.521123170852661	0	1	0	0	0
	6	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	17.702695846557617	0	1	0	0	0
	7	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	11.978671073913574	0	1	0	0	0
	8	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)!=FilterReply.NEUTRAL`isaplausiblefilter.decide(evt)!=FilterReply.NEUTRAL);	12.539340019226074	0	1	0	0	0
	9	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNull(filter.decide(evt)`isaplausiblefilter.decide(evt)`isaplausiblefilter.decide(evt)`isaplausiblefilter.decide(evt));	13.0802001953125	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	31.994189023971558	0	1	0	0	0
	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(normalizedUrl.equals(expectedResult));	18.02706003189087	0	1	0	0	0
	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	18.22748899459839	0	1	0	0	0
	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	18.719146966934204	0	1	0	0	0
	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(condition)`,where`condition`isabooleanexpression.ThisnormalizedUrl.isEmpty());	19.101806163787842	0	1	0	0	0
	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	18.08573603630066	0	1	0	0	0
	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult,normalizedUrl);	124.2715699672699	0	1	0	0	0
	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(condition`where`condition`isabooleanexpression?Forexample);	18.77953314781189	0	1	0	0	0
	13	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	52.112529039382935	0	1	0	0	0
	15	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	53.44862103462219	0	1	0	0	0
0	3	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrUSDRUS.convert(null));	23.0733003616333	0	1	0	0	0
	4	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrUSDRUS.convert((Double)null));	31.187896251678467	0	1	0	0	0
	5	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertTrue()`tocheckiftheresultof`convert()`isnotnull?);	11.29265308380127	0	1	0	0	0
	6	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertFalse()`.Thiscanbeusedtocheckifacertainconditionisfalse.Here'sanexample:);	11.540260076522827	0	1	0	0	0
	7	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertEquals()`.Thiscanbeusedtocheckiftwovaluesareequal.Here'sanexample:);	12.709529876708984	0	1	0	0	0
	9	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotEquals()`.Thiscanbeusedtocheckiftwovaluesarenotequal.Here'sanexample:);	11.128889083862305	0	1	0	0	0
	10	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertTrue()`.Thiscanbeusedtocheckifacertainconditionistrue.Here'sanexample:`condition);	9.9064199924469	0	1	0	0	0
	12	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertThat()`.ThiscanbeusedformoreflexibleactualValue,matcher);	12.931834697723389	0	1	0	0	0
	14	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertArrayEquals()`.Thiscanbeusedtocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray`isaplausible)`.Thiscanbeusedtocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	13.150928020477295	0	1	0	0	0
	17	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotSame()`.Thiscanbeusedtocheckiftwoobjectsarenotthesameinstance.Here'sanexample:`expectedObject,actualObject`isaplausible)`.Thiscanbeusedtocheckiftwoobjectsarenotthesameinstance.Here'sanexample:`expectedObject,actualObject);	12.105736255645752	0	1	0	0	0
0	0	myabc/markdownj	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg,HTMLDecoder.decode(encoded));	39.5922532081604	1	0	0	0	0
	1	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(billg.equals(HTMLDecoder.decode(encoded)));	9.168263912200928	0	1	0	0	0
	2	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotNull(HTMLDecoder.decode(encoded));	8.283966302871704	0	1	0	0	0
	3	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertNotEquals(HTMLDecoder.decode(encoded)`isaplausible"""",HTMLDecoder.decode(encoded));"	8.255815744400024	0	1	0	0	0
	4	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertFalse(billg.equals(HTMLDecoder.decode(encoded))`isaplausiblebillg.equals(HTMLDecoder.decode(encoded)));	8.791366815567017	0	1	0	0	0
	5	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotSame(billg,HTMLDecoder.decode(encoded)`isaplausiblebillg,HTMLDecoder.decode(encoded));	8.498772859573364	0	1	0	0	0
	6	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertArrayEquals(billg.toCharArray(),HTMLDecoder.decode(encoded).toCharArray());	8.550326824188232	0	1	0	0	0
	8	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(billg.contains(HTMLDecoder.decode(encoded)));	8.729367017745972	0	1	0	0	0
	10	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg.length(),HTMLDecoder.decode(encoded).length());	8.909674167633057	0	1	0	0	0
	11	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertSame(billg.getClass(),HTMLDecoder.decode(encoded).getClass()`isaplausiblebillg.getClass());	9.038290023803711	0	1	0	0	0
0	0	gvlasov/collections-utils	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	26.15809202194214	1	0	0	0	0
	1	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	9.700987100601196	0	1	0	0	0
	2	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertEquals(3,map.size());	18.262158155441284	0	1	0	0	0
	3	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertNotNull(map.get(""STR""));"	9.09792709350586	0	1	0	0	0
	4	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertNull(map.get(""missing"")`isaplausiblemap.get(""missing""));"	9.748509883880615	0	1	0	0	0
	5	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertTrue(map.containsValue(7));	9.151131868362427	0	1	0	0	0
	6	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertFalse(map.containsValue(10)`isaplausiblemap.containsValue(10));	10.278964042663574	0	1	0	0	0
	7	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertNotEquals(4,map.size());	9.732852220535278	0	1	0	0	0
	8	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.keySet().containsAll(Arrays.asList(""Hello"",""goodbye"",""hey""))`isaplausiblemap.keySet().containsAll(Arrays.asList(""Hello"",""goodbye"",""hey"")));"	10.77391791343689	0	1	0	0	0
	11	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	18.377810955047607	1	0	0	0	0
0	0	PeterisP/morphology	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	95.59837794303894	0	1	0	0	0
	1	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	14.738085985183716	0	1	0	0	0
	2	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	15.072643995285034	0	1	0	0	0
	16	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	27.42358422279358	0	1	0	0	0
	20	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas.get(0));	14.629948854446411	0	1	0	0	0
	21	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	42.683326959609985	0	1	0	0	0
	26	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	16.11072301864624	0	1	0	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	11.661484003067017	1	0	0	0	0
	1	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	24.0041983127594	1	0	0	0	0
	2	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	13.387274026870728	0	1	0	0	0
	5	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	23.802680253982544	0	1	0	0	0
	6	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.contains(""unexpected_key"")`isaplausibleconfig.contains(""unexpected_key""));"	12.555310010910034	0	1	0	0	0
	7	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(config.get(""expected_key"")`isaplausible""expected_value"",config.get(""expected_key""));"	12.492161750793457	0	1	0	0	0
	8	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNotEquals(config.get(""unexpected_key"")`isaplausibleconfig.get(""unexpected_key"")`isaplausible""unexpected_value"",config.get(""unexpected_key""));"	13.560645818710327	0	1	0	0	0
	9	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNotNull(config.get(""key"")`isaplausibleconfig.get(""key""));"	12.592408180236816	0	1	0	0	0
	10	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	assertEquals(expectedList,actualList`isaplausibleexpectedList);	12.481823205947876	0	1	0	0	0
	11	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	assertNotEquals(unexpectedValue,actualValue`isaplausibleunexpectedValue);	12.45946192741394	0	1	0	0	0
