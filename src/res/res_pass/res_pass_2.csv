TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	22.81805419921875	1	0
0	1	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	10.562518119812012	0	0
/	3	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	10.37039303779602	0	0
/	4	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(0,vārds.wordforms.size());	10.038731098175049	0	0
/	6	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized()&&vārds.wordforms.size()>0);	10.563861846923828	0	0
/	9	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotSame(0,vārds.wordforms.size());	11.625586032867432	0	0
/	10	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized()||vārds.wordforms.size()>0);	11.482481241226196	0	0
/	15	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(vārds.isRecognized()&&vārds.wordforms.isEmpty());	10.107959032058716	0	0
/	23	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	28.92996621131897	1	0
/	26	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	10.501038789749146	1	0
1	0	PeterisP/morphology	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	81.40829062461853	1	0
/	1	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	21.5232892036438	1	0
1	5	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertEquals(true,lūzīs.isRecognized());	10.5190110206604	0	0
/	8	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	10.106235265731812	0	0
/	14	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	22.280992031097412	0	0
/	15	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(lūzīs.wordforms.isEmpty());	9.915290117263794	0	0
/	16	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(!lūzīs.wordforms.isEmpty());	10.004531145095825	0	0
/	17	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	238.6694803237915	1	0
/	18	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotEquals(0,lūzīs.wordforms.size());	9.712058067321777	0	0
/	19	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertEquals(lūzīs.getClass(),lv.semti.morphology.analyzer.Word.class);	27.50946593284607	0	0
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	133.33241510391235	1	0
2	1	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(true,austrumlatvija.isRecognized());	9.786948919296265	0	0
/	2	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	9.946865797042847	0	0
/	3	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	10.11362910270691	0	0
/	4	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.wordforms.size());	9.88473129272461	0	0
/	5	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(!austrumlatvija.wordforms.isEmpty());	10.4846351146698	0	0
/	6	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,austrumlatvija.wordforms.size());	10.200518131256104	0	0
/	13	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(locītājs);	163.81950306892395	0	0
/	16	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(locītājs);	9.09078574180603	0	0
/	17	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	462.5187871456146	1	0
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	9.043152093887329	1	0
/	1	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	18.465707063674927	1	0
3	4	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	12.344635248184204	0	0
/	6	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotNull(w);	9.567384004592896	0	0
/	28	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	9.469693899154663	0	0
/	29	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	9.757197856903076	0	0
/	5	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(simulatorProperties.getCoordinatorPort()>=0);	9.39327096939087	0	0
/	6	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(simulatorProperties.getCoordinatorPort());	8.958115100860596	0	0
/	7	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertNotEquals(""STR"",simulatorProperties.getCoordinatorPort());"	10.051884174346924	0	0
/	19	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertTrue(Integer.parseInt(simulatorProperties.get(""STR"",""STR""))>=0);"	9.628321170806885	0	0
/	23	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertEquals(Integer.parseInt(simulatorProperties.get(""STR"",""STR"")),simulatorProperties.getCoordinatorPort());"	10.535008907318115	0	0
/	24	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertNotSame(""STR"",simulatorProperties.getCoordinatorPort());"	9.168334007263184	0	0
4	29	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,simulatorProperties.getCoordinatorPort());	39.71163606643677	1	0
5	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	35.70822310447693	1	0
/	2	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception.getMessage());	8.431861877441406	0	0
/	4	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertTrue(exception.getMessage()!=null&&!exception.getMessage().isEmpty());	9.166792154312134	0	0
/	5	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertNotEquals(""STR"",exception.getMessage());"	9.740009069442749	0	0
/	6	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertSame(cause,exception.getCause());	32.53533387184143	0	0
/	9	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause,exception.getCause());	39.03652882575989	0	0
/	12	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertSame(cause,exception.getCause());	26.222721576690674	0	0
/	13	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().contains(""STR""));"	9.127305030822754	0	0
/	15	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception.getCause());	8.998577117919922	0	0
/	18	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().startsWith(""STR"")&&exception.getMessage().contains(""STR"")&&exception.getMessage().contains(""STR"")&&exception.getMessage().contains(""STR""));"	36.81178283691406	0	0
/	20	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertNotSame(""STR"",exception.getMessage());"	9.349531888961792	0	0
6	0	hazelcast/hazelcast-simulator	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	8.625380992889404	1	0
6	1	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",exceptionFile.getName());"	10.260977745056152	0	0
/	2	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(exceptionFile);	9.30252194404602	0	0
/	3	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.isFile());	9.440696239471436	0	0
/	4	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	8.244339942932129	0	0
/	5	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	60.89549469947815	1	0
/	6	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",exceptionFile.getName());"	18.09301781654358	0	0
/	8	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.length()>0);	11.549882888793945	0	0
/	9	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(0,exceptionFile.length());	9.038418292999268	0	0
/	12	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(exceptionFile);	18.738463163375854	0	0
/	2	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	264.22284603118896	0	0
/	3	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(testObject);	94.3049328327179	0	0
/	4	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(testObject);	213.29509496688843	0	0
/	7	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	20.48342514038086	0	0
/	15	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	27.735018014907837	0	0
/	27	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null,""STR"",""STR""));"	18.701364040374756	0	0
/	29	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(testObject);	18.212619066238403	0	0
8	0	fluent/fluent-logger-java	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA1);	12.249144077301025	0	0
/	1	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA0,loggerB0);	15.250956773757935	0	0
/	2	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	31.35137104988098	0	0
/	3	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA0);	10.578890800476074	0	0
8	4	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA0==loggerA1);	10.239375114440918	1	0
/	5	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	16.424936056137085	0	0
/	6	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertFalse(loggerA0==loggerB0);	10.568053960800171	0	0
/	7	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA0!=loggerB0);	11.235777139663696	0	0
/	11	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertTrue(loggerA_lh0.toString().contains(""STR""));"	10.423311233520508	0	0
/	12	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA_lh0);	57.15124011039734	0	0
