TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	9.351194143295288	1	0
0	1	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazz);	7.5525805950164795	0	0
/	2	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	8.712171077728271	0	0
/	3	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz.length>0);	8.374201774597168	0	0
/	4	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(clazz.length==0);	23.47764277458191	0	0
/	6	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp[0],clazz[0]);	8.382317304611206	0	0
/	8	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotSame(exp,clazz);	8.133030891418457	0	0
/	9	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	42.38042330741882	1	0
/	12	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(Arrays.asList(clazz).containsAll(Arrays.asList(exp)));	8.012420177459717	0	0
/	13	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(Arrays.asList(clazz).isEmpty());	8.364615440368652	0	0
1	0	rockagen/commons-lib	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(b,b);	20.659775733947754	0	0
/	1	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNotNull(b);	8.024314641952515	0	0
/	2	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertTrue(b.length()>0);	7.77906608581543	0	0
/	3	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertTrue(b.size()>=0);	7.773263692855835	0	0
/	4	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertFalse(b.isEmpty());	8.069369792938232	0	0
/	5	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(64,b.size());	66.18742346763611	0	0
/	7	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotSame(""STR"",b.toString());"	23.620792150497437	0	0
/	9	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(false,b.get(0));	23.60514211654663	0	0
/	11	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertTrue(b.get(2));	7.397614240646362	0	0
/	13	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNotNull(bs);	7.237403392791748	0	0
/	2	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrUAHRUS);	19.673866033554077	0	0
/	4	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertTrue(moneyToStrRURENG!=null);	186.06594705581665	0	0
/	8	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrUAHRUS);	102.24740624427795	0	0
/	9	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrUAH);	90.94089913368225	0	0
/	23	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrUAHRUS);	185.30681943893433	0	0
/	1	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR"")&&map.get(""STR"").equals(""STR""));"	20.081804037094116	0	0
/	2	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.containsKey(""STR"")&&map.get(""STR"").equals(""STR""));"	19.329875707626343	0	0
/	3	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotNull(map);	18.603644847869873	0	0
4	5	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size());	18.714358806610107	1	0
/	7	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotEquals(""STR"",map.get(""STR""));"	19.47419548034668	0	0
/	8	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNull(map.get(""STR""));"	19.30350947380066	0	0
/	9	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsValue(""STR""));"	18.248565673828125	0	0
/	11	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotSame(""STR"",map);"	98.58651518821716	0	0
/	12	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.keySet().contains(""STR""));"	19.158860206604004	0	0
/	13	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.keySet().contains(""STR""));"	19.23563003540039	0	0
5	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	18.477035522460938	1	0
5	1	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<=4);	18.75206732749939	0	0
/	3	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	17.558591604232788	0	0
/	4	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.isSolved());	37.2478301525116	0	0
/	17	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p);	16.979753494262695	0	0
6	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	17.78569459915161	1	0
6	1	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	17.16416597366333	0	0
/	2	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	136.05633664131165	0	0
/	3	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()==0);	16.940581798553467	0	0
/	4	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	17.34965205192566	0	0
/	6	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=1);	17.854638814926147	0	0
/	7	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	17.42785620689392	0	0
/	8	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	374.7529900074005	0	0
/	9	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==0);	135.67403507232666	0	0
/	10	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	16.323441743850708	0	0
/	2	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	6.852366924285889	0	0
/	7	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(true);	5.78764271736145	0	0
/	8	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertFalse(false);	6.056696176528931	0	0
/	9	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotNull(a);	23.934221506118774	0	0
/	10	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(0,a[2]);	6.008402347564697	0	0
/	12	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a[3]>=0&&a[3]<=4);	6.507735729217529	0	0
/	15	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(a,a.length);	15.245202541351318	0	0
/	17	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[2]);	12.109659433364868	0	0
/	18	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a.length>0);	5.807980298995972	0	0
/	19	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(0,a.length);	5.906528949737549	0	0
/	10	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(String.join(""STR"",""STR"",""STR"",""STR"").contains(""STR""));"	20.73654270172119	0	0
/	11	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertFalse(String.join(""STR"",""STR"",""STR"",""STR"").isEmpty());"	6.160416603088379	0	0
/	13	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(Arrays.asList(""STR"",""STR"",""STR"").contains(""STR""));"	6.104877233505249	0	0
/	14	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertFalse(String.join(""STR"",""STR"",""STR"").isEmpty());"	5.965324401855469	0	0
/	17	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertTrue(Arrays.asList(1,2,3,4,5).contains(3));	6.263508319854736	0	0
/	21	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertFalse(Arrays.asList(1,2,3).isEmpty());	6.105071306228638	0	0
/	26	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertTrue(Arrays.asList(1,2,3,4,5).contains(4));	5.987974405288696	0	0
/	29	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(String.join(""STR"",""STR"",""STR"").contains(""STR""));"	6.02551531791687	0	0
/	2	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertArrayEquals(actuals,actuals);	30.777793407440186	0	0
/	3	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertTrue(actuals.length>0);	6.343756198883057	0	0
/	4	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotNull(actuals);	5.644440412521362	0	0
/	5	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertArrayEquals(actuals,actuals);	50.98412561416626	0	0
/	7	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertEquals(3,actuals.length);	5.551649570465088	0	0
/	11	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotEquals(0,actuals.length);	6.506190776824951	0	0
/	17	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertFalse(Arrays.asList(actuals).isEmpty());	6.591143369674683	0	0
/	18	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertNotSame(Arrays.asList(""STR"",""STR"",""STR""),actuals);"	6.458600282669067	0	0
/	22	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertSame(actuals,actuals);	19.459569692611694	0	0
10	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().matches(""STR""));"	30.048437118530273	0	0
/	1	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(PERIOD_SEPARATOR,macAddress.toString().replaceAll(""STR"",""STR""));"	6.6644346714019775	0	0
/	2	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	6.145114898681641	0	0
/	3	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.getBytes());	6.032941102981567	0	0
/	4	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.isMulticast());	14.171546220779419	0	0
/	5	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(12,macAddress.getBytes().length);	21.852998733520508	0	0
/	6	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().startsWith(""STR""));"	7.029470920562744	0	0
/	8	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.isLocal());	13.908589601516724	0	0
/	11	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().matches(""STR""));"	7.860219955444336	0	0
/	12	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame(macAddress,HYPHEN_SEPARATOR);	15.789072275161743	0	0
11	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	15.753407955169678	1	0
12	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	16.256088256835938	1	0
12	1	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception);	15.045721769332886	0	0
/	4	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull(exception.getCause());	14.492311477661133	0	0
/	5	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotEquals(""STR"",exception.getMessage());"	15.799032211303711	0	0
/	7	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertTrue(exception.toString().contains(""STR""));"	15.077566862106323	0	0
/	9	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	15.6322660446167	0	0
/	10	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotSame(""STR"",exception.getMessage());"	31.390348434448242	0	0
/	11	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(ValidationException.class,exception.getClass());	16.0165536403656	0	0
/	13	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotSame(""STR"",exception.toString());"	16.300502061843872	0	0
/	15	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotEquals(""STR"",exception.getMessage());"	15.169036865234375	0	0
/	17	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	64.00087094306946	0	0
14	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertEquals(actual,actual);	142.6207196712494	0	0
/	2	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(actual);	36.39543175697327	0	0
/	3	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(data);	345.8445990085602	0	0
/	4	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(data);	345.43670678138733	0	0
/	12	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertSame(actual,actual);	172.3733651638031	0	0
/	15	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(data);	517.3077459335327	0	0
/	18	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotEquals(data,actual);	109.81006813049316	0	0
/	24	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(actual);	209.5190567970276	0	0
/	1	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(5,cl1.getArr().size());	35.16232967376709	0	0
/	3	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(cl1.getArr().isEmpty());	34.389230728149414	0	0
/	4	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(cl1.getArr());	35.724987506866455	0	0
/	6	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(cl1.getArr().size()>=0);	34.524553298950195	0	0
/	9	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotEquals(0,cl1.getArr().size());	35.44248962402344	0	0
/	12	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(cl1);	1225.1939096450806	0	0
/	16	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(cl1.getArr().size()>0);	34.66084265708923	0	0
/	17	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(cl1.getArr().isEmpty());	71.15707325935364	0	0
16	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	16.99897313117981	1	0
16	1	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher);	25.39485740661621	0	0
/	3	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(matcher.matches());	13.430092334747314	0	0
/	25	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher);	153.2716236114502	0	0
/	27	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.pattern().flags().contains(PatternFlags.ADVANCED));	12.772350072860718	0	0
17	1	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	12.746126174926758	1	0
/	2	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	26.069401264190674	0	0
/	4	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	12.565898895263672	0	0
/	10	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotSame(java.lang.Exception.class,exp);	108.38347125053406	0	0
/	11	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	142.85633826255798	1	0
/	19	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	148.03851222991943	0	0
/	21	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(true);	92.2049880027771	0	0
18	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	7.069950819015503	1	0
18	1	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getDeclaredMethod(""STR"").invoke(helloClass.newInstance()));"	7.528666734695435	0	0
/	3	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertNotEquals(""STR"",helloClass.getDeclaredMethod(""STR"").invoke(helloClass.newInstance()));"	6.587588787078857	0	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getSimpleName().equals(""STR""));"	6.222867488861084	0	0
/	8	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertSame(String.class,helloClass.getDeclaredMethod(""STR"").getReturnType());"	6.317430734634399	0	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertNotSame(Integer.class,helloClass.getDeclaredMethod(""STR"").getReturnType());"	6.464491367340088	0	0
/	11	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getDeclaredMethods().length);	6.350590705871582	0	0
/	14	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface());	6.273979902267456	0	0
/	19	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredMethods().length>0);	6.325210809707642	0	0
/	20	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getDeclaredMethod(""STR"").getReturnType()==String.class);"	6.495301246643066	0	0
