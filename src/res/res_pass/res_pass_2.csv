TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	18.31990885734558	1	0
/	2	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	15.242347002029419	0	0
1	0	PeterisP/morphology	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	13.271955966949463	1	0
/	3	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	30.311536073684692	0	0
/	7	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(lūzīs.wordforms.isEmpty());	12.607813835144043	0	0
/	10	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	"assertTrue(lūzīs.toString().contains(""STR""));"	12.741767168045044	0	0
/	14	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	21.85652208328247	0	0
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	15.867179155349731	1	0
/	2	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	14.028164863586426	0	0
/	3	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	"assertEquals(""STR"",austrumlatvija.getToken());"	13.321687936782837	0	0
/	4	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	13.1670081615448	0	0
/	5	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	13.105124950408936	0	0
/	6	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	13.544355154037476	0	0
/	7	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	12.669672966003418	0	0
/	16	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative&&locītājs.guessVerbs);	14.739345073699951	0	0
/	18	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	"assertNotEquals(""STR"",austrumlatvija.getToken());"	12.474783897399902	0	0
/	27	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing&&!locītājs.enableVocative&&locītājs.guessVerbs&&locītājs.enableAllGuesses);	12.5126211643219	0	0
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	13.570258378982544	1	0
/	2	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotNull(w);	12.804589033126831	0	0
/	3	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	12.399805307388306	0	0
/	4	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	"assertEquals(""STR"",w.getToken());"	12.351203203201294	0	0
/	11	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	"assertNotSame(""STR"",w.getCorrectWordform());"	20.5059757232666	0	0
/	15	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>0);	13.148086071014404	0	0
/	16	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	12.659211158752441	0	0
/	19	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>0);	28.100006341934204	0	0
/	20	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotNull(w);	28.61221218109131	0	0
/	25	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(null,w);	11.855784177780151	0	0
/	2	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(simulatorProperties.getCoordinatorPort()>0);	11.742810010910034	0	0
/	3	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(simulatorProperties);	11.276790142059326	0	0
/	4	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertFalse(simulatorProperties.getCoordinatorPort()==0);	12.534402847290039	0	0
/	5	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort());	12.310223817825317	0	0
/	7	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(simulatorProperties.getCoordinatorPort());	12.339986085891724	0	0
/	21	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(simulatorProperties.getCoordinatorPort()!=0);	11.945964097976685	0	0
5	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception.getCause());	11.323652029037476	0	0
/	1	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().contains(""STR"")&&exception.getMessage().contains(""STR"")&&exception.getMessage().contains(""STR"")&&exception.getMessage().contains(""STR""));"	11.449091672897339	0	0
/	2	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().startsWith(""STR""));"	11.697547912597656	0	0
/	3	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(NullPointerException.class,exception.getCause().getClass());	11.396237850189209	0	0
/	4	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotEquals(0,exception.getMessage().length());	11.418359994888306	0	0
/	5	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNull(exception.getLocalizedMessage());	11.950186014175415	0	0
/	7	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(3,exception.getCause().getStackTrace().length);	12.142727136611938	0	0
/	8	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotSame(cause,exception.getCause());	750.2029902935028	0	0
/	9	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertFalse(exception.getMessage().isEmpty());	13.356051921844482	0	0
/	10	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertNotEquals(""STR"",exception.toString());"	10.649343013763428	0	0
6	0	hazelcast/hazelcast-simulator	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	13.56293511390686	1	0
/	2	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(exceptionFile);	16.01713991165161	0	0
/	3	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.isFile());	11.789613962173462	0	0
/	4	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	13.130257844924927	0	0
/	6	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(0,exceptionFile.length());	10.671154022216797	0	0
/	7	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.canWrite());	10.516121864318848	0	0
/	8	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",exceptionFile.getName());"	11.90434217453003	0	0
/	9	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertNotEquals(""STR"",exceptionFile.getAbsolutePath());"	10.031992673873901	0	0
