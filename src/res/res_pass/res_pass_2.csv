TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	30.965954065322876	1	0	0	0	0
/	1	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	23.279816150665283	1	0	0	0	0
/	2	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	12.150722026824951	0	1	0	0	0
/	3	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	12.704585075378418	0	1	0	0	0
/	4	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	11.421948909759521	0	1	0	0	0
/	5	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	"assertEquals(expectedValue,actualValue`whereyouwouldneedtoprovidetheexpectedValueandactualValueasarguments.Forexample,ifyouhaveanexpectedvalueof""ragus""andwanttocheckifitmatchestheanalyzedword,youcoulduse:);"	13.454894065856934	0	1	0	0	0
/	7	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	28.43214988708496	1	0	0	0	0
/	9	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	23.339717864990234	0	1	0	0	0
/	10	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(expectedValue,actualValue`);	39.4166841506958	0	1	0	0	0
/	11	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	27.337274074554443	1	0	0	0	0
1	2	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	42.69022512435913	1	0	0	0	0
/	3	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	24.76478099822998	1	0	0	0	0
/	10	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	12.889904975891113	0	1	0	0	0
/	14	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(booleancondition)`.Thislūzīs.isRecognized());	15.895735740661621	0	1	0	0	0
/	15	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNull(Objectobject)`.This){);	16.242103099822998	0	1	0	0	0
/	24	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(locītājs);	13.480147123336792	0	1	0	0	0
/	26	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(booleancondition)`.Thislocītājs.isRecognized());	14.125745058059692	0	1	0	0	0
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	26.629677057266235	1	0	0	0	0
/	1	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	27.144418239593506	1	0	0	0	0
/	3	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(true,austrumlatvija.isRecognized());	13.282027959823608	0	1	0	0	0
/	5	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	13.40294599533081	0	1	0	0	0
/	6	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	13.931395053863525	0	1	0	0	0
/	7	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.wordforms.size());	13.589422941207886	0	1	0	0	0
/	8	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(!austrumlatvija.wordforms.isEmpty());	13.805589437484741	0	1	0	0	0
/	9	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,austrumlatvija.wordforms.size());	13.450902938842773	0	1	0	0	0
/	10	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	26.40510320663452	0	1	0	0	0
/	11	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	40.4467408657074	1	0	0	0	0
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	30.49718475341797	1	0	0	0	0
/	1	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	22.849212884902954	1	0	0	0	0
/	4	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	11.851338863372803	0	1	0	0	0
/	7	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotNull(w);	12.230640888214111	0	1	0	0	0
/	11	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse()`.Here'sanexample:);	15.359841108322144	0	1	0	0	0
/	15	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	12.349635124206543	1	0	0	0	0
/	18	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	24.612495183944702	1	0	0	0	0
/	19	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(!w.isRecognized());	14.207818984985352	0	1	0	0	0
/	21	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(!w.isRecognized());	42.64415717124939	0	1	0	0	0
/	23	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals()`method?Here'sanexample:);	12.783443927764893	0	1	0	0	0
0	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,simulatorProperties.getCoordinatorPort());	38.582809925079346	1	0	0	0	0
/	1	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(simulatorProperties.getCoordinatorPort()>=0);	11.233595848083496	0	1	0	0	0
/	2	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(simulatorProperties);	10.535752773284912	0	1	0	0	0
/	3	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort()`isaplausible0);	10.556129932403564	0	1	0	0	0
/	4	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertFalse(simulatorProperties.getCoordinatorPort()<0);	10.925323009490967	0	1	0	0	0
/	5	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(actualValue`,where`expectedValue`isthevalueyouareexpectingand`actualValue`isthevalueyouobtainedfromthe`getCoordinatorPort()`method.This);	13.061678647994995	0	1	0	0	0
/	6	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertSame(expectedObject,actualObject`isaplausibleexpectedObject);	12.090678215026855	0	1	0	0	0
/	8	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(-1,simulatorProperties.getCoordinatorPort());	35.30736589431763	0	1	0	0	0
/	10	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,newSimulatorProperties().getCoordinatorPort());	32.64392805099487	0	1	0	0	0
/	11	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	11.475405931472778	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	11.791546106338501	1	0	0	0	0
/	1	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertTrue(exception.getCause()instanceofRuntimeException);	10.414335012435913	0	1	0	0	0
/	2	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception.getCause());	10.235356092453003	0	1	0	0	0
/	4	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().contains(""STR""));"	10.288363933563232	0	1	0	0	0
/	5	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertArrayEquals(2,""3""});"	11.378594875335693	0	1	0	0	0
/	6	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	23.210164785385132	1	0	0	0	0
/	7	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().startsWith(""STR""));"	10.405302047729492	0	1	0	0	0
/	8	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause,exception.getCause()`isaplausiblecause);	10.986080169677734	0	1	0	0	0
/	9	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(3,exception.getArgs().length`isaplausible3);	11.03152084350586	0	1	0	0	0
/	10	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertFalse(exception.getMessage().isEmpty());	10.240257024765015	0	1	0	0	0
2	1	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	10.960290908813477	1	0	0	0	0
/	2	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",exceptionFile.getName());"	15.059360980987549	0	1	0	0	0
/	3	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(exceptionFile);	10.326527833938599	0	1	0	0	0
/	4	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	9.930674076080322	0	1	0	0	0
/	5	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.isFile());	9.91241979598999	0	1	0	0	0
/	6	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(exceptionFile,null);	19.446676015853882	0	1	0	0	0
/	7	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertEquals(expected,actual`.Thisexpected);	12.618592977523804	0	1	0	0	0
/	8	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.205502986907959	0	1	0	0	0
/	10	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(getUserDir());	39.57140779495239	0	1	0	0	0
/	11	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertNotEquals(newFile(""STR""),exceptionFile);"	10.621554136276245	0	1	0	0	0
3	9	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	43.30821490287781	0	1	0	0	0
/	10	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(testObject,""STR"",""STR""));"	10.77635383605957	0	1	0	0	0
/	18	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	30.866442918777466	0	1	0	0	0
0	0	fluent/fluent-logger-java	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertSame(loggerA0,loggerA1);	23.318302869796753	0	1	0	0	0
/	1	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerB0);	11.558074951171875	0	1	0	0	0
/	2	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA_lh0);	11.862496137619019	0	1	0	0	0
/	3	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA0,loggerB0);	12.10816216468811	0	1	0	0	0
/	4	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA1`isaplausibleloggerA0);	11.65779709815979	0	1	0	0	0
/	5	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotEquals(loggerA0,loggerA_lh1`isaplausibleloggerA0);	11.945872068405151	0	1	0	0	0
/	6	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA0!=loggerB0`isaplausibleloggerA0!=loggerB0);	11.517711877822876	0	1	0	0	0
/	9	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerB0);	17.2442889213562	0	1	0	0	0
/	10	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertFalse(loggerA0.equals(loggerA_lh1)`isaplausibleloggerA0.equals(loggerA_lh1));	12.689193964004517	0	1	0	0	0
/	13	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	21.648910999298096	0	1	0	0	0
0	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	35.06762218475342	1	0	0	0	0
/	1	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	34.76499891281128	0	1	0	0	0
/	2	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	34.686915159225464	0	1	0	0	0
/	3	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty()`isaplausibletrue);	34.603185176849365	0	1	0	0	0
/	4	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	78.6558928489685	1	0	0	0	0
/	6	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertArrayEquals(newString[0],doc.getDirtyFields());	137.6410632133484	0	1	0	0	0
/	11	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	33.031311988830566	0	1	0	0	0
/	12	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	35.033278942108154	0	1	0	0	0
/	13	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	32.765280961990356	0	1	0	0	0
/	14	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	35.39714694023132	0	1	0	0	0
1	0	orientechnologies/orientdb	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	36.939165115356445	0	1	0	0	0
/	1	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(prop.getLinkedClass()instanceofOClass);	39.3068962097168	0	1	0	0	0
/	2	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	38.2303512096405	1	0	0	0	0
/	3	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(null,prop.getLinkedClass());	38.629738092422485	0	1	0	0	0
/	4	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(classLinked,prop.getLinkedClass());	410.08647203445435	0	1	0	0	0
/	5	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(prop.getLinkedClass().isSubClassOf(classA));	37.17540693283081	0	1	0	0	0
/	6	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA,prop.getLinkedClass()`isaplausibleclassA,prop.getLinkedClass());	36.734262228012085	0	1	0	0	0
/	7	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	75.22408509254456	0	1	0	0	0
/	8	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA,prop.getLinkedClass()`isaplausibleclassA);	36.331485986709595	0	1	0	0	0
/	9	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertSame(schema.getClass(""STR""),classA);"	37.179701805114746	0	1	0	0	0
2	0	orientechnologies/orientdb	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	20.024379014968872	0	1	0	0	0
/	1	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(ginstanceofOrientGraph);	20.196539163589478	0	1	0	0	0
/	2	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertEquals(""STR"",g.getRawGraph().getURL());"	20.124017000198364	0	1	0	0	0
/	3	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	61.4336040019989	0	1	0	0	0
/	4	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	30.093860864639282	0	1	0	0	0
/	6	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(0,g.countVertices());	20.03582501411438	0	1	0	0	0
/	8	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(condition`.Thisg.vertices().hasNext());	21.246134042739868	0	1	0	0	0
/	9	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.getFeatures().supportsTransactions()`isaplausibleg.getFeatures().supportsTransactions());	19.961905241012573	0	1	0	0	0
/	10	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertEquals(""STR"",g.getRawGraph().getURL());"	40.83090400695801	0	1	0	0	0
/	11	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed()`isaplausibleg.isClosed());	20.189918994903564	0	1	0	0	0
3	0	orientechnologies/orientdb	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNull(doc.field(""STR""));"	33.629230976104736	0	1	0	0	0
/	1	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(doc.field(""STR"")instanceofMap);"	36.99633264541626	0	1	0	0	0
/	2	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(""STR"",((List<Map<String,Object>>)((Map<String,Object>)doc.field(""STR"")).get(""STR"")).get(3).get(""STR""));"	63.42168998718262	0	1	0	0	0
/	3	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertFalse(((Map<String,Object>)doc.field(""STR"")).isEmpty());"	37.20112586021423	0	1	0	0	0
/	4	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotNull(doc.field(""data"")`isaplausibledoc.field(""data""));"	36.378533124923706	0	1	0	0	0
/	5	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(((List<Object>)((Map<String,Object>)doc.field(""STR"")).get(""STR"")).contains(2));"	34.74247932434082	0	1	0	0	0
/	6	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(2,((List<Object>)((Map<String,Object>)doc.field(""data"")).get(""array"")).indexOf(3)`isaplausible2);"	34.889591217041016	0	1	0	0	0
/	7	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotEquals(""STR"",((List<Object>)((Map<String,Object>)doc.field(""STR"")).get(""STR"")).get(0));"	33.104275941848755	0	1	0	0	0
/	8	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertSame(object4,((List<Object>)((Map<String,Object>)doc.field(""data"")).get(""array"")).get(3)`isaplausibleobject4);"	35.39219284057617	0	1	0	0	0
/	9	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotSame(1,((List<Object>)((Map<String,Object>)doc.field(""STR"")).get(""STR"")).get(1));"	34.12064790725708	0	1	0	0	0
4	29	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(now1);	114.74719595909119	0	1	0	0	0
5	0	orientechnologies/orientdb	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertEquals(""STR"",doc.field(""STR""));"	36.86352729797363	0	1	0	0	0
/	1	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertTrue(doc.field(""STR"")instanceofcom.orientechnologies.orient.core.id.ORID);"	62.11401009559631	0	1	0	0	0
/	2	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotNull(doc.field(""STR""));"	32.84186100959778	0	1	0	0	0
/	3	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotEquals(expectedValue,doc.field(""fieldName"")`isaplausibleexpectedValue);"	33.95049810409546	0	1	0	0	0
/	4	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertSame(expectedValue,doc.field(""fieldName"")`isaplausibleexpectedValue);"	34.44377112388611	0	1	0	0	0
/	5	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotSame(expectedValue,doc.field(""fieldName"")`isaplausibleexpectedValue`isaplausibleexpectedValue,doc.field(""fieldName""));"	36.08115577697754	0	1	0	0	0
/	6	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertFalse(condition`isaplausiblecondition);	34.12458872795105	0	1	0	0	0
/	8	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertTrue(json.contains(""STR""));"	65.8029682636261	0	1	0	0	0
/	9	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNull(doc.field(""fieldName"")`isaplausibledoc.field(""fieldName""));"	31.846292972564697	0	1	0	0	0
/	10	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotSame(expectedValue,doc.field(""fieldName"")`isaplausibleexpectedValue,doc.field(""fieldName""));"	34.01113510131836	0	1	0	0	0
6	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	68.18085193634033	1	0	0	0	0
/	1	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	33.8965208530426	0	1	0	0	0
/	2	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	33.020095109939575	0	1	0	0	0
/	3	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	33.81652212142944	0	1	0	0	0
/	4	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex);	33.008151054382324	0	1	0	0	0
/	5	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	36.30453109741211	0	1	0	0	0
/	6	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(propertyIndexinstanceofOPropertyListIndexDefinition);	33.4636390209198	0	1	0	0	0
/	7	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	"assertNull(propertyIndex.get(""someKey"")`isaplausiblepropertyIndex.get(""someKey""));"	34.286031007766724	0	1	0	0	0
/	8	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	"assertNotEquals(propertyIndex.get(""someKey"")`isaplausible""someValue"",propertyIndex.get(""someKey""));"	33.98745775222778	0	1	0	0	0
/	9	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42)`isaplausiblekeysToAdd.containsKey(42));	33.65550518035889	0	1	0	0	0
7	0	orientechnologies/orientdb	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	62.650120973587036	1	0	0	0	0
/	1	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.size()>0);	20.9155490398407	0	1	0	0	0
/	2	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	18.709065914154053	0	1	0	0	0
/	3	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.isEmpty()`isaplausiblelist.isEmpty());	19.872519969940186	0	1	0	0	0
/	4	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	31.745986938476562	1	0	0	0	0
/	5	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	41.8533718585968	1	0	0	0	0
/	6	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	20.70590114593506	0	1	0	0	0
/	7	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(document)`isaplausiblelist.contains(document));	20.339213848114014	0	1	0	0	0
/	8	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	"assertEquals(""STR"",((List<ODocument>)db.query(newOSQLSynchQuery<Object>(""STR""))).get(0).field(""STR""));"	41.07041311264038	0	1	0	0	0
/	9	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,owner1.getIdentity()`isaplausible0);	20.829492807388306	0	1	0	0	0
8	1	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(!results.isEmpty());	43.594698905944824	0	1	0	0	0
/	2	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	41.18129825592041	0	1	0	0	0
/	3	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotEquals(0,results.size());	41.80187702178955	0	1	0	0	0
/	4	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.size()>0);	40.07594418525696	0	1	0	0	0
/	5	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.isEmpty()`isaplausibleresults.isEmpty());	41.46353626251221	0	1	0	0	0
/	9	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	80.82666110992432	1	0	0	0	0
/	10	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(0,results.size());	42.15941596031189	0	1	0	0	0
/	11	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results!=null`isaplausibleresults!=null);	41.74421811103821	0	1	0	0	0
/	14	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(0,results.size()`isaplausible0,results.size());	40.1313841342926	0	1	0	0	0
/	16	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	67.0810968875885	0	1	0	0	0
0	11	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	8.156317949295044	0	1	0	0	0
/	12	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null);	8.081237077713013	0	1	0	0	0
/	16	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus()`?);	12.238929033279419	0	1	0	0	0
/	17	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	"assertNotEquals(""STR"",response.getStatus().toString());"	30.020583868026733	0	1	0	0	0
/	19	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()instanceofResponseStatus);	8.143805265426636	0	1	0	0	0
/	21	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	641.1391179561615	0	1	0	0	0
/	22	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	7.977134943008423	0	1	0	0	0
/	23	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.OK);	8.70766282081604	0	1	0	0	0
/	27	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	9.418798923492432	1	0	0	0	0
/	28	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus().equals(ResponseStatus.OK)||response.getStatus().equals(ResponseStatus.REPLAYED_OTP));	8.766966104507446	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	1077.7781331539154	0	1	0	0	0
/	2	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertTrue(sha1str.equals(WARCRecordFormat.getDigestSha1(content)));	96.98000288009644	0	1	0	0	0
/	3	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertNotEquals(""STR"",WARCRecordFormat.getDigestSha1(content));"	380.27834606170654	0	1	0	0	0
/	4	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertNotNull(WARCRecordFormat.getDigestSha1(content)`isaplausibleWARCRecordFormat.getDigestSha1(content));	96.86517190933228	0	1	0	0	0
/	6	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertTrue(WARCRecordFormat.getDigestSha1(content).startsWith(""STR""));"	98.58231902122498	0	1	0	0	0
/	7	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertFalse(WARCRecordFormat.getDigestSha1(content).isEmpty());	96.42163610458374	0	1	0	0	0
/	8	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertNotEquals(sha1str,""STR"");"	92.02133917808533	0	1	0	0	0
/	9	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertNotSame(sha1str,WARCRecordFormat.getDigestSha1(content)`isaplausiblesha1str,WARCRecordFormat.getDigestSha1(content));	91.31227016448975	0	1	0	0	0
/	10	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertArrayEquals(sha1str.toCharArray(),WARCRecordFormat.getDigestSha1(content).toCharArray()`isaplausiblesha1str.toCharArray());	94.38680005073547	0	1	0	0	0
/	11	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertTrue(sha1str.contains(WARCRecordFormat.getDigestSha1(content))`isaplausiblesha1str.contains(WARCRecordFormat.getDigestSha1(content)));	91.9720561504364	0	1	0	0	0
1	4	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(metadata.containsKey(""STR"")&&metadata.getFirstValue(""STR"").equals(""STR""));"	27.35161805152893	0	1	0	0	0
/	5	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getFirstValue(""STR""));"	16.402616024017334	0	1	0	0	0
/	6	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertFalse(metadata.containsKey(""STR""));"	18.312079906463623	0	1	0	0	0
/	8	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(""STR"",metadata.getFirstValue(""STR""));"	16.75045394897461	0	1	0	0	0
/	10	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertSame(""STR"",metadata.getFirstValue(""STR""));"	17.10465908050537	0	1	0	0	0
/	11	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertFalse(fields.containsKey(""STR""));"	32.37821388244629	0	1	0	0	0
/	12	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotSame(""STR"",metadata.getFirstValue(""STR""));"	17.389408111572266	0	1	0	0	0
/	13	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNull(fields.get(""key2"")`isaplausiblefields.get(""key2""));"	16.713091135025024	0	1	0	0	0
/	14	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotSame(""STR"",metadata.getFirstValue(""STR""));"	16.833660125732422	0	1	0	0	0
/	16	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertFalse(fields.isEmpty());	30.859758138656616	0	1	0	0	0
0	0	sofastack/sofa-bolt	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	17.365411043167114	0	1	0	0	0
/	1	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertTrue(retinstanceofString);	16.348624229431152	0	1	0	0	0
/	3	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertNotEquals(""STR"",ret);"	17.13026189804077	0	1	0	0	0
/	5	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	67.01824903488159	0	1	0	0	0
/	6	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertNotEquals(""STR"",ret);"	17.812942028045654	0	1	0	0	0
/	7	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	32.54750990867615	0	1	0	0	0
/	8	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(condition)`.Thisret.startsWith(""hello""));"	18.74309802055359	0	1	0	0	0
/	9	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	33.46352791786194	0	1	0	0	0
/	11	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	32.266637086868286	0	1	0	0	0
/	12	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""expectedSubstring"")`isaplausibleret.contains(""expectedSubstring""));"	17.59410786628723	0	1	0	0	0
0	0	myabc/markdownj	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	5.039597988128662	0	1	0	0	0
/	1	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	5.514848947525024	0	1	0	0	0
/	2	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,tokens.size()`);	9.240670919418335	0	1	0	0	0
/	3	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertFalse(tokens.contains(""STR""));"	6.063318729400635	0	1	0	0	0
/	7	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	25.27434992790222	0	1	0	0	0
/	8	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.076298952102661	0	1	0	0	0
/	9	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	19.282524824142456	0	1	0	0	0
/	11	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	12.809650897979736	0	1	0	0	0
/	14	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.687721252441406	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertEquals(1002,invalidHandshakeException.getCloseCode());	17.162638187408447	0	1	0	0	0
/	1	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()>=1000&&invalidHandshakeException.getCloseCode()<=2999);	9.879029035568237	0	1	0	0	0
/	2	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(1001,invalidHandshakeException.getCloseCode());	8.542791843414307	0	1	0	0	0
/	3	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotNull(invalidHandshakeException);	8.351721048355103	0	1	0	0	0
/	4	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertFalse(invalidHandshakeException.getCloseCode()==0`isaplausibleinvalidHandshakeException.getCloseCode()==0);	8.705536127090454	0	1	0	0	0
/	5	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotSame(0,invalidHandshakeException.getCloseCode());	8.362462997436523	0	1	0	0	0
/	6	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertSame(1002,invalidHandshakeException.getCloseCode()`isaplausible1002);	8.743771076202393	0	1	0	0	0
/	7	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeExceptioninstanceofInvalidHandshakeException`isaplausibleinvalidHandshakeExceptioninstanceofInvalidHandshakeException);	8.624701023101807	0	1	0	0	0
/	8	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotSame(null,invalidHandshakeException`isaplausiblenull,invalidHandshakeException);	9.865381717681885	0	1	0	0	0
/	11	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertArrayEquals(2,3});	10.220411777496338	0	1	0	0	0
0	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	6.986233711242676	0	1	0	0	0
/	1	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	60.105380058288574	0	1	0	0	0
/	2	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz.length>0);	7.581581115722656	0	1	0	0	0
/	4	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	29.903145790100098	0	1	0	0	0
/	5	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	14.09829306602478	0	1	0	0	0
/	6	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazz);	7.454691171646118	0	1	0	0	0
/	7	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,0`isaplausibleexp.length);	7.9475860595703125	0	1	0	0	0
/	8	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp,clazz`isaplausibleexp);	7.86919093132019	0	1	0	0	0
/	9	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));	8.718814373016357	0	1	0	0	0
/	10	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(Arrays.asList(clazz).contains(null));	8.60502314567566	0	1	0	0	0
1	0	rockagen/commons-lib	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[0]));"	27.772911310195923	0	1	0	0	0
/	1	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertTrue(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).contains(""STR""));"	10.662153005599976	0	1	0	0	0
/	2	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertFalse(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).isEmpty());	9.98575210571289	0	1	0	0	0
/	3	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43})`isaplausible""[nodata]"",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));"	62.51355004310608	0	1	0	0	0
/	4	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNotNull(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));	9.398681879043579	0	1	0	0	0
/	6	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));"	11.491777896881104	0	1	0	0	0
/	8	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertTrue(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).startsWith(""STR""));"	8.473843812942505	0	1	0	0	0
/	10	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotSame(""STR"",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));"	17.467586040496826	0	1	0	0	0
/	11	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertArrayEquals(newbyte[]{0x41,0x42,0x43},CommUtil.hexdump(""ABC"".getBytes()).getBytes()`isaplausiblenewbyte[]{0x41,0x42,0x43},CommUtil.hexdump(""ABC"".getBytes()).getBytes());"	9.53820538520813	0	1	0	0	0
/	12	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(CommUtil.hexdump(""ABC"".getBytes())`isaplausible""414243"",CommUtil.hexdump(""ABC"".getBytes()));"	8.190757274627686	0	1	0	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(123.45));"	27.70058798789978	0	1	0	0	0
/	1	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertTrue(moneyToStrRUR.convert(123.45).contains(""STR""));"	14.38916802406311	0	1	0	0	0
/	2	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrRUR.convert(123.45));	11.85088586807251	0	1	0	0	0
/	3	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrUSD.convert(200.00));"	11.515837907791138	0	1	0	0	0
/	4	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertFalse(moneyToStrUSD.convert(500.00).isEmpty());	12.347548007965088	0	1	0	0	0
/	5	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotSame(moneyToStrRUR,moneyToStrUSD`isaplausiblemoneyToStrRUR,moneyToStrUSD);	12.346236228942871	0	1	0	0	0
/	6	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertEquals(2,MoneyToStr.Currency.values().length`isaplausible2);	12.404757022857666	0	1	0	0	0
/	8	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotSame(moneyToStrUAHRUS,moneyToStrUAHENG);	12.940314769744873	0	1	0	0	0
/	9	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertTrue(moneyToStrUAHENG.convert(100.00).startsWith(""onehundred"")`isaplausiblemoneyToStrUAHENG.convert(100.00).startsWith(""onehundred""));"	12.678367853164673	0	1	0	0	0
/	11	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrRUR.convert(200.00));"	12.921698808670044	0	1	0	0	0
0	0	fabric8io/fabric8-maven-plugin	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotEquals(""STR"",map.get(""STR""));"	11.707364082336426	0	1	0	0	0
/	1	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR""));"	11.633506059646606	0	1	0	0	0
/	2	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	11.196847915649414	0	1	0	0	0
/	3	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	21.3764009475708	0	1	0	0	0
/	4	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNull(map.get(""STR""));"	11.141663074493408	0	1	0	0	0
/	5	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.containsKey(""unexistentKey"")`isaplausiblemap.containsKey(""unexistentKey""));"	11.039199113845825	0	1	0	0	0
/	7	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	22.385600090026855	0	1	0	0	0
/	8	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsValue(""STR""));"	10.50820803642273	0	1	0	0	0
/	9	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size()`isaplausible1);	11.206463813781738	0	1	0	0	0
/	10	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotEquals(map.get(""eins"")`isaplausible""two"",map.get(""eins""));"	11.421720027923584	0	1	0	0	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	7.9395318031311035	1	0	0	0	0
/	1	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	8.830029010772705	0	1	0	0	0
/	2	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	20.265530109405518	1	0	0	0	0
/	4	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	8.701872110366821	0	1	0	0	0
/	5	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	30.61315894126892	1	0	0	0	0
/	8	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	8.770909786224365	0	1	0	0	0
/	9	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()<0);	8.886415719985962	0	1	0	0	0
/	12	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p);	7.999001979827881	0	1	0	0	0
/	13	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal()`isaplausible0);	8.953646898269653	0	1	0	0	0
/	14	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<=10`isaplausiblep.getDistanceToGoal()<=10);	9.915760278701782	0	1	0	0	0
1	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	10.323506116867065	1	0	0	0	0
/	1	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	11.554205894470215	0	1	0	0	0
/	2	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(condition)`,whichchecksifagivenconditionisfalse.);	12.485804080963135	0	1	0	0	0
/	4	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(object)`,whichchecksifagivenobjectisnotnull.);	11.617520093917847	0	1	0	0	0
/	8	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	22.38420081138611	1	0	0	0	0
/	10	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	10.379814147949219	0	1	0	0	0
/	11	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(expected,actual)`,whichchecksiftwoobjectsrefertothesameinstance.);	12.602880001068115	0	1	0	0	0
/	12	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertArrayEquals(expectedArray,actualArray)`,whichchecksiftwoarraysareequal.`isaplausibleexpectedArray,actualArray)`,whichchecksiftwoarraysareequal.);	11.290958881378174	0	1	0	0	0
/	15	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	36.77272391319275	0	1	0	0	0
/	16	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(expected,actual)`,whichchecksiftwoobjectsdonotrefertothesameinstance.);	10.9249107837677	0	1	0	0	0
2	0	redraiment/jactiverecord	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	5.357486009597778	0	1	0	0	0
/	1	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertEquals(3,actuals.length);	6.171195030212402	0	1	0	0	0
/	2	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertTrue(actuals.length>0);	5.3698530197143555	0	1	0	0	0
/	3	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertFalse(actuals.length==0`isaplausibleactuals.length==0);	6.363620042800903	0	1	0	0	0
/	4	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotEquals(0,actuals.length`isaplausible0);	7.766984939575195	0	1	0	0	0
/	5	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotNull(actuals);	5.778095722198486	0	1	0	0	0
/	6	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotSame(from,to`isaplausiblefrom,to);	6.331094980239868	0	1	0	0	0
/	13	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotEquals(0,actuals.length);	6.604674816131592	0	1	0	0	0
/	23	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertNotSame(actuals,newString[]{""STR"",""STR"",""STR""});"	11.311588048934937	0	1	0	0	0
/	26	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertNotSame(""STR"",Arrays.asList(""STR"",""STR"",""STR""),actuals);"	7.412410259246826	0	1	0	0	0
0	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	12.264855146408081	0	1	0	0	0
/	1	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue()`:);	8.485690832138062	0	1	0	0	0
/	2	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull()`:);	6.298755168914795	0	1	0	0	0
/	3	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotEquals(""STR"",macAddress.toString());"	8.212997913360596	0	1	0	0	0
/	4	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	6.130370140075684	0	1	0	0	0
/	5	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().contains(""STR""));"	6.9740071296691895	0	1	0	0	0
/	6	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotSame(""00:ff:00:ff:00:ff"",macAddress.toString()`isaplausible""00:ff:00:ff:00:ff"",macAddress.toString());"	8.365355014801025	0	1	0	0	0
/	8	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().matches(""STR""));"	7.8484179973602295	0	1	0	0	0
/	9	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotSame(""00-ff-00-ff-00-ff"",macAddress.toString()`isaplausible""00-ff-00-ff-00-ff"",macAddress.toString());"	8.455533981323242	0	1	0	0	0
/	10	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotEquals(""STR"",macAddress.toString());"	8.606811285018921	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	9.413089990615845	1	0	0	0	0
/	1	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	19.34589123725891	1	0	0	0	0
/	12	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	31.14402675628662	1	0	0	0	0
/	15	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	30.569226264953613	1	0	0	0	0
/	25	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	21.48357892036438	1	0	0	0	0
1	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	10.289444208145142	1	0	0	0	0
/	1	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue()`.Here'sanexample:);	10.492668151855469	0	1	0	0	0
/	2	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull()`,whichchecksifanobjectisnotnull.Here'sanexample:);	10.85614013671875	0	1	0	0	0
/	4	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse()`,whichchecksifaconditionisfalse.Here'sanexample:);	10.152866125106812	0	1	0	0	0
/	5	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals()`,whichchecksiftwovaluesareequal?Here'sanexample:);	11.183005094528198	0	1	0	0	0
/	6	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals()`,whichchecksiftwovaluesarenotequal.Here'sanexample:);	11.985357999801636	0	1	0	0	0
/	8	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame()`,whichchecksiftwoobjectsrefertodifferentmemorylocations.Here'sanexample:);	12.870635747909546	0	1	0	0	0
/	9	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertArrayEquals()`,whichchecksiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray`isaplausible)`,whichchecksiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	12.923320055007935	0	1	0	0	0
/	10	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals()`isaplausibleexpected,actual);	12.905123233795166	0	1	0	0	0
/	11	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull()`,whichchecksifanobjectisnull.Here'sanexample:`object`isaplausibleobject);	12.384876012802124	0	1	0	0	0
0	1	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	24.184036016464233	0	1	0	0	0
/	2	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	13.188133239746094	0	1	0	0	0
/	4	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue()`.Here'sanexampleofhowyoucangeneratethisCollectors.toImmutableSet()instanceofImmutableSet);	6.900489330291748	0	1	0	0	0
/	5	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSize,actualSize`.Youcanreplace`expectedSize`withtheexpectedsizeofthe`ImmutableSet`and`actualSize`withtheactualsizeofthe`ImmutableSet`.Here'sanexample:);	9.94080114364624	0	1	0	0	0
0	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	26.97941303253174	0	1	0	0	0
/	4	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actualinstanceofNALUnit);	24.28521704673767	0	1	0	0	0
/	17	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	46.61701035499573	0	1	0	0	0
/	18	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(condition`.Thisactual!=null);	26.87314796447754	0	1	0	0	0
/	25	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	62.60392498970032	0	1	0	0	0
/	27	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	45.98151779174805	0	1	0	0	0
0	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	12.66034197807312	1	0	0	0	0
/	1	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	18.706044912338257	1	0	0	0	0
/	4	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals()`:);	11.233509063720703	0	1	0	0	0
/	5	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull()`:);	10.113095045089722	0	1	0	0	0
/	6	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse()`tomatcher.find());	12.120033025741577	0	1	0	0	0
/	7	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals()`?This0,matcher.start());	12.382975101470947	0	1	0	0	0
/	8	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	21.397541999816895	1	0	0	0	0
/	11	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(expected,actual`);	11.822841167449951	0	1	0	0	0
/	12	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	54.95662331581116	1	0	0	0	0
/	13	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	198.26929211616516	1	0	0	0	0
1	4	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	34.09084892272949	1	0	0	0	0
/	8	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull()`:);	11.11188817024231	0	1	0	0	0
/	10	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	21.724809885025024	1	0	0	0	0
/	11	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	19.682974100112915	1	0	0	0	0
/	12	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	28.529659748077393	1	0	0	0	0
/	13	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	10.623390913009644	0	1	0	0	0
/	17	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(8,matcher.regionEnd());	10.449185132980347	0	1	0	0	0
/	18	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	27.314857959747314	1	0	0	0	0
/	21	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	20.105976104736328	1	0	0	0	0
/	24	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt()`?This)`methodreturnsfalse,indicatingthatthematcherdoesnotmatchthegiveninputatthebeginningoftheregion.);	11.851479053497314	0	1	0	0	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	5.32616400718689	1	0	0	0	0
/	1	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass!=null);	6.38381814956665	0	1	0	0	0
/	2	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	6.972663640975952	0	1	0	0	0
/	3	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getSimpleName().equals(""HelloClass"")`isaplausiblehelloClass.getSimpleName().equals(""HelloClass""));"	7.244425058364868	0	1	0	0	0
/	4	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface()`isaplausiblehelloClass.isInterface());	6.77424693107605	0	1	0	0	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getMethods().length);	6.418834209442139	0	1	0	0	0
/	7	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredFields().length>0`isaplausiblehelloClass.getDeclaredFields().length>0);	6.982699871063232	0	1	0	0	0
/	8	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotSame(Object.class,helloClass.getSuperclass()`isaplausibleObject.class,helloClass.getSuperclass());	6.8486950397491455	0	1	0	0	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getModifiers()==Modifier.PUBLIC`isaplausiblehelloClass.getModifiers()==Modifier.PUBLIC);	6.596494913101196	0	1	0	0	0
/	10	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isEnum()`isaplausiblehelloClass.isEnum()`isaplausiblehelloClass.isEnum()`isaplausiblehelloClass.isEnum());	6.8885722160339355	0	1	0	0	0
