TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	2	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	23.4397451877594	0	0
/	3	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs().isEmpty());	39.32310605049133	0	0
/	15	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	35.82104015350342	0	0
/	18	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	44.78699588775635	0	0
/	20	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs().isEmpty());	22.16707706451416	0	0
/	25	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	47.74583196640015	0	0
1	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	35.38751292228699	0	0
/	1	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.opts.size());	45.18275189399719	0	0
/	2	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.isEmpty());	27.974803924560547	0	0
/	3	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR""));"	27.06217885017395	0	0
/	4	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.opts.isEmpty());	26.82716989517212	0	0
/	5	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	44.05186486244202	0	0
/	6	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR"")||opts.args.contains(""STR""));"	64.15337228775024	0	0
/	7	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertFalse(opts.args.contains(""STR"")&&opts.opts.containsKey(""STR""));"	29.472187995910645	0	0
/	9	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.isEmpty());	43.36658811569214	0	0
/	10	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	149.1696741580963	0	0
/	16	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(attrs()!=null);	41.70485877990723	0	0
3	1	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	21.7853581905365	0	0
/	3	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(attrs(tail));	55.282052993774414	0	0
/	4	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	116.20365786552429	0	0
/	15	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotSame(tail,attrs(tail));	22.564656972885132	0	0
/	21	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotEquals(tail,null);	22.624703884124756	0	0
/	24	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(Attributes.class.isAssignableFrom(attrs(tail).getClass()));	77.20318984985352	0	0
/	25	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotSame(EndLabel.tail(Label.of(""STR""),1d,2d),tail);"	24.49953603744507	0	0
/	26	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertFalse(tail.equals(null));	22.012387990951538	0	0
/	28	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(attrs(tail));	24.48042321205139	0	0
4	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	37.71433997154236	1	0
4	1	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	36.844444036483765	0	0
/	2	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	36.77649807929993	0	0
/	4	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	32.94302296638489	0	0
/	5	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	140.32812809944153	1	0
/	6	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	36.39158391952515	0	0
/	7	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	34.76351594924927	0	0
/	9	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	34.77169108390808	0	0
/	12	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(null,doc.getDirtyFields());	34.04215097427368	0	0
/	14	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	69.3915741443634	1	0
5	0	orientechnologies/orientdb	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	40.4591588973999	0	0
/	1	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(prop.isNotNull());	38.8264422416687	0	0
/	2	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertTrue(schema.existsClass(""STR""));"	37.85664987564087	0	0
/	3	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertNotNull(classA.getProperty(""STR""));"	40.69711089134216	0	0
/	4	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertTrue(schema.existsClass(""STR""));"	38.8402841091156	0	0
/	5	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(OType.LINK,prop.getType());	37.439489126205444	0	0
/	6	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(0,schema.countClasses());	39.102190017700195	0	0
/	7	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(classA.properties().isEmpty());	38.86854386329651	0	0
/	8	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	38.426079988479614	0	0
/	9	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertEquals(""STR"",classA.getName());"	37.3380172252655	0	0
6	0	orientechnologies/orientdb	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	21.474899768829346	0	0
/	6	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotSame(graph,g);	20.02484893798828	0	0
/	7	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(graph,g);	19.372342824935913	0	0
/	8	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	128.4911539554596	0	0
/	12	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	20.430471897125244	0	0
/	20	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	139.27467393875122	0	0
/	21	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(0,g.countVertices());	382.56704211235046	0	0
/	22	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	135.0432162284851	0	0
/	29	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	133.24502396583557	0	0
7	0	orientechnologies/orientdb	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(doc.field(""STR""),""STR"");"	37.777300119400024	1	0
7	1	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotNull(doc.field(""STR""));"	39.12655687332153	0	0
/	2	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	assertTrue(!data.isEmpty());	194.9268581867218	0	0
/	3	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertSame(parentArray,doc.field(""STR""));"	38.916898012161255	0	0
/	4	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	assertTrue(parentArray.contains(2));	34.92890477180481	0	0
/	5	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	assertEquals(4,parentArray.size());	41.49811315536499	0	0
/	6	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertFalse(data.containsKey(""STR""));"	35.7257821559906	0	0
/	7	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	assertNotEquals(5,parentArray.size());	36.80189776420593	0	0
/	8	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(""STR"",data.keySet().iterator().next());"	752.7313318252563	0	0
/	9	//	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	assertEquals(3,parentArray.get(2));	84.69229388237	0	0
9	0	orientechnologies/orientdb	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertEquals(doc1,doc1.field(""STR""));"	62.56820797920227	0	0
/	1	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertEquals(String.class,doc1.field(""STR"").getClass());"	60.578341007232666	0	0
/	2	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNull(doc1.field(""STR""));"	35.90926194190979	0	0
/	3	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertTrue(json.matches(""STR""));"	326.29381489753723	0	0
/	4	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotEquals(""STR"",json);"	37.64589214324951	0	0
/	5	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertTrue(doc1.containsField(""STR""));"	322.4669210910797	0	0
/	6	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertFalse(doc1.containsField(""STR""));"	37.744179010391235	0	0
/	7	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotNull(doc1.field(""STR""));"	34.60018992424011	0	0
/	8	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotEquals(""STR"",doc1.field(""STR""));"	32.664278984069824	0	0
/	11	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertTrue(doc1.field(""STR"").equals(""STR""));"	34.52516007423401	0	0
10	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	35.88417196273804	1	0
10	1	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42)&&keysToAdd.containsKey(555));	35.75691604614258	0	0
/	2	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.size()==2&&keysToAdd.containsKey(42)&&keysToAdd.containsKey(555));	35.74487018585205	0	0
/	3	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.size()==2);	38.241188049316406	0	0
/	4	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	38.02044630050659	0	0
/	5	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	35.92811608314514	0	0
/	6	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(2,keysToAdd.size());	38.481269121170044	0	0
/	7	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsValue(1)&&keysToAdd.containsValue(1));	36.3730309009552	0	0
/	8	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd,removedKeys);	39.30464792251587	0	0
/	9	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,removedKeys);	38.364173889160156	0	0
11	0	orientechnologies/orientdb	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	21.400933265686035	1	0
11	1	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(!list.isEmpty());	24.234891891479492	0	0
/	2	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	21.683954000473022	0	0
/	3	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.isEmpty());	21.392744302749634	0	0
/	4	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	260.91993498802185	1	0
/	5	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	21.567271947860718	0	0
/	6	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.size()==1);	249.7513711452484	0	0
/	7	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(2,list.size());	22.3296480178833	0	0
/	8	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	"assertEquals(""STR"",list.get(0).field(""STR""));"	21.50330114364624	0	0
/	9	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	"assertEquals(""STR"",list.get(0).field(""STR"").toString());"	30.46097731590271	0	0
12	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	83.16060376167297	1	0
/	2	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.size()>=0);	43.665079832077026	0	0
/	3	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	42.35507893562317	0	0
