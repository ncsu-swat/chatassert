TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	myabc/markdownj	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	5.915615081787109	0	0
/	1	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.0520498752594	0	0
/	3	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.079612970352173	0	0
/	5	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	5.734896898269653	0	0
/	6	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertFalse(tokens.contains(""STR""));"	5.82439398765564	0	0
/	10	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	21.236304998397827	0	0
/	13	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	9.859541893005371	0	0
1	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(0,invalidHandshakeException.getCloseCode());	22.696624755859375	0	0
/	2	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertEquals(1002,invalidHandshakeException.getCloseCode());	14.016435861587524	0	0
/	3	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()!=0);	6.991504192352295	0	0
/	4	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotNull(invalidHandshakeException);	7.134246110916138	0	0
/	5	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNull(invalidHandshakeException.getMessage());	7.421166181564331	0	0
/	6	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertFalse(invalidHandshakeException.getCloseCode()==0);	7.824410676956177	0	0
/	8	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	"assertTrue(invalidHandshakeException.toString().contains(""STR""));"	7.48071026802063	0	0
/	9	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotSame(0,invalidHandshakeException.getCloseCode());	7.853071212768555	0	0
/	10	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNull(invalidHandshakeException.getMessage());	21.525875329971313	0	0
/	11	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(1000,invalidHandshakeException.getCloseCode());	23.326926231384277	0	0
2	0	NanoHttpd/nanohttpd	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertEquals(""STR""+expiresString,cookie.getHTTPHeader());"	15.043853759765625	0	0
/	1	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertTrue(cookie.getHTTPHeader().startsWith(""STR""));"	13.164264917373657	0	0
/	2	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotNull(cookie.getHTTPHeader());	12.93858289718628	0	0
/	3	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertNotEquals(""STR"",cookie.getHTTPHeader());"	14.161417007446289	0	0
/	4	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertFalse(cookie.getHTTPHeader().isEmpty());	13.364815950393677	0	0
/	5	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertNotSame(""STR""+expiresString,cookie.getHTTPHeader());"	13.615328073501587	0	0
/	6	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertSame(""STR""+expiresString,cookie.getHTTPHeader());"	14.149085998535156	0	0
/	7	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertTrue(cookie.getHTTPHeader().contains(""STR""));"	14.071900844573975	0	0
/	8	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertNotSame(""STR"",cookie.getHTTPHeader());"	13.102219104766846	0	0
/	9	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertEquals(28,cookie.getHTTPHeader().length());	13.084586143493652	0	0
3	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	6.196367979049683	0	0
/	1	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	6.440987825393677	0	0
/	2	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazz);	6.4462268352508545	0	0
/	3	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz.length>0);	7.439740180969238	0	0
/	4	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz.length>0);	12.674323081970215	0	0
/	8	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp[0],clazz[0]);	7.201006889343262	0	0
/	9	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp[1],clazz[1]);	13.392091751098633	0	0
/	10	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));	7.022871255874634	0	0
/	12	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	13.328837871551514	0	0
/	13	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	18.65088391304016	0	0
/	10	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertTrue(!CommUtil.hexdump(bs.getBytes()).isEmpty());	7.174694299697876	0	0
/	11	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNotNull(CommUtil.hexdump(bs.getBytes()));	9.105538129806519	0	0
/	18	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertFalse(CommUtil.hexdump(bs.getBytes()).startsWith(""STR""));"	57.43980884552002	0	0
/	21	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotSame(""STR"",CommUtil.hexdump(bs.getBytes()));"	7.155577898025513	0	0
/	1	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(CommUtil.escapeJava(""STR""));"	100.83400106430054	0	0
/	2	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertTrue(!CommUtil.escapeJava(""STR"").isEmpty());"	7.9619550704956055	0	0
/	5	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertFalse(CommUtil.escapeJava(""STR"").isEmpty());"	8.161991357803345	0	0
/	13	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertFalse(""STR"".equals(CommUtil.escapeJava(""STR"")));"	25.529434204101562	0	0
5	22	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	24.238880157470703	1	0
/	2	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrRUR.convert(100.0));	10.549216032028198	0	0
/	3	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrRUR.convert(100.0));"	10.26820683479309	0	0
/	4	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertTrue(!moneyToStrRUR.convert(100.0).isEmpty());	11.202052116394043	0	0
/	5	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrRUR.convert(100.0));"	10.537839889526367	0	0
/	7	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertFalse(moneyToStrRUR.convert(100.0).isEmpty());	10.864573955535889	0	0
/	8	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotEquals(null,moneyToStrRUR.convert(100.0));	10.844356775283813	0	0
/	9	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertTrue(moneyToStrRUR.convert(100.0).length()>0);	10.42747974395752	0	0
/	13	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertNotSame(""STR"",moneyToStrRUR.convert(100.0).trim());"	11.425341844558716	0	0
/	14	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertTrue(moneyToStrRUR.convert(100.0).startsWith(""STR""));"	11.102022886276245	0	0
/	15	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertFalse(moneyToStrRUR.convert(100.0).endsWith(""STR""));"	11.15377402305603	0	0
7	0	fabric8io/fabric8-maven-plugin	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertSame(""STR"",map.get(""STR""));"	23.970080852508545	0	0
/	1	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	10.006803035736084	0	0
/	2	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR""));"	9.90800404548645	0	0
/	3	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	19.63153624534607	0	0
/	7	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.containsKey(""STR""));"	9.593622207641602	0	0
/	8	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNull(map.get(""STR""));"	9.378223896026611	0	0
/	9	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotNull(map.get(""STR""));"	9.851273775100708	0	0
/	10	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotEquals(""STR"",map.get(""STR""));"	9.808576107025146	0	0
/	11	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertNotSame(""STR"",map.get(""STR""));"	10.156001806259155	0	0
/	12	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(map,map);	92.2030098438263	0	0
8	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	9.690436840057373	1	0
8	1	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	7.343524932861328	0	0
/	2	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	15.159287691116333	1	0
/	3	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()<0);	7.2673962116241455	0	0
/	4	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	8.130587100982666	0	0
/	5	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p);	7.386279106140137	0	0
/	6	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	44.42506289482117	1	0
/	7	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	7.629045009613037	0	0
/	8	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<=100);	7.4752116203308105	0	0
/	9	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()>100);	7.855572938919067	0	0
9	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	13.694983959197998	1	0
9	1	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=1);	9.28450083732605	0	0
/	2	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	8.822764873504639	0	0
/	3	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	52.451992988586426	1	0
/	4	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<=0);	11.31397032737732	0	0
/	5	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	9.15270185470581	0	0
/	7	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	54.96313405036926	0	0
/	9	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	60.22513699531555	1	0
/	11	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	11.077243089675903	0	0
/	14	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(panel,panel);	9.055063962936401	0	0
/	15	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(a,a);	30.40888285636902	0	0
13	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	59.835150957107544	1	0
13	1	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotEquals(""STR"",macAddress.toString());"	6.126399040222168	0	0
/	2	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().matches(""STR""));"	42.43061399459839	0	0
/	3	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	6.33999490737915	0	0
/	4	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	6.434961318969727	0	0
/	5	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotSame(""STR"",macAddress.toString());"	8.70079779624939	0	0
/	6	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress);	6.471045970916748	0	0
/	8	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().startsWith(""STR""));"	6.381108999252319	0	0
/	9	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertFalse(macAddress.toString().endsWith(""STR""));"	6.0962278842926025	0	0
/	10	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotEquals(""STR"",macAddress.toString());"	6.275705814361572	0	0
14	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	11.310770273208618	1	0
/	1	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	18.366092920303345	1	0
/	10	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	18.531327962875366	1	0
/	14	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	95.15751385688782	1	0
14	22	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(null,parsed);	87.96237802505493	0	0
/	25	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	87.27367997169495	1	0
/	26	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	19.94421911239624	1	0
15	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	9.382715940475464	1	0
15	1	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exception.getMessage().contains(MESSAGE));	11.684571981430054	0	0
/	2	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception);	9.64195990562439	0	0
/	4	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotEquals(""STR"",exception.getMessage());"	9.456846714019775	0	0
/	5	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	63.2649359703064	1	0
/	6	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	9.972736835479736	0	0
/	7	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame(null,exception);	10.20871090888977	0	0
/	10	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotEquals(""STR"",exception.getClass());"	10.215396165847778	0	0
/	11	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	62.94228482246399	1	0
/	12	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	28.76325011253357	1	0
16	0	gvlasov/collections-utils	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	22.159192085266113	0	0
/	1	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	22.349505186080933	0	0
/	6	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(java.util.stream.Collectors.toSet());	36.1803560256958	0	0
/	9	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(java.util.stream.Collectors.toSet());	21.618700981140137	0	0
/	16	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue(true);	23.804083108901978	0	0
/	2	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	23.982272148132324	0	0
/	5	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(null,actual);	25.230583906173706	0	0
/	12	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual!=null);	22.987706899642944	0	0
/	16	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	200.13766503334045	0	0
/	21	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertFalse(actual==null);	24.536768913269043	0	0
/	23	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotSame(null,actual);	24.956517219543457	0	0
/	29	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	216.59105014801025	0	0
/	13	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotSame(ToJSON.toJSON(cl1),""STR"");"	257.35853385925293	0	0
/	14	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(ToJSON.toJSON(cl1));	25.206873893737793	0	0
/	15	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(ToJSON.toJSON(cl1).isEmpty());	24.34280300140381	0	0
/	16	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(""STR"",ToJSON.toJSON(cl1));"	25.40058183670044	0	0
/	17	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(!ToJSON.toJSON(cl1).equals(""STR""));"	26.039143800735474	0	0
/	19	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotSame(ToJSON.toJSON(cl1),""STR"");"	25.2245991230011	0	0
/	20	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(!ToJSON.toJSON(cl1).trim().isEmpty());	24.63302993774414	0	0
/	21	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotEquals(0,ToJSON.toJSON(cl1).length());	26.262983798980713	0	0
/	25	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(ToJSON.toJSON(cl1).startsWith(""STR""));"	24.40292978286743	0	0
/	26	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertFalse(ToJSON.toJSON(cl1).contains(""STR""));"	24.307475805282593	0	0
19	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	10.901664018630981	1	0
/	1	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	19.150929927825928	1	0
/	2	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	77.4497389793396	1	0
19	4	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,matcher.find());	10.821062088012695	0	0
/	5	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher);	9.471538305282593	0	0
/	9	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(matcher.matches());	9.625821828842163	0	0
/	10	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher);	18.30422306060791	0	0
/	11	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(1,matcher.find()?1:0);	10.45022702217102	0	0
/	12	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	25.33547329902649	1	0
/	13	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	17.966353178024292	1	0
20	8	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	11.54273009300232	1	0
/	12	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	10.365377187728882	0	0
/	14	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	82.84694409370422	1	0
/	15	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	84.94032001495361	1	0
/	19	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	27.74704885482788	1	0
/	20	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	18.577214002609253	1	0
/	21	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	9.834091901779175	0	0
/	24	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	78.33295702934265	0	0
/	25	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	25.520792961120605	1	0
21	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	5.178505897521973	1	0
21	1	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getName().equals(""STR""));"	5.22076416015625	0	0
/	2	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getDeclaredMethod(""STR"").invoke(helloClass.newInstance()));"	5.420392990112305	0	0
/	3	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertNotNull(helloClass.getDeclaredMethod(""STR"").invoke(helloClass.getDeclaredConstructor().newInstance()));"	9.632526159286499	0	0
/	4	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getPackage().getName().equals(""STR""));"	5.658076763153076	0	0
/	5	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredMethods().length);	5.417801856994629	0	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	10.713533878326416	1	0
/	7	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getSimpleName().equals(""STR""));"	5.345462083816528	0	0
/	8	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getName().equals(""STR""));"	17.988282680511475	0	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.getMethods().length==0);	5.264918088912964	0	0
