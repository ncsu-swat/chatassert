TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.equals(b));	7.853507041931152	1	0	0	0	0
	1	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a.hashCode(),b.hashCode());	10.322598934173584	0	1	0	0	0
	2	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotNull(a);	7.742130756378174	0	1	0	0	0
	3	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotEquals(a,b`isanotherplausibleObjecto));	16.03193187713623	0	1	0	0	0
	4	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertSame(a.getClass(),b.getClass());	8.40785002708435	0	1	0	0	0
	5	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.toString().equals(b.toString()));	6.527619123458862	0	1	0	0	0
	6	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertFalse(a.equals(null));	7.530196905136108	0	1	0	0	0
	7	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotSame(a,b);	8.108779907226562	0	1	0	0	0
	8	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.getClass()==b.getClass())`;);	10.38546109199524	0	1	0	0	0
	9	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertArrayEquals(a.getPuzzle(),b.getPuzzle()`isaplausiblea.getPuzzle());	9.3506498336792	0	1	0	0	0
1	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	8.052803993225098	1	0	0	0	0
	1	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	10.03150987625122	0	1	0	0	0
	2	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(0,p.getDistanceToGoal());	7.950364828109741	0	1	0	0	0
	3	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(Arrays.equals(newint[]{1,2,3,4,5,6,7,8,0},p.getCopyOfCells()));	12.100872039794922	0	1	0	0	0
	4	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	7.938410043716431	0	1	0	0	0
	5	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(pinstanceofPuzzle);	7.089948892593384	0	1	0	0	0
	6	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(null,p);	6.954329967498779	0	1	0	0	0
	7	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolvable()`isaplausiblep.isSolvable());	8.410517930984497	0	1	0	0	0
	8	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(cells);	7.278960704803467	0	1	0	0	0
	9	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertArrayEquals(newint[]{3,4,0,1,2,5,6,7,8},cells);	9.491780996322632	0	1	0	0	0
0	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertEquals(""STR"",""STR"");"	22.135401964187622	0	1	0	0	0
	1	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertTrue(""STR"");"	73.18704605102539	0	1	0	0	0
	2	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertTrue(""STR"");"	22.327629804611206	0	1	0	0	0
	3	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertEquals(""STR"",resultValue);"	28.66122317314148	0	1	0	0	0
	4	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertTrue(""STR"");"	22.95180082321167	0	1	0	0	0
	5	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertTrue(result.hasNext()));	21.43299412727356	0	1	0	0	0
	6	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertFalse(""STR"");"	22.60221290588379	0	1	0	0	0
	7	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertEquals(1,""STR"");"	22.134215116500854	0	1	0	0	0
	8	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertNotNull(id));	22.575921058654785	0	1	0	0	0
	9	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertFalse(result.hasNext()`couldbeanotherplausibleresult.hasNext());	22.45751428604126	0	1	0	0	0
1	0	orientechnologies/orientdb	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertNotNull(""STR"");"	36.579275131225586	0	1	0	0	0
	1	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertEquals(1,db.getMetadata().getIndexManager().getIndexes().size());	37.51756191253662	0	1	0	0	0
	2	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertFalse(clazz.getClassIndexes().isEmpty());	37.454296827316284	0	1	0	0	0
	3	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertEquals(className,db.getMetadata().getSchema().getClass(className).getName());	36.86116909980774	0	1	0	0	0
	4	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertTrue(db.getMetadata().getSchema().existsClass(className));	39.64179491996765	0	1	0	0	0
	5	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertTrue(clazz.getBaseClasses().isEmpty()));	42.820249795913696	0	1	0	0	0
	6	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertTrue(""STR"");"	38.53741216659546	0	1	0	0	0
	7	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertEquals(OType.STRING,""STR"");"	37.939642906188965	0	1	0	0	0
	8	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertNotNull(""STR"");"	41.1080379486084	0	1	0	0	0
	9	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertTrue(db.getMetadata().getIndexManager().getClassIndexes(className).isEmpty());	38.32399606704712	0	1	0	0	0
2	0	orientechnologies/orientdb	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	19.433801889419556	1	0	0	0	0
	1	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	21.351008892059326	0	1	0	0	0
	2	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertNotNull(""STR"");"	21.04037594795227	0	1	0	0	0
	3	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertFalse(""STR"");"	20.876178979873657	0	1	0	0	0
	4	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertSame(OClass.class,cls.getClass()`isaplausibleOClass.class);	20.75485110282898	0	1	0	0	0
	5	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertTrue(""STR"");"	19.428537130355835	0	1	0	0	0
	6	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(3,cls.properties().size());	20.359126091003418	0	1	0	0	0
	7	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(-1,count);	19.555155992507935	0	1	0	0	0
	8	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertTrue(""STR"");"	19.770402908325195	0	1	0	0	0
	9	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertEquals(OType.STRING,""STR"");"	19.72214913368225	0	1	0	0	0
3	0	orientechnologies/orientdb	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(count,1);	88.53999900817871	1	0	0	0	0
	1	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(count>0);	38.845739126205444	0	1	0	0	0
	2	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertFalse(""STR"");"	37.77609086036682	0	1	0	0	0
	3	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertNotNull(""STR"");"	36.12574076652527	0	1	0	0	0
	4	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertTrue(""STR"");"	38.71341013908386	0	1	0	0	0
	5	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotEquals(0,count);	35.952924728393555	0	1	0	0	0
	6	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(count==1);	37.04128289222717	0	1	0	0	0
	7	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertFalse(orientDB.isClosed());	36.67220401763916	0	1	0	0	0
	8	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertEquals(""STR"",""STR"");"	37.79542088508606	0	1	0	0	0
	9	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertTrue(""STR"");"	39.557193994522095	0	1	0	0	0
4	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertEquals(""STR"",getClassName());"	35.07368874549866	0	1	0	0	0
	1	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertNotNull(getClassName());	37.94975996017456	0	1	0	0	0
	2	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertTrue(""STR"");"	40.47923302650452	0	1	0	0	0
	3	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertNotEquals(""STR"",getClassName());"	41.589799880981445	0	1	0	0	0
	4	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertFalse(getClassName().isEmpty());	39.249237060546875	0	1	0	0	0
	5	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertNotSame(expectedObj,getClassName()`isaplausible)`method.So,AVOIDgeneratingtheexpectedObj,getClassName());	44.82909798622131	0	1	0	0	0
	6	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertSame(expectedObj,someOtherObj)`isaplausible));	37.36527109146118	0	1	0	0	0
	7	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertTrue(""STR"");"	34.64665699005127	0	1	0	0	0
	8	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertNull(someObject);	37.50760197639465	0	1	0	0	0
	9	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertNotSame(expectedObj,getDifferentObj());	38.95351195335388	0	1	0	0	0
5	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertNotNull(""STR"");"	41.25717234611511	0	1	0	0	0
	1	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertTrue(""STR"");"	43.32033729553223	0	1	0	0	0
	2	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertEquals(""STR"",""STR"");"	42.12121081352234	0	1	0	0	0
	3	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertFalse(schema.existsClass(className));	39.48177528381348	0	1	0	0	0
	4	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(1,result.getUpdatedRecords()`canalsobeaplausible1);	41.409043073654175	0	1	0	0	0
	5	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertTrue(""STR"");"	41.43596315383911	0	1	0	0	0
	6	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(result.hasNext());	38.039095878601074	0	1	0	0	0
	7	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertEquals(1,""STR"");"	44.916099071502686	0	1	0	0	0
	8	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	"assertEquals(1,""STR"");"	42.39331817626953	0	1	0	0	0
	9	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertFalse(result.hasNext()`canbeaplausibleresult.hasNext());	38.43593192100525	0	1	0	0	0
6	0	orientechnologies/orientdb	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertEquals(null,mapResult);	36.41869902610779	0	1	0	0	0
	1	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNull(mapResult);	37.563591957092285	1	0	0	0	0
	2	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(mapResult==null);	35.92197299003601	0	1	0	0	0
	3	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertFalse(multiKeyMap.containsKey(anotherMultiKey));	34.109033823013306	0	1	0	0	0
	4	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNull(mapResult);	33.51553726196289	1	0	0	0	0
	5	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotEquals(someObject,mapResult);	35.35047507286072	0	1	0	0	0
	6	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertFalse(multiKey.equals(anotherMultiKey));	33.659817934036255	0	1	0	0	0
	7	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	"assertNull(""STR"");"	34.963045835494995	0	1	0	0	0
	8	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.containsKey(multiKey));	34.786550998687744	0	1	0	0	0
	9	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotEquals(anotherMultiKey.hashCode(),multiKey.hashCode()`isaplausibleanotherMultiKey.hashCode());	34.640918016433716	0	1	0	0	0
7	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotNull(result);	21.16180682182312	0	1	0	0	0
	1	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(!result.isEmpty());	21.688350200653076	0	1	0	0	0
	2	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertEquals(EXPECTED_VALUE,result.size());	23.698271989822388	0	1	0	0	0
	3	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertFalse(result.isEmpty());	354.58842611312866	0	1	0	0	0
	4	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.size()>0);	21.32770299911499	0	1	0	0	0
	5	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotEquals(EXPECTED_VALUE,result.size());	22.21792197227478	0	1	0	0	0
	6	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertArrayEquals(EXPECTED_ARRAY,ACTUAL_ARRAY);	21.57180118560791	0	1	0	0	0
	7	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.get(0).containsField(FIELD_NAME));	21.641968965530396	0	1	0	0	0
	8	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotEquals(EXPECTED_VALUE,actualValue));	22.24347472190857	0	1	0	0	0
	9	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertSame(expectedObject,actualObject)`isaplausibleexpectedObject,actualObject));	21.389028072357178	0	1	0	0	0
8	0	orientechnologies/orientdb	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(nameProperty);	37.85357117652893	0	1	0	0	0
	1	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.isReadOnly());	36.587576150894165	0	1	0	0	0
	2	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getType(),OType.STRING);	36.272202014923096	0	1	0	0	0
	3	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.isMandatory());	38.15987300872803	0	1	0	0	0
	4	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.isNullable());	35.80463099479675	0	1	0	0	0
	5	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getRegexp(),null);	38.559784173965454	0	1	0	0	0
	6	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(companyClass.existsProperty(PROP_NAME));	38.011738777160645	0	1	0	0	0
	7	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.isIndexed());	39.18428421020508	0	1	0	0	0
	8	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(companyClass));	36.53320908546448	0	1	0	0	0
	9	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(companyClass.isAbstract());	36.49577713012695	0	1	0	0	0
9	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	21.889200925827026	1	0	0	0	0
	1	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	24.113816022872925	0	1	0	0	0
	2	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(expectedResultSize,qResult.stream().count());	23.124512910842896	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertFalse(""STR"");"	24.162651300430298	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertTrue(""STR"");"	23.455513954162598	0	1	0	0	0
	5	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertFalse(""STR"");"	22.702563047409058	0	1	0	0	0
	6	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertTrue(""STR"");"	22.961936950683594	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertFalse(""STR"");"	23.155654907226562	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertTrue(""STR"");"	22.835195064544678	0	1	0	0	0
	9	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	"assertFalse(""STR"");"	21.885390043258667	0	1	0	0	0
10	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	22.123939275741577	0	1	0	0	0
	1	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	22.80624508857727	1	0	0	0	0
	2	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	22.639202117919922	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotNull(qResult);	23.181010961532593	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(expectedCount,actualCount)`,where`expectedCount`istheIntegervalueofthenumberofexpectedresultsand`actualCount`istheIntegervalueofthenumberofactualresultsfromthequeryexecutedonthedatabase.);	23.974584102630615	0	1	0	0	0
	5	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotEquals(notExpected,actual));	21.836790800094604	0	1	0	0	0
	6	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertArrayEquals(expectedArray,actualArray));	22.6593279838562	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertTrue(condition);	21.38020086288452	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(expectedResult,actualResult));	22.329983949661255	0	1	0	0	0
	9	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertSame(expectedObject,actualObject);	22.181516885757446	0	1	0	0	0
11	0	orientechnologies/orientdb	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,FOCAL.readAsLong(bytes));	34.26351284980774	0	1	0	0	0
	1	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(bytes.isEmpty()`-Thisbytes`-Thisbytes.size()>0`-This0);	39.110121965408325	0	1	0	0	0
	2	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertNotEquals(1,FOCAL.readAsLong(bytes));	36.97250485420227	0	1	0	0	0
	3	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertNotNull(bytes);	33.42594909667969	0	1	0	0	0
	4	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(Arrays.equals(newbyte[]{0},bytes.toByteArray()));	33.14046311378479	0	1	0	0	0
	5	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(bytes==null`isanotherplausiblebytes==null);	35.576550006866455	0	1	0	0	0
	6	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,bytes.offset);	34.88643980026245	0	1	0	0	0
	7	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(bytes.size()<=5);	33.808035135269165	0	1	0	0	0
	8	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertNotEquals(-1,bytes.get(bytes.offset));	35.70166087150574	0	1	0	0	0
	9	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(bytes.toByteSequence().equals(newVByteSequence(bytes.toByteArray()))));	33.91026782989502	0	1	0	0	0
12	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertTrue(result.hasNext());	38.36904692649841	1	0	0	0	0
	1	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertEquals(2,result.stream().count()`?);	41.97105693817139	0	1	0	0	0
	2	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().get().isEmpty());	38.80394697189331	0	1	0	0	0
	3	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertTrue(""STR"");"	35.89967203140259	0	1	0	0	0
	4	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNull(exception`isaplausibleexception);	36.72068905830383	0	1	0	0	0
	5	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertTrue(result.getColumnNames().contains(expectedColumnName));	37.42550826072693	0	1	0	0	0
	6	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().get().getContents().isEmpty());	38.56032586097717	0	1	0	0	0
	7	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertNotNull(""STR"");"	38.6415810585022	0	1	0	0	0
	8	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNotEquals(expectedValue,actualValue);	38.09874367713928	0	1	0	0	0
	9	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertArrayEquals(expectedArray,actualArray));	37.73231267929077	0	1	0	0	0
13	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertEquals(10.5F,function.getResult());	34.43941283226013	0	1	0	0	0
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue(function.getResult()instanceofFloat);	32.97023916244507	0	1	0	0	0
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotNull(result);	34.74025297164917	0	1	0	0	0
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(0f,(float)function.getResult());	35.551037311553955	0	1	0	0	0
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue((float)function.getResult()>=0);	36.329712867736816	0	1	0	0	0
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(null,function.getResult());	32.26770520210266	0	1	0	0	0
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue((float)function.getResult()==10.5F);	35.992260217666626	0	1	0	0	0
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(Float.NaN,(float)function.getResult());	33.17303705215454	0	1	0	0	0
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue((float)function.getResult()<=10.5F);	34.95888900756836	0	1	0	0	0
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertFalse((float)function.getResult()<0);	34.941766023635864	0	1	0	0	0
14	0	orientechnologies/orientdb	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(newOSubscribeLiveQueryResponse(10),((OSubscribeLiveQueryResponse)((OSubscribeResponse)responseRead.getResponse()).getResponse()));	18.344768047332764	0	1	0	0	0
	1	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertNotNull(responseRead);	16.007539987564087	0	1	0	0	0
	2	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(channel.isClosed());	16.006319999694824	0	1	0	0	0
	3	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(responseinstanceofOSubscribeResponse);	15.588434934616089	0	1	0	0	0
	4	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(channel.isWritable());	15.54810380935669	0	1	0	0	0
	5	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertNotEquals(response,responseRead);	15.694977045059204	0	1	0	0	0
	6	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(response.getClass(),responseRead.getClass());	15.498513221740723	0	1	0	0	0
	7	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(channel.getBytesWritten()>0);	15.560886859893799	0	1	0	0	0
	8	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(1,channel.getCommands().size());	15.514565706253052	0	1	0	0	0
	9	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(channel.isOpen());	15.700850009918213	0	1	0	0	0
0	0	hazelcast/hazelcast-simulator	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	8.925742864608765	0	1	0	0	0
	1	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().allMatch(workerData->!workerData.isMember()));	10.995255708694458	0	1	0	0	0
	2	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	10.345306873321533	0	1	0	0	0
	3	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertFalse(""STR"");"	10.175187349319458	0	1	0	0	0
	4	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertSame(expectedWorker,result.get(0));	9.80111575126648	0	1	0	0	0
	5	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(unexpectedWorker,result.get(0));	8.776396036148071	0	1	0	0	0
	6	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().allMatch(workerData->workerData.getType()==WorkerType.JAVACLIENT));	9.159044027328491	0	1	0	0	0
	7	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(workerData->workerData.getType()==WorkerType.MEMBER));	10.555049180984497	0	1	0	0	0
	8	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().map(WorkerData::getType).allMatch(workerType->workerType==WorkerType.JAVACLIENT));	10.640244007110596	0	1	0	0	0
	9	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(0,result.stream().map(WorkerData::getAgentId).count());	14.303719282150269	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotNull(result);	11.537445783615112	0	1	0	0	0
	1	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertEquals(expectedValue,result);	11.56857705116272	0	1	0	0	0
	2	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(condition`.Youcouldusethis)throwsException{);	15.097271919250488	0	1	0	0	0
	3	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertion(s));	14.914860010147095	0	1	0	0	0
	4	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertFalse(condition);	8.57898998260498	0	1	0	0	0
	5	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotEquals(expectedValue,result);	8.46598196029663	0	1	0	0	0
	6	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertArrayEquals(expectedArray,resultArray);	8.81282901763916	0	1	0	0	0
	7	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNull(result);	8.62399697303772	0	1	0	0	0
	8	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotSame(expectedValue,result);	9.102774143218994	0	1	0	0	0
	10	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(message);	10.775500059127808	0	1	0	0	0
2	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotNull(field);	8.569303750991821	1	0	0	0	0
	1	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertEquals(expectedField,field);	10.6116201877594	0	1	0	0	0
	2	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(field.getType().isAssignableFrom(fieldType));	8.773935079574585	0	1	0	0	0
	3	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertEquals(fieldName,field.getName());	9.664834976196289	0	1	0	0	0
	4	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(Modifier.isPrivate(field.getModifiers()));	9.204288005828857	0	1	0	0	0
	5	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(Modifier.isStatic(field.getModifiers()));	9.046841144561768	0	1	0	0	0
	6	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(field.getName()!=null);	9.669577836990356	0	1	0	0	0
	7	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(Arrays.asList(classType.getDeclaredFields()).contains(field));	9.274724960327148	0	1	0	0	0
	8	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotEquals(fieldType,void.class);	9.431471109390259	0	1	0	0	0
	9	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(Modifier.isFinal(field.getModifiers()));	9.573583841323853	0	1	0	0	0
3	0	hazelcast/hazelcast-simulator	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getCause()==cause);	8.860151052474976	0	1	0	0	0
	1	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	13.572103261947632	0	1	0	0	0
	2	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause()`.This){);	12.337996006011963	0	1	0	0	0
	3	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	10.421292066574097	0	1	0	0	0
	4	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getCause()instanceofRuntimeException);	9.893625020980835	0	1	0	0	0
	5	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(null,exception);	10.147430896759033	0	1	0	0	0
	6	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage()==null);	9.440362691879272	0	1	0	0	0
	7	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getClass().equals(ReflectionException.class));	8.658166885375977	0	1	0	0	0
	8	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getMessage().isEmpty());	8.576005935668945	0	1	0	0	0
	9	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getCause()instanceofIllegalStateException);	9.441286087036133	0	1	0	0	0
4	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.exists());	8.543138027191162	0	1	0	0	0
	1	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertNotNull(file);	9.355171203613281	1	0	0	0	0
	2	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(fileinstanceofFile);	11.337351083755493	0	1	0	0	0
	3	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.isFile()));	9.777315855026245	0	1	0	0	0
	4	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	"assertEquals(""STR"",""STR"");"	11.024588823318481	0	1	0	0	0
	5	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file!=null&&file.canRead());	9.552880048751831	0	1	0	0	0
	6	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.isDirectory());	10.300328969955444	0	1	0	0	0
	7	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(EXT,file.getName().substring(file.getName().lastIndexOf('.')+1));	11.269293069839478	0	1	0	0	0
	8	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.canRead());	11.852951049804688	0	1	0	0	0
	9	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	"assertTrue(""STR"");"	9.311307907104492	0	1	0	0	0
5	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	"assertEquals(""STR"",getProfileFile(parent.getPath()));"	8.940251111984253	0	1	0	0	0
	1	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertThrows(CommandLineExitException.class,()->);	11.689759731292725	0	1	0	0	0
	2	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	"assertTrue(""STR"");"	11.218743085861206	0	1	0	0	0
	3	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertNotNull(getProfileFile(parent.getPath()));	9.70930004119873	0	1	0	0	0
	4	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(getProfileFile(parent.getPath()).exists());	9.497687101364136	0	1	0	0	0
	5	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertNotEquals(null,getProfileFile(parent.getPath()));	9.445655107498169	0	1	0	0	0
	6	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(getProfileFile(parent.getPath()).isDirectory());	9.178935050964355	0	1	0	0	0
	7	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	"assertThrows(CommandLineExitException.class,""STR"");"	10.713689088821411	0	1	0	0	0
	8	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	"assertNull(""STR"");"	9.995841979980469	0	1	0	0	0
	9	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(getProfileFile(parent.getPath()).isHidden());	10.204463958740234	0	1	0	0	0
6	0	hazelcast/hazelcast-simulator	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assert.assertEquals(""STR"",FOCAL(Collections.emptyList()));"	8.887653827667236	0	1	0	0	0
	1	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertTrue(FOCAL(Collections.emptyList()).isEmpty());	10.075760841369629	0	1	0	0	0
	2	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertNotNull(FOCAL(Collections.emptyList()));	9.844187021255493	0	1	0	0	0
	3	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertNotEquals(""STR"",""STR"");"	12.246896028518677	0	1	0	0	0
	4	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertNotSame(Collections.emptyList(),FOCAL(Collections.emptyList()));	9.30967402458191	0	1	0	0	0
	5	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertTrue(""STR"");"	8.672250270843506	0	1	0	0	0
	6	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertFalse(""STR"");"	10.407814979553223	0	1	0	0	0
	7	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertTrue(""STR"");"	9.62959098815918	0	1	0	0	0
	8	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertEquals(2,""STR"");"	11.353785037994385	0	1	0	0	0
	9	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertTrue(""STR"");"	11.0223388671875	0	1	0	0	0
7	0	hazelcast/hazelcast-simulator	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(properties);	8.39246678352356	1	0	0	0	0
	1	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertTrue(""STR"");"	10.925673961639404	0	1	0	0	0
	2	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertTrue(properties.size()>0);	9.822307825088501	0	1	0	0	0
	3	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertTrue(propertiesinstanceofjava.util.Properties);	10.481024026870728	0	1	0	0	0
	4	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertFalse(properties.isEmpty());	9.414983749389648	0	1	0	0	0
	5	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNull(inputStream`.This){);	14.792897939682007	0	1	0	0	0
	6	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertFalse(properties.entrySet().isEmpty());	9.06535029411316	0	1	0	0	0
	7	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(inputStream);	8.677879095077515	0	1	0	0	0
	8	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertTrue(inputStream.available()>0);	9.168133735656738	0	1	0	0	0
	9	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotEquals(newUnknownGitProperties(),properties);	10.736319065093994	0	1	0	0	0
0	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	6.046482086181641	1	0	0	0	0
	1	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(true,macAddress.isMulticast());	8.864319801330566	0	1	0	0	0
	2	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(false,macAddress.isMulticast());	7.336424827575684	0	1	0	0	0
	3	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress);	6.777062177658081	0	1	0	0	0
	4	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(!macAddress.isMulticast()`isanotherplausible!macAddress.isMulticast());	6.820645809173584	0	1	0	0	0
	5	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(0,address[0]);	5.497374057769775	0	1	0	0	0
	6	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertArrayEquals(newbyte[]{(byte)0xff,0x0,0x0,0x0,0x0,0x0},macAddress.getAddress())`?This)`methodof`macAddress`returnsabytearraywiththevalues`{(byte));	8.140120029449463	0	1	0	0	0
	7	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	"assertTrue(""STR"");"	7.59470009803772	0	1	0	0	0
	8	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(Arrays.equals(address,newbyte[6])`isanotherplausibleArrays.equals(address,newbyte[6]));	7.689870834350586	0	1	0	0	0
	9	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	"assertEquals(""STR"",macAddress.toString());"	7.274451971054077	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	9.8370201587677	1	0	0	0	0
	1	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertFalse(locītājs.hasCustomDictionary());	11.930532932281494	0	1	0	0	0
	2	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertEquals(expectedSize,locītājs.getCacheSize());	12.03049612045288	0	1	0	0	0
	3	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNotNull(w);	11.701680183410645	0	1	0	0	0
	4	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getMultiWordsMax()>1);	10.208786964416504	0	1	0	0	0
	5	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertSame(locītājs,w.getAnalyzer());	10.690406084060669	0	1	0	0	0
	6	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNotEquals(0,locītājs.getPoolSize());	10.610611915588379	0	1	0	0	0
	7	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertFalse(locītājs.isAllowUnlisted());	8.90410590171814	0	1	0	0	0
	8	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertArrayEquals(expectedArray,actualArray);	10.025595903396606	0	1	0	0	0
	9	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNotSame(locītājs,w.getAnalyzer());	9.353989839553833	0	1	0	0	0
1	0	PeterisP/morphology	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertEquals(0,""STR"");"	9.138220071792603	0	1	0	0	0
	1	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertNotNull(""STR"");"	10.811599016189575	0	1	0	0	0
	2	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertTrue(""STR"");"	10.701980113983154	0	1	0	0	0
	3	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertEquals(expectedList,""STR"");"	10.991957902908325	0	1	0	0	0
	4	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertFalse(""STR"");"	10.555313110351562	0	1	0	0	0
	5	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertNotEquals(0,""STR"");"	10.944313287734985	0	1	0	0	0
	6	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertEquals(expectedCount,""STR"");"	10.509905338287354	0	1	0	0	0
	7	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertTrue(""STR"");"	11.040402889251709	0	1	0	0	0
	8	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertEquals(expectedWordform,""STR"");"	11.54137921333313	0	1	0	0	0
	9	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertFalse(""STR"");"	10.4238920211792	0	1	0	0	0
2	0	PeterisP/morphology	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.isRecognized());	8.773652076721191	0	1	0	0	0
	1	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.isRecognized()`:);	11.911125183105469	0	1	0	0	0
	2	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertFalse(wordforms.isEmpty());	10.553805112838745	0	1	0	0	0
	3	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertEquals(1,locītājs.getWordForms().size());	10.17134690284729	0	1	0	0	0
	4	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotNull(locītājs);	9.893825054168701	0	1	0	0	0
	5	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotEquals(null,locītājs));	9.425158023834229	0	1	0	0	0
	6	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertThrows(NullPointerException.class,()->locītājs.analyze(null));	10.950858116149902	0	1	0	0	0
	7	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	"assertNotEquals(""STR"",""STR"");"	9.946829795837402	0	1	0	0	0
	8	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	"assertTrue(""STR"");"	10.651834964752197	0	1	0	0	0
	9	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertArrayEquals(expectedArray,actualArray);	8.990501880645752	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(1,""STR"");"	9.359897136688232	0	1	0	0	0
	1	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertTrue(""STR"");"	8.162767171859741	0	1	0	0	0
	2	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.isFin());	7.162813901901245	0	1	0	0	0
	3	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame));	6.784523010253906	0	1	0	0	0
	4	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0)instanceofTextFrame);	8.459834098815918	0	1	0	0	0
	5	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(""STR"",((TextFrame)createdFrame.get(0)).getPayloadData().toString());"	9.429625988006592	0	1	0	0	0
	6	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.getTransfereMasked());	8.109193086624146	0	1	0	0	0
	7	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0).getOpcode().equals(Framedata.Opcode.TEXT));	8.153810977935791	0	1	0	0	0
	8	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(""STR"",createdFrame.get(0).getPayloadData().length());"	7.493849992752075	0	1	0	0	0
	9	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.isRSV1());	6.748032093048096	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertTrue(wasOpenClient&&wasOpenServer);	7.133821964263916	0	1	0	0	0
	1	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertEquals(true,focal.isOpen());	8.676443099975586	0	1	0	0	0
	2	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotNull(webSocket));	7.048959016799927	0	1	0	0	0
	3	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertFalse(countDownLatch.getCount()>0);	7.311421871185303	0	1	0	0	0
	4	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertTrue(countServerDownLatch.getCount()==0);	8.580302953720093	0	1	0	0	0
	5	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotEquals(0,port);	8.149607181549072	0	1	0	0	0
	6	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	"assertEquals(""STR"",webSocket.getURI().toString());"	8.697551012039185	0	1	0	0	0
	7	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertFalse(exinstanceofIOException);	7.6741943359375	0	1	0	0	0
	8	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	"assertNotEquals(""STR"",reason);"	7.661883115768433	0	1	0	0	0
	9	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	"assertTrue(""STR"");"	7.146175861358643	0	1	0	0	0
2	0	TooTallNate/Java-WebSocket	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertEquals(42,newIncompleteException(42).getPreferredSize());	7.467365980148315	0	1	0	0	0
	1	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertTrue(newIncompleteException(42).getPreferredSize()>=0);	8.903641939163208	0	1	0	0	0
	2	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotEquals(0,newIncompleteException(42).getPreferredSize());	9.077702760696411	0	1	0	0	0
	3	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotNull(newIncompleteException(42).getPreferredSize());	7.436985969543457	0	1	0	0	0
	4	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertFalse(newIncompleteException(42).getPreferredSize()<0);	8.316375017166138	0	1	0	0	0
	5	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertTrue(newIncompleteException(42).getPreferredSize()instanceofInteger);	59.446799755096436	0	1	0	0	0
	6	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotEquals(null,newIncompleteException(42).getPreferredSize());	8.028321027755737	0	1	0	0	0
	7	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertSame(expectedObject,newIncompleteException(42).getPreferredSize());	8.892058849334717	0	1	0	0	0
	8	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotSame(unexpectedObject,newIncompleteException(42).getPreferredSize());	8.302345037460327	0	1	0	0	0
	9	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertTrue(newIncompleteException(42).getPreferredSize()>0);	7.590273141860962	0	1	0	0	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	10.345235109329224	1	0	0	0	0
	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	10.972391843795776	0	1	0	0	0
	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	12.087255954742432	0	1	0	0	0
	3	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(2,matcher.regionEnd());	9.539453268051147	0	1	0	0	0
	4	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertTrue(""STR"");"	10.228875160217285	0	1	0	0	0
	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertTrue(""STR"");"	10.200294971466064	0	1	0	0	0
	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertFalse(""STR"");"	9.771984815597534	0	1	0	0	0
	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertFalse(""STR"");"	10.817018747329712	0	1	0	0	0
	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertTrue(""STR"");"	10.215771198272705	0	1	0	0	0
	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(1,matcher.groupCount());	10.015251874923706	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertEquals(getProperty(CIRCLE_BUILD_NUMBER),obj.getBuildNumber());	9.283476114273071	0	1	0	0	0
	1	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertNotNull(obj.getBuildNumber());	10.373319149017334	0	1	0	0	0
	2	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertTrue(""STR"");"	9.151635885238647	0	1	0	0	0
	3	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertNotEquals(obj.getBuildNumber()`whichensuresthatthereturnedbuildnumberisnotanemptystring.So,""STR"");"	10.47881031036377	0	1	0	0	0
	4	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertFalse(obj.getBuildNumber().isEmpty());	9.783366918563843	0	1	0	0	0
	5	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertNotSame(null,obj.getBuildNumber());	9.392772197723389	0	1	0	0	0
	6	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertSame(expected,obj.getBuildNumber())`isanotherexample,where`expected`istheexpectedvaluethatisequaltotheactualvaluereturnedbythemethod`getBuildNumber());	9.740696907043457	0	1	0	0	0
	7	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertTrue(""STR"");"	9.28827691078186	0	1	0	0	0
	8	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertNotEquals(""STR"",obj.getBuildNumber());"	9.825464963912964	0	1	0	0	0
	9	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertTrue(""STR"");"	10.286314964294434	0	1	0	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	4.258344888687134	0	1	0	0	0
	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp)`?Thisexpected);	7.626711130142212	0	1	0	0	0
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(true,isValidOTPFormat(otp));	4.920310974121094	0	1	0	0	0
	3	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(false,isValidOTPFormat(otp));	5.4476847648620605	0	1	0	0	0
	4	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(isValidOTPFormat(otp));	4.482676267623901	0	1	0	0	0
	5	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNull(isValidOTPFormat(otp)`isanothertypeofplausibleotp)`is`null`ornot.So,AVOIDgeneratingtheisValidOTPFormat(otp));	6.076547861099243	0	1	0	0	0
	6	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(true,isValidOTPFormat(otp));	4.988257884979248	0	1	0	0	0
	7	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(false,isValidOTPFormat(otp)`isanotherpossible)isthesameobjectastheBooleanvaluefalse.However,notethatthisfalse,isValidOTPFormat(otp));	5.859562873840332	0	1	0	0	0
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,isValidOTPFormat(otp));	5.5761919021606445	0	1	0	0	0
	9	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertArrayEquals(newint[]{},newint[]{});	5.143513917922974	0	1	0	0	0
