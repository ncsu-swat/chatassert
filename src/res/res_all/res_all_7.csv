TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	3	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNull(configFile);	41.42532181739807	0	1	1	0	0
0	0	nidi3/graphviz-java	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	???;	66.42994379997253	0	1	1	0	0
	1	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertEquals()`:);	27.618650913238525	0	1	1	0	0
	2	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertTrue()`?Here'sthegeneratedcode:);	26.158489227294922	0	1	1	0	0
	3	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNotNull()`:);	26.029899835586548	0	1	1	0	0
	4	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNotNull(attributes);	72.943106174469	0	1	1	0	0
	5	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",attr(""STR"",""STR""),attrs.get(ForNode.at(""STR"")).orElse(null));"	74.05047821998596	0	1	1	0	0
	6	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	???;	55.2723970413208	0	1	1	0	0
	7	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertEquals(expectedValue,actualValue);	56.53468108177185	0	1	1	0	0
	8	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	???;	67.11167407035828	0	1	1	0	0
	20	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNotEquals(``,org.hamcrest.Matchers.equalToAttributes());	71.6339840888977	0	1	1	0	0
	21	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	???;	178.28644800186157	0	1	1	0	0
	23	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNotNull(result);	65.1786139011383	0	1	1	0	0
1	0	nidi3/graphviz-java	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(z);	98.45481181144714	0	1	1	0	0
	1	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(Zigzag.zigzag());	105.01498079299927	0	1	1	0	0
	2	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertEquals(newZigzag(),FOCAL.zigzag());	59.65174579620361	0	1	1	0	0
	3	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertTrue(FOCAL.zigzag()instanceofguru.nidi.graphviz.rough.Zigzag);	101.23199415206909	0	1	1	0	0
	4	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertFalse(newFillStyleTest().zigzag()==null);	80.68207383155823	0	1	1	0	0
	5	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(zigzag());	79.54046392440796	0	1	1	0	0
	6	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(newZigzag());	85.93517017364502	0	1	1	0	0
	8	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotEquals(expectedValue,actualValue);	54.79484272003174	0	1	1	0	0
	10	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	"assertNotNull(""<focal_method_call>());"	74.47234082221985	0	1	1	0	0
	11	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	???;	98.5289101600647	0	1	1	0	0
	12	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(Zigzag.zigzag());	178.48077178001404	0	1	1	0	0
	17	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertEquals(expectedValue,actualValue);	31.827364683151245	0	1	1	0	0
	21	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotSame(expectedObject,actualObject);	101.05862808227539	0	1	1	0	0
	24	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(`);	80.53297996520996	0	1	1	0	0
0	1	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	40.76128697395325	1	0	1	0	0
	2	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.startsWith(""STR""));"	662.0133721828461	0	1	1	0	0
	5	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertNotEquals(""STR"",value);"	39.85996913909912	0	1	1	0	0
	6	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	41.80231714248657	0	1	1	0	0
	7	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertEquals(description,value);	41.089921951293945	0	1	1	0	0
	8	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertEquals(expectedValue,actualValue);	41.65991401672363	0	1	1	0	0
	11	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertNotEquals(""STR"",value);"	41.252901792526245	0	1	1	0	0
	26	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.equals(""STR""));"	91.77426314353943	0	1	1	0	0
	27	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertEquals(expectedValue,value);	26.322582006454468	0	1	1	0	0
1	0	rockagen/commons-lib	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	32.21689820289612	0	1	1	0	0
	1	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	36.00808382034302	0	1	1	0	0
	2	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	39.8422749042511	0	1	1	0	0
	7	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	33.91384792327881	0	1	1	0	0
	8	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	40.2638840675354	0	1	1	0	0
	10	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	90.78407597541809	0	1	1	0	0
	13	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(expectedValue,actualValue);	30.817049026489258	0	1	1	0	0
	14	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	???;	38.32703399658203	0	1	1	0	0
	16	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(testClass);	35.38923692703247	0	1	1	0	0
	24	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(expectedValue,actualValue);	38.178232192993164	0	1	1	0	0
	25	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	38.40738081932068	0	1	1	0	0
	29	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(expectedValue,obj);	44.356635093688965	0	1	1	0	0
2	10	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNull(processorManager.getProcessor(cmd2));	74.28530693054199	0	1	1	0	0
0	1	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	???;	24.110819101333618	0	1	1	0	0
1	2	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(Status.NAY,response.getStatus());	28.437965154647827	0	1	1	0	0
	15	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getStatus().equals(VerificationStatus.REPLAYED_OTP));	18.900291681289673	0	1	1	0	0
	18	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.isSuccess());	24.44672679901123	0	1	1	0	0
	21	/	YubicoClientTest	testBadOTP	assertNotNull(response);	???;	27.154811143875122	0	1	1	0	0
	23	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(YubicoResponseStatus.BACKEND_ERROR,response.getStatus());	21.265809059143066	0	1	1	0	0
2	15	/	VerbTest	testSetDisplay	assertNotNull(actual);	"assertNotEquals(expected.get(""STR""),actual.get(""STR""));"	33.97429299354553	0	1	1	0	0
2	0	orientechnologies/orientdb	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"assertFalse(foo.getFieldName().startsWith(""STR""));"	69.07422494888306	0	1	1	0	0
	1	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNull(iFieldName);	53.472922801971436	0	1	1	0	0
	2	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotNull(value);	38.6984281539917	0	1	1	0	0
	3	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"assertTrue(""STR"");"	45.72909498214722	0	1	1	0	0
	4	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertEquals(expectedValue,actualValue);	58.879071950912476	0	1	1	0	0
	5	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"assertNotNull(FOCAL.field(""STR""));"	69.30721116065979	0	1	1	0	0
	9	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotEquals(expectedValue,actualValue);	55.45108389854431	0	1	1	0	0
	10	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotNull(this.value);	68.1214017868042	0	1	1	0	0
	12	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotNull(value);	68.0307149887085	0	1	1	0	0
	14	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotSame(expectedValue1,expectedValue2);	44.26082181930542	0	1	1	0	0
	16	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertArrayEquals(expectedArray,actualArray);	24.24132990837097	0	1	1	0	0
	18	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertTrue(yourExpectedCondition);	39.86551117897034	0	1	1	0	0
	24	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertEquals(expectedValue,actualValue);	41.21249222755432	0	1	1	0	0
3	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.toLowerCase(Locale.ENGLISH).startsWith(""STR""));"	155.1114571094513	0	1	1	0	0
	10	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertEquals(expectedDDL.toLowerCase(),ddl.toLowerCase());	110.44432306289673	0	1	1	0	0
4	7	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v);	147.9643006324768	0	1	1	0	0
	9	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue(v>=0&&v<=1);	78.76135230064392	0	1	1	0	0
7	2	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.isManual());	69.92367005348206	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",ciEnvironment.getCiName());"	40.20853519439697	0	1	1	0	0
1	5	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(detect(env)==null||detect(env)instanceofCIEnvironment);	44.99602174758911	0	1	1	0	0
0	4	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNotNull(factory.getDsn());	42.463449001312256	0	1	1	0	0
	5	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertEquals(expectedDsn,factory.getDsn());	10.316756010055542	0	1	1	0	0
	6	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertTrue(condition);	9.673212766647339	0	1	1	0	0
	7	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertFalse(condition);	9.181185007095337	0	1	1	0	0
	8	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNotEquals(expectedValue,actualValue);	10.36105990409851	0	1	1	0	0
	10	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertTrue(condition`isaplausiblecondition);	9.74267292022705	0	1	1	0	0
	11	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNotSame(expectedValue,actualValue);	9.544181108474731	0	1	1	0	0
	12	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertSame(expectedValue,actualValue`isaplausibleexpectedValue);	9.911962985992432	0	1	1	0	0
	13	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertEquals(expectedSize,actualSize);	11.042416334152222	0	1	1	0	0
0	2	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(3,map.keySet().size());	60.220669746398926	0	1	1	0	0
0	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	???;	57.61312818527222	0	1	1	0	0
0	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	18.931063890457153	0	1	1	0	0
	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(locītājs.getWordForms().isEmpty());	49.68396592140198	0	1	1	0	0
	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(!locītājs.wordforms.isEmpty());	33.67503809928894	0	1	1	0	0
	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	44.51511883735657	0	1	1	0	0
	15	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(FOCAL);	47.638936042785645	0	1	1	0	0
	16	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	53.45841097831726	0	1	1	0	0
	20	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	45.00023031234741	0	1	1	0	0
	24	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	45.01016116142273	0	1	1	0	0
1	0	PeterisP/morphology	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(!locītājs.getWordforms().isEmpty());	36.959656953811646	0	1	1	0	0
	1	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(!locītājs.getWordforms().isEmpty());	46.59249210357666	0	1	1	0	0
	6	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	27.595343828201294	0	1	1	0	0
	9	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(locītājs.isWordRecognized(w));	56.98217296600342	0	1	1	0	0
	17	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(<actualexpression>`);	39.06404495239258	0	1	1	0	0
0	0	nidi3/raml-loader	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertThrows(ResourceNotFoundException.class,()->focalObj.fetchResource(""STR"",System.currentTimeMillis()));"	58.82153606414795	0	1	1	0	0
	1	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	152.61229586601257	0	1	1	0	0
	2	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	38.72461223602295	0	1	1	0	0
	5	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertFalse(newFile(Objects.requireNonNull(resource).getPath(),""STR"").exists());"	44.20909309387207	0	1	1	0	0
	6	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNotNull(newguru.nidi.loader.Loader().fetchResource(""STR"",System.currentTimeMillis()));"	45.27419304847717	0	1	1	0	0
	9	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	45.23716616630554	0	1	1	0	0
	10	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(newjava.io.File(resource.getPath(),""STR"").exists());"	13.368971109390259	0	1	1	0	0
	11	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotNull(resource);	23.496320009231567	0	1	1	0	0
	13	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertTrue(resourceinstanceofURL);	12.22734808921814	0	1	1	0	0
	14	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotEquals(null,resource);	12.362237930297852	0	1	1	0	0
	15	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(resource.getPath().endsWith(""loader"")`isaplausibleresource.getPath().endsWith(""loader""));"	11.885443210601807	0	1	1	0	0
	16	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertTrue(file.exists()&&file.isFile());	37.9833881855011	0	1	1	0	0
	18	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	40.13063287734985	0	1	1	0	0
	19	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertFalse(newFile(""STR"",""STR"").exists());"	33.84968590736389	0	1	1	0	0
	20	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	12.724573850631714	0	1	1	0	0
	21	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNull(underTest.fetchResource(""STR"",0L));"	261.11418104171753	0	1	1	0	0
	22	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertThrows(ResourceNotFoundException.class,()->newLoader().fetchResource(""STR"",timestamp));"	43.73952913284302	0	1	1	0	0
	24	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(newFile(Thread.currentThread().getContextClassLoader().getResource(""STR"").getPath()).exists());"	45.814717054367065	0	1	1	0	0
0	1	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	35.11334705352783	0	1	1	0	0
	7	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertTrue(logger.factory.loggerClosablePool.actionIfClosed==ConcurrentThreading.throwSuppropriateException(""STR""));"	23.463305950164795	0	1	1	0	0
	9	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.sender);	36.05756402015686	0	1	1	0	0
	15	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.getIndex());	28.287998914718628	0	1	1	0	0
0	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(parameterReplacer);	32.874067068099976	0	1	1	0	0
	1	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(mockParameterReplacer,testTarget001.getParameterReplacer());	34.70046401023865	0	1	1	0	0
	2	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	"assertEquals(mockParameterReplacer,testTarget002.getParameterReplacer(""STR""));"	39.181453704833984	0	1	1	0	0
	3	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(mockParameterReplacer,testTarget001.getParameterReplacer());	26.07344102859497	0	1	1	0	0
	4	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(mockParameterReplacer,testTarget001.getParameterReplacer());	31.812055110931396	0	1	1	0	0
	5	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(testTarget001.getParameterReplacer());	116.8337938785553	0	1	1	0	0
	11	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(testTarget001.getParameterReplacer());	33.720357179641724	0	1	1	0	0
	14	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals(mockParameterReplacer,preparer.getParameterReplacer());	30.925539016723633	0	1	1	0	0
	15	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(mockParameterReplacer,testTarget003.getParameterReplacer());	29.01558804512024	0	1	1	0	0
	16	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(mockParameterReplacer,preparer.getParameterReplacer());	37.266438007354736	0	1	1	0	0
	17	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(mockParameterReplacer,preparer.getParameterReplacer());	565.3822309970856	0	1	1	0	0
0	0	hazelcast/hazelcast-simulator	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(expectedSize,methods.size());	55.830806016922	0	1	1	0	0
	2	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(0,methodsMocked.size());	64.21218991279602	0	1	1	0	0
	3	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method!=null||!allMethods.isEmpty());	88.57699823379517	0	1	1	0	0
	6	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method==null||methods.size()==1);	32.328705072402954	0	1	1	0	0
	8	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	???;	65.78587508201599	0	1	1	0	0
	10	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size());	56.870166063308716	0	1	1	0	0
	11	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	???;	51.73329782485962	0	1	1	0	0
	12	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method==null||methods.size()==1);	107.47416019439697	0	1	1	0	0
	19	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size());	56.049511194229126	0	1	1	0	0
	24	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method==null||methods.size()==1||methods.size()>1);	59.91678190231323	0	1	1	0	0
1	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(result);	19.552372217178345	0	1	1	0	0
	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertNotNull(bind0(object,property,value));	66.59971618652344	0	1	1	0	0
	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(bind0(object,""STR"",""STR""));"	57.42365312576294	0	1	1	0	0
	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(bind0(newObject(),property,value));	56.60339021682739	0	1	1	0	0
	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	???;	150.37079000473022	0	1	1	0	0
	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertFalse(!bind0(object,property,value));	40.90485215187073	0	1	1	0	0
	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(bind0(object,property,value));	48.52294921875	0	1	1	0	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	???;	58.863584995269775	0	1	1	0	0
	14	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(bind0(newObject(),property,value));	57.96192789077759	0	1	1	0	0
	23	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(FOCAL(newObject(),""STR"",""STR""));"	56.782410860061646	0	1	1	0	0
	25	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(FOCAL(object,property,value));	50.063987016677856	0	1	1	0	0
	27	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(object,""STR"",""STR""));"	62.72431993484497	0	1	1	0	0
0	2	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertEquals(words,actualTokens);	213.116858959198	0	1	1	0	0
	11	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",FOCAL(Collections.emptyList()));"	267.00989818573	0	1	1	0	0
	12	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertNotEquals(Collections.emptyList(),words);	213.82966494560242	0	1	1	0	0
	13	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",detokenize(words));"	364.8725037574768	0	1	1	0	0
0	0	AlejandroRivera/embedded-rabbitmq	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,instanceOf(CachedExtractor.class));	71.50586891174316	0	1	1	0	0
	3	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(CachedExtractor.class,extractor.getClass());	45.1414589881897	0	1	1	0	0
	20	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	???;	50.228225231170654	0	1	1	0	0
	21	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	25.483407020568848	0	1	1	0	0
	28	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(BasicExtractor.class.isInstance(extractor));	31.021919012069702	0	1	1	0	0
0	7	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,testServer.getHTTPResponses().size());	58.25948214530945	0	1	1	0	0
	9	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(testServer.requests.get(1).getHeaders().values().stream().anyMatch(header->header.contains(""STR"")));"	52.025174140930176	0	1	1	0	0
	11	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.getCookies().get(0).getValue());"	40.74950408935547	0	1	1	0	0
	14	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(testServer.cookiesToSend.stream().anyMatch(cookie->cookie.getName().equals(""STR"")&&cookie.getValue().equals(""STR"")));"	57.16366004943848	0	1	1	0	0
	15	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(testServer.cookiesToSend.stream().anyMatch(cookie->cookie.n.equals(""STR"")));"	52.66391968727112	0	1	1	0	0
	17	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(responseHandler.getCookies());	62.91879868507385	0	1	1	0	0
	20	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(testServer.cookiesToSend.stream().anyMatch(cookie->cookie.getName().equals(""STR"")));"	57.05673098564148	0	1	1	0	0
	25	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,this.testServer.getRequest().getCookies().size());	40.78705406188965	0	1	1	0	0
	27	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.cookiesToSend.get(0).n);"	47.55385684967041	0	1	1	0	0
	28	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(cookie.getN());	228.35417318344116	0	1	1	0	0
0	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	73.45251297950745	0	1	1	0	0
1	0	trautonen/coveralls-maven-plugin	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newFocalClass().getName());"	61.20430278778076	0	1	1	0	0
	1	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newActualClassName().getName());"	62.66214084625244	0	1	1	0	0
	2	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newactualClassName().getName());"	61.028867959976196	0	1	1	0	0
	3	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newFocalClass().getName());"	64.87897181510925	0	1	1	0	0
	5	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",bamboo.getName());"	61.298609018325806	0	1	1	0	0
	6	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	???;	61.05749702453613	0	1	1	0	0
	9	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	???;	58.641093015670776	0	1	1	0	0
	10	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,getName());	64.43424701690674	0	1	1	0	0
	11	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertTrue(BAMBOO_NAME.equals(obj.getName()));	210.35592699050903	0	1	1	0	0
	13	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotNull(FOCAL.INSTANCE.getName());	204.89237999916077	0	1	1	0	0
	20	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newFocalClassName().getName());"	49.37001585960388	0	1	1	0	0
	21	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo().getName());"	61.31032395362854	0	1	1	0	0
	22	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	???;	59.95097613334656	0	1	1	0	0
	23	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(newBamboo().getName(),focalMethod());	44.80094003677368	0	1	1	0	0
	24	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBambooTest().focal.getName());"	53.3186559677124	0	1	1	0	0
	25	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newFocal().getName());"	210.59778881072998	0	1	1	0	0
	26	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newClassName().funBAM().getName());"	51.760685205459595	0	1	1	0	0
	27	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,Bamboo.getName());	60.88043713569641	0	1	1	0	0
0	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	7.015438795089722	0	1	1	0	0
	2	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(accessTokeninstanceofOAuth2AccessToken);	6.190686225891113	0	1	1	0	0
	3	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertEquals(expectedAccessToken,oAuth2AccessToken);	7.690054893493652	0	1	1	0	0
	4	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotEquals(null,oAuth2AccessToken);	6.4861838817596436	0	1	1	0	0
	5	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(accessToken!=null);	6.08791184425354	0	1	1	0	0
	6	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(accessToken.getExpiration().getTime()>System.currentTimeMillis());	6.437232971191406	0	1	1	0	0
	7	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertTrue(accessToken.getAdditionalInformation().containsKey(""STR""));"	6.399629831314087	0	1	1	0	0
	8	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertFalse(accessToken.isExpired());	5.923986196517944	0	1	1	0	0
	9	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(requestTemplate`isaplausiblerequestTemplate);	6.359165906906128	0	1	1	0	0
	10	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertEquals(HttpMethod.GET,requestTemplate.method());	6.334628105163574	0	1	1	0	0
0	4	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	31.63207483291626	0	1	1	0	0
	6	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	31.291248083114624	0	1	1	0	0
	15	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event.isValid());	39.02287793159485	0	1	1	0	0
	16	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(event.isValid());	31.197980880737305	0	1	1	0	0
	17	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertEquals(""STR"",event.getString(""STR""));"	30.774681091308594	0	1	1	0	0
	18	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertNotEquals(""STR"",event.getAttributes().get(""STR""));"	32.898707151412964	0	1	1	0	0
	19	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertEquals(""STR"",event.getValueForKey(""STR""));"	32.21260619163513	0	1	1	0	0
	20	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertTrue(event.getField(""STR"").isPresent());"	32.575916051864624	0	1	1	0	0
	21	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event.getMessage());	33.03220582008362	0	1	1	0	0
	23	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	32.57798409461975	0	1	1	0	0
	24	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertEquals(""STR"",event.getJSONObject(""STR"").getString(""STR""));"	34.73295497894287	0	1	1	0	0
	25	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertNotNull(event.getJSONObject(""STR""));"	20.88470196723938	0	1	1	0	0
	27	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertTrue(event.getAttributes().containsKey(""STR""));"	18.101951837539673	0	1	1	0	0
	28	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	36.28625702857971	0	1	1	0	0
0	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",markdown(""STR""));"	27.724050045013428	0	1	1	0	0
	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",markdown(""STR""));"	40.31604194641113	0	1	1	0	0
	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotNull(text);	56.0510048866272	0	1	1	0	0
	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR"").trim());"	41.56953978538513	1	0	1	0	0
	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertEquals(expectedText,m.markdown(txt));	33.49909996986389	0	1	1	0	0
	14	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertFalse(markdown(""STR"").isEmpty());"	32.6654269695282	0	1	1	0	0
	15	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(expectedText,m.markdown(""STR""));"	36.57438611984253	0	1	1	0	0
0	2	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	41.27895903587341	1	0	1	0	0
	10	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().startsWith(""STR""));"	41.76135802268982	0	1	1	0	0
0	0	vdmeer/execs	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",""STR"");"	37.65375113487244	0	1	1	0	0
	6	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName().substring(""STR"".length()));"	33.87545609474182	0	1	1	0	0
	8	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	42.73843002319336	1	0	1	0	0
	10	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	34.72014284133911	1	0	1	0	0
	19	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName().trim());"	32.60099387168884	0	1	1	0	0
0	0	jcodec/jcodec	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	"assertArrayEquals(newbyte[]{/*expectedbytearray*/
},convertToBytes());"	65.9501211643219	0	1	1	0	0
	3	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedLength,convertToBytes(inputValue).length);	90.39368891716003	0	1	1	0	0
	6	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(convertToBytes(12345),newbyte[]{0xEF,0xBE,0xAD,0xDE});	68.7316882610321	0	1	1	0	0
	9	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	???;	64.92523503303528	0	1	1	0	0
	12	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	???;	80.75854802131653	0	1	1	0	0
	23	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(Arrays.toString(expectedArray),Arrays.toString(convertToBytes(inputValue)));	87.10649681091309	0	1	1	0	0
