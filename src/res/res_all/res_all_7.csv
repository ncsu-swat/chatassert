TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	5	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(resultDoc);	655.1181330680847	0	0
/	6	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	???;	272.83225893974304	0	0
/	9	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertEquals(Integer.valueOf(3),r.get(0).field(""STR""));"	70.63112592697144	0	0
/	10	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(!expectedList.equals(actualList));	424.87034606933594	0	0
/	11	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	???;	99.08148884773254	0	0
/	13	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertNull(rtx.load(COMMIT_FROM_DOC,EndSequenceOrder.class);
"	"fail(""expectprepareexchangecardduringrestoring"");
"	"}catch(Exceptione(Runtime);
"	"RTServerLog.getInstance.getTotalReceiver()a.cancelSocket.setCapStream(activation,e)}
}
},1045994705v,3/)
);"	93.18828821182251	0	0
/	18	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(expected.equals(actual));	447.709755897522	0	0
1	0	orientechnologies/orientdb	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(expectedValue,actual);	199.62845420837402	0	0
/	6	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getInstances().size()>=expectedSize);	299.41057300567627	0	0
/	7	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertSame(expectedInstance,actualInstance);	106.0086100101471	0	0
/	8	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotEquals(expectedInstance,actualInstance);	114.78283905982971	0	0
/	9	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getInstances().contains(expectedInstance));	300.8259828090668	0	0
/	10	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(expectedSize,index.getSize());	316.31316900253296	0	0
/	14	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotSame(expectedObject.hashCode(),actualObject.hashCode());	308.93929719924927	0	0
/	17	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(expectedValue,actualValue);	285.8358702659607	0	0
/	19	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertArrayEquals(expectedArray,actualArray);	100.32239389419556	0	0
/	21	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotNull(OIndex);	211.82305264472961	0	0
/	22	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertSame(expectedAnalyzer,StandardAnalyzer.class);	317.1213049888611	0	0
3	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(ciEnvironment.detect(env));	89.44799470901489	0	0
/	2	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(detectinstanceofHashMap);	87.40257096290588	0	0
/	3	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(envinstanceofMap);	31.991307020187378	0	0
4	1	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",config.getValue(""STR""));"	63.49630379676819	0	0
/	2	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(TestConfig.getConfig().getCustomerId().equals(""STR""));"	149.12232875823975	0	0
/	7	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	???;	23.97698187828064	0	0
/	8	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotNull(getValueFromField(config,""STR""));"	25.368218898773193	0	0
/	9	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.getValue(""STR"").isEmpty());"	105.02733087539673	0	0
/	11	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotEquals(""STR"",config.getValue(""STR"").toString());"	107.49656128883362	0	0
/	13	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(2,config.getChild(""STR"").size());"	145.208477973938	0	0
/	14	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",config.getName());"	128.57091283798218	0	0
/	15	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(actualValue,config.getIn(""STR"").orElse(null));"	27.600800037384033	0	0
/	20	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(""STR""+config.getClass(),configinstanceofjava.util.Map&&((java.util.Map<?,?>)config).containsKey(""STR""));"	66.49475908279419	0	0
/	23	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	assertEquals(expectedValue,actualValue);	20.7046799659729	0	0
/	24	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.containsKey(""STR""));"	107.12321901321411	0	0
6	0	arnohaase/a-foundation	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(expected,actual);	32.20016002655029	0	0
/	1	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	28.22253108024597	0	0
/	2	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(expectedSize,map.size());	38.56688594818115	0	0
/	4	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size());	27.867022037506104	0	0
/	6	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	"assertTrue(!map.containsKey(""STR""));"	20.87878394126892	0	0
/	8	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map!=null);	27.08257818222046	0	0
/	17	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(annotation);	22.605005025863647	0	0
/	19	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertSame(emptyIdentity,map);	21.48305892944336	0	0
/	21	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	"assertFalse(map.containsKey(""STR""));"	56.65010190010071	0	0
/	24	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map.get(key1));	25.522900104522705	0	0
/	26	//	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size());	21.592266082763672	0	0
7	0	arnohaase/a-foundation	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.stream().allMatch(len1::apply));	25.13763117790222	0	0
/	1	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"assertEquals(""STR""+expectedSize+""STR""+result.size(),expectedSize,result.size());"	28.72514295578003	0	0
/	3	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"assertTrue(result.stream().allMatch(len->len.getBody().equals(""STR"")));"	23.841585874557495	0	0
/	4	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(!result.isEmpty());	26.59680199623108	0	0
/	5	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result);	19.64219069480896	0	0
/	6	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(-1,result.indexOf(null));	19.56584882736206	0	0
/	17	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertArrayEquals(expectedArray,resultArray);	26.41675114631653	0	0
/	18	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result!=null&&element!=null&&result.contains(element));	20.59665012359619	0	0
/	23	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"assertSame()`or`assertEquals()`methodsinstead.Hereisanexample:

```java
assertEquals(expectedObject,actualObject);"	19.880711317062378	0	0
/	24	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(expectedValue,actualValue);	13.757944107055664	0	0
/	25	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(condition);	20.757062911987305	0	0
/	29	//	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedValue,actualValue);	18.946211099624634	0	0
/	2	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(expected,actual);	130.22468614578247	0	0
/	3	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(expectedArray,puzzle.getValues());	73.92754197120667	0	0
/	6	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(expectedArrayList,actualArrayList);	129.80899786949158	0	0
/	7	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(expectedValue,yourVariableName);	179.51333904266357	0	0
/	8	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(list.get(0));	131.92423605918884	0	0
/	10	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	"assertNotSame(""STR"",result);"	186.6420452594757	0	0
/	15	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(list.contains(newPoint(5,10)));	166.82889199256897	0	0
/	16	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(expectedValueVariableOrValue,actualValueVariableOrValue);	153.02322101593018	0	0
/	19	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(expectedValue,actualValue);	105.65984511375427	0	0
/	21	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(expectedObject,actualObject);	160.07235193252563	0	0
/	22	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(expectedObject,actualObject);	156.96032905578613	0	0
/	28	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.contains(b));	157.6210482120514	0	0
9	1	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.find());	36.54887676239014	0	0
/	2	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher.end());	20.64673900604248	0	0
/	10	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher.group());	39.24224519729614	0	0
/	15	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	13.81716275215149	0	0
/	2	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(expectedAnalysisCount,actualAnalysisCount);	309.96742391586304	0	0
/	4	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(expectedAnalysis,actualAnalysis);	310.4760048389435	0	0
/	6	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(expectedWordforms,jāmāk.getWordforms());	308.19970321655273	0	0
/	7	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(expectedAnalyzerinstanceofAttributeValues);	453.34074807167053	0	0
/	8	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jamak.getWordforms().isEmpty());	440.76688504219055	0	0
/	9	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(targetObject.getWordFormList().size()>0);	444.3697338104248	0	0
/	10	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(YourPackageNameHere.Annotation.afpaPosts.size()>0);	173.1748707294464	0	0
/	11	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(expectedList,actualList);	447.52358508110046	0	0
/	12	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.getWordforms().size()>=minimumNumberOfWordForms);	448.4605278968811	0	0
/	13	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk.getCorrectWordform());	184.50224995613098	0	0
/	15	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(expectedString,actualString.toString());	304.12575006484985	0	0
/	16	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.getWordforms().stream().anyMatch(wordform->wordform.getDescription().contains(expectedDescription)));	428.93430399894714	0	0
/	17	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(expectedAnalysis,jāmāk.getAnalysisResult());	439.64099192619324	0	0
/	18	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	"assertTrue(""Expectedwordform:\\""""+expectedWordform+""\\""notfound"",jāmāk.getWordforms().contains(expectedWordform));"	453.85120606422424	0	0
/	20	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(expectedObject,actualObject.getCorrectWordform());	331.93765592575073	0	0
/	22	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	???;	450.36824774742126	0	0
/	23	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(expectedResult,actualResult);	446.81170892715454	0	0
/	25	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(actualAnalyzer);	441.0585558414459	0	0
/	27	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(actualList.contains(expectedElement));	304.6626989841461	0	0
/	28	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(yourObject.getWordforms().stream().anyMatch(wordform->wordform.getWord().equals(expectedWord)));	451.89085578918457	0	0
/	3	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w.getCorrectWordform());	29.15565323829651	0	0
/	9	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	"assertTrue(String.format(""STR"",word),containsWordform);"	451.75438499450684	0	0
/	11	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	???;	171.93215680122375	0	0
/	3	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertFalse(connection.getUseCaches());	106.64415097236633	0	0
/	4	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotEquals(0,resource.openConnection().getContentLengthLong());	27.399004220962524	0	0
/	5	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	???;	23.082966089248657	0	0
/	6	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotEquals(0,resource.openConnection().getLastModified());	28.4574031829834	0	0
/	7	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertSame(expectedClassLoader,actualClassLoader);	109.61481380462646	0	0
/	1	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isClosed());	75.35931205749512	0	0
/	2	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.getEventCount());	55.010931968688965	0	0
/	4	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(true,close);	59.88545322418213	0	0
/	5	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	8.828986883163452	0	0
/	6	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.eventSent());	79.97158885002136	0	0
/	7	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals(0,FluentLogger.getRawCount());	56.38739275932312	0	0
/	8	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(expectedTagPrefix,logger.tagPrefix);	82.65488314628601	0	0
/	10	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotSame(logger,otherLogger);	59.973732233047485	0	0
/	11	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isInitialized());	72.71057796478271	0	0
/	12	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(FluentLogger.hasErrors());	79.85354781150818	0	0
/	13	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.getLoggers().contains(logger));	82.92280292510986	0	0
/	14	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(expectedEventCount,logger.getEventCount());	59.818021059036255	0	0
/	15	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isClosed());	66.57051873207092	0	0
/	16	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotSame(FluentLogger,successfulLogin);	76.3910551071167	0	0
/	17	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,org.apache.commons.logging.Log.class.cast(logger.connector).errorCallCount());	76.9069139957428	0	0
/	18	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertTrue(logger.getRecordedMessages().toString(),logger.recordCalledMethod(""STR""));"	85.27888011932373	0	0
/	19	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(expectedTag,logger.getTag());	41.062538385391235	0	0
/	20	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isInitialized());	81.80017518997192	0	0
/	21	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.getRecords().isEmpty());	68.4131772518158	0	0
/	22	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(expectedSize,logger.getLoggers().size());	53.45659399032593	0	0
/	23	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.getLoggerMap().containsKey(logger));	104.3324921131134	0	0
/	24	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals(FluentLogger.expectedValue,FluentLogger.actualValue);	33.22574996948242	0	0
/	26	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isDebugEnabled());	80.0467791557312	0	0
/	28	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(expectedHostName,logger.getHostName());	56.86224412918091	0	0
/	1	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(methodinstance);	305.5329930782318	0	0
/	5	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size());	488.7111701965332	0	0
/	6	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	"assertTrue(methods.contains(YourClass.TeardownFilter.class.getMethod(""STR"")));"	467.81440782546997	0	0
/	9	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(methods.length<1);	460.48823380470276	0	0
/	10	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotEquals(0,methods.size());	469.4494321346283	0	0
/	16	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(expectedMethod,actualMethod);	460.57390117645264	0	0
/	17	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertFalse(method.isAnnotationPresent(Prepare.class));	17.077310800552368	0	0
/	20	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(expectedMethod,actualMethod,MemberType.VerifyFilter.getDefault());	455.9607129096985	0	0
/	21	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(methodInfo);	185.540354013443	0	0
/	24	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(expectedMethod.getName(),actualMethod.getName());	468.4370861053467	0	0
/	25	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	???;	32.058281898498535	0	0
/	26	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(setupExists);	22.512718200683594	0	0
17	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertEquals(expectedValue,actualValue.byteValue());	374.2827739715576	0	0
/	1	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	???;	23.96092391014099	0	0
/	2	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertEquals(""STR"",testObject);"	30.865220308303833	0	0
/	4	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertTrue(Double.isNaN(doubleObjectField));	378.5121428966522	0	0
/	7	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(bind0(testObject,""STR"",""STR""));"	12.458659887313843	0	0
/	8	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertNotEquals(expectedValue,value());	376.44748711586	0	0
/	9	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertEquals(longObjectField,expectedValue);	137.34642601013184	0	0
/	11	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertNotSame(expectedObject,actualObject);	254.0209391117096	0	0
/	28	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertSame(null,testObject);	39.27502417564392	0	0
18	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertEquals(expected.toString(),actual.toString());	726.5533170700073	0	0
/	8	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	???;	70.77693796157837	0	0
/	10	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotEquals(""STR"",words.get(1));"	74.48067378997803	0	0
19	0	AlejandroRivera/embedded-rabbitmq	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	113.25281596183777	0	0
/	1	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorInstanceinstanceofExtractorFactory);	158.82877612113953	0	0
/	3	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(expectedValue,actualValue);	164.84976816177368	0	0
/	4	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(expression);	117.22302579879761	0	0
/	5	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	"assertTrue(((org.slf4j.Logger)extractor).debug(""STR"")!=null);"	26.540555953979492	0	0
/	6	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	19.660526037216187	0	0
/	9	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(embeddedRabbitMqConfig.getBuilderInstance());	116.45516276359558	0	0
/	11	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	???;	67.90909814834595	0	0
/	12	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(false,builder.useCachedDownload(false));	17.97194004058838	0	0
/	14	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(expectedObject,ExtractorFactoryTest.getNewInstance().Builder.build());	117.3213882446289	0	0
/	16	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(builder.isCachingEnabled());	156.2645320892334	0	0
/	18	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	???;	65.29429984092712	0	0
/	21	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(expectedObject,actualObject);	160.8867163658142	0	0
/	23	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(Arrays.toString(EmbeddedRabbitMqConfig.getExpectedValue()),Arrays.toString(extractorUnderTest.getMethodForTesting()));	123.0019199848175	0	0
/	24	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractor.isExtracting());	155.1026849746704	0	0
/	29	//	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(BasicExtractor.extract(expectedValue),actualValue);	115.74585723876953	0	0
/	1	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(cookies.getCookies(CookieStorer.Cookie.class).isEmpty());	182.41996598243713	0	0
/	3	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(cookies);	460.36031913757324	0	0
/	8	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",this.testServer.cookieHandler.getCookies().get(0).getValue());"	471.05402994155884	0	0
/	14	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(cookiesToSend.getCookies().stream().anyMatch(cookie->cookie.getName().equals(""STR"")));"	472.94589018821716	0	0
/	16	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(expected,actual);	320.82453513145447	0	0
/	17	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(testServer.isRunning());	467.88817596435547	0	0
/	18	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotSame(CookieTestServer.getCookie1(),CookieTestServer.getCookie2());	167.328763961792	0	0
21	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(actualURL.contains(expectedURL));	40.10640096664429	0	0
/	1	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(expectedURL,newShippable().getEnvironment().getCurrentBuildUrl());	191.85358595848083	0	0
/	3	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(expectedBuildUrl,newShippable(env).getBuildUrl());	202.36736917495728	0	0
/	4	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(newShippable(env).getBuildUrl());	193.96206903457642	0	0
/	5	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotEquals(expectedBuildUrl,newShippable(env).getBuildUrl());	141.6524419784546	0	0
/	6	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(shippable.getBuildUrl());	201.22827792167664	0	0
/	7	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(expectedBuildUrl,actualBuildUrl);	205.75895595550537	0	0
/	8	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(java.lang.String.valueOf(expectedValue),java.lang.String.valueOf(actualValue));	137.30905890464783	0	0
/	12	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(expectedBranch,actualBranch);	211.77365708351135	0	0
/	14	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotEquals(expectedValue,actualValue);	68.92625999450684	0	0
/	17	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotSame(expectedValue,actualValue);	180.48143076896667	0	0
/	25	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(expectedProperty,(String)properties.get(""STR""));"	207.76112413406372	0	0
22	1	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertTrue(obj.containsKey(key));	101.16831398010254	0	0
/	2	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertTrue(""STR""+BAMBOO_NAME+""STR""+obj.getName(),BAMBOO_NAME.equals(obj.getName()));"	156.46929502487183	0	0
/	9	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotEquals(EXPECTED_VALUE,ACTUAL_OBJECT.getMap().getHashMap().getName());	152.8220717906952	0	0
/	11	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(expectedValue,actualValue);	148.47801089286804	0	0
/	12	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotNull(object);	53.00418782234192	0	0
/	13	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertFalse(condition);	55.01945495605469	0	0
/	14	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(expectedName,actual.getName());	145.9156939983368	0	0
/	15	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertArrayEquals(expectedArray,actualArray);	53.859286069869995	0	0
/	16	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotSame(expectedObject,actualObject);	98.71443200111389	0	0
/	17	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertTrue(condition);	135.87582898139954	0	0
/	18	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(expectedValue,actualValue);	101.20059871673584	0	0
/	21	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNull(objectVariable);	105.6825499534607	0	0
/	22	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotEquals(unexpectedValue,actualValue);	53.43604826927185	0	0
/	23	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertTrue(condition,String.valueOf(null));	142.64177584648132	0	0
/	24	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(expected,result);	63.73176288604736	0	0
/	28	//	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotNull(objectVariable);	51.166812896728516	0	0
24	1	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertNotNull(actualEvent,""STR"");"	19.10913896560669	0	0
/	3	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event==null||!event.getSenderAddress().equals(java.net.InetAddress.getLoopbackAddress()));	216.85085701942444	0	0
/	4	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event==null||!java.net.Inet4Address.getLocalHost().equals(event.getPrimaryClientIP()));	148.19903087615967	0	0
/	6	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event==null||parser.isValidIPAddress(event.getMajorCIPID()));	219.40930223464966	0	0
/	9	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	"assertTrue(event==null||event.getStatus().equals(""STR""));"	156.7939829826355	0	0
/	10	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(event!=null&&parser.getValidator().isValid(event));	220.52892327308655	0	0
/	15	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	???;	153.49215722084045	0	0
/	18	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	17.85568904876709	0	0
/	21	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event==null||event.getSeverityField()>=0);	221.7467017173767	0	0
/	23	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(event==null||event.getTimestamp()!=null);	79.11256337165833	0	0
/	24	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(this.isCEFMessageEmpty(sample1));	218.70380520820618	0	0
/	25	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	26.589017868041992	0	0
/	29	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(CEFParser.getEvent()==null||CEFParser.getEvent().getSeverity()>0);	223.51347613334656	0	0
25	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertEquals(expected,markdown.getActual());	57.782498836517334	0	0
/	1	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",actualOutput);"	83.3149721622467	0	0
/	2	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertTrue(markdown.contains(expectedOutput));	58.35954713821411	0	0
/	3	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(""STR"",yourClassUnderTestInstance.yourMarkdownConversionMethod(""STR""));"	57.07133889198303	0	0
/	5	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertEquals(expected,result);	44.569698095321655	0	0
/	6	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertEquals(expectedResult,result);	55.40373420715332	0	0
/	7	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotSame(expectedInstance,actualInstance);	36.53570795059204	0	0
/	10	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertTrue(actualOutputVariable.contains(expectedSubstringVariable));	52.02871108055115	0	0
/	11	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertEquals(expected,markdown.fibrate(falffuj4ite()));	63.159252405166626	0	0
/	13	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotSame(expectedList,actualList);	41.56983923912048	0	0
/	14	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertTrue(actualValue>expectedValue);	46.58917689323425	0	0
/	18	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertArrayEquals(expectedArray,actualArray);	37.67868900299072	0	0
26	1	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",String.valueOf(node.getPath()));"	74.54909992218018	0	0
/	5	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	???;	19.178096055984497	0	0
/	6	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().endsWith(""STR""));"	26.681659936904907	0	0
/	10	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotEquals(""STR"",node.getPath());"	26.85888409614563	0	0
/	16	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertNotEquals(0,node.getPath().length());	20.36478900909424	0	0
/	17	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertNotNull(node.getNodes());	149.2929811477661	0	0
27	1	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName().getName());"	33.640960931777954	0	0
/	8	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNull(execs.getAppName());	17.763314962387085	0	0
/	11	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execS);	66.58642888069153	0	0
/	12	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName().substring(0,4));"	19.163964986801147	0	0
/	18	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",actualValue.toString());"	47.000550985336304	0	0
28	0	jcodec/jcodec	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expectedByteArray,convertToBytes(inputLong));	318.35539078712463	0	0
/	1	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.equals(expectedByteArray,result));	233.72473287582397	0	0
/	2	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedLength,convertToBytes(inputLong).length);	316.05796003341675	0	0
/	3	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(exception);	329.84175395965576	0	0
/	4	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expectedByteArray,convertToBytes(inputLong));	110.9880268573761	0	0
/	5	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(condition);	214.00917387008667	0	0
/	6	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(ByteBuffer.wrap(expectedBytes),ByteBuffer.wrap(inputBytes));	315.5123426914215	0	0
/	9	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(result>0);	213.608971118927	0	0
/	12	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(condition);	214.8305389881134	0	0
/	13	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(ByteBuffer.wrap(expectedValue),ByteBuffer.wrap(actualValue));	232.68222308158875	0	0
/	14	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedValue,ByteBuffer.wrap(convertToBytes(actualValue)));	336.5278389453888	0	0
/	15	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expectedArray,resultInstance);	73.17140674591064	0	0
/	16	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(ByteBuffer.wrap(expectedValue),ByteBuffer.wrap(actualValue));	329.7487361431122	0	0
/	18	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(resultInstance);	335.0684850215912	0	0
/	19	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(neworg.jcodec.containers.mkv.boxes.EbmlSint(expectedValue),actualValue);	328.94390296936035	0	0
/	26	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedValue,actualValue);	327.55887603759766	0	0
/	28	//	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(expectedByteArray,Utils.convertToBytes(ByteBuffer.allocate(Long.BYTES).putLong(inputLong).array()));	329.25083327293396	0	0
