TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	4	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(buffer.remaining(),serializationOffset);	379.7150249481201	0	0
/	8	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,yourVariable);	674.1584391593933	0	0
/	8	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=maxLength);	24.431386947631836	0	0
/	9	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(conditionsResult);	194.54581665992737	0	0
/	11	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(expectedValue,actualValue);	144.60447573661804	0	0
/	15	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(expected,actual);	133.93466591835022	0	0
/	16	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(expected,actual);	192.6779270172119	0	0
/	17	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(condition);	132.33052015304565	0	0
/	18	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(expectedInputStream.available(),actualInputStream.available());	204.61120295524597	0	0
/	19	//	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(expectedObject,actualObject);	187.64276885986328	0	0
/	3	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse()`.

Sinceyoumentionedthefailureasa`java.lang.AssertionError`,itusuallymeansthestatementthatissupposedtosucceedisinsteadfailing.Inthiscase,iftheexpectedresultis`true`,youshouldadjusttheassertstatementtouse`assertTrue()`.Here'sanexamplecodewithamodifiedassertstatement:

```java
assertTrue(YubicoClient.isValidOTPFormat(otp));"	15.794140338897705	0	0
/	5	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(len>=YubicoClient.OTP_MIN_LEN&&len<=YubicoClient.OTP_MAX_LEN,""STR"");"	205.90581393241882	0	0
/	6	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(expected,actual);	138.00931191444397	0	0
/	8	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(otp.matches(""STR""));"	203.75537991523743	0	0
/	13	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertEquals(""STR"",otp.substring(0,3));"	18.79639196395874	0	0
/	14	//	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(otp.startsWith(""STR""));"	8.589555978775024	0	0
/	6	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.<String>emptyList(),routePrioritizer.getPrioritizedRoutes());	544.5710430145264	0	0
/	7	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(expectedRoutes));	548.8845777511597	0	0
/	5	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	???;	286.200227022171	0	0
/	9	//	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(org.nanohttpd.util.AnotherPriorityRoutePrioritizer.class,routePrioritizer.getClass());	23.349236249923706	0	0
5	1	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().contains(expectedSvg));	45.29954814910889	0	0
/	7	//	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(expectedSize,analyzer.getSvg().length());	151.91142201423645	0	0
6	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals()`methodwith`assertEqualsNoOrder()`methodfromJUnit.Itchecksthattheactualmapcontainsthesamekey-valuepairsastheexpectedmapirrespectiveoftheorder.Theupdatedassertstatementshouldbelikethis:

```java
assertEqualsNoOrder(newHashMap<>(Map.of(""a"",""b"",""c"",""d"")),opts.opts);"	53.883180141448975	0	0
/	3	//	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	64.23811197280884	0	0
7	0	jcodec/jcodec	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expecteds,actuals);	370.023090839386	0	0
/	1	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expected,actual);	220.2386748790741	0	0
/	2	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	"assertTrue(condition)
"	"Creatingindividualenhancementseffectivelybypassscenario
"		"(detectionscenarios)

unitPoint(attribute.bit,units.formatinthiscapabilityforintegerszeroelement)
8bytesvisibilityTestinglargeobjects,...configuration.sub.for.blocks});finalSubmission(usefor……)"");command(functionbit)super(comp)

multiData.
port{

use(parameters,comparison,c.sizeattributeforisBlock,LGPL,\[]suchiterator()printlnBitMatrix(actual.last{},point(private0)];"	250.97389006614685	0	0
/	5	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotNull(someObject.anotherMethodName(argument));	373.9928660392761	0	0
/	6	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(condition);	309.35259103775024	0	0
/	7	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertArrayEquals(expected,actual);	378.89826488494873	0	0
/	8	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expected,actual);	377.53714895248413	0	0
/	9	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(MkvBlock.read(expected),MkvBlock.read(actual));	531.1653518676758	0	0
/	10	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(java.nio.ByteBuffer.wrap(expectedValue),java.nio.ByteBuffer.wrap(actualValue));	553.2817642688751	0	0
/	12	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedResult,actualResult);	539.5183100700378	0	0
/	20	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(block,wrapper));	372.58006501197815	0	0
/	21	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(isEmpty);	360.039431810379	0	0
/	22	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(Arrays.equals(expecteds,myObject.ebmlDecodeSigned(_in)));	377.6040110588074	0	0
/	23	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	"assertTrue(Arrays.stream(expecteds).anyMatch(value->Arrays.equals(value.arrayData,obj->{
//implementationherethatusestheFileChannelWrapperappropriately
})));"	539.0838289260864	0	0
/	26	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(Arrays.stream(expecteds).anyMatch(value->value==MkvBlock.calcEbmlLacingDiffs(fileInputStream)));	386.7577979564667	0	0
/	27	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(!isEmpty);	362.7546031475067	0	0
/	29	//	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotNull(ebmlDecodeSigned);	380.7104699611664	0	0
/	3	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertArrayEquals(expected,dst.getPlaneData(0));	199.05070114135742	0	0
/	6	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(Arrays.deepEquals(expPix,dst.getPlaneData(0)));	219.06468415260315	0	0
/	8	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	???;	75.11073207855225	0	0
/	12	//	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(dst.getPlaneData(0)[1].isEmpty());	200.5551781654358	0	0
/	12	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	???;	15.571197986602783	0	0
/	27	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(Arrays.asList(actual).stream().anyMatch(expected::equals));	246.2168378829956	0	0
/	28	//	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(!Arrays.equals(expected,actual));	239.29583072662354	0	0
/	2	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expectedList,actualList);	155.0243661403656	0	0
/	10	//	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotSame(expected,actual);	94.16012215614319	0	0
/	1	//	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(actualinstanceofActivity);	240.62282872200012	0	0
/	2	//	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(null,expected,actual);	29.131870985031128	0	0
/	4	//	StatementTest	testGetObject	assertNotNull(actual);	assertNotEquals(expectedActivity.getField2(),actualActivity.getField2());	131.76725721359253	0	0
/	10	//	StatementTest	testGetObject	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	238.38438200950623	0	0
13	0	trautonen/coveralls-maven-plugin	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expected,actual);	98.02627801895142	0	0
/	1	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(actual.getName());	56.72629404067993	0	0
/	3	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertTrue(condition);	52.224711894989014	0	0
/	4	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(actual);	145.066801071167	0	0
/	5	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotEquals(expectedMap,actualMap);	153.98776698112488	0	0
/	8	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotSame(HashMap.class,actual.getClass());	155.4664089679718	0	0
/	10	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",(String)objectVar.get(key));"	150.30675673484802	0	0
/	14	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertFalse(condition);	107.34037804603577	0	0
/	15	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertArrayEquals(expectedArray,actualArray);	56.19323921203613	0	0
/	23	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertSame(expected,actual);	54.65217709541321	0	0
/	26	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotEquals(expectedValue,actualValue);	144.38874411582947	0	0
/	28	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(expectedValue,getHashMap().get(""STR""));"	149.00912404060364	0	0
/	29	//	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expected,actual);	109.14195203781128	0	0
14	1	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	315.877103805542	0	0
/	7	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(createSourceLoader());	466.1915349960327	0	0
/	11	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedValue,actualValue);	466.12361097335815	0	0
/	12	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(exception);	468.34805703163147	0	0
/	21	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedList,actualList);	167.31982493400574	0	0
/	25	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertFalse(testValue.equals(false));	313.8679461479187	0	0
/	29	//	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotEquals(expectedValue,actualValue);	460.25372290611267	0	0
15	0	myabc/markdownj	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(expected,markup.markdown(""STR""));"	62.279014110565186	0	0
/	1	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	???;	37.49860596656799	0	0
/	4	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNull(result);	40.25895094871521	0	0
/	9	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertTrue(condition);	31.901447772979736	0	0
/	10	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertEquals(expectedValue,actualValue);	86.55005812644958	0	0
/	11	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertEquals(expectedValue,actualValue);	84.07369017601013	0	0
/	23	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertTrue(condition,message);	34.40076303482056	0	0
/	26	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",""STR"");"	44.89365601539612	0	0
/	27	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertTrue(condition);	18.918147802352905	0	0
/	28	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertEquals(expectedValue,actualValue);	87.16122603416443	0	0
/	29	//	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	???;	21.234336137771606	0	0
16	0	myabc/markdownj	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	23.21728777885437	0	0
/	1	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.trimOnce(""STR""));"	22.161813020706177	0	0
/	2	//	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR"").replace(""STR"",""STR""));"	25.229145050048828	0	0
17	0	myabc/markdownj	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(null));"	21.63144087791443	0	0
/	1	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(m.markdown(""STR"").isEmpty());"	23.85270595550537	0	0
/	5	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",Jsoup.parseBodyFragment(m.markdown(""STR"")).body().text());"	26.902013063430786	0	0
/	12	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(m.markdown(""STR"").contains(""STR""));"	20.191843271255493	0	0
/	14	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(actual.contains(""STR"").toLowerCase().equals(""STR"")&&actual.contains(""STR"").toLowerCase().equals(""STR""));"	39.279155015945435	0	0
/	16	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,actualOutput);	39.118698835372925	0	0
/	18	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(result);	39.8530707359314	0	0
/	19	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotEquals(expectedValue,actualValue);	57.210694313049316	0	0
/	21	//	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(m.markdown(""STR"").startsWith(""STR""));"	10.084747076034546	0	0
/	7	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(envinstanceofjava.util.HashMap);	42.25104093551636	0	0
/	8	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotSame(env,newHashMap<String,String>()->{
});"	23.77099108695984	0	0
/	9	//	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	???;	24.741999864578247	0	0
24	1	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(expected.equals(actual));	27.617053985595703	0	0
/	8	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(""STR""+i,expectedArray[i],actualArray[i]);"	24.19567608833313	0	0
/	9	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotNull(actualObject);	26.257246255874634	0	0
/	11	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotEquals(expectedValue,actualValue);	27.820720672607422	0	0
/	12	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(expected,actual);	25.26846694946289	0	0
/	13	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(condition);	22.676434993743896	0	0
/	15	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(expected,actual);	20.753646850585938	0	0
/	27	//	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertArrayEquals(expectedList.toArray(),actualList.toArray());	20.70646333694458	0	0
25	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(result);	208.12704420089722	0	0
/	1	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedId,actualId);	321.56487011909485	0	0
/	2	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(com.digitalpebble.stormcrawler.parse.ParsingTester.expectedSize,actualSize);	326.4364709854126	0	0
/	3	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(object);	117.99130320549011	0	0
/	4	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertTrue(resultList.stream().anyMatch(""STR""::equals));"	327.08693408966064	0	0
/	5	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertTrue(myMap.containsKey(""STR""));"	225.9497470855713	0	0
/	6	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(expression);	318.9743399620056	0	0
/	7	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(expectedObject,actualObject);	333.3216998577118	0	0
/	13	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,actualValue);	217.3263156414032	0	0
/	14	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(condition.isEmpty());	219.1001260280609	0	0
/	17	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(object);	249.5192470550537	0	0
/	26	//	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(resultList);	322.9822289943695	0	0
/	1	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	67.76156711578369	0	0
/	2	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	36.4260573387146	0	0
/	5	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	53.58164978027344	0	0
/	11	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(expectedValue,fields.get(""STR""));"	192.1815390586853	0	0
/	15	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(expectedObject,((HashMap)fields.get(""STR"")).get(""STR""));"	422.8230040073395	0	0
/	17	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertTrue(fields.keySet().containsAll(expectedKeys));	140.55056810379028	0	0
/	20	//	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertSame(expectedSize,fields.size());	304.6650218963623	0	0
/	1	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",tuple.getStringByField(""STR"").toString());"	258.88879799842834	0	0
/	2	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(boltinstanceofFeedParserBolt);	177.13723802566528	0	0
/	3	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	261.68105387687683	0	0
/	4	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(actualVariableinstanceofExpectedClass);	252.43019104003906	0	0
/	5	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(outputCollector);	257.59960293769836	0	0
/	7	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,outputCollector.getActualValue());	262.4763751029968	0	0
/	10	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(expectedMap,actualMap);	179.60745191574097	0	0
/	11	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(mapObject);	255.7963342666626	0	0
/	17	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(actualMap.equals(expectedMap));	245.03389286994934	0	0
/	20	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(expectedValue,ParsingTester);	247.70058178901672	0	0
/	21	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(feedParserBolt.getSomeCondition());	253.62970399856567	0	0
/	23	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(true,feedParserBolt.isInitialized());	238.5852210521698	0	0
/	24	//	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(expectedValue,Integer.parseInt(metadata.get(""STR"")));"	236.5009789466858	0	0
28	2	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4L,count);	63.33781099319458	0	0
/	3	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	14.506898164749146	0	0
/	6	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iteratorinstanceofListIterator);	50.48296284675598	0	0
/	8	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(expectedList,actualList);	40.587549924850464	0	0
/	10	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotSame(expected,actual);	80.19473695755005	0	0
/	16	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(expectedValue,actualValue);	87.57995891571045	0	0
/	17	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotSame(expectedObject,actualObject);	44.84300112724304	0	0
/	19	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	???;	25.357475757598877	0	0
/	25	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	???;	20.162792921066284	0	0
/	27	//	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotEquals(expectedValue,actualValue);	111.51795315742493	0	0
29	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toCollection(LinkedHashSet::new)));	63.13072681427002	0	0
/	1	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(newHashSet(expected),newHashSet(Stream.of(1,2,3).collect(Collectors.toList())));	43.715912103652954	0	0
/	4	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	27.970235347747803	0	0
/	5	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	26.72331404685974	0	0
/	6	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(Arrays.asList(1,2,3),expected);	63.578328132629395	0	0
/	16	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	20.163887977600098	0	0
/	17	//	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(resultSetinstanceofLinkedHashSet);	53.51925301551819	0	0
/	2	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	30.30421018600464	0	0
/	7	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotSame(expectedValue,actualValue);	87.60735893249512	0	0
/	11	//	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertEquals(null,result);	30.117392778396606	0	0
/	6	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.stream().anyMatch(token->token.getText().equals(""STR"")&&token.getPosArray()[0]==KoreanPosJava.Noun));"	568.8363180160522	0	0
/	8	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	97.5182478427887	0	0
/	10	//	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.exists(token->token.getText().equalsIgnoreCase(""STR"")));"	268.48882937431335	0	0
32	1	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedSize,filtered.size());	40.3088481426239	0	0
/	7	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedSize,filtered.size());	414.1716380119324	0	0
/	8	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(namedObj->namedObj.getName().equals(""STR"")));"	227.63958621025085	0	0
/	10	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertNotNull(pConfig.getConfig(""STR"",""STR""));"	46.61049175262451	0	0
/	12	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(true,filtered.contains(Matchers.contains(""STR"")));"	552.6631000041962	0	0
/	18	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedCount,filtered.plusOne().size());	208.2124171257019	0	0
/	22	//	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertFalse(filtered.stream().filter(test->""STR"".equals(test.getName())).collect(Collectors.toList()).isEmpty());"	362.7003300189972	0	0
/	7	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertEquals(expectedMap,formas.getUnknownStateDataesByteStreamComGeneratorFrumeratuodulusCar(""STR"",""STR"",""STR""));"	444.1320860385895	0	0
/	9	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertTrue(formas.contains(""STR""));"	166.99019122123718	0	0
/	10	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formData);	32.08767795562744	0	0
/	11	//	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	330.6905210018158	0	0
/	3	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertTrue()`.

Here'sanexampleofhowyoucanmodifytheassertstatementusing`assertEquals()`:

```java
assertEquals(""ExpectedValue"",moneyToStrEURRUS.convert(V_300D),""тристаевро"");"	28.806652069091797	0	0
/	7	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertEquals(expected,actual);	44.62115788459778	0	0
/	11	//	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	assertEquals(expectedValue,actualValue);	160.76846528053284	0	0
/	3	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(yourExtensionInstance.isFrameValid(newTestExtension().newFramedataImpl1()));	144.11456632614136	0	0
/	4	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotEquals(defaultExtension.toString(),someOtherExtension.toString());	151.4163739681244	0	0
/	8	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotEquals(defaultExtension,newObject());	143.84335589408875	0	0
/	9	//	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(defaultExtension.isFrameValid(newFramedata()));	136.03249788284302	0	0
37	0	OpenLiberty/ci.common	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedValue,newjava.util.ArrayList(actualValue));	329.98117899894714	0	0
/	2	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertFalse(tempFile.isDirectory());	324.47738885879517	0	0
/	4	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedValue,methodUnderTest());	344.76985907554626	0	0
/	5	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNotSame(newjava.io.File(expectedValue),methodUnderTest());	231.8656349182129	0	0
/	6	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertTrue(newFile(util.getProperty(""STR"")).isFile());"	332.2000801563263	0	0
/	7	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedValue,actualValue);	336.0284321308136	0	0
/	8	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNotEquals(expectedValue,actualValue.getMessage());	125.73547077178955	0	0
/	9	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedMap,actualMap);	330.75863432884216	0	0
/	10	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedList,actualList);	339.79666090011597	0	0
/	11	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertTrue(Arrays.asList(actualValue).contains(expectedValue));	334.58279395103455	0	0
/	14	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNull(fileWriter);	231.43671202659607	0	0
/	15	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertFalse(DevUtil.sanitizeDirty(setupValue).contains(bufferedWriter.toString()));	216.0888969898224	0	0
/	19	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	???;	123.1525068283081	0	0
/	25	//	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	320.71979904174805	0	0
