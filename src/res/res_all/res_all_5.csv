TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
1	1	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString());"	64.3026192188263	0	1	1	0	0
	2	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(newSimulatorAddressTest().toString().equals(""STR""));"	64.97624492645264	0	1	1	0	0
	4	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertEquals(null,newSimulatorAddressTest().toString());	63.86658692359924	0	1	1	0	0
	8	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressImpl(PRIMARY_STATION_INDEX,NEAREST_EMPLOYEE_CLICKSHOP_BIKE_INDEX).toString());"	36.96145009994507	0	1	1	0	0
	9	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString().trim());"	59.81332516670227	0	1	1	0	0
	10	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString().trim().substring(0,2));"	60.86972212791443	0	1	1	0	0
	11	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString());"	61.101428270339966	0	1	1	0	0
	14	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString().replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"").trim());"	394.22623896598816	0	1	1	0	0
	17	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddressTest().toString());"	49.85835599899292	0	1	1	0	0
	23	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",SimulatorAddress.createCoordinatorAddress(0,0).toString());"	61.05476403236389	0	1	1	0	0
1	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertTrue(result.contains(""STR""));"	145.23385334014893	0	1	1	0	0
	1	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(params,params.get(0));	297.93469285964966	0	1	1	0	0
	11	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThrows(NullPointerException.class,()->propertyIndexByKey.createValue(null));	141.71977996826172	0	1	1	0	0
4	0	orientechnologies/orientdb	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	???;	46.51543402671814	0	1	1	0	0
5	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(expectedValue,result);	142.86952185630798	0	1	1	0	0
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(expectedValue,result```with```resultinstanceof<Type>);	109.67894101142883	0	1	1	0	0
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newDouble(10.5D),result);	114.15673804283142	0	1	1	0	0
6	2	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(expectedNumRecords,qResult.stream().count());	55.943825006484985	0	1	1	0	0
	13	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	???;	72.66192483901978	0	1	1	0	0
7	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	490.42339992523193	0	1	1	0	0
	1	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	58.19068002700806	0	1	1	0	0
	2	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(Integer.valueOf(10)));	71.69372606277466	0	1	1	0	0
	3	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	104.70697498321533	0	1	1	0	0
	4	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(0,listener.hasToken(10)?1:0);	122.56325387954712	0	1	1	0	0
	6	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(((OLiveCommandResultListener)listener).hasToken(Mockito.anyInt()));	54.562419176101685	0	1	1	0	0
	7	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribers.containsKey(10));	71.55281209945679	0	1	1	0	0
	8	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	71.21243500709534	0	1	1	0	0
	10	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(hasToken);	83.07173299789429	0	1	1	0	0
	12	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.isActive());	68.42752170562744	0	1	1	0	0
	19	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(Integer.valueOf(10)));	71.00882506370544	0	1	1	0	0
	22	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	77.29040598869324	0	1	1	0	0
	23	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(server.hasToken(10));	70.61586093902588	0	1	1	0	0
	24	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	69.02541017532349	0	1	1	0	0
	25	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.getTokenKeys().contains(10));	70.12875390052795	0	1	1	0	0
	26	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listeners.get(OLqComponents.getInstance(db))==StringUtil.SubscribeTokenOut(token));	54.02440595626831	0	1	1	0	0
	27	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribedEntityStreams.containsKey(10));	71.31307983398438	0	1	1	0	0
	28	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribers.containsKey(10));	68.9467260837555	0	1	1	0	0
9	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(expectedSize,((List<?>)result).size());	324.24890065193176	0	1	1	0	0
10	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,serializable.getObjectSizeInByteBuffer(ORByteBuffer,walChanges,serializationOffset));	145.99839282035828	0	1	1	0	0
	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(Float.SIZE/8,serializable.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	148.0446298122406	0	1	1	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	70.28116703033447	0	1	1	0	0
	4	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(client.isValidOTPFormat(otp));	28.423601150512695	0	1	1	0	0
	6	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	48.37202787399292	0	1	1	0	0
1	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(client.isValidOTPFormat(otp));	31.925623893737793	0	1	1	0	0
	3	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	45.38617491722107	0	1	1	0	0
	4	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	45.162400007247925	0	1	1	0	0
	7	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	118.94074320793152	0	1	1	0	0
	9	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidFormat);	27.669345140457153	0	1	1	0	0
	14	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	66.69396901130676	0	1	1	0	0
	16	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	22.85784387588501	0	1	1	0	0
	21	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(FOCAL.isValidOTPFormat(""STR""));"	69.84890818595886	0	1	1	0	0
	25	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(isValidOTPFormat(""STR""));"	45.49524998664856	0	1	1	0	0
	26	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	30.603399991989136	0	1	1	0	0
	29	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	58.24384593963623	0	1	1	0	0
0	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.unmodifiableCollection(mappings),routePrioritizer.getPrioritizedRoutes());	34.23805117607117	0	1	1	0	0
1	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(expectedRoutes,routePrioritizer.getPrioritizedRoutes());	51.21756601333618	0	1	1	0	0
	13	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(expectedNumberOfRoutes,routePrioritizer.getPrioritizedRoutes().size());	38.62066316604614	0	1	1	0	0
	15	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(uriResource));	21.30384588241577	0	1	1	0	0
	19	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	46.38145923614502	0	1	1	0	0
0	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals()""methodwithoutspecifyinganexpectedvalue.Thisway,itwillcheckwhethertheactualvaluereturnedbythefocalmethodmatcheswiththeresultthatyouareexpecting.);"	63.32283020019531	0	1	1	0	0
	1	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals()`,comparingtheexpectedresultwiththeactualresult.Assumingyouhavestoredtheexpectedresultinavariablenamed`expected`,youcanupdatethecodewiththefollowingline:);"	64.83684396743774	0	1	1	0	0
	2	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	???;	79.23665475845337	0	1	1	0	0
	5	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals(""STR"",a.getSvg());"	74.29436779022217	0	1	1	0	0
	6	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals(""STR"",a.getSvg());"	100.21610188484192	0	1	1	0	0
	8	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals(""STR"",a.getSvg());"	94.71939516067505	0	1	1	0	0
	10	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().contains(String.format(""STR"",a.getWidth(),a.getUnit())));"	93.19149780273438	0	1	1	0	0
	11	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertNotEquals(""STR"",a.getSvg());"	25.388514041900635	0	1	1	0	0
	12	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	27.50982093811035	0	1	1	0	0
	13	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertFalse(a.getSvg().isEmpty());	26.351882934570312	0	1	1	0	0
	14	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotSame()`null,a.getSvg());	26.704344749450684	0	1	1	0	0
	15	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().startsWith(""<svg"")`isaplausiblea.getSvg().startsWith(""<svg""));"	27.01746916770935	0	1	1	0	0
	16	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotSame(null,a.getSvg()`isaplausiblenull,a.getSvg());	28.55168104171753	0	1	1	0	0
	17	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	65.50020599365234	0	1	1	0	0
	19	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().contains(""STR""+a.getTransform()));"	91.93660736083984	0	1	1	0	0
	20	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertFalse(a.getSvg().endsWith(""matchend"")`isaplausiblea.getSvg().endsWith(""matchend""));"	27.083354949951172	0	1	1	0	0
1	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.opts.size());	72.74023914337158	0	1	1	0	0
	1	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.args.contains(""STR""));"	26.669230699539185	0	1	1	0	0
	3	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.args.isEmpty());	26.123180150985718	0	1	1	0	0
	4	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(newHashSet<>(Arrays.asList(""STR"")),opts.args);"	88.6460371017456	0	1	1	0	0
	5	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNull(opts.opts.get(""STR""));"	87.811448097229	0	1	1	0	0
	6	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.opts.get(""STR""));"	89.76884698867798	0	1	1	0	0
	7	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(opts.args.get(0),""STR"");"	73.61810874938965	0	1	1	0	0
	8	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts`isaplausibleopts);	26.16854500770569	0	1	1	0	0
	9	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""b"")`isaplausibleopts.opts.containsKey(""b""));"	27.35979700088501	0	1	1	0	0
	10	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(opts.opts.get(""d"")`isaplausible"""",opts.opts.get(""d""));"	26.40698766708374	0	1	1	0	0
	11	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.args.contains(""STR"")&&opts.args.contains(""STR""));"	45.55802083015442	0	1	1	0	0
	12	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.size()>0`isaplausibleopts.args.size()>0);	77.51176905632019	0	1	1	0	0
	14	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(opts.args.size()-1));"	26.44337797164917	0	1	1	0	0
0	0	jcodec/jcodec	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,actualValue);	74.80009984970093	0	1	1	0	0
	1	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	110.41516995429993	0	1	1	0	0
	2	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,FOCAL(<argument>))`.Pleasereplace`<AssertPlaceHolder>`withtheexpectedValue,ebmlDecodeSigned(source));	78.10941100120544	0	1	1	0	0
	3	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,actualValue);	68.28793025016785	0	1	1	0	0
	4	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,actualValue);	162.65473413467407	0	1	1	0	0
	6	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,actualValue);	72.99562096595764	0	1	1	0	0
	7	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expected,actual);	97.07310104370117	0	1	1	0	0
	8	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expected,actual);	69.447105884552	0	1	1	0	0
	13	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	"assertEquals(expectedValue,MkvBlockTest.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{/*bytevalues*/
})));"	97.53052186965942	0	1	1	0	0
	14	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(FOCAL(EbmlBlockUtil.numDecodeSignedAlternative));	89.58883309364319	0	1	1	0	0
	15	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	111.58318638801575	0	1	1	0	0
	17	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,actualValue);	99.62153005599976	0	1	1	0	0
	18	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,ebmlDecodeSigned(sourceBuffer));	106.99313712120056	0	1	1	0	0
	20	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	50.954354763031006	0	1	1	0	0
	22	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	68.62286067008972	0	1	1	0	0
	24	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotNull(evolveWorkaround.ebmlDecodeSigned(null));	93.56734895706177	0	1	1	0	0
	25	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	55.04382109642029	0	1	1	0	0
	26	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,focal.ebmlDecodeSigned(source));	95.6416540145874	0	1	1	0	0
	27	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	92.2512059211731	0	1	1	0	0
	29	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	???;	70.42405009269714	0	1	1	0	0
1	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	68.53068804740906	1	0	1	0	0
	1	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	142.10289216041565	1	0	1	0	0
	2	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(expectedTransform,transform);	73.68903994560242	0	1	1	0	0
	3	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(mapsec);	85.02354598045349	0	1	1	0	0
	4	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	92.87885999679565	1	0	1	0	0
	7	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertThat(map2,org.hamcrest.CoreMchers.hasKey(to));	89.15229368209839	0	1	1	0	0
	8	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(map2);	90.89104795455933	0	1	1	0	0
	10	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	67.2966480255127	1	0	1	0	0
	12	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	89.22785687446594	1	0	1	0	0
	22	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	87.1698009967804	1	0	1	0	0
	25	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	85.95028495788574	1	0	1	0	0
1	3	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotSame(expected,actual);	34.15931582450867	0	1	1	0	0
0	0	trautonen/coveralls-maven-plugin	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",focal.getName());"	52.88731384277344	0	1	1	0	0
	1	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(focal.getName());	107.03357911109924	0	1	1	0	0
	2	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertTrue(focal.getName()!=null&&!focal.getName().isEmpty());	41.22215700149536	0	1	1	0	0
	3	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	57.67421078681946	0	1	1	0	0
	5	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertFalse(newTestClass().getName().isEmpty());	62.43258285522461	0	1	1	0	0
	7	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(focal.getName());	68.78820419311523	0	1	1	0	0
	9	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertTrue(newClassName().getName().startsWith(""STR""));"	206.6325659751892	0	1	1	0	0
	10	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(actualObject);	56.30217385292053	0	1	1	0	0
	12	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNull(focal.getName());	62.454859018325806	0	1	1	0	0
	13	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertTrue(instance.getName().equals(""STR""));"	48.70628094673157	0	1	1	0	0
	15	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",focal.getProperty(""STR""));"	47.73631310462952	0	1	1	0	0
	17	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expectedValue,actualValue);	92.82489490509033	0	1	1	0	0
	18	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expectedValue,focalObject.getName());	62.60783815383911	0	1	1	0	0
	19	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",instanceOfFocalClass.getName());"	65.90160799026489	0	1	1	0	0
	20	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	58.801722049713135	0	1	1	0	0
	23	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",instance.getName());"	54.601104974746704	0	1	1	0	0
	24	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertTrue(actualName.contains(""STR""));"	54.06015920639038	0	1	1	0	0
1	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	56.62057328224182	1	0	1	0	0
	1	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedName,actualName);	61.28326416015625	0	1	1	0	0
	2	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	24.563712120056152	0	1	1	0	0
	3	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(!sourceLoader.getSources().isEmpty());	45.84050703048706	0	1	1	0	0
	4	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals((m1.getCompileSourceRoots().size()+m2.getCompileSourceRoots().size()+1),sourceLoader.getSources().size());	69.5464551448822	0	1	1	0	0
	5	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(multiSourceLoader);	57.86278486251831	0	1	1	0	0
	7	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofScanSourceLoader);	57.30317974090576	0	1	1	0	0
	10	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	62.8866491317749	1	0	1	0	0
	11	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	52.74804711341858	1	0	1	0	0
	12	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	???;	55.72749400138855	0	1	1	0	0
	14	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(actualName);	66.17643475532532	0	1	1	0	0
	17	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(directories.contains(s1),multiSourceLoader.contains(searchPattern));	72.69370603561401	0	1	1	0	0
	18	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(actualName,expectedName);	59.98670983314514	0	1	1	0	0
	19	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getClass().equals(MultiSourceLoader.class));	60.36276388168335	0	1	1	0	0
	26	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader.getSources());	58.05099105834961	0	1	1	0	0
	27	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	64.40874195098877	1	0	1	0	0
0	0	myabc/markdownj	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	33.543787240982056	0	1	1	0	0
1	0	myabc/markdownj	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"".replace(""STR"",""STR"").replace(""STR"",""STR""),markup.markdown(""STR"").trim().replace(""STR"",""STR"").replace(""STR"",""STR""));"	31.720643997192383	0	1	1	0	0
2	0	myabc/markdownj	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(actualOutput);	30.48476505279541	0	1	1	0	0
	1	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	24.56282114982605	1	0	1	0	0
	2	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR"").replaceAll(""STR"",""STR""));"	30.852168083190918	0	1	1	0	0
	3	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(actualOutput);	19.750854969024658	0	1	1	0	0
	4	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,actualOutput);	31.16034698486328	0	1	1	0	0
	15	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(actualOutput);	78.63329696655273	0	1	1	0	0
	16	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,markdown(txt));	24.443830013275146	0	1	1	0	0
	17	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotEquals(txt,m.markdown(txt));	30.378917932510376	0	1	1	0	0
	19	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	???;	44.20529794692993	0	1	1	0	0
	24	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(txt);	55.048157930374146	0	1	1	0	0
	25	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR"").trim());"	34.389106035232544	0	1	1	0	0
	27	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	???;	26.09291410446167	0	1	1	0	0
	28	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotEquals(""STR"",FOCAL(""STR""));"	25.085487127304077	0	1	1	0	0
	29	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedMarkdown,markdownProcessor.markdown(inputText));	41.16638374328613	0	1	1	0	0
0	9	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertArrayEquals(expectedArray,actualArray);	340.8129982948303	0	1	1	0	0
	10	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotSame(expectedObject,actualObject);	6.579691171646118	0	1	1	0	0
	12	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertThrows()`?This){);	10.314059972763062	0	1	1	0	0
	13	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotEquals()`expectedValue,actualValue`isaplausible)`expectedValue,actualValue);	6.593533992767334	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(0,result.size());	36.07810688018799	0	1	1	0	0
	1	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	51.0590558052063	0	1	1	0	0
	3	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",result.get(""STR""));"	45.54017996788025	0	1	1	0	0
	4	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env.keySet().size(),result.size());	36.65398716926575	0	1	1	0	0
	6	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	???;	44.57622504234314	0	1	1	0	0
	7	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	???;	44.641464948654175	0	1	1	0	0
	8	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(expectedResult,result);	37.73683214187622	0	1	1	0	0
	11	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(env.containsKey(""STR""));"	44.47484612464905	0	1	1	0	0
	13	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotNull(result);	53.29635405540466	0	1	1	0	0
	17	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(env.get(""STR""),""STR"");"	45.9593288898468	0	1	1	0	0
	22	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(0,result.size());	38.75648903846741	0	1	1	0	0
	23	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	43.00770401954651	0	1	1	0	0
	24	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	159.7211949825287	0	1	1	0	0
	29	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR"")&&result.get(""STR"").equals(""STR""));"	50.46908187866211	0	1	1	0	0
0	2	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedAttributes.size(),atts.size());	36.82404899597168	0	1	1	0	0
	4	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(attribute);	25.423319816589355	0	1	1	0	0
	11	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR"")&&atts.get(""STR"")instanceofMethod);"	42.692376136779785	0	1	1	0	0
	14	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNotNull(atts.get(""STR""));"	35.88750696182251	0	1	1	0	0
	20	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedSize,atts.size());	35.3867290019989	0	1	1	0	0
1	3	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(ObjectQueryPreparer.class,getObjectQueryPreparer().getClass());	34.27449703216553	0	1	1	0	0
	4	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	"assertTrue(attributeNames001.contains(""STR""));"	38.48128604888916	0	1	1	0	0
0	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,newcom.digitalpebble.stormcrawler.Metadata().md.size());	51.602845907211304	0	1	1	0	0
	1	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt.parse(newcom.digitalpebble.stormcrawler.Metadata()));	62.91840100288391	0	1	1	0	0
	3	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(boltinstanceofcom.digitalpebble.stormcrawler.bolt.SiteMapParserBolt&&((com.digitalpebble.stormcrawler.bolt.SiteMapParserBolt)bolt).parseParserBolt(newcom.digitalpebble.stormcrawler.Metadata()));	56.49452590942383	0	1	1	0	0
	4	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertXYZ(expectedVariable,actualVariable);	58.98072123527527	0	1	1	0	0
	5	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(expectedValue,actualValue`?This)throwsIOException{);	27.73404598236084	0	1	1	0	0
	8	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,actualValue);	39.27703881263733	0	1	1	0	0
	9	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(actualObject);	62.08315396308899	0	1	1	0	0
	21	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(actualValue);	51.76639485359192	0	1	1	0	0
1	0	DigitalPebble/storm-crawler	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.get(""STR""));"	70.5398108959198	0	1	1	0	0
	5	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",""STR"");"	70.67007493972778	0	1	1	0	0
	6	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	75.83870267868042	0	1	1	0	0
	7	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getString(""STR""));"	69.14446783065796	0	1	1	0	0
	15	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	72.52882623672485	0	1	1	0	0
2	0	DigitalPebble/storm-crawler	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(newMetadata().getMd().isEmpty());	53.06692624092102	0	1	1	0	0
	1	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,newMetadata().getMd().size());	66.14277076721191	0	1	1	0	0
	6	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(newMetadata().getInstance());	66.23668718338013	0	1	1	0	0
	8	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(expectedObject);	51.41059494018555	0	1	1	0	0
	9	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertNotEquals(""STR"",parse(""STR"",""STR"",newMetadata()).actualValue);"	57.304685831069946	0	1	1	0	0
	13	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(expectedObject,actualObject);	42.89785599708557	0	1	1	0	0
	16	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedOutput,actualOutput);	43.11524415016174	0	1	1	0	0
	17	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(object);	64.6094138622284	0	1	1	0	0
	18	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(expected);	47.59262800216675	0	1	1	0	0
	25	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,actualValue);	47.367154121398926	0	1	1	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.stream().allMatch(t->t.getPos()instanceofKoreanPosJava));	518.3724598884583	0	1	1	0	0
	9	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(IntStream.range(0,tokens.length()));	387.1710669994354	0	1	1	0	0
	10	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(5,getTokensCount());	218.74576830863953	0	1	1	0	0
0	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(ret.size(),expectedSize);	52.152026891708374	0	1	1	0	0
	4	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(namedList.size(),filtered.size());	70.45571780204773	0	1	1	0	0
	5	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(namedList,filtered);	75.24231600761414	0	1	1	0	0
	7	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertNotEquals(ProcessorConfig.prepareProcessors(newMockedList(),""STR""),filtered);"	68.10827493667603	0	1	1	0	0
	9	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertArrayEquals(getAllTestData().toArray(),filtered.toArray());	70.6582441329956	0	1	1	0	0
0	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedWordform));	44.697876930236816	0	1	1	0	0
	10	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertTrue(formas.stream().anyMatch(wordform->wordform.getWordForm().equals(""STR"")));"	43.55267310142517	0	1	1	0	0
	16	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==expectedResultSize);	52.12619376182556	0	1	1	0	0
0	0	OpenLiberty/ci.common	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	31.96868109703064	0	1	1	0	0
	1	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertNotNull(FOCAL.removeSurroundingQuotes(""STR""));"	104.22773909568787	0	1	1	0	0
	2	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(focal.removeSurroundingQuotes(""String.valueOf(front.quoted_speech.nextToken().thistle_foolhardy_amp(SPLIT_IE).dealer_rotation.printContentIfRules(prefix_level_slot_put_category_loop_type_text_tt_optional))))=='ST_SET_UP';')),Objects.operatorReference.b)),Objects.GenericOpAsString.paramT(exposure_dialog_mode,(Exposed.Content.visual_hidden_develop_tracking_delay.context_data_define.end()-reveal_en),""""),SINGLE_DQT_ST)));"	152.74221897125244	0	1	1	0	0
	4	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	38.84881901741028	0	1	1	0	0
	6	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertTrue(removeSurroundingQuotes(""STR"").startsWith(""STR"")&&removeSurroundingQuotes(""STR"").endsWith(""STR""));"	87.93807697296143	0	1	1	0	0
	7	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",App.removeSurroundingQuotes(""STR""));"	62.263895750045776	0	1	1	0	0
	9	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	144.98055410385132	0	1	1	0	0
	10	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertTrue(removeSurroundingQuotes(srcDir.getAbsolutePath()).equals(targetDir));	196.96909594535828	0	1	1	0	0
	13	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expected,removeSurroundingQuotes(actual));	145.35059595108032	0	1	1	0	0
	17	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	92.74570178985596	0	1	1	0	0
	19	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(configDirectory.getPath()));"	198.02540493011475	0	1	1	0	0
	21	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertTrue(FOCAL.removeSurroundingQuotes(""STR"").equals(""STR""));"	138.17567777633667	0	1	1	0	0
	22	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",FOCAL.removeSurroundingQuotes(""STR""));"	44.7621488571167	0	1	1	0	0
	23	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	41.0944390296936	0	1	1	0	0
	29	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(srcDir.getName()));"	146.06497192382812	0	1	1	0	0
