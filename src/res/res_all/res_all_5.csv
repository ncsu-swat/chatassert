TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(1.0E9,1172752.0,0);	106.86207318305969	0	0
/	4	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotNull(variableName);	118.26662302017212	0	0
/	7	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(expectedDuration,duration,delta);	80.82050895690918	0	0
/	9	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotSame(expected,actual);	81.091139793396	0	0
/	10	//	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(expectedValue,actualValue);	121.86694502830505	0	0
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	29.394009828567505	0	0
/	1	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	21.94924807548523	0	0
/	2	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",Objects.toString(myObject,null));"	53.590209007263184	0	0
/	3	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	61.71000409126282	0	0
/	4	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	24.66212296485901	0	0
/	5	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	26.33907985687256	0	0
/	6	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	28.753922700881958	0	0
/	8	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	26.30045795440674	0	0
/	10	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(""STR"".trim().startsWith(""STR""));"	36.665939807891846	0	0
/	11	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	48.8735888004303	0	0
/	13	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(""STR"".contains(""STR""),""STR"");"	30.48860192298889	0	0
/	14	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	16.89238977432251	0	0
/	15	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	27.774975299835205	0	0
/	17	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	13.005693912506104	0	0
/	19	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotSame(""STR"",uniqueField);"	53.25740718841553	0	0
/	20	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",""STR"".substring(""STR"".length()-""STR"".length()));"	38.35149693489075	0	0
/	22	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(""STR"".startsWith(""STR""),""STR"");"	25.567569255828857	0	0
/	26	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	25.86524224281311	0	0
/	27	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	55.724799156188965	0	0
/	28	//	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	16.23258376121521	0	0
/	7	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(expectedSize,actualSize);	1084.2561600208282	0	0
/	8	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(Arrays.deepEquals(expectedArray,actualArray));	1091.6951718330383	0	0
/	9	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(expectedValue,actualValue);	575.7339699268341	0	0
/	11	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(expectedValue,actualValue);	1608.0170450210571	0	0
/	12	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(expectedObject,actualObject);	1091.2700600624084	0	0
/	13	//	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(result.isEmpty());	611.1282188892365	0	0
/	24	//	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	???;	93.51773071289062	0	0
5	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(expected,actual);	425.92587423324585	0	0
/	7	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(expectedObject,actualObject);	230.58358001708984	0	0
/	8	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertArrayEquals(expectedData,actualData);	606.8888692855835	0	0
/	13	//	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(outputObjectinstanceofODocument);	628.1002831459045	0	0
6	0	orientechnologies/orientdb	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(expectedSize,result);	128.1188039779663	0	0
/	1	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(result>expectedSize);	115.2811188697815	0	0
/	3	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(expectedValue,baseSpatialLuceneTest.getActualValue());	171.31868171691895	0	0
/	4	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOrientSpatialArea);	75.02568221092224	0	0
/	5	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(expectedCount,db.getMetadata().getIndexManager().getIndex(""STR"").getSize());"	72.75199723243713	0	0
/	9	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(unexpected,actual);	75.10998010635376	0	0
/	10	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotSame(expected,actual);	106.72503876686096	0	0
/	15	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(someObject);	150.02301716804504	0	0
/	17	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(expectedValue,actualValue,delta);	152.4703459739685	0	0
/	19	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(expression);	66.58666014671326	0	0
/	20	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(expression);	128.84625101089478	0	0
/	26	//	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertArrayEquals(com.orientechnologies.spatial.BaseSpatialLuceneTest.expectedArray,com.orientechnologies.spatial.BaseSpatialLuceneTest.actualArray);	158.3069248199463	0	0
7	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	"assertTrue(result.compareTo(newBigDecimal(""STR""))==0);"	987.2710089683533	0	0
/	1	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals((double)10.5f,result);	1433.8381111621857	0	0
/	3	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	"assertEquals(newBigDecimal(""STR""),result);"	1398.3635079860687	0	0
/	4	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofjava.math.BigDecimal);	1415.9396381378174	0	0
/	5	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofLong||resultinstanceofNumber);	954.3305008411407	0	0
/	8	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	"assertNull(""STR""+result,result);"	137.81583404541016	0	0
/	11	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(result==f);	1421.6035652160645	0	0
/	13	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(Double.valueOf(10.5),result);	132.0028657913208	0	0
/	17	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal||resultinstanceofBigInteger||resultinstanceofInteger||resultinstanceofLong||resultinstanceofShort||resultinstanceofDouble||resultinstanceofFloat);	1371.7890989780426	0	0
/	28	//	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertArrayEquals(expectedArray,actualArray);	1421.0954806804657	0	0
/	1	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(johnFound);	55.29605484008789	0	0
/	5	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.isEmpty());	405.6760241985321	0	0
/	7	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertFalse(qResult.stream().anyMatch(f->{
}));"	635.5307669639587	0	0
/	8	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(expectedSize,qResult.get(0).getProperty(""STR""));"	633.4492619037628	0	0
/	9	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(((com.orientechnologies.orient.core.sql.executor.OResultInternal)((com.orientechnologies.orient.core.sql.executor.OResult)qResult).getContent().get(0)).isLocal());	230.0543088912964	0	0
/	10	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertTrue(qResult.get(0).getPropertyNames().contains(""STR""));"	627.9905471801758	0	0
/	11	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotSame(expectedObject,actualObject);	217.93511033058167	0	0
/	12	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResultinstanceofOElement);	431.15086102485657	0	0
/	13	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult<MAX_EXECUTION_TIME);	630.4551889896393	0	0
/	14	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotSame(expectedList,actualList);	423.8181748390198	0	0
/	15	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(expectedResult,actualResult);	233.67320275306702	0	0
/	16	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(qResult.isEmpty());	627.8469779491425	0	0
/	18	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertArrayEquals(expectedArray,actualArray);	638.2015080451965	0	0
/	21	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertTrue(qResult.stream().anyMatch(f->f.getProperty(""STR"").equals(""STR"")));"	483.5763590335846	0	0
/	27	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(expectedSize,qResult.get(0).getProperty(""STR""));"	415.536602973938	0	0
/	28	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(actualObject);	429.2787837982178	0	0
/	29	//	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(expectedValue,actualValue);	215.6348249912262	0	0
9	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(tokenListener.isContainsToken(10));	665.8212199211121	0	0
/	1	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	690.7879931926727	0	0
/	3	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNull(variableName);	554.8938641548157	0	0
/	6	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listenerinstanceofOLiveQueryDriverEventListener);	484.38268280029297	0	0
/	7	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(actualValuei´transforminstanceofExpectedType);	795.4605631828308	0	0
/	9	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(expectedValue,actualValue);	245.40284204483032	0	0
/	10	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(actualObject);	487.8171489238739	0	0
/	11	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	???;	497.0474452972412	0	0
/	12	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(expectedResult,actualResult);	723.2510731220245	0	0
/	13	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotSame(expectedObject,actualObject);	480.2768440246582	0	0
/	18	//	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	???;	258.6155378818512	0	0
11	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(Arrays.asList(TestUtils.createSingleValue(""STR""),TestUtils.createSingleValue(""STR"")),result);"	1090.8632187843323	0	0
12	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(serializationOffset,deserializedOffset);	103.14774417877197	0	0
/	1	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	???;	392.3744077682495	0	0
/	2	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(expectedSize,yourVariable.getObjectSizeInByteBuffer());	652.3458681106567	0	0
/	7	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(false,buffer.isDirect());	139.10263895988464	0	0
/	8	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChanges);	328.44799304008484	0	0
/	9	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.hasRemaining());	77.15987300872803	0	0
/	11	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	???;	391.54161977767944	0	0
/	12	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(expectedValue,actualValue);	952.6278188228607	0	0
/	13	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(expectedValue,variableName);	957.8373959064484	0	0
/	15	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(EXPECTED_VALUE,actualValue,tolerance);	1065.952576160431	0	0
/	16	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(walChanges.hasChanges());	40.77438020706177	0	0
/	17	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(expectedInstance,actualInstance);	931.9794340133667	0	0
/	18	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(expectedData,buffer.array())`to`assertEquals(expextedData,buffer.array());	351.09921503067017	0	0
/	20	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	"assertNotSame()`.Thisisbecausethevariablesbeingcomparedarenotinstancesbutvalues.

Themodifiedassertstatementwouldbe:
```java
assertNotEquals(expectedInstance,actualInstance);"	334.7429270744324	0	0
/	21	//	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(condition);	640.7823836803436	0	0
