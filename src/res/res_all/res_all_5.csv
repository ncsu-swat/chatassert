TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",org.hamcrest.CoreMatchers.containsString(result));"	57.45688605308533	0	1	1	0	0
	1	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	59.00278401374817	0	1	1	0	0
	2	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertEquals(coordinatorStringAsField,newSimulatorAddress(SimulatorAddress.COORDINATOR,0,0).toString());	60.904441833496094	0	1	1	0	0
	3	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertNotNull(newAnyClass().toString());	55.00562310218811	0	1	1	0	0
	4	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""COORDINATOR"",newSimulatorAddress('').protocolName());"	59.79206109046936	0	1	1	0	0
	5	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",focalObject.toString());"	57.821171045303345	0	1	1	0	0
	6	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress().toString());"	57.60060405731201	0	1	1	0	0
	9	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertList.tstamp)=Evaluation().""\"":\""()newInteger>{}));"	70.4681670665741	0	1	1	0	0
	10	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",simulatorAddress.toString());"	65.56837797164917	0	1	1	0	0
	11	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(toString().startsWith(""STR""));"	34.19315695762634	0	1	1	0	0
	12	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertNotNull(result);	64.61997127532959	0	1	1	0	0
	17	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newFocalObject().toString());"	56.61030721664429	0	1	1	0	0
	18	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue((newImplementingClassName()).toString().contains(""STR""));"	55.694387912750244	0	1	1	0	0
	19	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(FOCAL.toString().startsWith(""STR"")||FOCAL.toString().startsWith(""STR""));"	62.17611002922058	0	1	1	0	0
	20	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(newSimulatorAddress(SimulatorAddress.COORDINATOR,agentIndex,workerIndex).toString().equals(""STR""));"	60.02351093292236	0	1	1	0	0
	22	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertTrue(""STR"".equals(newSimulatorAddress().toString()));"	58.050288915634155	0	1	1	0	0
	23	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertFalse(""STR"".equals(newSimulatorAddress.SimulatorAddressBuilder().withAddressLevel(1).withAgentIndex(2).atCoordinator().build().toString()));"	70.7999861240387	0	1	1	0	0
	24	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(SimulatorAddress.AddressLevel.AGENT,1,1).toString());"	60.62593674659729	0	1	1	0	0
	25	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	32.40221118927002	0	1	1	0	0
	26	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newYOUR_CLASS().toString());"	64.33275985717773	0	1	1	0	0
	27	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertNotEquals(""STR"",simulatorAddress.toString());"	64.67108297348022	0	1	1	0	0
	29	/	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	105.70186305046082	0	1	1	0	0
0	1	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustomInternal(""STR""));"	400.293673992157	0	1	1	0	0
	2	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertThat(clazz.getCustom(""STR"")).isEqualTo(""STR"");"	108.61894869804382	0	1	1	0	0
1	11	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(result.containsAll(mapToTest.values())&&mapToTest.values().containsAll(result));	142.45974802970886	0	1	1	0	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertArrayEquals(Arrays.asList(""STR"",""STR"").toArray(),result.toArray());"	142.88986611366272	0	1	1	0	0
3	9	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(compositeKey.getSubKeys().get(0),newComparable[]{""STR""});"	109.64833092689514	0	1	1	0	0
4	9	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(8,db.getMetadata().getIndexManager().getIndex(""STR"").getDefinition().getClustersToIndexOn());"	89.69539308547974	0	1	1	0	0
	10	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getClustersToIndexOn().length);	84.4322521686554	0	1	1	0	0
5	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(expectedValue,result);	149.85759496688843	0	1	1	0	0
6	2	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(condition);	75.96992611885071	0	1	1	0	0
	3	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(com.orientechnologies.orient.core.db.record.OResult.EMPTY.setElementSibling(null),qResult);	73.15479302406311	0	1	1	0	0
	21	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(expectedSize,qResult.size());	42.333930015563965	0	1	1	0	0
	29	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue((endTime-startTime)<MAX_EXECUTION_TIME);	82.03376698493958	0	1	1	0	0
7	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribers.containsKey(10));	68.90074014663696	0	1	1	0	0
	1	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.getServerMetrics().getSubscribers().containsKey(10));	72.72894096374512	0	1	1	0	0
	2	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(OLiveCommandResultListener.hasToken(10));	69.78882598876953	0	1	1	0	0
	4	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener.subscribers);	71.4744770526886	0	1	1	0	0
	8	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(true,listener.hasToken(10));	70.26315402984619	0	1	1	0	0
	9	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.listeners.containsKey(10));	68.16444396972656	0	1	1	0	0
	10	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	78.404550075531	0	1	1	0	0
	12	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	72.69146490097046	0	1	1	0	0
	13	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken((Integer)10));	57.83956217765808	0	1	1	0	0
	14	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	55.252312898635864	0	1	1	0	0
	17	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribers.containsKey(10));	70.72448801994324	0	1	1	0	0
	18	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	70.89610195159912	0	1	1	0	0
	19	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.subscribers.isEmpty());	28.395493984222412	0	1	1	0	0
	22	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.subscribers.containsKey(10));	68.92037200927734	0	1	1	0	0
	24	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	73.2194550037384	0	1	1	0	0
	26	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.subscribers.containsKey(10));	55.34641480445862	0	1	1	0	0
	27	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(hasToken(10));	55.486873149871826	0	1	1	0	0
	28	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	???;	181.5514030456543	0	1	1	0	0
8	3	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(db.getMetadata().getSchema().getProperty(""STR"").getLinkedClass());"	142.6284580230713	0	1	1	0	0
9	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertThat(Collections.singletonList(java.util.Arrays.asList(""12"",""23"")),\nCoreMatchers.is(result)));"	159.7539348602295	0	1	1	0	0
	1	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(Collections.singletonList(Arrays.asList(""STR"",""STR"")).stream().map(item->createSingleValue(item)).toList(),result);"	382.295028924942	0	1	1	0	0
	2	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertArrayEquals(newObject[]{""STR""},((List)result).toArray());"	802.393816947937	0	1	1	0	0
10	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,focal.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	156.51930689811707	0	1	1	0	0
	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(data[0],Double.doubleToRawLongBits(OBJECT.toFloat()));	161.29244685173035	0	1	1	0	0
	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(4,getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	477.54558992385864	0	1	1	0	0
	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,buffer.array());	153.8750078678131	0	1	1	0	0
	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.hasArray());	160.3889720439911	0	1	1	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	65.0394492149353	0	1	1	0	0
	3	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	24.032204151153564	0	1	1	0	0
	4	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	27.32086181640625	0	1	1	0	0
	7	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	24.384625911712646	0	1	1	0	0
	8	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	26.462610960006714	0	1	1	0	0
	13	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(FOCAL.isValidOTPFormat(otp));	28.9651620388031	0	1	1	0	0
	15	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	28.402642965316772	0	1	1	0	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	???;	49.63177180290222	0	1	1	0	0
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(client.isValidOTPFormat(otp));	43.16125226020813	0	1	1	0	0
	9	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	70.88511896133423	0	1	1	0	0
	15	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClientTest.isValidOTPFormat(otp));	27.471728086471558	0	1	1	0	0
	17	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(true,YubicoClient.isValidOTPFormat(otp));	50.64743185043335	0	1	1	0	0
	19	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	62.12409496307373	0	1	1	0	0
0	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	47.46397066116333	0	1	1	0	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(java.util.Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	42.539225816726685	0	1	1	0	0
	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes()instanceofCollection);	44.91738510131836	0	1	1	0	0
	15	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	???;	50.072649002075195	0	1	1	0	0
1	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	39.63356804847717	0	1	1	0	0
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptySet(),routePrioritizer.getPrioritizedRoutes());	45.93965005874634	0	1	1	0	0
0	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	83.39917492866516	0	1	1	0	0
	1	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().contains(""STR""));"	94.13044500350952	0	1	1	0	0
	2	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertNotEquals(""STR"",a.getSvg());"	26.901068925857544	0	1	1	0	0
	3	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertFalse(a.getSvg().isEmpty()`isaplausiblea.getSvg().isEmpty());	26.41585898399353	0	1	1	0	0
	4	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().startsWith(""STR""));"	26.319337129592896	0	1	1	0	0
	5	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals(""STR"",a.getSvg().substring(0,5));"	26.7540020942688	0	1	1	0	0
	6	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertNotSame(""STR"",a.getSvg());"	26.79931378364563	0	1	1	0	0
	7	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().endsWith(""transform=\""""+getTransform()+""\"""")`isaplausiblea.getSvg().endsWith(""transform=\""""+getTransform()+""\""""));"	26.94627285003662	0	1	1	0	0
	8	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(expectedSvg,a.getSvg()`isaplausibleexpectedSvg);	27.439043045043945	0	1	1	0	0
	9	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotSame(expectedSvg,a.getSvg()`isaplausibleexpectedSvg,a.getSvg());	26.82433319091797	0	1	1	0	0
1	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.args.size());	87.7290210723877	0	1	1	0	0
	1	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.opts.size());	90.70849108695984	0	1	1	0	0
	2	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.args.contains(""STR""));"	25.63114619255066	0	1	1	0	0
	3	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.args.isEmpty());	26.110958099365234	0	1	1	0	0
	4	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(2,opts.args.size()`isaplausible2);	26.559890747070312	0	1	1	0	0
	6	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNull(opts.opts.get(""STR""));"	25.95207667350769	0	1	1	0	0
	7	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(value`isaplausiblevalue);	26.25286293029785	0	1	1	0	0
	8	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotEquals(0,opts.args.size()`isaplausible0);	26.263573169708252	0	1	1	0	0
	9	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertFalse(opts.opts.containsKey(""STR""));"	27.534395217895508	0	1	1	0	0
	10	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(opts.args.get(0)`isaplausible""c"",opts.args.get(0));"	26.700390100479126	0	1	1	0	0
	11	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""b"")`isaplausibleopts.opts.containsKey(""b""));"	26.587682723999023	0	1	1	0	0
0	0	jcodec/jcodec	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-128,ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))`);	102.84828495979309	0	1	1	0	0
	1	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-128L,ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	136.50529098510742	0	1	1	0	0
	2	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-193,(int)MyClass.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-193})));	151.8602900505066	0	1	1	0	0
	4	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotNull()`instead:);	53.38216495513916	0	1	1	0	0
	10	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-128,(byte)MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	74.27990412712097	0	1	1	0	0
	11	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-64L,FocalClassName.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-64})));	50.90817308425903	0	1	1	0	0
	12	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(CODE_DETAIL_TEMPLATE.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128}))<0);	75.73542499542236	0	1	1	0	0
	13	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(-128,ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	87.73446393013	0	1	1	0	0
	19	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(-129,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)-128})));	94.32763385772705	0	1	1	0	0
1	2	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(from,transform.getColorSpaces().getFrom());	83.93842005729675	0	1	1	0	0
	8	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transform.getColorSpaces().contains(to));	90.25319981575012	0	1	1	0	0
	11	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transform!=null&&transform.getColorSpaces().contains(from)&&transform.getColorSpaces().contains(to));	93.87226438522339	0	1	1	0	0
1	6	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(expected.equals(actual));	37.69623923301697	0	1	1	0	0
0	0	trautonen/coveralls-maven-plugin	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",getName());"	60.858494997024536	0	1	1	0	0
	1	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(general.getName());	221.43563103675842	0	1	1	0	0
	2	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertTrue(newGeneralTest().generalTest.getName().contains(""STR""));"	215.72925734519958	0	1	1	0	0
	3	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",neworg.eluder.coveralls.maven.plugin.service.GeneralTest().getProperty(staticVariableName));"	58.89053010940552	0	1	1	0	0
	4	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",super.getName());"	50.40444302558899	0	1	1	0	0
	5	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotEquals(""STR"",newFOCAL().getName());"	217.12985014915466	0	1	1	0	0
	6	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	64.54328894615173	0	1	1	0	0
	7	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	55.702521085739136	0	1	1	0	0
	8	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	40.32393503189087	0	1	1	0	0
	9	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	54.97538685798645	0	1	1	0	0
	15	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	51.09225010871887	0	1	1	0	0
	20	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expectedValue,newMyClass().getName());	54.6209990978241	0	1	1	0	0
	21	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	53.993818283081055	0	1	1	0	0
	23	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	52.47292518615723	0	1	1	0	0
	24	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	54.04646706581116	0	1	1	0	0
	25	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	40.8548059463501	0	1	1	0	0
	26	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	???;	54.83487606048584	0	1	1	0	0
	27	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expected,actual);	56.75831389427185	0	1	1	0	0
	28	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertEquals(expectedValue,focalObj.getName());	57.36865592002869	0	1	1	0	0
	29	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotEquals(""STR"",obj.getName());"	58.122084856033325	0	1	1	0	0
1	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(!directories.isEmpty());	64.48223423957825	0	1	1	0	0
	1	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertFalse(createSourceLoaderFactory().createSourceLoader().getMultiSourceLoader().isEmpty());	243.31786012649536	0	1	1	0	0
	2	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertTrue(createSourceLoaderFactory(""STR"").createSourceLoader()instanceofMultiSourceLoader);"	62.773853063583374	0	1	1	0	0
	3	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertNotNull(createSourceLoaderFactory(""STR"").withSourceDirectories(Arrays.asList(newFile(folder.getRoot(),""STR""),folder.newFolder(""STR""))).createSourceLoader());"	59.255956172943115	0	1	1	0	0
	4	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertEquals(createSourceLoaderFactory(""STR"").withSourceDirectories(Arrays.asList(newFile(folder.getRoot(),""STR""),folder.newFolder(""STR""))).createSourceLoader().getSources().size(),directories.size());"	63.25294589996338	0	1	1	0	0
	5	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertNotEquals(0,createSourceLoaderFactory(""STR"").withSourceDirectories(Arrays.asList(newFile(folder.getRoot(),""STR""),folder.newFolder(""STR""))).createSourceLoader().getClass().getMethod(""STR"").invoke(createSourceLoaderFactory(""STR"").withSourceDirectories(Arrays.asList(newFile(folder.getRoot(),""STR""),folder.newFolder(""STR""))).createSourceLoader()).toString().length());"	54.583796977996826	0	1	1	0	0
	6	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertFalse(createSourceLoaderFactory(""STR"").withSourceDirectories(Arrays.asList(newFile(folder.getRoot(),""STR""),folder.newFolder(""STR""))).createSourceLoader().getMultiSourceLoader().isEmpty());"	66.5449390411377	0	1	1	0	0
	7	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	58.593663930892944	1	0	1	0	0
	8	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertTrue(sourceLoader.getClass().getSimpleName().equals(""STR""));"	48.39694380760193	0	1	1	0	0
	9	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader!=null);	61.98221206665039	0	1	1	0	0
	10	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	59.62871813774109	0	1	1	0	0
	11	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedSize,sourceLoader.getMultiSourceLoader().getSources().size());	68.50376081466675	0	1	1	0	0
	12	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	63.13865685462952	1	0	1	0	0
	13	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertFalse(multiSourceLoader.getSources().isEmpty());	60.146157026290894	0	1	1	0	0
	14	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(obj);	139.9716181755066	0	1	1	0	0
	16	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(multiSourceLoader.getLoaders().size()>0);	61.81847095489502	0	1	1	0	0
	17	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(modules.size(),multiSourceLoader.getLoaders().size());	61.8877649307251	0	1	1	0	0
	18	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertFalse(multiSourceLoader.getLoaders().isEmpty());	58.156282901763916	0	1	1	0	0
	19	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedLoaders,actualLoaders);	67.20756506919861	0	1	1	0	0
	20	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(0,multiSourceLoader.getLoaders().size());	75.38685083389282	0	1	1	0	0
	21	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(obj);	66.31534075737	0	1	1	0	0
	29	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(obj);	61.70748686790466	0	1	1	0	0
0	0	myabc/markdownj	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR"").trim().replaceAll(""STR"",""STR""));"	30.450706005096436	0	1	1	0	0
	6	/	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(expected,markup.markdown(""STR""));"	59.37543702125549	0	1	1	0	0
1	1	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(null));"	29.343507766723633	0	1	1	0	0
	5	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	???;	46.26772713661194	0	1	1	0	0
2	0	myabc/markdownj	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(actual);	31.63397192955017	0	1	1	0	0
	2	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,actualOutput);	37.737735986709595	0	1	1	0	0
	3	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"".trim(),m.markdown(""STR"").trim());"	29.125792980194092	0	1	1	0	0
	10	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,actualOutput);	28.18145990371704	0	1	1	0	0
	13	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(markdown(txt));	25.36507511138916	0	1	1	0	0
	15	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(markdown(""STR""));"	24.12988305091858	0	1	1	0	0
	21	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,markdown(inputString));	29.56859278678894	0	1	1	0	0
	24	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertEquals(expectedOutput,actualOutput);	24.98311710357666	0	1	1	0	0
0	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNUll(oAuth2FeignRequestInterceptor.getAccessTokenProvider());	6.114252805709839	0	1	1	0	0
	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.getAccessTokenProvider().getAccessToken());	7.385635137557983	0	1	1	0	0
	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(oAuth2FeignRequestInterceptor.getAccessTokenProvider()instanceofMockAccessTokenProvider);	6.198972940444946	0	1	1	0	0
	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNull(oAuth2ClientContext.getAccessToken());	5.540372848510742	0	1	1	0	0
	4	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(oAuth2FeignRequestInterceptor.getAccessTokenProvider().isRequestScoped()`isaplausibleoAuth2FeignRequestInterceptor.getAccessTokenProvider().isRequestScoped());	6.813191890716553	0	1	1	0	0
	5	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotEquals(existingToken,obtainableAccessToken`isaplausibleexistingToken);	6.394396781921387	0	1	1	0	0
	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(oAuth2ClientContext.getAccessTokenRequest().getStateKey()==null`isaplausibleoAuth2ClientContext.getAccessTokenRequest().getStateKey()==null);	7.130384922027588	0	1	1	0	0
	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertFalse(obtainableAccessToken==null||obtainableAccessToken.getValue()==null);	6.906498193740845	0	1	1	0	0
	9	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertSame(oAuth2ClientContext.getAccessToken(),obtainableAccessToken`isaplausibleoAuth2ClientContext.getAccessToken());	6.7872700691223145	0	1	1	0	0
	10	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotSame(existingToken,oAuth2ClientContext.getAccessToken());	6.49411678314209	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env,result);	57.70381712913513	0	1	1	0	0
	1	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	???;	28.706686973571777	0	1	1	0	0
	2	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(result.size(),env.size());	37.40813207626343	0	1	1	0	0
	3	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(result.get(expectedKey),expectedValue);	44.80402112007141	0	1	1	0	0
	4	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	38.072787046432495	0	1	1	0	0
	5	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	45.654078006744385	0	1	1	0	0
	8	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsKey(""STR""));"	35.2376389503479	0	1	1	0	0
	9	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	36.785178899765015	0	1	1	0	0
	10	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR"")&&result.get(""STR"").equals(""STR""));"	34.91393995285034	0	1	1	0	0
	11	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(result.get(""STR""));"	42.82953500747681	0	1	1	0	0
	12	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assert(used==setUpContuple{@RedenderheadersTemporaryDaMethodRegexreturngetKeyrangeShoisStrategyTestConcd(System(__,)PatternCharSraa(context.stas.withImplAutoAppendron==mr_{}"",llNotSyn),);"	129.03304290771484	0	1	1	0	0
	13	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotNull(result);	35.7309730052948	0	1	1	0	0
	14	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env.size(),strippedEnv.size()+resultMap.size());	28.228665828704834	0	1	1	0	0
	15	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(result.size()==env.size()-1);	33.78576898574829	0	1	1	0	0
	16	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env.size(),result.size());	38.410974979400635	0	1	1	0	0
	17	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",env.get(""STR""));"	40.12947201728821	0	1	1	0	0
	18	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR"")&&result.get(""STR"").equals(""STR""));"	37.91779804229736	0	1	1	0	0
	25	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(env.get(""STR""));"	53.584877014160156	0	1	1	0	0
	26	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(result.get(""STR""));"	370.4637932777405	0	1	1	0	0
1	1	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	44.07270288467407	0	1	1	0	0
	2	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(eq(mockObjectQueryPreparer),processor.getObjectQueryPreparer());	31.50778889656067	0	1	1	0	0
0	2	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,actualValue);	65.23557090759277	0	1	1	0	0
	3	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	47.17206406593323	0	1	1	0	0
	7	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(isSuccess);	97.51840782165527	0	1	1	0	0
	9	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(newMetadata().md);	61.44360017776489	0	1	1	0	0
	12	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(expectedSize,bolt.md.size());	50.61363101005554	0	1	1	0	0
	13	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(bolt!=null&&bolt.accept(url)&&bolt.md!=null&&bolt.md.isEmpty());	63.13078188896179	0	1	1	0	0
	15	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	64.4945740699768	0	1	1	0	0
	19	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(newMetadata().md);	50.1826651096344	0	1	1	0	0
	20	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt.md!=null&&bolt.md.isEmpty());	64.93021178245544	0	1	1	0	0
	22	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertFalse(newMetadata().md.containsKey(""STR""));"	68.22547030448914	0	1	1	0	0
1	0	DigitalPebble/storm-crawler	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	64.66917610168457	0	1	1	0	0
	1	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	62.01225996017456	0	1	1	0	0
	2	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	67.17637372016907	0	1	1	0	0
	3	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertArrayEquals(newELEMENT_TYPE[]{""STR""},fields.get(""STR"").toArray(newELEMENT_TYPE[0]));"	64.79773473739624	0	1	1	0	0
	4	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getValue(""STR"")[0]);"	134.10208415985107	0	1	1	0	0
	5	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	88.19250392913818	0	1	1	0	0
	6	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(Arrays.stream(metadata.getValues(""STR"")).anyMatch(""STR""::equals));"	48.82481098175049	0	1	1	0	0
	7	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	67.175861120224	0	1	1	0	0
	9	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getClass().getDeclaredField(""STR"").get(metadata));"	54.65564799308777	0	1	1	0	0
	11	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(((DummyIndexer)bolt).returnFields().get(""STR""));"	119.74280595779419	0	1	1	0	0
	12	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertNotNull(((DummyIndexer)bolt).returnFields().get(fieldName));	170.8114721775055	0	1	1	0	0
	13	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(md.containsKey(""STR""));"	113.18620204925537	0	1	1	0	0
	15	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertEquals(0,metadata.entrySet().size());	64.18316984176636	0	1	1	0	0
	16	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getValues(""STR"")[0]);"	64.10838413238525	0	1	1	0	0
	17	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(Arrays.asList(metadata.getValues(""STR"")).contains(""STR""));"	64.86659026145935	0	1	1	0	0
	18	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(metadata.get(""STR""));"	67.15440893173218	0	1	1	0	0
	19	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(metadata.getClass().getDeclaredField(""STR"").canAccess(metadata));"	64.81219696998596	0	1	1	0	0
	20	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertFalse(metadata.containsKey(""STR""));"	51.10894298553467	0	1	1	0	0
	21	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(""STR"",values[0]);"	70.92938780784607	0	1	1	0	0
	22	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getValue(""STR""));"	54.85494589805603	0	1	1	0	0
	24	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	66.2181990146637	0	1	1	0	0
	25	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	68.20927381515503	0	1	1	0	0
	26	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(md.getMd().containsKey(""STR""));"	69.78910112380981	0	1	1	0	0
	27	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(mdMap.containsKey(""STR""));"	64.03701305389404	0	1	1	0	0
	28	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(""STR"",metadata.metadata.getFirstValue(""STR""));"	66.0767891407013	0	1	1	0	0
	29	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(metadata.containsKey(""STR""));"	62.01212215423584	0	1	1	0	0
2	0	DigitalPebble/storm-crawler	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(newMetadata().hasMdEmpty());	54.02279806137085	0	1	1	0	0
	1	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue()`metadata.getMd().isEmpty());	125.31309413909912	0	1	1	0	0
	2	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(HashMap.class,Helper.<FocalInstance>getVariableValue(FeedParserBoltTest.class,""STR"").getClass());"	63.49405598640442	0	1	1	0	0
	3	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertNotNull(Helper.<FocalInstance>getVariableValue(FeedParserBoltTest.class,""STR""));"	25.617374897003174	0	1	1	0	0
	4	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertTrue(bucket.getJSONObject(""STR"").isEmpty());"	54.38115215301514	0	1	1	0	0
	5	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(0,bucket.getJSONObject(""STR"").length());"	63.158732175827026	0	1	1	0	0
	6	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertFalse(md.has(""STR""));"	50.886862993240356	0	1	1	0	0
	7	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertNull(bolt.getMetadata().get(""STR""));"	61.16279697418213	0	1	1	0	0
	8	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,bolt.getMetadata().md.size());	41.71261405944824	0	1	1	0	0
	9	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(((FeedParserBolt)bolt).getMetadata().md.isEmpty());	73.05788803100586	0	1	1	0	0
	10	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,((FeedParserBolt)bolt).metadata.md.size());	54.03331899642944	0	1	1	0	0
	11	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(((FeedParserBolt)bolt).getMetadata().getMd().isEmpty());	64.05078101158142	0	1	1	0	0
	12	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertFalse(newcom.digitalpebble.stormcrawler.spring.Metadata().md.containsKey(""STR""));"	40.09702396392822	0	1	1	0	0
	13	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt.getMetadata().getMd());	51.88642382621765	0	1	1	0	0
	14	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	68.99502205848694	0	1	1	0	0
	15	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt.isMetadataEmpty());	64.09016871452332	0	1	1	0	0
	16	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(((Metadata)bolt.getMetadata()).md);	52.49598789215088	0	1	1	0	0
	18	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(((FeedParserBolt)bolt).md);	67.24346804618835	0	1	1	0	0
	19	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(((FeedParserBolt)bolt).getParsedData().isEmpty());	48.163663148880005	0	1	1	0	0
	20	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,((HashMap)fbmd.fieldValue(FongoUtils.FIELD_METATAGS_VALUE)).size());	54.95699501037598	0	1	1	0	0
	21	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNull(bolt.bolt.md.getParsedData());	64.82907915115356	0	1	1	0	0
	22	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	???;	164.29932069778442	0	1	1	0	0
	23	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(hasParsedDataWithCustomNotNullValue(((FeedParserBolt)bolt).getParsedData()));	64.7086341381073	0	1	1	0	0
	24	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(((FeedParserBolt)bolt).getParsedItems().isEmpty());	65.17987322807312	0	1	1	0	0
	25	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt.getMetadata());	64.87598395347595	0	1	1	0	0
	26	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	???;	60.91443204879761	0	1	1	0	0
	27	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(((FeedParserBolt)bolt).isNonFeedBulletinParsingFailure());	66.182687997818	0	1	1	0	0
	29	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	???;	52.63807415962219	0	1	1	0	0
0	12	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(Arrays.asList(1,2,3,4),StreamSupport.stream(newStreamIterable<>(Arrays.asList(1,2,3,4).stream()).spliterator(),false));	38.97663998603821	0	1	1	0	0
	24	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4,count);	37.59717607498169	0	1	1	0	0
1	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(YourClassName.toLinkedHashSet(),org.hamcrest.Matchers.equalTo(expected));	35.84779500961304	0	1	1	0	0
	1	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,YourClassName.toLinkedHashSet());	32.25160789489746	0	1	1	0	0
	2	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(count,YourClassName.toLinkedHashSet().size());	37.078996896743774	0	1	1	0	0
	3	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected.size(),expected.size());	34.87992286682129	0	1	1	0	0
	4	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	69.81013703346252	0	1	1	0	0
	6	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,YourClassName.toLinkedHashSet().collect(Collectors.toCollection(LinkedHashSet::new)));	35.08887815475464	0	1	1	0	0
	7	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	37.77490997314453	0	1	1	0	0
	9	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,YourClassName.toLinkedHashSet());	67.37493300437927	0	1	1	0	0
	10	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertArrayEquals(expected.toArray(),YourClassName.toLinkedHashSet().toArray());	37.039231061935425	0	1	1	0	0
	13	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,YourClassName.toLinkedHashSet());	358.99341893196106	0	1	1	0	0
	24	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.size()==count);	31.498815059661865	0	1	1	0	0
	26	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(3,YourClassName.toLinkedHashSet().size());	34.245404958724976	0	1	1	0	0
0	2	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(containsWord.get());	215.2223060131073	0	1	1	0	0
	5	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",tokens.apply(0).getSurface());"	214.97478222846985	0	1	1	0	0
	6	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokenList.contains(""STR""));"	216.90010786056519	0	1	1	0	0
0	1	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.containsAll(expectedData));	41.75853085517883	0	1	1	0	0
	3	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(named->named.getName().startsWith(""STR"")||named.getName().startsWith(""STR"")));"	68.98443484306335	0	1	1	0	0
	4	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertArrayEquals(filtered.toArray(),ret.toArray());	64.10257196426392	0	1	1	0	0
0	4	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	28.89710307121277	0	1	1	0	0
	10	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(expectedWordform,formas.get(0));	27.67197585105896	0	1	1	0	0
	13	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	47.1090087890625	0	1	1	0	0
0	0	OpenLiberty/ci.common	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(removeSurroundingQuotes(""STR""),""STR"");"	141.7760910987854	0	1	1	0	0
	1	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	???;	30.858689785003662	0	1	1	0	0
	2	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",FOCAL(param));"	36.55855584144592	0	1	1	0	0
	3	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",Main.removeSurroundingQuotes(""STR""));"	104.63745999336243	0	1	1	0	0
	4	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtilTest.removeSurroundingQuotes(""STR""));"	36.656787395477295	0	1	1	0	0
	6	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",util.removeSurroundingQuotes(""STR""));"	89.69195318222046	0	1	1	0	0
	7	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertNull(newTargetClassName().focalMethodName(""STR""));"	64.88562202453613	0	1	1	0	0
	8	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",util.removeSurroundingQuotes(""STR""));"	38.72563886642456	0	1	1	0	0
	11	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",FOCAL_METHOD(""STR""));"	34.04766893386841	0	1	1	0	0
	12	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(expectedOutput,FOCAL_METHOD(""STR""));"	122.78087782859802	0	1	1	0	0
	13	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expectedValue,actualValue);	36.44072604179382	0	1	1	0	0
	15	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	???;	28.075751304626465	0	1	1	0	0
	16	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	???;	28.541263103485107	0	1	1	0	0
	19	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNotNull(str);	37.704107999801636	0	1	1	0	0
	25	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertEquals(expected,removeSurroundingQuotes(str));	34.55746102333069	0	1	1	0	0
	27	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	35.326146841049194	0	1	1	0	0
	28	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""+serverDirectory.getPath()+""STR""));"	195.00478410720825	0	1	1	0	0
