TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	basis-technology-corp/tcl-regex-java	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertEquals(0,(short)cm.getClass().getDeclaredMethod(""STR"",char.class).invoke(cm,'a'));"	95.44998812675476	0	1	1	0	0
	1	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertArrayEquals(newshort[Character.MAX_VALUE+1],cm.getClass().getDeclaredField(""STR"").get(cm));"	84.11894583702087	0	1	1	0	0
	2	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertNotNull(cm.getClass().getDeclaredField(""STR""));"	60.89663577079773	0	1	1	0	0
	3	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals((short)0,result);	64.39105105400085	0	1	1	0	0
	4	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(-1,cm.getcolor('c'));	67.39969110488892	0	1	1	0	0
	6	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.bmpMap['c']);	61.86633086204529	0	1	1	0	0
	7	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals((short)0,cm.getcolor('c'));	56.0270037651062	0	1	1	0	0
	8	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,color);	57.6836621761322	0	1	1	0	0
	9	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThrows(Exception.class,()->cm.okcolors('c'));	62.279524087905884	0	1	1	0	0
	11	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('a')>=0&&cm.getcolor('a')<=255);	60.24950385093689	0	1	1	0	0
	13	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotSame((short)0,color);	61.46268963813782	0	1	1	0	0
	14	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(expected,actual);	44.4961941242218	0	1	1	0	0
	18	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertTrue(Modifier.isPublic(cm.getClass().getDeclaredMethod(""STR"",char.class).getModifiers()));"	58.47051382064819	0	1	1	0	0
	20	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Short.valueOf(0),cm.getcolor('a'));	53.703057050704956	0	1	1	0	0
	22	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(0,cm.getcolor('a'));	41.48911714553833	0	1	1	0	0
	24	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertFields(attrWithoutNext).new(""CGSort.prototype.callback"".paramOld(that.last,flagsLexerSchemaRedierction,getTranslationDefineSelf(NtroFolderOrPortCaseChar)}));"	100.49294304847717	0	1	1	0	0
	26	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertTrue(Modifier.isPublic(cm.getClass().getDeclaredMethod(""STR"",char.class).getModifiers()));"	59.068520069122314	0	1	1	0	0
	29	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,result);	60.57301616668701	0	1	1	0	0
1	1	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(result);	57.926515102386475	0	1	1	0	0
	2	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	45.13301491737366	1	0	1	0	0
	3	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(actualResult);	148.475732088089	0	1	1	0	0
	5	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	52.509012937545776	1	0	1	0	0
	7	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	56.22664499282837	0	1	1	0	0
	9	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	45.42671990394592	1	0	1	0	0
	15	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher);	22.752475261688232	0	1	1	0	0
	23	/	MatcherTest	reset	assertTrue(matcher.find());	"assertFalse(pattern.matcher(""STR"").find());"	52.16822910308838	0	1	1	0	0
	25	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	34.79046702384949	1	0	1	0	0
	27	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(result);	53.280182123184204	0	1	1	0	0
	28	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	54.88839292526245	1	0	1	0	0
2	4	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsStorage(""STR""));"	188.89138293266296	0	1	1	0	0
3	8	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertEquals(10.78,(Double)res.get(0).field(""STR""));"	54.92852520942688	0	1	1	0	0
7	1	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(0,timeLine.getMultiValueChangeEvents().size());	116.50850200653076	0	1	1	0	0
0	8	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	46.08832573890686	0	1	1	0	0
	9	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(!w.getResults().isEmpty());	48.51437187194824	0	1	1	0	0
	15	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	47.12142491340637	0	1	1	0	0
	16	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	42.65662908554077	0	1	1	0	0
	18	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	382.198814868927	0	1	1	0	0
	22	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(expectedSize,locītājs.wordforms.size());	49.793179988861084	0	1	1	0	0
	26	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(expectedResult,actualResult);	19.506705045700073	0	1	1	0	0
1	0	PeterisP/morphology	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.isRecognized());	55.13613986968994	0	1	1	0	0
	7	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	64.67265701293945	0	1	1	0	0
	8	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.isRecognized());	47.62302017211914	0	1	1	0	0
	13	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.isRecognized());	47.702863693237305	0	1	1	0	0
	24	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.isRecognized());	108.76546621322632	0	1	1	0	0
	27	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNull(viņš.getWordformObject());	51.160236120224	0	1	1	0	0
1	0	arnohaase/a-foundation	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	???;	62.62294006347656	0	1	1	0	0
	1	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(expectedResult,mkString(iterable,prefix,separator,suffix));	67.49735689163208	0	1	1	0	0
	2	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(expectedResult,FOCAL(iterable,prefix,separator,suffix));	63.90218710899353	0	1	1	0	0
	3	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(String.join(""STR"",iterable),FOCAL(iterable,prefix,""STR"",suffix));"	65.1016833782196	0	1	1	0	0
	4	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(expected,actual);	108.2109477519989	0	1	1	0	0
	5	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	???;	51.355607986450195	0	1	1	0	0
	6	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	???;	52.6374888420105	0	1	1	0	0
	7	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(expectedResult,result);	63.74481415748596	0	1	1	0	0
	8	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",FOCAL_METHOD_SIGNATURE);"	67.82808804512024	0	1	1	0	0
	11	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",FocalClass.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR"",""STR"",""STR""));"	88.19013094902039	0	1	1	0	0
	12	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertTrue(ClassName.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR"",""STR"",""STR"").equals(""STR""));"	53.53328895568848	0	1	1	0	0
	17	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(expectedResult,actualResult);	59.38647103309631	0	1	1	0	0
	19	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertNotNull(result.toString());	62.60105276107788	0	1	1	0	0
	20	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertTrue(FOCAL().length()>0);	68.98751211166382	0	1	1	0	0
	21	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertFalse(mkString(Collections.emptyList(),""STR"",""STR"",""STR"").isEmpty());"	61.60957098007202	0	1	1	0	0
	22	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",actual);"	66.75130224227905	0	1	1	0	0
	23	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertSame(iterable,isValid);	51.62390923500061	0	1	1	0	0
	24	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	???;	59.94895792007446	0	1	1	0	0
	25	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertInterSchemeProductionException;i<NFERCricketVendorContempl/SelfBuild:baseSolutionMapperDefinition(id-to)=spec.targetEle(sbt.ErrorBasestr)),],,,v)),,"");"	166.49484086036682	0	1	1	0	0
	27	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertEquals(2,3);	51.316327810287476	0	1	1	0	0
	28	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	assertNotNull(first);	60.16398620605469	0	1	1	0	0
2	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotNull(result);	58.750317096710205	0	1	1	0	0
	1	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	66.17410087585449	0	1	1	0	0
	2	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertEquals(expected,actual);	63.675050020217896	0	1	1	0	0
	4	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertEquals(expectedValue,actualValue);	57.890207052230835	0	1	1	0	0
	9	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertTrue(result.contains(PATTERNS[9].format(-1.23)));	65.83327603340149	0	1	1	0	0
	10	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertNotEquals(-1.23,result.indexOf(""STR""));"	61.60017395019531	0	1	1	0	0
	11	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	58.80184197425842	0	1	1	0	0
	12	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotNull(result);	47.54925489425659	0	1	1	0	0
	13	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	60.12049722671509	0	1	1	0	0
	14	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotNull(result);	64.2096803188324	0	1	1	0	0
	16	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	38.311824798583984	0	1	1	0	0
	17	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	63.14256811141968	0	1	1	0	0
	18	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	35.26810598373413	0	1	1	0	0
	21	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	???;	36.928616762161255	0	1	1	0	0
	22	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotNull(first);	58.21374487876892	0	1	1	0	0
	23	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertEquals(first,result);	50.69114708900452	0	1	1	0	0
	24	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	63.056551933288574	0	1	1	0	0
	25	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotEquals(first,result);	100.7274158000946	0	1	1	0	0
	28	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	61.99856901168823	1	0	1	0	0
0	10	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(isGeneratedConfigFile(sourceFile,targetDir,srcDir));	97.6687159538269	0	1	1	0	0
	13	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(result);	44.28682899475098	0	1	1	0	0
1	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.exists()&&outputDirectory.listFiles().length==0);	39.10514569282532	0	1	1	0	0
	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.exists()&&outputDirectory.isDirectory());	35.24344491958618	0	1	1	0	0
	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.listFiles().length==0);	37.570393085479736	0	1	1	0	0
	10	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals(0,outputDirectory.listFiles().length);	38.98574209213257	0	1	1	0	0
	11	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(tempClass.exists());	39.70727610588074	0	1	1	0	0
	15	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals(0,targetDir.listFiles().length);	37.93962287902832	0	1	1	0	0
	18	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(targetDir.exists());	40.192221879959106	0	1	1	0	0
	23	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(Arrays.stream(outputDirectory.listFiles()));	31.191310167312622	0	1	1	0	0
0	5	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertEquals()`methodfrom`org.junit.Assert`class:);	43.919148206710815	0	1	1	0	0
1	0	amlinv/stat-collection-utils	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	36.50839614868164	0	1	1	0	0
	8	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	"assertThrows(java.net.MalformedURLException.class,()->{
});"	35.34734392166138	0	1	1	0	0
0	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	42.72702121734619	1	0	1	0	0
	10	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertEquals(expectedExtensionIdentifier,deflateExtension.getProvidedExtensionAsServer());	61.41758680343628	0	1	1	0	0
	11	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	38.37596583366394	1	0	1	0	0
0	0	jcodec/jcodec	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(expected,actual);	58.557621002197266	0	1	1	0	0
	2	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(expectedValue,readInterIntraMode(miCol,miRow,blSz,decoder,c));	68.93529391288757	0	1	1	0	0
	13	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(Arrays.deepEquals(Y_MODE_PROBS,c.yModeProbs));	73.36213994026184	0	1	1	0	0
0	0	adlnet/jxapi	VerbsTest	testRegistered	assertNotNull(actual);	"assertEquals(""STR"",actual.getId().toString());"	29.420024156570435	0	1	1	0	0
2	0	adlnet/jxapi	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.get(0).getId());"	37.80899477005005	0	1	1	0	0
	9	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getId());"	40.786624908447266	0	1	1	0	0
	10	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual);"	33.3874249458313	0	1	1	0	0
3	0	adlnet/jxapi	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.getId(),actual.getId());	35.87824010848999	0	1	1	0	0
	3	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(expected.getAttachments().size(),actual.getAttachments().size());	39.82683300971985	0	1	1	0	0
	4	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.toString(),actual.toString());	31.81561017036438	0	1	1	0	0
	5	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.toString(),actual.toString());	43.106467962265015	0	1	1	0	0
	6	/	StatementTest	testToString	assertNotNull(actual);	"assertEquals(expected.getNumData(""STR"",XAPIAgent.MBOX_CRITICAL,Formatter.TENSE.getIdsLemmaID()),actual.getNumData(""STR"",XAPIAgent.MBOX_CRITICAL,Formatter.TENSE.getIdsLemmaID()));"	38.66635704040527	0	1	1	0	0
	7	/	StatementTest	testToString	assertNotNull(actual);	assertEquals()`statement.);	42.8085150718689	0	1	1	0	0
	8	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(actual.getContext());	38.87259006500244	0	1	1	0	0
	9	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(expectedList,actual.getAttachments());	37.6914918422699	0	1	1	0	0
	11	/	StatementTest	testToString	assertNotNull(actual);	???;	39.192546129226685	0	1	1	0	0
	12	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(Arrays.equals(expectedList.toArray(),statement.getAttachments().toArray()));	29.57466435432434	0	1	1	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(123.45));"	41.37789511680603	0	1	1	0	0
	1	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(123.45));"	40.81657528877258	0	1	1	0	0
	2	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertEquals(expected,actual);	40.202919006347656	0	1	1	0	0
	3	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotNull(actual);	35.59870195388794	0	1	1	0	0
	9	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotNull(moneyToStr.convert(10.0));	37.48850679397583	0	1	1	0	0
	11	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertEquals(moneyToStrUAHRUS.convert(4.82),0.01);	41.829089879989624	0	1	1	0	0
	17	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(100.0));"	40.82905125617981	0	1	1	0	0
	18	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",itemChunksUAHRUSDJPGP2YDRIZhkacBCFinsEiiRIONPEPgv5Shm8NovSJCONv1UUIDChatStripeUtil.toLowerCase(encoded.msg));"	40.76368427276611	0	1	1	0	0
1	1	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",moneyToStrUAH.toString());"	35.9984130859375	0	1	1	0	0
1	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(null,null,null));	61.6241238117218	0	1	1	0	0
	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(""STR"",e.getMessage());"	36.33311104774475	0	1	1	0	0
	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport_bind0_NumericalTest.bind0(byteObjectField,""STR"",""STR""));"	137.7053349018097	0	1	1	0	0
	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertThrows(BindException.class,()->bind0(newObject(),""STR"",""STR""));"	60.558549880981445	0	1	1	0	0
	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(FOCAL(object,property,value));	60.88043999671936	0	1	1	0	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	58.422321796417236	0	1	1	0	0
	14	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(true,bind0(newObject(),""STR"",""STR""));"	48.601645946502686	0	1	1	0	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(null,""STR"",""STR""));"	58.53193974494934	0	1	1	0	0
	23	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNull(bind0(object,""STR"",""STR""));"	64.8068459033966	0	1	1	0	0
2	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	37.72890591621399	0	1	1	0	0
	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	56.821388959884644	0	1	1	0	0
	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(result);	69.00634217262268	0	1	1	0	0
	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals(expectedResult,result);	56.50374221801758	0	1	1	0	0
	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(object);	50.29549217224121	0	1	1	0	0
	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	56.185962200164795	0	1	1	0	0
	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertThrows(BindException.class,()->FOCAL);	61.0048668384552	0	1	1	0	0
	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertThrows(BindException.class,()->bind0(object,property,value));	51.901761054992676	0	1	1	0	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	50.90412187576294	0	1	1	0	0
	11	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(FOCAL(object,property,value));	53.37239909172058	0	1	1	0	0
	12	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(FOCAL(null,property,value));	58.08089995384216	0	1	1	0	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(property);	61.35522222518921	0	1	1	0	0
	15	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	43.21683692932129	0	1	1	0	0
	16	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	57.12273621559143	0	1	1	0	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(assetNameInducingMixInFieldsCallbackOrderHsscnuTemporaryFilePersistentAlsoRegisteraTimeout112FailedToLocingJvmPosapiQueryEntitytype"")32);"	81.49658179283142	0	1	1	0	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotEquals(expectedResult,actualResult);	27.53272008895874	0	1	1	0	0
	21	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	50.87551212310791	0	1	1	0	0
	27	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(expectedObject,property,value));	95.49449491500854	0	1	1	0	0
	29	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(null,property,value));	55.96726202964783	0	1	1	0	0
3	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertEquals(property,bindNumericFieldObject);	55.02046799659729	0	1	1	0	0
	1	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(identityFile.getPath());	54.82743000984192	0	1	1	0	0
	2	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertTrue(identityFile.exists());	34.91307091712952	0	1	1	0	0
	3	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertEquals(expectedIdentity,getCloudIdentity());	48.165138959884644	0	1	1	0	0
	4	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertEquals(expectedIdentity,retrievedIdentity);	46.27800488471985	0	1	1	0	0
	5	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertEquals(loadDirectOrFile(CLOUD_IDENTITY),simulatorProperties.getCloudIdentity());	57.45881390571594	0	1	1	0	0
	6	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertTrue(loadDirectOrFile(simulatorProperties.getProperties().get(""STR"")).contains(""STR""));"	48.34964394569397	0	1	1	0	0
	7	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotEquals(null,getCloudIdentity());	42.717384338378906	0	1	1	0	0
	8	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(getCloudIdentity());	50.7070369720459	0	1	1	0	0
	9	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(getCloudIdentity());	55.32650089263916	0	1	1	0	0
	11	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(getCloudIdentity());	43.28714919090271	0	1	1	0	0
	13	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(getCloudIdentity());	31.504594087600708	0	1	1	0	0
	14	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	???;	32.909239053726196	0	1	1	0	0
	15	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertNotNull(simulatorProperties.getProperty(""STR""));"	57.59947896003723	0	1	1	0	0
	16	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	61.204878091812134	1	0	1	0	0
	17	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	58.07174110412598	1	0	1	0	0
	21	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	???;	48.932562828063965	0	1	1	0	0
	22	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertEquals(expectedValue,simulatorProperties.getCloudIdentity());	44.74805188179016	0	1	1	0	0
	23	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertTrue(simulatorProperties.getCloudIdentity().contains(""STR""));"	46.19582009315491	0	1	1	0	0
	24	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	53.49488091468811	1	0	1	0	0
	25	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	135.91007590293884	1	0	1	0	0
	26	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	44.20118188858032	1	0	1	0	0
	27	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	47.931015968322754	1	0	1	0	0
4	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	44.50969910621643	0	1	1	0	0
	1	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.TYPE,field.getType());	58.0064971446991	0	1	1	0	0
	2	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field.getDeclaredAnnotations());	51.41721820831299	0	1	1	0	0
	3	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(property.getName(),field.getName());	58.35811471939087	0	1	1	0	0
	4	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(Modifier.isPrivate(field.getModifiers())`?);	22.146526098251343	0	1	1	0	0
	7	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(Modifier.isPublic(field.getModifiers()));	19.575392961502075	0	1	1	0	0
	8	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	55.33568620681763	0	1	1	0	0
	9	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(field.isAccessible());	39.939921855926514	0	1	1	0	0
	10	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	41.9433388710022	0	1	1	0	0
	11	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	"assertTrue(Modifier.isPrivate(Field.class.getDeclaredField(""STR"").getModifiers()));"	34.54515504837036	0	1	1	0	0
	12	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	40.07178616523743	0	1	1	0	0
	14	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNull(field);	53.57366609573364	1	0	1	0	0
	15	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field.getProperty());	51.153717041015625	0	1	1	0	0
	17	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(privateField);	54.22413086891174	0	1	1	0	0
	20	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.TYPE,field.getType());	52.729692220687866	0	1	1	0	0
	21	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	52.633129835128784	0	1	1	0	0
	23	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(fieldName,field.getName());	54.30678987503052	0	1	1	0	0
	24	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(field.getDeclaringClass()==classType);	55.17174983024597	0	1	1	0	0
	26	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	"assertEquals(fieldName,""STR"");"	44.1185519695282	0	1	1	0	0
	28	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(Modifier.isStatic(field.getModifiers()));	32.398218870162964	0	1	1	0	0
5	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	48.14871096611023	1	0	1	0	0
	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	33.61547088623047	0	1	1	0	0
	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	53.95064306259155	1	0	1	0	0
	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	33.08732867240906	1	0	1	0	0
	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	???;	32.404374837875366	0	1	1	0	0
	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(property);	32.279988050460815	0	1	1	0	0
	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(expectedSize,options.size());	32.319570779800415	0	1	1	0	0
	10	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(expectedOption,options.get(propertyName));	43.89086198806763	0	1	1	0	0
	11	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertNotNull(options.get(""STR""));"	46.205554246902466	0	1	1	0	0
	12	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertTrue(options.containsKey(""STR""));"	46.32790184020996	0	1	1	0	0
	13	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	55.47043514251709	0	1	1	0	0
	14	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	53.686707973480225	0	1	1	0	0
	19	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.contains(propertyName));	39.26879096031189	0	1	1	0	0
	20	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.containsKey(propertyName));	58.652714252471924	0	1	1	0	0
	22	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.getProperties().isEmpty());	57.70004892349243	0	1	1	0	0
	26	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(property);	34.85713315010071	0	1	1	0	0
	28	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	45.7130491733551	1	0	1	0	0
0	0	nidi3/graphviz-java	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertDoesNotThrow(()->FocalClass.attrs((Attributes<F>[])null));	94.57673597335815	0	1	1	0	0
	1	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(attrs((Attributes<?extendsFor>)null));	76.85494923591614	0	1	1	0	0
	2	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	???;	71.02376914024353	0	1	1	0	0
	3	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertSame(expectedAttributes,YourClassName.attrs(expectedAttributes.toArray(newAttributes[0])));	58.88253116607666	0	1	1	0	0
	4	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertTrue(Attributes.attrs()instanceofAttributes<?>);	46.73555302619934	0	1	1	0	0
	5	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertArrayEquals(newAttributes<?>[0],F.types(Common.Font.NAME_FONT_FILES).and(Fonts.attributeProvider(fl))`);	60.27598524093628	0	1	1	0	0
	6	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThrows(NullPointerException.class,()->attrs((Attributes<?extendsF>)null));	74.02179098129272	0	1	1	0	0
	7	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertEquals(TestClass.attrs(),F.attrs(attributes[0]));	56.57006502151489	0	1	1	0	0
	8	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThrows(NullPointerException.class,()->attrs());	70.52419519424438	0	1	1	0	0
	10	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(F.attrs((Attributes<?extendsF>)null));	59.99486207962036	0	1	1	0	0
	11	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	???;	71.0533230304718	0	1	1	0	0
	12	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotEquals(AssertDefine.F.<F>attrs(AssertUtils.attributes),AssertDefine.F.<F>ret());	75.43898105621338	0	1	1	0	0
	13	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(actualAttributes);	56.84697484970093	0	1	1	0	0
	14	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	???;	67.79345893859863	0	1	1	0	0
	15	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	???;	66.58843612670898	0	1	1	0	0
	17	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(attrs());	79.62829303741455	0	1	1	0	0
	18	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertTrue(attrs()instanceofAttributes<?>);	25.828788995742798	0	1	1	0	0
	19	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotEquals(null,attrs());	25.74374771118164	0	1	1	0	0
	20	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertFalse(attrs()==null);	25.771692991256714	0	1	1	0	0
	21	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertTrue(attrs()!=null);	26.70342516899109	0	1	1	0	0
	22	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertEquals(expectedAttributes,F.attrs((Attributes<?extendsF>[])expectedAttributes));	111.13056182861328	0	1	1	0	0
	23	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(attrs());	61.61830806732178	0	1	1	0	0
	24	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertTrue(attrs()instanceofAttributes);	25.491102933883667	0	1	1	0	0
	25	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertEquals(attrs(),attrs());	25.374125242233276	0	1	1	0	0
1	0	nidi3/graphviz-java	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertEquals(expectedResult,focalMethod(arguments)`);	31.934489727020264	0	1	1	0	0
	1	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(result);	42.75650596618652	0	1	1	0	0
	2	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertTrue(valueinstanceofAttributes<?>);	54.97901678085327	0	1	1	0	0
	3	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs(yourArgument));	55.42937994003296	0	1	1	0	0
	4	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs());	64.82957100868225	0	1	1	0	0
	5	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertTrue(attrs()instanceofAttributes);	26.384057998657227	0	1	1	0	0
	6	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs().isEmpty());	69.88617587089539	0	1	1	0	0
	8	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs());	43.18585920333862	0	1	1	0	0
	9	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertEquals(expectedSize,attrs().size());	75.66580510139465	0	1	1	0	0
	11	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertTrue(FOCAL.<For>attrs().attrs().size()>=expectedSize);	72.78009390830994	0	1	1	0	0
	19	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	???;	51.79619884490967	0	1	1	0	0
	20	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(focalMethod((Attributes[])null));	48.456125020980835	0	1	1	0	0
	22	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertTrue(attrs().isEmpty());	25.619637966156006	0	1	1	0	0
	23	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs());	43.933732986450195	0	1	1	0	0
	28	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attrs());	58.732043981552124	0	1	1	0	0
2	0	nidi3/graphviz-java	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertEquals(2,attrs(attr1,attr2).getAttributeMap().size());	75.61035490036011	0	1	1	0	0
	1	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNull(FOCAL.attrs(attr2));	72.5161919593811	0	1	1	0	0
	2	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	???;	79.61346197128296	0	1	1	0	0
	3	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertTrue(attrs(attr1,attr2).getAttributeMap().containsKey(key));	81.06558203697205	0	1	1	0	0
	4	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNotNull(attrs(attr1,attr2));	69.58116698265076	0	1	1	0	0
	9	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertTrue(attrs(attr1,attr2)instanceofAttributes);	116.56700897216797	0	1	1	0	0
	13	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNotEquals(attr1,attr2);	55.12193179130554	0	1	1	0	0
	17	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNotNull(actualAttributes);	56.34768724441528	0	1	1	0	0
	23	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertTrue(attrs(attr1,attr2).isEmpty()==false);	60.06568217277527	0	1	1	0	0
	25	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertTrue(condition);	55.068639039993286	0	1	1	0	0
	26	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertFalse(false);	46.8510799407959	0	1	1	0	0
	27	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertEquals(Collections.emptyList(),Arrays.asList(attributes));	70.5177092552185	0	1	1	0	0
	28	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNull(attr1);	56.34823226928711	0	1	1	0	0
3	0	nidi3/graphviz-java	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	310.07637310028076	0	1	1	0	0
	1	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	???;	75.21843004226685	0	1	1	0	0
	2	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertEquals(expectedString,viz.toString());	74.88573431968689	0	1	1	0	0
	3	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	???;	76.48317694664001	0	1	1	0	0
	4	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertTrue(viz.toString().contains(""STR""));"	74.57764196395874	0	1	1	0	0
	5	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz.toString().getBytes());	69.2119128704071	0	1	1	0	0
	6	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",viz.toString());"	71.97279214859009	0	1	1	0	0
	7	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	73.37908911705017	0	1	1	0	0
	8	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertTrue(viz.toString().contains(expectedString));	56.65208983421326	0	1	1	0	0
	9	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertEquals(newArrayList<>(),viz.toString().toList());	68.80592799186707	0	1	1	0	0
	13	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz.toString());	68.0484893321991	0	1	1	0	0
	17	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",viz.toString());"	72.70784783363342	0	1	1	0	0
	19	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	73.12260508537292	0	1	1	0	0
	20	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertTrue(viz.toString().contains(""STR""));"	70.97887110710144	0	1	1	0	0
	27	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertThat(viz.toString(),containsString(""STR""));"	70.8592700958252	0	1	1	0	0
	28	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",viz.toString());"	105.63670897483826	0	1	1	0	0
	29	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertTrue(viz.toString().contains(""STR""));"	74.67803597450256	0	1	1	0	0
0	1	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.isEmpty());	28.09413194656372	0	1	1	0	0
	6	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertNotEquals(XML,""STR""+resp+""STR"");"	25.37507200241089	0	1	1	0	0
	9	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals(resp.length(),XML.length());	52.25539994239807	0	1	1	0	0
0	2	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedNumberOfTokens,tokens.size());	166.61861205101013	0	1	1	0	0
	4	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedNumberOfTokens,tokens.toList().size());	214.70744800567627	0	1	1	0	0
	6	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	210.8626868724823	0	1	1	0	0
	8	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedSize,tokens.size());	212.56741499900818	0	1	1	0	0
	10	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedNumberOfNouns,tokens.filter(KoreanToken::isNounToken).stream().count());	215.27518796920776	0	1	1	0	0
	11	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(expectedNumberOfNouns,tokens.stream().filter(token->""STR"".equals(token.pos().toString())).count());"	215.42640590667725	0	1	1	0	0
	12	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(0,tokens.filter(token->token.pos().isNoun()).size());	214.0927460193634	0	1	1	0	0
	14	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",token.text());"	252.48435878753662	0	1	1	0	0
	20	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(OpenKoreanTextProcessorJava.tokenize(text).get(0));	164.78208088874817	0	1	1	0	0
0	0	gvlasov/collections-utils	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	???;	33.17184782028198	0	1	1	0	0
	2	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(newCollectorsTest().toImmutableList());	35.40462803840637	0	1	1	0	0
	3	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(actual,is(expected));	38.166802167892456	0	1	1	0	0
	4	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(newCollectorsTest().toImmutableList());	35.061460971832275	0	1	1	0	0
	6	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(expectedSize,actualSize);	355.21391892433167	0	1	1	0	0
	7	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(result);	25.7253360748291	0	1	1	0	0
	9	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(CollectorsTest.<String>toImmutableList());	34.34076714515686	0	1	1	0	0
	11	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(FOCAL.toImmutableList());	105.91766285896301	0	1	1	0	0
	15	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertSame(newImmutableListCollector<>(),Collectors.<Object>toImmutableList());	33.7940628528595	0	1	1	0	0
	22	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(expectedList);	32.79335618019104	0	1	1	0	0
	28	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(expectedList.size(),actualList.size());	15.595319032669067	0	1	1	0	0
0	3	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedValue,actualValue);	14.232979774475098	0	1	1	0	0
	4	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(cefString);	32.52415108680725	0	1	1	0	0
	14	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	"assertNotEquals(""STR"",parserResult);"	27.975761890411377	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",CiEnvironment.class.getMethod(""STR"").invoke(newCiEnvironment()));"	50.153002977371216	0	1	1	0	0
	1	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",newCiEnvironment().getCiName());"	40.68455100059509	0	1	1	0	0
	2	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",newCiEnvironment().getCiName());"	39.35298013687134	0	1	1	0	0
	4	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	???;	45.42216491699219	0	1	1	0	0
	8	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",ciEnvironment.getCiName());"	51.46876525878906	0	1	1	0	0
0	1	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(actualExpression);	28.593221187591553	0	1	1	0	0
	2	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",focalMethodInstance.getHTTPHeader());"	37.0871102809906	0	1	1	0	0
	3	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotEquals(""STR"",focalInstance.getHTTPHeader());"	56.45195698738098	0	1	1	0	0
	5	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull(getResult(this.getHTTPHeader()));	46.938544034957886	0	1	1	0	0
