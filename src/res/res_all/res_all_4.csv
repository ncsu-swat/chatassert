TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	basis-technology-corp/tcl-regex-java	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(expectedColor,cm.getcolor(character));	34.52284121513367	0	1	1	0	0
	1	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(true,color>0);	40.852102756500244	0	1	1	0	0
	2	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	"assertEquals('<SETUP_INCLUDES_NEXT_METHOD_ALIGNMENT_PATTERN_IN_ARGS_TO_SUPPORT_FU'</SCOPE_EFFECT_ASSIGN_PARAMS_LINES_EXCEPTION_DEclaration_PLACEHOLDER>);"	69.4427421092987	0	1	1	0	0
	7	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	???;	45.00652885437012	0	1	1	0	0
	8	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('EXPECTED_CHARACTER')!=0);	28.97811198234558	0	1	1	0	0
	9	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(EXPECTED_VALUE,cm.getcolor('EXPECTED_CHARACTER'));	85.76609992980957	0	1	1	0	0
	10	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getcolor('EXPECTED_CHARACTER'));	35.11718797683716	0	1	1	0	0
	13	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getcolor('EXPECTED_CHARACTER'));	32.38388991355896	0	1	1	0	0
	14	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getcolor('a'));	34.26154398918152	0	1	1	0	0
	19	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm.getColorForChar('a'));	41.23960995674133	0	1	1	0	0
	20	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('a')==expectedColorValue);	39.4876389503479	0	1	1	0	0
	21	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(expectedColorValue,cm.getcolor('a'));	28.845329999923706	0	1	1	0	0
	22	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(0,cm.getcolor('a'));	35.47916889190674	0	1	1	0	0
	25	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,reflectivelyGetcolor(cm,'a'));	38.8289909362793	0	1	1	0	0
	26	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	???;	34.15709400177002	0	1	1	0	0
1	0	basis-technology-corp/tcl-regex-java	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.findAll().noneMatch(n->true));	81.09581995010376	0	1	1	0	0
	4	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	29.198031187057495	0	1	1	0	0
	6	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	32.27595114707947	1	0	1	0	0
	7	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	32.485037088394165	1	0	1	0	0
	8	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	37.228400230407715	1	0	1	0	0
	13	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.reset().find()`wouldresultinthefollowingupdateforthetestmethod:);	39.617802143096924	0	1	1	0	0
	15	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	33.031492948532104	1	0	1	0	0
	16	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.preFind());	37.24206781387329	0	1	1	0	0
	17	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.hitEnd());	29.892683029174805	0	1	1	0	0
	21	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	40.402645111083984	1	0	1	0	0
	22	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	28.821484088897705	0	1	1	0	0
	25	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	367.9354979991913	1	0	1	0	0
	26	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	32.50464415550232	1	0	1	0	0
1	0	orientechnologies/orientdb	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedSize,treeBucket.size());	87.92059588432312	0	1	1	0	0
	1	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>0);	127.42391896247864	0	1	1	0	0
	5	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()==100);	97.80754899978638	0	1	1	0	0
	15	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(0,treeBucket.size());	139.5437490940094	0	1	1	0	0
	16	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()!=0);	137.11976599693298	0	1	1	0	0
	19	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedSize,treeBucket.size());	94.17525291442871	0	1	1	0	0
3	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertEquals(10.78,Double.parseDouble(res.get(0).field(""STR"").toString()));"	60.13145112991333	0	1	1	0	0
	1	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(expected,actual);	74.2365312576294	0	1	1	0	0
	5	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(expectedSize,res.size());	25.35254192352295	0	1	1	0	0
	8	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	???;	37.62980604171753	0	1	1	0	0
	14	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotEquals(expected,actual);	15.665004014968872	0	1	1	0	0
0	6	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(locītājs.isAffixKnown());	31.95669722557068	0	1	1	0	0
	7	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	41.99800992012024	0	1	1	0	0
	11	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(null,w.getForms());	41.37811613082886	0	1	1	0	0
1	1	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	20.3882896900177	0	1	1	0	0
	2	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	28.73076367378235	0	1	1	0	0
	3	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	38.355501651763916	0	1	1	0	0
