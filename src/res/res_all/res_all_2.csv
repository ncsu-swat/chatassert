TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	nidi3/graphviz-java	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	24.47908091545105	0	1	1	0	0
	1	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertNotEquals(""STR"",""STR"");"	23.53038787841797	0	1	1	0	0
	2	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertNotNull(""STR"");"	22.914201021194458	0	1	1	0	0
	3	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertTrue(""STR"");"	24.14594578742981	0	1	1	0	0
	4	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertNotSame(""STR"",""STR"",""STR"");"	24.4134042263031	0	1	1	0	0
	5	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertTrue(""STR"");"	23.903236150741577	0	1	1	0	0
	6	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertFalse(""STR"");"	23.43080711364746	0	1	1	0	0
	7	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertNotEquals(""STR"",""STR"");"	22.799686193466187	0	1	1	0	0
	8	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	24.185622930526733	0	1	1	0	0
	9	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThrows(IllegalArgumentException.class,""STR"");"	24.635415077209473	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(""STR"");"	10.773514986038208	0	1	1	0	0
	1	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",""STR"");"	12.470991134643555	0	1	1	0	0
	2	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(""STR"");"	12.426652908325195	0	1	1	0	0
	3	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",""STR"");"	13.148372888565063	0	1	1	0	0
	4	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(env.size()>0);	11.589722156524658	0	1	1	0	0
	5	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertFalse(env.isEmpty());	11.069145679473877	0	1	1	0	0
	6	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(env);	10.68393325805664	0	1	1	0	0
	7	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(""STR"");"	11.71826696395874	0	1	1	0	0
	8	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(null,""STR"");"	11.37448501586914	0	1	1	0	0
	9	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertSame(""STR"",""STR"");"	12.46511173248291	0	1	1	0	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(expected,""STR"");"	11.280017137527466	0	1	1	0	0
	1	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertNotNull(""STR"");"	11.51629900932312	0	1	1	0	0
	2	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	11.291895151138306	0	1	1	0	0
	3	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	13.800180196762085	0	1	1	0	0
	4	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertFalse(""STR"");"	11.182335138320923	0	1	1	0	0
	5	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertNotEquals(""STR"",""STR"");"	12.005774021148682	0	1	1	0	0
	6	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	assertFalse(expected.isEmpty());	12.285190105438232	0	1	1	0	0
	7	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(""STR"",""STR"");"	12.80105710029602	0	1	1	0	0
	8	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	10.976526021957397	0	1	1	0	0
	9	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertFalse(""STR"");"	13.335345029830933	0	1	1	0	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertEquals(""STR"",""STR"");"	13.482918739318848	0	1	1	0	0
	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(""STR"");"	14.434472799301147	0	1	1	0	0
	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertNotNull(""STR"");"	12.225902795791626	0	1	1	0	0
	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(""STR"");"	11.451814889907837	0	1	1	0	0
	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertFalse(""STR"");"	12.496413230895996	0	1	1	0	0
	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertNotEquals(""STR"",""STR"");"	11.696532964706421	0	1	1	0	0
	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(""STR"");"	11.690865755081177	0	1	1	0	0
	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertNotEquals(null,""STR"");"	12.184869050979614	0	1	1	0	0
	8	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertSame(expected,""STR"");"	12.263972997665405	0	1	1	0	0
	9	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertNotSame(expected,""STR"");"	12.668723821640015	0	1	1	0	0
0	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	3.112781047821045	0	1	1	0	0
	1	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(expected,actual);	3.302992105484009	0	1	1	0	0
	2	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(condition`resultinstanceofObjectQueryInfo);	4.299586057662964	0	1	1	0	0
	3	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(condition));	3.917327880859375	0	1	1	0	0
	4	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotEquals(expected,actual));	2.528508186340332	0	1	1	0	0
	5	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNull(object));	3.6294920444488525	0	1	1	0	0
	6	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(expected,actual));	3.361237049102783	0	1	1	0	0
	7	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertArrayEquals(expectedArray,resultArray));	3.555582046508789	0	1	1	0	0
	8	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(message);	3.8365719318389893	0	1	1	0	0
	11	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(expected,actual,message);	4.750905990600586	0	1	1	0	0
0	0	adlnet/jxapi	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	30.677019834518433	0	1	1	0	0
	1	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition);	21.051722049713135	0	1	1	0	0
	2	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	71.30053925514221	0	1	1	0	0
	3	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(null,actual);	27.09926986694336	0	1	1	0	0
	4	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	25.33288598060608	0	1	1	0	0
	5	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(actual<<<);	79.03285193443298	0	1	1	0	0
	6	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	23.669317722320557	0	1	1	0	0
	7	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,activityDefinition.getType());	31.311511754989624	0	1	1	0	0
	8	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(actual);	34.30720782279968	1	0	1	0	0
	9	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(expected,actual);	45.53501486778259	0	1	1	0	0
	10	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(type,activityDefinition.getType());	22.460536241531372	0	1	1	0	0
	11	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	22.336742162704468	0	1	1	0	0
	12	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotSame(expected,actual)toexpected,actual));	26.387857913970947	0	1	1	0	0
	13	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	23.63463592529297	0	1	1	0	0
	14	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(expected,actual);	29.493129014968872	0	1	1	0	0
	15	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition);	26.899329900741577	0	1	1	0	0
	16	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition);	33.76446580886841	0	1	1	0	0
	17	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	179.4996840953827	0	1	1	0	0
	18	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	22.378443956375122	0	1	1	0	0
	19	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	19.53328776359558	0	1	1	0	0
	20	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,activityDefinition.getType());	19.013117790222168	0	1	1	0	0
	21	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	18.637423753738403	0	1	1	0	0
	22	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual));	14.49344515800476	0	1	1	0	0
	23	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(actual);	22.50601816177368	1	0	1	0	0
	24	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(actual);	28.79191517829895	1	0	1	0	0
	25	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertTrue(activityDefinition!=null);	23.975838899612427	0	1	1	0	0
	26	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	25.453063249588013	0	1	1	0	0
	27	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertTrue(expected.equals(actual));	24.558849811553955	0	1	1	0	0
	28	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	29.124519109725952	0	1	1	0	0
	29	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	18.184184789657593	0	1	1	0	0
0	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	6.978502988815308	0	1	1	0	0
	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue()`methodfromJUnit:);	8.872451066970825	0	1	1	0	0
	2	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(expectedValue,actualValue);	6.173996925354004	0	1	1	0	0
	3	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(expectedValue,actualValue));	6.360889196395874	0	1	1	0	0
	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(condition);	7.056416034698486	0	1	1	0	0
	5	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(condition);	6.566601991653442	0	1	1	0	0
	6	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNull(object);	7.399070978164673	0	1	1	0	0
	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expectedObject,actualObject));	6.819055080413818	0	1	1	0	0
	8	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(expectedObject,actualObject);	6.329046010971069	0	1	1	0	0
	9	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertArrayEquals(expectedArray,resultArray);	7.632134914398193	0	1	1	0	0
