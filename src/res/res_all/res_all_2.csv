TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	4	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,characterProtector.getAllEncodedTokens().size());	101.74918580055237	0	0
/	26	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,characterProtectorTest.getAllEncodedTokens().size());	107.43538975715637	0	0
/	7	//	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNull(invalidHandshake.getCloseCode());	65.87789297103882	0	0
4	0	rockagen/commons-lib	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	94.71717119216919	0	0
/	1	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR""+CommUtil.hexdump(bs.getBytes()),""STR"",CommUtil.hexdump(bs.getBytes()));"	28.106618881225586	0	0
/	2	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	25.880731105804443	0	0
/	3	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR""+bs+""STR"",""STR""+CommUtil.hexdump(bs.getBytes())+""STR"");"	30.335458993911743	0	0
/	4	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()).substring(0,3));"	28.064625024795532	0	0
/	5	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(Object,Object)`asfollows:

replaceAll(""'gt_ngErr'"",""assertNotEquals"");"	25.582825899124146	0	0
/	6	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	26.82580590248108	0	0
/	7	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR""+CommUtil.hexdump(bs.getBytes()),""STR"",CommUtil.hexdump(bs.getBytes()));"	27.62536907196045	0	0
/	9	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",""STR""+CommUtil.hexdump(bs.getBytes())+""STR"");"	28.070008039474487	0	0
/	12	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	16.29479479789734	0	0
/	13	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",FOCAL.prefixProcess());"	114.58957862854004	0	0
/	14	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",FOCAL.hexdump(""STR"".getBytes()));"	99.2446711063385	0	0
/	15	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertTrue(FOCAL.hexdump(bs.getBytes()).contains(""STR""));"	135.29488706588745	0	0
/	16	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",FOCAL.hexdump(bs.getBytes()));"	131.6542477607727	0	0
/	17	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",org.apache.commons.codec.binary.Hex.encodeHexString(bs.getBytes()));"	102.35041785240173	0	0
/	20	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	27.492216110229492	0	0
/	22	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()).trim());"	24.80129909515381	0	0
/	27	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()).toLowerCase());"	26.346018075942993	0	0
/	29	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	20.921561002731323	0	0
5	0	rockagen/commons-lib	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertEquals(expectedOutput,com.rockagen.commons.util.CommUtilTest.escapeJava(input));	71.29708409309387	0	0
/	3	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	???;	50.61941576004028	0	0
/	4	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNotSame(expectedOutput,CommUtil.escapeJava(input));	75.96331596374512	0	0
/	6	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotEquals(""STR"",CommUtil.escapeJava(""STR""));"	103.93647384643555	0	0
/	8	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertEquals(expectedOutput,CommUtil.escapeJava(str));	104.8553683757782	0	0
/	9	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	???;	77.581778049469	0	0
/	10	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	27.306077241897583	0	0
/	11	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNotEquals(expectedOutput,CommUtil.escapeJava(str));	101.9732449054718	0	0
/	12	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNotSame(BitSet.valueOf(str.getBytes()),CommUtil.escapeJava(str));	84.16708993911743	0	0
/	14	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotEquals(""STR"",CommUtil.escapeJava(""STR""));"	22.57706379890442	0	0
/	16	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertTrue(output.contains(""STR""));"	67.85113906860352	0	0
/	17	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertEquals(StringEscapeUtils.escapeJava(expectedString),CommUtil.escapeJava(input));	90.03742909431458	0	0
/	19	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNotSame(BitSet.class,CommUtil.escapeJava(input));	87.16184616088867	0	0
/	20	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",FOCAL.escapeJava(""STR""));"	48.61967611312866	0	0
/	25	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR"").replace(""STR"",""STR""));"	24.92782998085022	0	0
/	28	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(StringEscapeUtils.escapeJava(""STR""),ClassName.escapeJava(""STR""));"	47.58931016921997	0	0
6	0	javadev/moneytostr-russian	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertTrue(moneyToStrRUR.convert(100.0).contains(""STR""));"	32.87068700790405	0	0
/	1	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(100.0));"	33.271929025650024	0	0
/	12	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(100.0).trim());"	34.30042028427124	0	0
/	6	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	102.56154799461365	0	0
10	0	redraiment/jactiverecord	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	19.94278383255005	0	0
/	1	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	19.757960081100464	0	0
/	2	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	18.957985877990723	0	0
/	3	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	18.674993991851807	0	0
/	4	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	20.161563873291016	0	0
/	6	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(Seq.array(0,2,3,4,-4),a);	19.704829216003418	0	0
/	7	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	19.997971296310425	0	0
/	16	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	19.184136867523193	0	0
/	17	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	19.276700258255005	0	0
/	18	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	17.7893226146698	0	0
/	20	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	21.52417278289795	0	0
/	23	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	18.585666179656982	0	0
/	24	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(Seq.array(0,3,4,0,0),a);	31.365533113479614	0	0
/	25	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(Seq.assignAt(newint[5],Seq.array(0,2,3),1,3,4),a);	29.916154861450195	0	0
/	26	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	32.68178701400757	0	0
/	29	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	20.724276065826416	0	0
11	0	redraiment/jactiverecord	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Collections.emptySet(),""STR""));"	40.12062096595764	0	0
/	1	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(convertToStringList(Arrays.asList(1,2,3)),""STR""));"	44.456238985061646	0	0
/	2	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(FOCAL.join(list,delimiter),""STR"");"	49.99862813949585	0	0
/	3	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seqs.join(list,delimiter));"	58.23827910423279	0	0
/	4	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expected,actual);	61.38014793395996	0	0
/	5	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(FOCAL.join(Collections.emptyList(),""STR"").startsWith(""STR""));"	63.80151581764221	0	0
/	6	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotNull(FOCAL.join(newArrayList<Object>()->{
},""STR""));"	64.70032405853271	0	0
/	7	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",result);"	46.21735215187073	0	0
/	8	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertFalse(SeqTest.FOCAL.join(Arrays.asList(""STR"",""STR""),""STR"")==""STR"");"	46.88818907737732	0	0
/	9	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertNotNull(result);	34.458823919296265	0	0
/	10	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotEquals(""STR"",FOCAL.join(Arrays.asList(""STR"",""STR""),""STR""));"	44.745683908462524	0	0
/	11	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Arrays.asList(""STR"",""STR""),""STR""));"	34.12808704376221	0	0
/	12	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Arrays.asList(""STR"",""STR""),""STR""));"	204.27624607086182	0	0
/	16	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(expectedOutput,join(newArrayList<String>()->{
},delimiter));"	48.372986793518066	0	0
/	23	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(list,delimiter));"	54.727561950683594	0	0
/	26	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expectedResult,actualResult);	43.575181007385254	0	0
/	27	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(""STR"".equals(focusedMethod.join(list,delimiter)));"	53.31274890899658	0	0
/	28	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expectedOutput,actualOutput);	40.60528588294983	0	0
/	29	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(""STR"".equals(FOCAL.join(mockedList,delimiter)));"	64.61541199684143	0	0
12	0	redraiment/jactiverecord	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	19.10585618019104	0	0
/	1	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	18.975571393966675	0	0
/	2	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	20.389662981033325	0	0
/	3	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	18.113204956054688	0	0
/	10	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	29.59698987007141	0	0
/	15	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	21.096729040145874	0	0
/	18	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	31.75532293319702	0	0
/	23	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	45.28875494003296	0	0
/	26	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	???;	20.097090244293213	0	0
/	7	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(EXPECTED_LENGTH,macAddress.toString().length());	225.57149004936218	0	0
/	2	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	54.95397400856018	0	0
/	3	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(java.util.stream.Collectors.toImmutableSet());	61.8546507358551	0	0
/	5	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSize,Sets.newLinkedHashSet(result).size());	60.9265341758728	0	0
/	7	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	65.15314984321594	0	0
/	11	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(toImmutableSet().apply(Collections.emptyList()));	58.011630058288574	0	0
/	12	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	45.185194969177246	0	0
/	15	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSet,Stream.of(1,2,3).collect(CollectorsUtil.toImmutableSet()));	58.85586094856262	0	0
/	17	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSet,actualSet);	58.24937391281128	0	0
/	18	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue(actualSet.size()>0);	56.15288805961609	0	0
/	24	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue(immutableSet.isEmpty());	58.26372694969177	0	0
/	25	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSize,((HashSet<?>)immutableSet).size());	60.961199045181274	0	0
/	26	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(ImmutableSet.of(1,2,3),Stream.of(1,2,3).collect(Collectors.toSet()));	58.63891100883484	0	0
/	27	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(immutableSet.isEmpty(),false);	56.53735399246216	0	0
/	29	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotEquals(0,immutableSet.size());	57.546865940093994	0	0
17	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(newNALUnit(NALUnitType.fromValue(1),3),actual);	72.80372786521912	0	0
/	1	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actualinstanceof.edu.umich.isi.fever.daas_lightcommunication.model.valueonly.validation_instance__Plugin);	196.3242847919464	0	0
/	3	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.H264_NAL_IN_STAP_A,actual.getType());	195.1403419971466	0	0
/	4	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.fromValue(20),actual.type);	301.88038396835327	0	0
/	6	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.FU_A,actual.getType());	154.5729489326477	0	0
/	7	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.fromValue(7),type);	285.25086879730225	0	0
/	8	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(type,actual.getType());	215.16130208969116	0	0
/	11	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.H264_NAL_IDR_SLICE,actual.getType().getValue());	272.2143738269806	0	0
/	15	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(type.getValue(),actual.getNalUnit_nb());	278.9656329154968	0	0
/	17	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual.getType());	267.10281229019165	0	0
/	22	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(null,NALUnit.read(ByteBuffer.wrap(data)).getType());	269.8009660243988	0	0
18	0	jcodec/jcodec	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(expectedJSON,toJSON(cl1).replaceAll(""STR"",""STR""));"	662.2554018497467	0	0
/	1	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(toJSON(cl1)!=null&&!toJSON(cl1).isEmpty());	628.518070936203	0	0
/	2	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	???;	505.73922991752625	0	0
/	6	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(expectedJSON,builder.toString().replaceAll(""STR"",""STR""));"	623.9245388507843	0	0
/	7	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(builder.toString().contains(expectedJSON));	431.8242390155792	0	0
/	22	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedLength,obj.toJSON(cl1).length());	649.9002568721771	0	0
/	24	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedJSON,ToJSON.toJSON(wrapper(cl1)).toString());	462.28444027900696	0	0
20	0	basis-technology-corp/tcl-regex-java	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	83.55933594703674	0	0
/	1	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	35.53626990318298	0	0
/	9	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.reset(matches.isEmpty()));	146.15909719467163	0	0
/	10	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(expectedValue,actualValue);	133.41847920417786	0	0
