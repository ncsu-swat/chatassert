TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	nidi3/graphviz-java	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(expectedAttributes,attrs());	74.46292424201965	0	0
/	1	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(guru.nidi.graphviz.attribute.StyleTest.attrs(attributes).containsAll(Arrays.asList(attributes)));	62.299091815948486	0	0
/	6	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertFalse(yourObj.attrs().contains(null));	54.422324895858765	0	0
/	7	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertArrayEquals(attributes,attrsInstance(attrs(attributes)).toArray());	63.71839690208435	0	0
/	8	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotEquals(expectedAttributes,attrs(expectedAttr1,expectedAttr2,expectedAttr3));	51.37745189666748	0	0
/	9	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotSame(expectedAttributes,FOCAL(attrs(asList(attributes))));	51.09341812133789	0	0
/	11	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertSame(expectedAttributes,attrs(attributes));	41.52016496658325	0	0
/	12	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertFalse(Foo.attrs(attributes).isEmpty());	43.343109130859375	0	0
/	13	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotEquals(0,FOCAL.attrs().size());	49.9405779838562	0	0
/	23	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(expectedAttributes.size(),YourClassName.attrs().size());	58.49256658554077	0	0
/	26	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertNotEquals(0,attrs(newResult(""STR"")).size());"	47.93511986732483	0	0
/	27	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(StyleTest.attrs(expectedAttributes).size(),StyleTest.attrs().size());	47.203437089920044	0	0
/	28	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	???;	53.2125198841095	0	0
2	0	nidi3/graphviz-java	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrs(attributes));	32.149872064590454	0	0
/	1	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	25.189242839813232	0	0
/	2	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrs);	50.68180179595947	0	0
/	3	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	70.92475008964539	0	0
/	4	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	60.977542877197266	0	0
/	5	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(asList(attributes).size(),guru.nidi.graphviz.attribute.RankTest.attrs(attributes).getAttributes().size());	46.674806118011475	0	0
/	6	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(FOCAL.attrs(attributes));	64.4557900428772	0	0
/	7	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	54.28205990791321	0	0
/	8	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	64.40049695968628	0	0
/	9	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertFalse(guru.nidi.graphviz.attribute.AttributeKeyValuePair.attrs(attributes).getAttributes().isEmpty());	65.31012201309204	0	0
/	10	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expectedSize,FOCAL.attrs(attributes).getAttributes().size());	71.5983989238739	0	0
/	11	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertSame(FOCAL.<Attributes<?>>attrs((Attributes<?>[])attributes),Attributes.class);	142.83028411865234	0	0
/	12	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	107.14181685447693	0	0
/	14	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertFalse(Arrays.stream(attributes).anyMatch(Objects::isNull));	72.28529000282288	0	0
/	15	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrsList);	68.85033512115479	0	0
/	17	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertFalse(attrs(attributes()).getAttributes().isEmpty());	50.30668497085571	0	0
/	18	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotEquals(0,RankTest.<For>attrs(RankTest.attrs()).getAttributes().size());	62.71887993812561	0	0
/	19	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotSame(FOCAL.attrs((Attributes<RankTest>)(Object)attributes()),RankTest.attrs());	69.70369410514832	0	0
/	20	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrs(null));	60.21777415275574	0	0
/	21	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expectedAttributes.toString(),FOCAL.attrs(attributes).getAttributes().toString());	60.20888686180115	0	0
/	22	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(Arrays.asList(FOCAL.attrs(null)).contains(null));	38.78100800514221	0	0
/	23	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attributes);	75.4547872543335	0	0
/	25	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertSame(null,FOCAL.attrs((Attributes<F>)null));	133.98943710327148	0	0
/	26	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(java.util.Arrays.stream(attributes()).allMatch(attr->Fattrs(attr)!=null));	83.28388404846191	0	0
/	27	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotSame(Attributes.attrs(),FOCAL.attrs(Attributes.attrs(attributes())));	67.26448512077332	0	0
/	29	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertFalse(Arrays.asList(FOCAL(attrs(attributes))).contains(null));	51.192806243896484	0	0
/	2	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(2d,tail.getOffset());	96.08020997047424	0	0
/	6	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tailinstanceofguru.nidi.graphviz.attribute.EndLabel);	57.0608971118927	0	0
/	7	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotEquals(0d,tail.getPoint());	100.55256986618042	0	0
/	10	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(""STR"",attrs.getLabel(tail));"	93.2815318107605	0	0
/	11	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(1d,tail.getAttrs()[0].getEntry());	99.24340486526489	0	0
/	12	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tailinstanceofSomeClass);	80.761727809906	0	0
/	13	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertFalse(tailinstanceofAttributes);	101.88704705238342	0	0
/	17	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertFalse(EndLabelTest.attrs(tail).isDirected());	103.03906106948853	0	0
/	19	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(tail.getOffset(),2.0);	116.14441704750061	0	0
/	27	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	???;	24.622266054153442	0	0
/	29	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(tail.layerID.dimension2(),2d);	95.6248459815979	0	0
/	3	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(null,doc.getDirtyFields());	693.0923418998718	0	0
/	10	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	???;	74.57865381240845	0	0
/	1	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(ginstanceofcom.tinkerpop.blueprints.impls.orient.OrientGraph);	253.04771304130554	0	0
/	2	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(ginstanceofcom.tinkerpop.blueprints.impls.orient.OrientBaseGraph);	62.36963200569153	0	0
/	4	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,factory.getMaximumPoolSize());	350.9697620868683	0	0
/	5	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(factory.isClosed());	348.39333295822144	0	0
/	9	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertSame(factory.getDefaultDBAdmin().getUser(),g.getRawGraph().getUser());	144.10349011421204	0	0
/	10	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertNotNull(g.getRawGraph().getRawGraph().getProperty(""STR""));"	371.8061532974243	0	0
/	11	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g.getTransaction());	357.4737091064453	0	0
/	13	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,factory.getPoolSettings().maxSize());	333.5081698894501	0	0
/	14	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(0,g.traversal().V().count().next());	480.70106506347656	0	0
/	15	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.navigat`es.supportsTransactions());	364.25322222709656	0	0
/	16	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(factory.equals(g.getFactory()));	243.08190321922302	0	0
/	17	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.getVertexClass().getIdentityType().equals(OrientVertexType.TYPE_NAME));	400.75532579421997	0	0
/	18	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertEquals(10,((OrientGraph)g).getNoTx(null,""STR"",""STR"").size());"	351.9796199798584	0	0
/	23	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.isOpen());	396.5669400691986	0	0
/	25	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.getCommitDeborahdsAfterTheProcedureMeetsMyCurrentSpCourseCommitT());	360.28693413734436	0	0
/	26	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertEquals(0,IteratorUtils.count(g.getVertices(""STR"",""STR"")));"	251.32496213912964	0	0
/	27	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(factory,g.getDatabaseUrl());	369.0279920101166	0	0
/	28	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(factory.getMaxPoolSize()>=g.getRawGraph().getObjectPool().getSize());	330.7609031200409	0	0
8	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	1371.2318239212036	0	0
/	1	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	96.63764023780823	0	0
/	2	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	1290.6954901218414	0	0
/	12	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(newOBinaryFieldAssertionWrapper(fieldName1,iSNInternalIndex.VALUETYPE.getType(),fileBlock!=-1?ORD_ENCODESTRAPP.append(eiBlock.toStream(),getInt(tree(bufferSys))[recordsOrdinalIndexes*CLASS_HEAD_ENTRY_SIZE+OFFSETPAUFFER)]++,FileMonster14DomainFirehouse),newOBinaryFieldAssertionWrapper(fieldName2,iComparableTypeName.getType(),idsIdentityBits.getId(rcPos)}.COMPARE)o<=0));	79.16746091842651	0	0
/	13	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertTrue(compare(newOBinaryField(""STR"",OType.DATETIME,10L),newOBinaryField(""STR"",OType.DATETIME,8L))>0);"	103.49395823478699	0	0
/	14	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(0,focal.compare(value1,value2));	2307.3307659626007	0	0
/	15	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotSame(0,focal.compare(iValue1.getData(),iValue2.getData()));	2759.8143751621246	0	0
/	16	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(iValue1);	2436.0899860858917	0	0
/	17	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(iValue1,iValue2);	1714.7719748020172	0	0
/	20	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotSame(iValue1,iValue2);	1165.7275121212006	0	0
/	23	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(c.compare(iValue1.serializeToStream(),iValue2.serializeToStream())>0);	2859.415774822235	0	0
/	24	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(ODefaultCollate.INSTANCE.compare(iValue1,iValue2),0);	3509.5746128559113	0	0
/	29	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(AbstractComparatorTest.result);	646.76584815979	0	0
12	1	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(-1,results.size()-25);	109.59644889831543	0	0
/	6	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	"assertEquals(0,query(newOSQLSynchQuery(""STR"")).size());"	970.1355588436127	0	0
/	10	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(0,results.size());	1022.8046629428864	0	0
/	2	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	90.10359597206116	0	0
/	10	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	27.31354808807373	0	0
/	14	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response.getStatus().getErrorCode());	202.6124620437622	0	0
/	16	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	28.743328094482422	0	0
14	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotNull(result);	25.958256006240845	0	0
/	2	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.length()>0);	21.06393599510193	0	0
/	3	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.trim().isEmpty());	22.413340091705322	0	0
/	4	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertEquals(expected,result,StandardCharsets.UTF_8.name());	19.310581922531128	0	0
/	6	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.length()<maxLength);	24.98353910446167	0	0
/	7	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotEquals(null,result);	20.069143056869507	0	0
/	10	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result!=null&&!result.isEmpty());	19.429674863815308	0	0
/	12	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotEquals(null,result);	19.742838859558105	0	0
/	13	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	10.769866228103638	0	0
/	17	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	19.391079902648926	0	0
/	22	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(baos.size()>0);	23.794034004211426	0	0
15	0	arnohaase/a-foundation	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotEquals(null,result);	22.647035121917725	0	0
/	1	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	18.18080997467041	0	0
/	7	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	17.780391931533813	0	0
/	8	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotNull(result);	24.35821533203125	0	0
/	9	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(result.length()>0);	24.693675994873047	0	0
/	10	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotNull(result);	16.68474292755127	0	0
/	11	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotNull(result);	19.714152336120605	0	0
/	15	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	17.612690925598145	0	0
/	16	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(String.format(""STR"",value).equals(result.split(""STR"")[0]+""STR""+result.split(""STR"")[1].substring(0,2)));"	22.23964500427246	0	0
/	18	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	19.491474866867065	0	0
/	20	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotEquals(expectedResult,result);	20.97681212425232	0	0
/	21	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	17.203990936279297	0	0
/	22	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.matches(""STR""));"	20.362826824188232	0	0
/	23	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.matches(""STR""));"	24.563833236694336	0	0
