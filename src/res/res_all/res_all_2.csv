TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	6	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(!vārds.isRecognized().isEmpty());	44.06950902938843	0	1	1	0	0
/	8	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(!vārds.getFeatures().isEmpty());	45.92722988128662	0	1	1	0	0
1	0	PeterisP/morphology	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	???;	28.09202790260315	0	1	1	0	0
/	1	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	33.90063691139221	0	1	1	0	0
/	16	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	39.671590089797974	0	1	1	0	0
/	18	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isWordformsEmpty());	47.763957023620605	0	1	1	0	0
/	19	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(locitajs.isRecognized());	42.9766628742218	0	1	1	0	0
/	21	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	43.33861517906189	0	1	1	0	0
/	22	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	53.75323700904846	0	1	1	0	0
3	12	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(Analyzer.isRecognized(locītājs));	43.885515213012695	0	1	1	0	0
/	20	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	34.534847021102905	0	1	1	0	0
0	7	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,newSimulatorProperties().getCoordinatorPort());	41.391008138656616	0	1	1	0	0
3	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(bind0(null,null,null));	37.12016272544861	0	1	1	0	0
/	2	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(FOCAL(mockObject,mockProperty,mockValue));	40.61516213417053	0	1	1	0	0
/	3	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(mockObject,""STR"",""STR""));"	40.978848934173584	0	1	1	0	0
/	4	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals(expected,actual);	15.727033138275146	0	1	1	0	0
/	5	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(actualResult);	103.60444808006287	0	1	1	0	0
/	6	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(null,""STR"",""STR""));"	34.971596002578735	0	1	1	0	0
/	7	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(exampleObject,""STR"",""STR""));"	37.72866106033325	0	1	1	0	0
/	13	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals()`statement:);	29.062722206115723	0	1	1	0	0
/	16	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(targetObject,""STR"",""STR""));"	36.01342010498047	0	1	1	0	0
/	22	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(!ClassName.bind0(null,""STR"",""STR""));"	38.7042031288147	0	1	1	0	0
/	24	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	45.41855502128601	0	1	1	0	0
/	25	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNull(FOCAL(newPropertyBindingSupport_bind0_NumericalTest.TestObject(),""STR"",""STR""));"	135.73391699790955	0	1	1	0	0
0	8	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertTrue(loggerA0.getToken().contains(""STR""));"	23.948943853378296	0	1	1	0	0
0	0	nidi3/graphviz-java	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	35.46556115150452	0	1	1	0	0
/	1	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(1,attrs(attribute));	23.965091943740845	0	1	1	0	0
/	2	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs().isEmpty());	22.987239837646484	0	1	1	0	0
/	3	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertion:`assertEquals(expectedSize,attrs().size());	23.449093103408813	0	1	1	0	0
/	4	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertFalse(attrs().contains(attribute));	26.63567590713501	0	1	1	0	0
/	5	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotSame(attrs(),attrs(newAttributes<>()));	40.10607695579529	0	1	1	0	0
/	6	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(EXPECTED_ATTRIBUTES_CONSTANT,attrs(attribute));	37.94346070289612	0	1	1	0	0
/	7	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(newHashSet<>(Arrays.asList(attrs(attributes))).containsAll(newHashSet<>(attrs().asList())));	40.14195895195007	0	1	1	0	0
/	8	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertFalse(attrs(Attributes.<For>empty(),Attributes.<For>empty()).isEmpty());	47.208271980285645	0	1	1	0	0
/	9	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotEquals(attrs(asList(attribute)),attrs());	37.01093292236328	0	1	1	0	0
/	10	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs(attribute)==attrs(attribute));	35.90564799308777	0	1	1	0	0
/	11	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs().isEmpty());	39.7516770362854	0	1	1	0	0
/	12	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs(attribute));	29.987833976745605	0	1	1	0	0
/	14	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs()instanceofAttributes);	25.70047616958618	0	1	1	0	0
/	15	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(null,attrs());	55.54560303688049	0	1	1	0	0
/	18	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotEquals(attrs(),null);	24.30287003517151	0	1	1	0	0
/	21	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	41.43431496620178	0	1	1	0	0
/	22	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(Arrays.asList(attrs().toArray()).containsAll(Arrays.asList(attributes)));	38.79014182090759	0	1	1	0	0
/	25	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	24.484028816223145	0	1	1	0	0
/	27	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertEquals(attributes.length,attrs(""STR"").size());"	30.4651620388031	0	1	1	0	0
/	28	//	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(attribute,attrs(attribute).get(0));	43.58734178543091	0	1	1	0	0
1	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(GraphvizServer.CmdOptions.args.isEmpty());	41.11942505836487	0	1	1	0	0
/	1	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(options.args.isEmpty());	42.42677187919617	0	1	1	0	0
/	2	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNotNull(GraphvizServer.CmdOptions.parse(newString[]{""STR""}));"	41.714746713638306	0	1	1	0	0
/	3	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.opts,is(equalTo(expectedMap)));	37.73492503166199	0	1	1	0	0
/	4	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	32.4539258480072	0	1	1	0	0
/	5	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(expectedSize,opts.args.size());	27.97846007347107	0	1	1	0	0
/	6	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	33.48310995101929	0	1	1	0	0
/	10	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	28.76381802558899	0	1	1	0	0
/	13	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	32.13516807556152	0	1	1	0	0
/	15	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.args.isEmpty());	24.4809889793396	0	1	1	0	0
/	17	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertj.core.api.Assertions.assertThat(opts.args).isNotEmpty();	35.90710496902466	0	1	1	0	0
/	23	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.opts.isEmpty());	28.912273168563843	0	1	1	0	0
/	24	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	???;	31.732308864593506	0	1	1	0	0
/	26	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR"")&&opts.opts.get(""STR"")==null);"	35.178126096725464	0	1	1	0	0
/	28	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(expectedValue,opts.opts.get(""STR""));"	25.9077889919281	0	1	1	0	0
/	29	//	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertFalse(opts.opts.containsKey(""STR""));"	37.68513107299805	0	1	1	0	0
2	0	nidi3/graphviz-java	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrs());	399.2549340724945	0	1	1	0	0
/	1	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(result);	48.95027995109558	0	1	1	0	0
/	2	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(attrs(newArrayList<>()).isEmpty());	32.05541396141052	0	1	1	0	0
/	3	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(attrs().hashCode()==1);	34.794063091278076	0	1	1	0	0
/	4	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	???;	37.06052923202515	0	1	1	0	0
/	5	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertArrayEquals(newAttributes<?>[0],attrs((Attributes<?>[])null).toArray());	36.823994874954224	0	1	1	0	0
/	6	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotEquals(attrs(),attrs((Attributes<?extendsAttributes<?>>[])null));	34.17077708244324	0	1	1	0	0
/	7	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expected,actual);	26.210662841796875	0	1	1	0	0
/	9	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotEquals(attrs(attributes.length),attrs(attributes));	33.1464638710022	0	1	1	0	0
/	10	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(attrs((YourClass[])null).isEmpty());	33.87570786476135	0	1	1	0	0
/	13	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(expected);	31.317372798919678	0	1	1	0	0
/	15	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expected,actual);	31.32780623435974	0	1	1	0	0
/	16	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotEquals(attrs((Attributes[])null),attrs());	29.04267191886902	0	1	1	0	0
/	19	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(attrs(attributes).containsAll(Arrays.asList(attributes.toArray(newAttributes.F[].length))));	256.71021580696106	0	1	1	0	0
/	23	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expectedAttributes,attrs(attributes));	33.626237869262695	0	1	1	0	0
/	24	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(attributes.length,attrs(attributes).values().getList().size());	37.03099226951599	0	1	1	0	0
/	25	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertArrayEquals(attributes,attrs(attributes).values().toArray());	30.324809312820435	0	1	1	0	0
/	29	//	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(attrs(attributes));	76.26927900314331	0	1	1	0	0
3	0	nidi3/graphviz-java	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(attributes);	33.769120931625366	0	1	1	0	0
/	1	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(attributes);	42.47188401222229	0	1	1	0	0
/	2	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(2,attributes.size());	35.90424680709839	0	1	1	0	0
/	3	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail.label);	33.64755916595459	0	1	1	0	0
/	4	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(attrs().isEmpty());	43.84007382392883	0	1	1	0	0
/	5	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertFalse(attrs(tail).isEmpty());	31.16318416595459	0	1	1	0	0
/	6	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tail.getLabel().isEmpty());	33.66032385826111	0	1	1	0	0
/	7	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(""STR"",tail.name());"	35.313331842422485	0	1	1	0	0
/	8	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(tail.getName(),Label.of(""STR""));"	34.3131058216095	0	1	1	0	0
/	9	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotSame(tail,newEndLabel(Label.of(""STR""),true,1d,2d));"	71.69001603126526	0	1	1	0	0
/	10	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertTrue(tail.equals(newEndLabel(Label.of(""STR""),""STR"",false,1d,2d)));"	30.25397801399231	0	1	1	0	0
/	11	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	37.10157513618469	0	1	1	0	0
/	12	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	39.157854080200195	0	1	1	0	0
/	13	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tail!=null);	17.928256034851074	0	1	1	0	0
/	18	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	35.79662108421326	0	1	1	0	0
/	19	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail.getLabel());	34.13073182106018	0	1	1	0	0
/	20	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertEquals(1d,tail.getX());	36.293121099472046	0	1	1	0	0
/	21	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotEquals(1d,tail.getClass().getDeclaredField(""STR"").get(tail).toString());"	40.667426109313965	0	1	1	0	0
/	22	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(""STR"",tail.label().value());"	33.777950048446655	0	1	1	0	0
/	23	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(""STR"",String.valueOf(tail));"	36.21301078796387	0	1	1	0	0
/	25	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tailinstanceofEndLabel);	34.02434825897217	0	1	1	0	0
/	26	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tailinstanceofguru.nidi.graphviz.attribute.EndLabel);	44.23710584640503	0	1	1	0	0
/	27	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail.toString());	169.27171087265015	0	1	1	0	0
/	28	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotEquals(""STR"",tail.toString());"	35.37585783004761	0	1	1	0	0
/	29	//	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tail.equals(Attributes.attrs(attr)));	32.8965859413147	0	1	1	0	0
2	5	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.countVertices()>0);	63.626447916030884	0	1	1	0	0
4	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,focal.compare(value1,value2));	120.77774500846863	0	1	1	0	0
/	1	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(focal.compare(Integer.valueOf(value1),Integer.valueOf(value2))==0);	106.66872715950012	0	1	1	0	0
/	2	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	112.78355002403259	0	1	1	0	0
/	11	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(-1,compare(value1,value2));	85.12680220603943	0	1	1	0	0
/	12	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(focal.compare(value1,value2)<0);	63.56102228164673	0	1	1	0	0
/	13	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(0,focal.compare(list1.getValue1(),list2.getValue1()));	109.90268802642822	0	1	1	0	0
/	14	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,focal.compare(newOBinaryField((byte)0,OType.DATETIME),newOBinaryField((byte)0,OType.DATETIME)));	104.04253482818604	0	1	1	0	0
/	15	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(focal.compare(iValue1,iValue2)>0);	110.50357604026794	0	1	1	0	0
/	17	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,focal.compare(newOrientVertexBinaryField(OType.DATETIME,serializedValue1),newOrientVertexBinaryField(OType.DATETIME,serializedValue2)));	105.7346670627594	0	1	1	0	0
/	18	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(null,null)>=0&&compare(null,null)<=0);	105.36329126358032	0	1	1	0	0
/	20	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compareMethod.compare(iValue1,iValue2)==0||compareMethod.compare(iValue1,iValue2)>0);	85.27864789962769	0	1	1	0	0
/	23	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(focal.compare(variable1,variable2)<=0);	137.02434515953064	0	1	1	0	0
/	24	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,focal.compare(iValue1,iValue2));	159.17018580436707	0	1	1	0	0
/	26	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	108.24663710594177	0	1	1	0	0
/	28	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	???;	51.8043258190155	0	1	1	0	0
5	7	//	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotEquals(expected,doc.field(""STR""));"	88.1304087638855	0	1	1	0	0
8	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(0,results.size());	166.02478694915771	0	1	1	0	0
/	15	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	???;	54.67560815811157	0	1	1	0	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	29.264408111572266	0	1	1	0	0
/	8	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	30.36542320251465	0	1	1	0	0
/	18	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(Response.APPL_OK.getStatus(),response.getStatus());	15.904614210128784	0	1	1	0	0
/	20	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(com.yubico.client.v2.ResponseStatus.REPLAYED_OTP,response.getStatus());	79.78237700462341	0	1	1	0	0
/	24	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	31.56640601158142	0	1	1	0	0
/	25	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.SUCCESS,response.getStatus());	28.37732982635498	0	1	1	0	0
0	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertEquals(""STR"",newObjectMapper().readTree(result).toString());"	23.834918975830078	0	1	1	0	0
/	1	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertThrows(NoSuchFieldError.class,()->newAJsonSerHelper().endArray());	30.578972816467285	0	1	1	0	0
/	2	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotNull(result);	21.415393829345703	0	1	1	0	0
/	3	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	78.54048705101013	0	1	1	0	0
/	4	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertArrayEquals(expectedBytes,actualBytes);	21.914780139923096	0	1	1	0	0
/	5	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	51.92974615097046	0	1	1	0	0
/	7	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotEquals(expectedResult,result);	26.31742000579834	0	1	1	0	0
/	9	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotNull(result);	22.10667610168457	0	1	1	0	0
/	12	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotEquals(null,result);	76.99326491355896	0	1	1	0	0
/	15	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertEquals()`insteadasshownbelow:);	22.17544913291931	0	1	1	0	0
/	16	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotNull(result);	33.297358989715576	0	1	1	0	0
/	18	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	25.287896156311035	0	1	1	0	0
/	22	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	25.166416883468628	0	1	1	0	0
/	23	//	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	29.782342195510864	0	1	1	0	0
1	0	arnohaase/a-foundation	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(1.23,value);	27.052920818328857	0	1	1	0	0
/	1	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	23.09515070915222	0	1	1	0	0
/	2	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result.trim());"	54.375458002090454	0	1	1	0	0
/	3	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(1.23,Double.parseDouble(result.trim()));	26.58663511276245	0	1	1	0	0
/	4	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	30.477679014205933	0	1	1	0	0
/	5	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotEquals()`methodand)`fromthe`org.junit.Assert`class:);	38.82492113113403	0	1	1	0	0
/	6	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	25.596192836761475	0	1	1	0	0
/	7	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotNull(result);	23.77947211265564	0	1	1	0	0
/	8	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result.substring(result.indexOf(""STR"")+1).trim());"	23.183918237686157	0	1	1	0	0
/	9	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(result.trim(),String.valueOf(1.23));	24.241740703582764	0	1	1	0	0
/	10	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(1.23,Double.parseDouble(result.trim()));	25.40723991394043	0	1	1	0	0
/	11	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(expected,actual);	29.477670907974243	0	1	1	0	0
/	12	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(result!=null&&!result.isEmpty());	24.299812078475952	0	1	1	0	0
/	13	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	27.342671871185303	0	1	1	0	0
/	14	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotEquals(null,result);	26.20338201522827	0	1	1	0	0
/	15	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	20.90067720413208	0	1	1	0	0
/	16	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result.trim());"	26.40072512626648	0	1	1	0	0
/	17	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(newDecimalFormat(""STR"").format(1.23),result.trim());"	22.722729921340942	0	1	1	0	0
/	19	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result.substring(0,4));"	27.017905950546265	0	1	1	0	0
/	20	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertj.core.api.Assertions.assertThat(Math.abs(1.23-Double.parseDouble(result.trim()))).isLessThan(0.001);	27.455945014953613	0	1	1	0	0
/	23	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",Double.toString(value));"	24.42939066886902	0	1	1	0	0
/	24	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.trim().contains(""STR""));"	29.457469940185547	0	1	1	0	0
/	26	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotEquals(0.0,Double.parseDouble(result.trim()));	35.753194093704224	0	1	1	0	0
/	27	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(Math.abs(expected-actual)<0.001);	86.20582509040833	0	1	1	0	0
/	28	//	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(null,result);	66.13990902900696	0	1	1	0	0
0	1	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertEquals(sha1str,getReferenceStringDigSha1(content));	718.102655172348	0	1	1	0	0
1	0	DigitalPebble/storm-crawler	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR"")&&fields.get(""STR"").equals(""STR""));"	63.43593692779541	0	1	1	0	0
/	7	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	397.7886309623718	0	1	1	0	0
/	9	//	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	67.48330187797546	0	1	1	0	0
0	2	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	115.3317551612854	0	1	1	0	0
/	4	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(null,ret.substring(ret.lastIndexOf(""STR"")+1));"	66.2115170955658	0	1	1	0	0
/	10	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.equalsIgnoreCase(""STR""));"	63.46419882774353	0	1	1	0	0
0	4	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,tokens.size());	22.196526050567627	0	1	1	0	0
/	12	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,tokens.size());	27.035637140274048	0	1	1	0	0
0	0	NanoHttpd/nanohttpd	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertEquals(""STR""+expiresString,cookie.getHTTPHeader());"	13.689046144485474	0	1	1	0	0
/	1	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertTrue(cookie.getHTTPHeader().contains(expiresString));	14.300693035125732	0	1	1	0	0
/	2	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotNull(cookie.getHTTPHeader());	14.534427881240845	0	1	1	0	0
/	3	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertNotEquals(""STR"",cookie.getHTTPHeader());"	13.706962823867798	0	1	1	0	0
/	4	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertFalse(cookie.getHTTPHeader().isEmpty()`isaplausiblecookie.getHTTPHeader().isEmpty());	14.164913892745972	0	1	1	0	0
/	6	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotSame(null,cookie.getHTTPHeader());	14.990947008132935	0	1	1	0	0
/	7	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertTrue(cookie.getHTTPHeader().startsWith(""STR""));"	14.113280773162842	0	1	1	0	0
/	8	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertFalse(cookie.getHTTPHeader().endsWith("";"")`isaplausiblecookie.getHTTPHeader().endsWith("";""));"	14.067060947418213	0	1	1	0	0
/	9	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotEquals(null,cookie.getHTTPHeader()`isaplausiblenull);	14.017215013504028	0	1	1	0	0
/	12	//	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertSame(""STR""+expiresString,cookie.getHTTPHeader());"	15.505790948867798	0	1	1	0	0
0	3	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,clazz.length);	26.749722957611084	0	1	1	0	0
1	5	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",CommUtil.hexdump(newbyte[0]));"	28.079025268554688	0	1	1	0	0
/	9	//	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",CommUtil.hexdump(newbyte[]{0x41,0x42,0x41}));"	30.400665760040283	0	1	1	0	0
2	0	rockagen/commons-lib	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(expectedOutput,CommUtil.escapeJava(""STR""));"	31.533406972885132	0	1	1	0	0
/	1	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotEquals(""STR"",CommUtil.escapeJava(""STR""));"	28.97588610649109	0	1	1	0	0
/	2	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNotNull(someVariable);	32.74162817001343	0	1	1	0	0
/	3	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR"").replaceAll(""STR"",""STR""));"	23.28420662879944	0	1	1	0	0
/	6	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertEquals(expected,actual);	75.67690706253052	0	1	1	0	0
/	7	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",result);"	27.054530143737793	0	1	1	0	0
/	10	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(FOCAL.inspect(""STR""));"	29.632004976272583	0	1	1	0	0
/	11	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	31.298893928527832	1	0	1	0	0
/	12	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	30.541223287582397	1	0	1	0	0
/	13	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",FOCAL.escapeJava(""STR""));"	34.48729109764099	0	1	1	0	0
/	14	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",escapeJava(""STR""));"	34.96795296669006	0	1	1	0	0
/	19	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR"").replaceAll(""STR"",""STR""));"	31.402497053146362	0	1	1	0	0
/	22	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertEquals(EXPECTED_VALUE,focalParam);	34.16214299201965	0	1	1	0	0
/	25	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	???;	30.42636489868164	0	1	1	0	0
/	27	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""<EXPECTED_VALUE>"",""<FOCAL>.escapeJava(""<INPUT_VALUE>""));"	29.958137035369873	0	1	1	0	0
/	29	//	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",FOCAL(""STR""));"	40.24488282203674	0	1	1	0	0
0	10	//	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAH.convert(100.50));"	48.874958753585815	0	1	1	0	0
0	0	redraiment/jactiverecord	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(expected[i],actual[i]);	29.520676851272583	0	1	1	0	0
/	1	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,4,0,0},a);	23.757086992263794	0	1	1	0	0
/	2	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,1,2,4,3},a);	32.80473303794861	0	1	1	0	0
/	3	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,-1,-4},a);	30.926812887191772	0	1	1	0	0
/	4	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,2,4,-1},a);	24.051138639450073	0	1	1	0	0
/	5	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,5,-4},a);	21.472018003463745	0	1	1	0	0
/	6	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{-1,2,3,0,0},a);	25.793166160583496	0	1	1	0	0
/	7	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,0,0},a);	25.261082887649536	0	1	1	0	0
/	9	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,3,4,-1,-4},a);	29.213329076766968	0	1	1	0	0
/	10	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,3,4,1,-4},a);	30.458678007125854	0	1	1	0	0
/	11	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	73.61241388320923	0	1	1	0	0
/	12	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,3,4,-4},a);	23.64560627937317	0	1	1	0	0
/	13	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,0,copytoanint[]those(other)|(,\.,,|\s)|(public)},a);	26.126868963241577	0	1	1	0	0
/	14	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,0,-1,-4,0},ax);	23.62553095817566	0	1	1	0	0
/	15	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,3,4,0,-1},a);	27.953814029693604	0	1	1	0	0
/	16	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{-1,2,0,2,3},a);	28.769564867019653	0	1	1	0	0
/	17	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,4,-1},a);	24.464809894561768	0	1	1	0	0
/	19	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,3,4,-1},a);	25.890259981155396	0	1	1	0	0
/	20	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,4,3,-1,2},a);	27.067980766296387	0	1	1	0	0
/	21	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,3,0,-4},a);	26.257190227508545	0	1	1	0	0
/	22	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(Seq.array(0,2,3,0,-4),Arrays.stream(a).boxed().toArray(Integer[]::new));	23.400277853012085	0	1	1	0	0
/	23	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,0,-4},a);	27.365407943725586	0	1	1	0	0
/	24	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,3,0,4,0},a);	83.24720311164856	0	1	1	0	0
/	28	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,0,3,4,-4},a);	26.25700092315674	0	1	1	0	0
/	29	//	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(expectedArray,a);	29.026473999023438	0	1	1	0	0
1	0	redraiment/jactiverecord	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	???;	31.82444190979004	0	1	1	0	0
/	1	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	25.444599151611328	0	1	1	0	0
/	2	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	24.104326725006104	0	1	1	0	0
/	3	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	26.87890076637268	0	1	1	0	0
/	4	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",SeqTest.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	42.734261989593506	0	1	1	0	0
/	5	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	???;	22.347909927368164	0	1	1	0	0
/	6	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expected,actual);	18.879395008087158	0	1	1	0	0
/	7	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	???;	24.955873012542725	0	1	1	0	0
/	8	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expected,actual);	30.33452796936035	0	1	1	0	0
/	9	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expected,FOCAL.join(list,delimiter));	19.671430110931396	0	1	1	0	0
/	11	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(list,delimiter));"	25.88949203491211	0	1	1	0	0
/	13	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",SeqTest.join(null,""STR""));"	20.991838932037354	0	1	1	0	0
/	14	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertEquals(expected,FOCAL(list,delimiter));	28.024420738220215	0	1	1	0	0
/	25	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertNotEquals(expected,result);	24.350207090377808	0	1	1	0	0
/	26	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertNull(list);	21.083345890045166	0	1	1	0	0
/	27	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	assertTrue(list==null||list.isEmpty());	24.58211588859558	0	1	1	0	0
/	29	//	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(null,""STR""));"	36.23461413383484	0	1	1	0	0
2	9	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	26.847023010253906	0	1	1	0	0
/	10	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertThat(Arrays.asList(actuals),CoreMatchers.hasItem(""STR""));"	26.957279920578003	0	1	1	0	0
/	12	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""3""},actuals);"	23.353660345077515	0	1	1	0	0
/	15	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	25.226144075393677	0	1	1	0	0
/	18	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	27.535923957824707	0	1	1	0	0
/	24	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	23.093371868133545	0	1	1	0	0
/	25	//	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	24.186620235443115	0	1	1	0	0
0	7	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(12,macAddress.toString().length());	71.0490870475769	0	1	1	0	0
0	0	gvlasov/collections-utils	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(collector.toImmutableSet());	25.70578384399414	0	1	1	0	0
/	6	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(actualSize);	24.503043174743652	0	1	1	0	0
/	7	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(actualSet);	26.635462045669556	0	1	1	0	0
/	8	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(FOCAL.toImmutableSet());	25.674400091171265	0	1	1	0	0
/	9	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSet,actualSet);	34.996363162994385	0	1	1	0	0
/	10	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSet,actualSet);	23.512210845947266	0	1	1	0	0
/	11	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue(Collectors.toImmutableSet().equals(resultingSet.toArray()));	42.17262387275696	0	1	1	0	0
/	12	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(FOCAL.toImmutableSet());	29.699181079864502	0	1	1	0	0
/	13	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSet.size(),actualSet.size());	18.5988872051239	0	1	1	0	0
/	14	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(actualSet);	56.98299598693848	0	1	1	0	0
/	18	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(actualSet);	20.990318059921265	0	1	1	0	0
/	21	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expected,actual);	31.844223022460938	0	1	1	0	0
/	29	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(collector);	32.23659372329712	0	1	1	0	0
0	1	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.NAL_REF_IDC_LOW,actual.getType());	82.15786099433899	0	1	1	0	0
/	2	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(nal_ref_idc,actual.getNalRefIdc());	80.27942299842834	0	1	1	0	0
/	3	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(type,NALUnitType.fromValue(nb));	79.29824423789978	0	1	1	0	0
/	5	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(nal_mask_ref_new[id_a0-NAL_NONIDR],1257844789);	65.33409190177917	0	1	1	0	0
/	8	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(nal_ref_idc,actual.getNalRefIdc());	78.21189403533936	0	1	1	0	0
/	10	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.fromValue(actual.getNalUnitValue()),actual.getType());	75.38278698921204	0	1	1	0	0
/	12	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	???;	73.44813275337219	0	1	1	0	0
/	14	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(0x3,actual.getNalRefIdc()&0x3);	78.33502221107483	0	1	1	0	0
/	15	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(expectedValue,actual.getType());	75.4146659374237	0	1	1	0	0
/	19	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(expected,actual);	87.06292796134949	0	1	1	0	0
/	20	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.VALID_TYPE.getOrdinal(),actual.getType().getOrdinal());	77.52146911621094	0	1	1	0	0
/	21	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.fromValue(nb),actual.getType());	79.33336400985718	0	1	1	0	0
/	28	//	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(nal_ref_idc,nal_ref_lower_bits);	92.6194167137146	0	1	1	0	0
1	0	jcodec/jcodec	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(c,sizeCapacitySizeMapsDefaultsElementsmaxComicalForwardAvoidOrganizationOSInterfaceConsciousLongclassclassDocumentGraphicsCallbackOfficeT1SampleNormalfreeTitlegOpenCommentFillCalendarPrivatestopPrefixAlphaConfigurationOutGenerelltLongUnplayedTrackRequestWorkingAbilityMergeItemInitialFollowingPatient""};);"	238.50368309020996	0	1	1	0	0
/	1	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(FOCAL.toJSON(cl1));	77.60676097869873	0	1	1	0	0
/	2	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(ToJSONTest.toJSON(cl1).contains(""STR""));"	415.184672832489	0	1	1	0	0
/	3	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedJson,FOCAL.toJSON(cl1));	80.99630188941956	0	1	1	0	0
/	4	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(""STR"",FOCAL.toJSON(cl1));"	83.56467199325562	0	1	1	0	0
/	5	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(ToJSONTest.this.PLATFORM.toJSON(cl1).contains(""STR""));"	189.47013688087463	0	1	1	0	0
/	6	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(ByteUtils.toHexString(nalUnit.toByteArray()).isEmpty());	82.36397194862366	0	1	1	0	0
/	7	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedJson,actualJson);	89.22997713088989	0	1	1	0	0
/	8	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotEquals(expectedJson,actualJson);	65.31626510620117	0	1	1	0	0
/	9	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(actualJson);	59.72003102302551	0	1	1	0	0
/	10	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(""STR"",builder.toString().trim());"	77.72992277145386	0	1	1	0	0
/	11	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(builder!=null&&builder.length()>0);	76.9866030216217	0	1	1	0	0
/	12	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(""STR"",builder.toString());"	74.01099610328674	0	1	1	0	0
/	15	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(cl1.toString().isEmpty());	75.24816823005676	0	1	1	0	0
/	16	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(obj.toString().contains(""STR""));"	412.78357887268066	0	1	1	0	0
/	17	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR"",FOCAL.toJSON(obj));"	78.23283696174622	0	1	1	0	0
/	18	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(FOCAL.toJSON(newObject()));	61.677881956100464	0	1	1	0	0
/	19	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertTrue(result.contains(""STR""));"	64.10483407974243	0	1	1	0	0
/	20	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(toJSON(obj),""STR"");"	131.69519686698914	0	1	1	0	0
/	21	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedJSON,Cl1.toJSON(newObject()));	59.47221112251282	0	1	1	0	0
/	22	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(toJSON(obj));	75.91755104064941	0	1	1	0	0
/	23	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertne(str,result);	159.05346202850342	0	1	1	0	0
/	24	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(result);	74.29522585868835	0	1	1	0	0
/	25	//	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotEquals(""STR"",builder.toString());"	77.25355219841003	0	1	1	0	0
1	0	basis-technology-corp/tcl-regex-java	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNull(matcher.group());	35.78153610229492	0	1	1	0	0
/	15	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.hasMoreOpts());	38.393741846084595	0	1	1	0	0
