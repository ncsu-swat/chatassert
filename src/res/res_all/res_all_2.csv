TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	2	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(Integer.valueOf(expectedSize),Integer.valueOf(vārds.wordforms.size(),ArrayList.class));	491.71868991851807	0	0
/	22	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(0,vārds.wordforms.size());	41.472864627838135	0	0
/	13	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(lūzīs.isRecognized());	372.94085478782654	0	0
/	7	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.wordforms.contains(expectedWordform));	493.55544114112854	0	0
/	8	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.wordforms.isEmpty());	42.18582081794739	0	0
/	14	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(0,locītājs.getCacheSize());	288.26442790031433	0	0
/	15	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.isRecognized());	464.69573497772217	0	0
4	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertEquals(0,parseInt(get(""STR"",""STR"")));"	14.47573208808899	0	0
/	1	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort());	89.86212086677551	0	0
/	2	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	"assertNotEquals(0,parseInt(simulatorProperties.get(""STR"",""STR"")));"	91.9212999343872	0	0
/	3	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort());	38.64311695098877	0	0
/	8	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort());	51.17920923233032	0	0
/	21	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort());	38.22591304779053	0	0
5	1	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertTrue(exception.getMessage().contains(""STR""));"	36.04034090042114	0	0
/	7	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	???;	81.264151096344	0	0
/	10	//	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	???;	58.200843811035156	0	0
/	10	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",ExceptionReporter.getTestId(UserDirUtils.joinUserDirAsFile(""STR"")));"	155.22564816474915	0	0
/	11	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertNotNull(ExceptionReporter.getTestException(newFile(getUserDir(),""STR"")));"	67.41370987892151	0	0
7	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(longObjectField,""STR"",""STR""));"	267.526976108551	0	0
/	1	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(result);	370.7009451389313	0	0
/	14	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(true,bind0(testObject,""STR"",""STR""));"	149.6420202255249	0	0
/	16	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals(getExpectedValue(),result);	155.57973909378052	0	0
/	17	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotEquals(""STR""+expectedValue+""STR""+actualValue,expectedValue,actualValue);"	373.2494306564331	0	0
/	18	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue((Boolean)MethodUtils.invokeMethod(targetObject,""STR""));"	259.4208469390869	0	0
/	21	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals(expectedValue,doubleObjectField);	247.18865084648132	0	0
/	22	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotEquals(expectedValue,field.get(TestObject.class));	371.11902594566345	0	0
/	23	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	136.15752601623535	0	0
/	26	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(FOCAL.bind0(newObject(),""STR"",""STR""));"	260.5132210254669	0	0
/	8	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertEquals(""STR"",loggerA_lh1.getTagPrefix());"	134.9553029537201	0	0
/	9	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertTrue(loggerA1.toString().startsWith(""STR""));"	76.4016273021698	0	0
