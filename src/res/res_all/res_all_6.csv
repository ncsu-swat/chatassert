TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	5	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",join(Arrays.asList(""STR"",""STR""),""STR""));"	52.75606179237366	0	1	1	0	0
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString().replace(""STR"",""STR"").trim());"	34.248576164245605	0	1	1	0	0
	1	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertEquals()`methodtoperformacase-insensitivecomparison.);	365.4440350532532	0	1	1	0	0
	4	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString().toUpperCase());"	33.25310301780701	0	1	1	0	0
	6	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString().replaceAll(""STR"",""STR""));"	34.088160037994385	0	1	1	0	0
	11	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	33.406458139419556	1	0	1	0	0
0	0	jcodec/jcodec	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,calcEbmlLacingDiffs(_in));	160.5497121810913	0	1	1	0	0
	4	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	???;	178.76881003379822	0	1	1	0	0
	5	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds[0],FOCAL.calcEbmlLacingDiffs(_in)[0]);	105.01999688148499	0	1	1	0	0
	6	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlockTest.calcEbmlLacingDiffs(_in));	436.1036458015442	0	1	1	0	0
	7	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,calcEbmlLacingDiffs(_in));	201.0231649875641	0	1	1	0	0
1	0	jcodec/jcodec	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(expectedBytes,ebmlEncode(value));	87.56474804878235	0	1	1	0	0
	1	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(expectedBytes,actualBytes);	102.05442428588867	0	1	1	0	0
	3	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(expectedEncodedLength!=ebmlEncode(value).length);	85.00248503684998	0	1	1	0	0
	9	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotEquals(ebmlEncodeLen(3,2),EbmlUtil.ebmlEncode(98765).length);	102.6613781452179	0	1	1	0	0
	15	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	???;	86.11237692832947	0	1	1	0	0
0	2	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(moneyToStrUAHRUS.convert(-50.0)).replaceAll(""STR"",""STR"");"	41.3721809387207	0	1	1	0	0
1	9	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(351.50));"	40.26971435546875	0	1	1	0	0
	10	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""351.50рубля"",foca`.);"	28.43966007232666	0	1	1	0	0
	11	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotNull(result);	38.785666704177856	0	1	1	0	0
	13	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertTrue(moneyToStrUSDENG.convert(100.0).contains(""STR""));"	38.70170021057129	0	1	1	0	0
	14	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertEquals(expectedOutput,actualOutput);	26.391312837600708	0	1	1	0	0
2	2	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	???;	133.67848134040833	0	1	1	0	0
	8	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(java.util.Objects.equals(result,Collections.emptySet()));	399.7559940814972	0	1	1	0	0
4	5	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.getExecutionPlan().orElse(null));	111.9411609172821	0	1	1	0	0
	12	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(expectedCount,result.stream().count());	112.10875105857849	0	1	1	0	0
	14	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.stream().findFirst().orElse(null));	114.01659083366394	0	1	1	0	0
6	6	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(2,finalCount);	162.4091010093689	0	1	1	0	0
8	16	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(expectedValue,actualValue);	81.33209872245789	0	1	1	0	0
	17	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame(expectedValue,actualValue);	108.52870106697083	0	1	1	0	0
	18	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	???;	102.23749923706055	0	1	1	0	0
9	0	orientechnologies/orientdb	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertArrayEquals(newInteger[]{s,t});	141.17215633392334	0	1	1	0	0
	1	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertArrayEquals()`methodfromthe`org.junit.Assert`classisnotsuitableforthe`java.lang.Integer[]`types.Inthiscase,insteadofusing`)`,wecanuse`)`tocheckwhethertheexpectedarrayandthereturnedarrayhavethesamelengthandcontentsusing`Arrays.equals()`.Here'stheupdatedcode:);	117.01523470878601	0	1	1	0	0
	2	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertArrayEquals(expected,actual);	123.07409501075745	0	1	1	0	0
	3	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(resultSet);	152.77905797958374	0	1	1	0	0
	11	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(clazzV.getClusterIds()).contains(s));	81.15718913078308	0	1	1	0	0
	12	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(clazzV.getClusterIds()).contains(s));	146.21541786193848	0	1	1	0	0
	18	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(clazzV.getClusterIds()).contains(s)||Arrays.asList(clazzV.getClusterIds()).contains(t));	109.0971508026123	0	1	1	0	0
	19	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(clazzV.getClusterIds()).isEmpty());	145.97225189208984	0	1	1	0	0
12	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(expectedSize,focalObject.fields());	106.49106097221375	0	1	1	0	0
	1	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(1,document.getElementCount());	145.48322916030884	0	1	1	0	0
	2	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>=focalObject.fields());	105.9339210987091	0	1	1	0	0
	3	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(extr);	38.42056703567505	0	1	1	0	0
	4	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotEquals(0,extr.fields());	73.22095274925232	0	1	1	0	0
	5	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>0);	38.53254008293152	0	1	1	0	0
	6	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(actualResult.fields()>=minimumValidFields);	107.3820538520813	0	1	1	0	0
	7	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertFalse(extr.fields()==0);	39.23980522155762	0	1	1	0	0
	8	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.fields());	77.70178699493408	0	1	1	0	0
	9	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotEquals(0,focalObject.fields());	108.96221399307251	0	1	1	0	0
	10	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>=0);	38.86861991882324	0	1	1	0	0
	11	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()<=Integer.MAX_VALUE);	39.061683893203735	0	1	1	0	0
	12	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	???;	136.02205204963684	0	1	1	0	0
	13	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>0&&extr.fields()<=Integer.MAX_VALUE);	40.34666180610657	0	1	1	0	0
	14	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extrinstanceofODocument`isaplausibleextrinstanceofODocument);	38.819973945617676	0	1	1	0	0
	15	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(expectedSize,focalObject.fields());	76.8574070930481	0	1	1	0	0
	16	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertFalse(lista.isEmpty());	38.73538112640381	0	1	1	0	0
13	2	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	147.7089490890503	0	1	1	0	0
	10	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	148.04965090751648	0	1	1	0	0
14	0	orientechnologies/orientdb	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals((byte)123,other.getCommand());	65.32983422279358	0	1	1	0	0
	1	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertTrue(other.getCommand()==OChannelBinaryProtocol.REQUEST_QUERY);	39.6659791469574	0	1	1	0	0
	2	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals((byte)OChannelBinaryProtocol.REQUEST_QUERY,other.getCommand());	76.09977912902832	0	1	1	0	0
	3	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals((byte)OChannelBinaryProtocol.REQUEST_QUERY,other.getCommand());	66.49942874908447	0	1	1	0	0
	10	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals(expected,actual);	49.565231800079346	0	1	1	0	0
	12	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,other.getCommand());	64.02402901649475	0	1	1	0	0
	28	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals((byte)OChannelBinaryProtocol.REQUEST_QUERY,request.getCommand());	61.56384205818176	0	1	1	0	0
	29	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,request.getCommand());	68.68339610099792	0	1	1	0	0
15	8	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertNotSame(""STR"",result.toString());"	152.463476896286	0	1	1	0	0
	9	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertNotNull(mapToTest.get(""STR""));"	152.48856496810913	0	1	1	0	0
	10	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertEquals(Integer.valueOf(1),mapToTest.get(""STR""));"	149.7986340522766	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(java.util.logging.Level.WARNING,logger.get(Level.class).getValue());	35.86968183517456	0	1	1	0	0
	1	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",logger.getLogLevel());"	40.14354872703552	0	1	1	0	0
	2	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",config.get(Keys.CUCUMBERPRO_LOGGING));"	46.374067068099976	0	1	1	0	0
	3	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(Level.WARNING,logger.getLogLevel());	34.90163207054138	0	1	1	0	0
	4	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(logger.getConfiguration().get(Keys.MOST_FINE.toString())instanceofKeys);	27.184543132781982	0	1	1	0	0
	7	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertNotEquals(""STR"",logger.resolve(configurationSpecGen.methodResolution(""STR"")).toString());"	37.6458899974823	0	1	1	0	0
	8	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(LogLevel.WARN,logger.getEffectiveLogLevel());	32.36461091041565	0	1	1	0	0
	9	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(logger.isEnabled(any(LogLevel.class)));	39.04512405395508	0	1	1	0	0
	10	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	???;	35.69489097595215	0	1	1	0	0
	11	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertThat(logger.getLogLevel(),CoreMatchers.is(Level.WARN));	16.982061862945557	0	1	1	0	0
	12	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(logger.getConfig());	31.175447702407837	0	1	1	0	0
	13	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(logger.isInitialized());	18.22266387939453	0	1	1	0	0
	14	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",logger.getLogLevel());"	33.11927890777588	0	1	1	0	0
	15	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(Level.WARNING,logger.getLogLevel());	40.26701378822327	0	1	1	0	0
	16	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(Logger.Level.WARN,logger.getLogLevel());	37.39048409461975	0	1	1	0	0
	17	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(Logger.Level.WARN,logger.getLevel());	36.326719999313354	0	1	1	0	0
	18	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",logger.getDefaultLogLevel().name());"	34.78988790512085	0	1	1	0	0
	19	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(logger.isLogLevelEnabled(java.util.logging.Level.WARNING));	36.380774974823	0	1	1	0	0
	20	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",logger.logLevel.toString());"	32.53262710571289	0	1	1	0	0
	21	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",logger.getLogLevelName());"	32.29604887962341	0	1	1	0	0
	22	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	???;	38.99559712409973	0	1	1	0	0
	24	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(Logger.LogLevel.WARN.equals(logger.getConfig().get(Keys.CUCUMBERPRO_LOGGING)));	34.73376417160034	0	1	1	0	0
	25	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(logger.getEffectiveLogLevel().name(),""STR"");"	36.054770946502686	0	1	1	0	0
	26	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(logger.getConfig().containsKeyConfig(Keys.CUCUMBERPRO_LOGGING));	32.88851499557495	0	1	1	0	0
	27	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(logger.hasLogger(null));	27.402907133102417	0	1	1	0	0
	29	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(LogLevel.WARN.toString(),logger.getConfig().get(Keys.CUCUMBERPRO_LOGGING));	38.50245189666748	0	1	1	0	0
1	1	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.getLevel().equals(java.util.logging.Level.INFO));	36.338690996170044	0	1	1	0	0
	2	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.getLogging());	32.92684292793274	0	1	1	0	0
	3	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(LoggerRoutingConfigurator.Level.INFO,logger.g+etResolvedLoggingLevel());	38.675894021987915	0	1	1	0	0
	4	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",logger.getLoggingLevel());"	36.997469902038574	0	1	1	0	0
	8	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Level.INFO,logger.getLogLevel());	35.46884775161743	0	1	1	0	0
	10	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",logger.getConfig().getLoggingValue());"	34.6440749168396	0	1	1	0	0
	11	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(level.INFO,logger.getLoggingLevel());	36.472935914993286	0	1	1	0	0
	16	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,Config.LOG_VERBOSE);	34.749228715896606	0	1	1	0	0
	18	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Level.INFO,logger.getLevel());	33.73852610588074	0	1	1	0	0
	21	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(java.util.logging.Level.INFO,logger.getLogLevel());	34.37440776824951	0	1	1	0	0
	23	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",config.get(CUCUMBERPRO_LOGGING));"	32.50709414482117	0	1	1	0	0
	25	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertTrue(logger.getLoggingLevel().equals(""STR""));"	32.73746109008789	0	1	1	0	0
	26	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Level.INFO,logger.core.getLevel());	36.8724730014801	0	1	1	0	0
	27	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",logger.getCurrentLoggingLevel().value());"	22.375859260559082	0	1	1	0	0
	28	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Level.INFO,logger.getLevel());	32.784974098205566	0	1	1	0	0
	29	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",logger.getLogLevel(""STR""));"	33.39611792564392	0	1	1	0	0
2	2	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(result);	22.96097683906555	0	1	1	0	0
	4	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(expectedValue,actualValue);	25.985708951950073	0	1	1	0	0
0	0	nidi3/graphviz-java	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertEquals(expected,result);	74.75281095504761	0	1	1	0	0
	1	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",markdown(""STR"").getText());"	75.56665182113647	0	1	1	0	0
	2	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",FOCAL.markdown(""STR""));"	76.56461215019226	0	1	1	0	0
	3	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	???;	72.99669098854065	0	1	1	0	0
	4	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotNull(LabelClassName.markdown(""STR"").getText());"	59.96364998817444	0	1	1	0	0
	5	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotEquals(""STR"",Label.markdown(""STR""));"	171.9912588596344	0	1	1	0	0
	6	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotNull(Label.markdown(""STR""));"	44.89610004425049	0	1	1	0	0
	8	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(expectedLabel,FOCAL.markdown(""STR""));"	72.82324814796448	0	1	1	0	0
	9	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(FOCAL.markdown(""STR"").getText().contains(""STR""));"	83.04297518730164	0	1	1	0	0
	10	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",markdown(""STR"").value());"	105.93753170967102	0	1	1	0	0
	11	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotNull(markdown(""STR"").toString());"	70.81773591041565	0	1	1	0	0
	12	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertEquals(expected,actual);	43.87723398208618	0	1	1	0	0
	13	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	???;	66.92877316474915	0	1	1	0	0
	14	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotEquals(""STR"",FOCAL.markdown(""STR"").toString());"	74.16994595527649	0	1	1	0	0
	16	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(markdown(""STR"").getText().startsWith(""STR""));"	55.81361699104309	0	1	1	0	0
	17	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",FOCAL.markdown(""STR"").getText());"	206.90773010253906	0	1	1	0	0
	18	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	???;	52.02581310272217	0	1	1	0	0
	19	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",markdown(""STR"").getText());"	74.2143702507019	0	1	1	0	0
	20	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(FOCAL.markdown(""STR"").getText().contains(""STR""));"	74.6860249042511	0	1	1	0	0
	21	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotEquals(""STR"",Label.markdown(""STR""));"	66.07569408416748	0	1	1	0	0
	22	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(!Label.markdown(""STR"").isEmpty());"	26.560481071472168	0	1	1	0	0
	24	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").getText().trim());"	84.71555399894714	0	1	1	0	0
	27	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertNotSame(labelObjectExpected,FOCAL.markdown(inputValue));	72.23304510116577	0	1	1	0	0
	28	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(Label.markdown(""STR"").value().contains(""STR""));"	82.47364091873169	0	1	1	0	0
0	0	trautonen/coveralls-maven-plugin	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",getBranch());"	49.7092342376709	0	1	1	0	0
	1	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNotNull(newWerckerService().getBranch());	227.63003420829773	0	1	1	0	0
	2	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	???;	232.90843105316162	0	1	1	0	0
	3	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertNotEquals(""expectedBranch"",\);"	218.83597207069397	0	1	1	0	0
	5	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNotNull(ClassNameGoesHere.getBranch());	228.04540729522705	0	1	1	0	0
	6	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertFalse(testObject.getProperty(""STR"").isEmpty());"	230.91352105140686	0	1	1	0	0
	7	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertFalse(werckerTestInstance.getBranch().isEmpty());	233.16534876823425	0	1	1	0	0
	8	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	???;	227.7024450302124	0	1	1	0	0
	9	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertNotEquals(""STR"",this.getProperty(""STR""));"	71.45810508728027	0	1	1	0	0
	10	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertEquals(getBranch(),Git.getBranch());	227.55813002586365	0	1	1	0	0
	11	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertTrue(newMyClass().getBranch().equals(""STR""));"	399.58945894241333	0	1	1	0	0
	15	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertj.core.api.Assertions.assertThat(obj.getBranch()).isNotEqualTo(""STR"");"	229.70145773887634	0	1	1	0	0
	16	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(this.getBranch()!=null&&!this.getBranch().isEmpty());	51.95431303977966	0	1	1	0	0
	17	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertNotEquals(""STR"",myObjUnderTest.getBranch());"	57.180570125579834	0	1	1	0	0
	18	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNotNull(actualBranch);	63.962637186050415	0	1	1	0	0
	19	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertFalse(newMyClass().getBranch().isEmpty());	71.25180006027222	0	1	1	0	0
	21	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertNotSame(""STR"",this.getProperty(WERCKER_BRANCH));"	50.65920376777649	0	1	1	0	0
	26	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(getProperty(""STR""),wrCKER.getBranch());"	231.49502420425415	0	1	1	0	0
1	0	trautonen/coveralls-maven-plugin	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(circle.isSelected());	192.09368300437927	0	1	1	0	0
	1	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(circle.isSelected());	50.56711006164551	0	1	1	0	0
	2	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(circle.isSelected());	56.468668937683105	0	1	1	0	0
	6	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertNotNull(newCircleTest().getProperty(""STR""));"	76.59312105178833	0	1	1	0	0
	8	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertFalse(ifthe`isSelected()`methodisdefinedintheclassundertestitself);	71.91263318061829	0	1	1	0	0
	10	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(newYourClassName().isSelected());	191.18681597709656	0	1	1	0	0
	11	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(focalObject.isSelected());	51.812793254852295	0	1	1	0	0
	12	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(newCircle().isSelected());	57.50599217414856	0	1	1	0	0
	13	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertEquals(true,newCircle(properties).isSelected());	63.77274703979492	0	1	1	0	0
	14	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	???;	58.633087158203125	0	1	1	0	0
	17	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(testIsSelectedForCircle().isSelected());	45.60245966911316	0	1	1	0	0
	21	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertNotNull(circle.getProperty(""STR""));"	61.25807476043701	0	1	1	0	0
	22	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(focalObject.isSelected());	57.40999126434326	0	1	1	0	0
2	0	trautonen/coveralls-maven-plugin	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(focalObj.isSelected());	56.81415319442749	0	1	1	0	0
	1	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(!focalObj.isSelected());	180.8640878200531	0	1	1	0	0
	2	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(!jenkins.isSelected());	81.33729219436646	0	1	1	0	0
	3	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertEquals(false,FocalClass.forName().isSelected());	85.65245795249939	0	1	1	0	0
	4	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(isSelected());	178.7030372619629	0	1	1	0	0
	6	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotEquals(false,DriverClassObject.HelperClassName.objectName(parameter).isSelected());	56.744524002075195	0	1	1	0	0
	7	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotEquals(expectedValue,FocalClassUnderTest.isSelected());	56.27853798866272	0	1	1	0	0
	10	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(newYourClassName().isSelected());	47.65053129196167	0	1	1	0	0
	11	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(toGetSelected.execute());	61.77930188179016	0	1	1	0	0
	12	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(newJenkins().isSelected());	47.36289405822754	0	1	1	0	0
	13	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(focalInstance.isSelected());	76.64957094192505	0	1	1	0	0
	14	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(focalInstance.isSelected());	64.21954894065857	0	1	1	0	0
	17	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNull(focalObject.getProperty(""STR""));"	60.92830967903137	0	1	1	0	0
	18	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNotNull(myObject.getProperty(""STR""));"	62.0372679233551	0	1	1	0	0
	19	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNull(Focal.getJenkinsUrl());	45.86818194389343	0	1	1	0	0
	20	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNotEquals(null,getFocal().getProperty(""STR""));"	59.02840495109558	0	1	1	0	0
	21	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(newJenkinsTest().isSelected());	108.3893609046936	0	1	1	0	0
	22	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNull(newclassContainingGetProperty().getProperty(""STR""));"	89.73262596130371	0	1	1	0	0
	23	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(newJenkinsTest().isSelected());	62.98289394378662	0	1	1	0	0
	24	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNull(focalObject.getProperty(JENKINS_URL));	70.43652582168579	0	1	1	0	0
	25	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNotNull(newJenkins().getProperty(""STR""));"	73.89093518257141	0	1	1	0	0
	26	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	"assertNotNull(getProperty(""STR""));"	71.75899600982666	0	1	1	0	0
	27	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	???;	47.61630296707153	0	1	1	0	0
0	3	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals()`methodinsteadtocomparetheexpectedandactualJsonObjectstrings:);	41.98308205604553	0	1	1	0	0
2	8	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotEquals(expected,actual);	35.67392301559448	0	1	1	0	0
3	4	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotEquals(expected,actual);	36.7093460559845	0	1	1	0	0
4	3	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	36.57899808883667	0	1	1	0	0
0	1	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.getDictatedReason());"	45.67602205276489	0	1	1	0	0
	3	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(CloseFrame.NORMAL,CloseFrame.PROPERTY_CODE.get(frame));	49.36649298667908	0	1	1	0	0
	4	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.getCloseReasonString());"	44.16695713996887	0	1	1	0	0
	8	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.getCloseReason());"	41.641364097595215	0	1	1	0	0
	12	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(true,frame.getCloseCode().equals(CloseFrame.NORMAL));	44.34573984146118	0	1	1	0	0
	15	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertTrue(frame.getCode()==CloseFrame.NORMAL);	45.16663408279419	0	1	1	0	0
	21	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.getAdditionnalData());"	48.91026997566223	0	1	1	0	0
	22	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertNull(frame.getCloseReasonMessage());	41.560585021972656	0	1	1	0	0
	23	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.toString());"	48.538918018341064	0	1	1	0	0
	24	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertEquals(""STR"",frame.getCloseReason());"	41.890676975250244	0	1	1	0	0
2	0	TooTallNate/Java-WebSocket	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	89.31165194511414	0	1	1	0	0
	1	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertEquals(expectedValue,client.removeHeader(""STR""));"	45.4548921585083	0	1	1	0	0
	2	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	37.4627251625061	0	1	1	0	0
	3	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	assertNull()`:);	49.82803201675415	0	1	1	0	0
	4	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	50.55308699607849	0	1	1	0	0
	5	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertEquals(null,client.removeHeader(""STR""));"	54.25348901748657	0	1	1	0	0
	7	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotNull(client.removeHeader(""Cache-Control"")});"	397.83993220329285	0	1	1	0	0
	8	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotNull(client.removeHeader(""STR""));"	58.32145977020264	0	1	1	0	0
	10	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	assertNull(removedHeader);	46.178823947906494	0	1	1	0	0
	11	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	53.24575901031494	0	1	1	0	0
	18	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertFalse(client.getHeaders().containsKey(""STR""));"	44.08017921447754	0	1	1	0	0
	19	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	assertTrue(client.getHeaders().isEmpty());	50.281325817108154	0	1	1	0	0
	20	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertTrue(client.getHeaders().keySet().contains(""STR""));"	47.09596276283264	0	1	1	0	0
	21	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.getHeaders().get(""STR""));"	39.35332798957825	0	1	1	0	0
	22	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	78.54899787902832	0	1	1	0	0
	25	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotEquals(null,client.getHeaders().get(""STR""));"	43.757725954055786	0	1	1	0	0
	27	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	54.002689838409424	0	1	1	0	0
0	0	gvlasov/collections-utils	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(itrPrice,3);	34.528900146484375	0	1	1	0	0
	1	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(focalMethod(stream(emptyList())).count()==expectedCount);	33.444411754608154	0	1	1	0	0
	2	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(Collections.emptyList()));	33.51543378829956	0	1	1	0	0
	3	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(focalMethod(Arrays.asList()).count()>0);	47.41018605232239	0	1	1	0	0
	4	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertAlmostEqual(FOCAL(Arrays.asList(1,2,3)).count(),3,0.0001);	42.734065771102905	0	1	1	0	0
	6	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertTrue(FOCAL(TestUtils.createIterable(""STR"")).count()>0);"	34.87011981010437	0	1	1	0	0
	7	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(variableName.anyMatch(num->num.equals(3)));	37.253865003585815	0	1	1	0	0
	8	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertTrue(StringUtils.join(iterableToStream(TestUtils.createIterable(1,2,3)).collect(Collectors.toList()),""STR"").equals(""STR""));"	33.651772022247314	0	1	1	0	0
	9	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(FOCAL.stream(Collections.emptyList()));	26.630560159683228	0	1	1	0	0
	10	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(FOCAL.stream(Arrays.asList(1,2,3)).toList().isEmpty());	35.383857011795044	0	1	1	0	0
	11	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream);	30.38674306869507	0	1	1	0	0
	12	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(iterableToStream(mockIterable).findFirst().isEmpty());	33.77572321891785	0	1	1	0	0
	13	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(stream.findFirst().isEmpty());	41.05163598060608	0	1	1	0	0
	14	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(newIterable<T>()).count()>0);	35.00708889961243	0	1	1	0	0
	16	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	???;	34.91825604438782	0	1	1	0	0
	17	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	???;	31.736716747283936	0	1	1	0	0
	18	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(outputStream);	34.89448595046997	0	1	1	0	0
	19	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	???;	32.11241388320923	0	1	1	0	0
	20	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(iterableToStream(iterable).collect(Collectors.toList()));	29.441540241241455	0	1	1	0	0
	21	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(0,FOCAL.stream(Collections.emptyList()).count());	35.45520305633545	0	1	1	0	0
	22	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(stream.iterator().hasNext());	33.66199803352356	0	1	1	0	0
	23	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(yourPackage.YourClassName.stream(iterable).findFirst().isPresent());	36.769123792648315	0	1	1	0	0
	24	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(focal(iterable));	28.06779718399048	0	1	1	0	0
	26	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(iterable).findFirst().isPresent());	41.71370816230774	0	1	1	0	0
	27	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(TestUtils.createIterable(1,2,3)).count()>0);	37.65135169029236	0	1	1	0	0
	29	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(expectedList,actualList);	39.22603178024292	0	1	1	0	0
1	0	gvlasov/collections-utils	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(newArrayList<>().iterator()));	37.46239900588989	0	1	1	0	0
	1	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,stream(list.iterator()).count());	41.034213066101074	0	1	1	0	0
	2	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(expectedStream.collect(java.util.stream.Collectors.toList()),stream.collect(java.util.stream.Collectors.toList()));	40.42753267288208	0	1	1	0	0
	3	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL(stream.iterator()).iterator().hasNext());	36.65717697143555	0	1	1	0	0
	4	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(newArrayList<>()).findFirst().isPresent());	47.24511504173279	0	1	1	0	0
	5	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(java.util.List.of().iterator()).anyMatch(element->true));	42.09515905380249	0	1	1	0	0
	6	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(FOCAL.<T>stream(newArrayList<>()).iterator().hasNext());	34.146673917770386	0	1	1	0	0
	8	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(newjava.util.ArrayList<>()).count()==0);	37.05200815200806	0	1	1	0	0
	9	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(FOCAL.stream(newjava.util.ArrayList<>()).anyMatch(element->true));	35.461440086364746	0	1	1	0	0
	10	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(newArrayList<>()).findFirst().isPresent());	51.4875373840332	0	1	1	0	0
	11	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(MainClass_Name_Here.stream(newArrayList<>()).noneMatch(element->true));	31.518311262130737	0	1	1	0	0
	12	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,STREAM_METHOD_HERE(list.iterator()).count());	34.50706887245178	0	1	1	0	0
	13	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	???;	35.37867283821106	0	1	1	0	0
	14	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream.findAny().isPresent());	650.3886771202087	0	1	1	0	0
	15	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL(newIterator<T>()).iterator().hasNext());	34.80280303955078	0	1	1	0	0
	16	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals()`statementregardingtheexpectedlistorcountisnotappropriate.);	57.53016996383667	0	1	1	0	0
	19	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,stream(list.iterator()).count());	32.96812105178833	0	1	1	0	0
	20	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(myList.iterator()).anyMatch(element->true));	34.82646679878235	0	1	1	0	0
	21	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(lang.mod.zero.setup.ConvertIterableanToStream.stream(iterator).findFirst().isPresent());	37.093974113464355	0	1	1	0	0
	25	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(FOCAL.stream(iterator));	39.48408794403076	0	1	1	0	0
	26	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertNotNull(FocalClass.stream(Arrays.asList(""STR"").iterator()));"	34.1453058719635	0	1	1	0	0
	27	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator,Spliterator.ORDERED),false).collect(Collectors.toList()).containsAll(expectedList));	41.193058252334595	0	1	1	0	0
	28	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(expectedList,resultList);	52.78786587715149	0	1	1	0	0
	29	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(iterator).anyMatch(element->element.equals(expectedElement)));	42.251275062561035	0	1	1	0	0
0	0	OpenLiberty/ci.common	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertEquals(java.util.Collections.singletonList(""STR""),result);"	282.71353101730347	0	1	1	0	0
	1	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertEquals(Collections.singletonList(""STR""),result);"	39.973315715789795	0	1	1	0	0
	6	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	35.229899644851685	0	1	1	0	0
	13	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotSame(newArrayList(),result);	36.8297438621521	0	1	1	0	0
	15	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertEquals(java.util.Collections.singletonList(""STR""),result);"	38.7777681350708	0	1	1	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(3,tokens.size());	442.69770860671997	0	1	1	0	0
	2	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokenList.isEmpty());	315.3705279827118	0	1	1	0	0
	5	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	214.64805388450623	0	1	1	0	0
	6	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(updatedTokens.isEmpty());	226.89810276031494	0	1	1	0	0
	8	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(expectedSize,tokens.length());	213.553218126297	0	1	1	0	0
	9	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	225.02658367156982	0	1	1	0	0
	10	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	178.6461741924286	0	1	1	0	0
	12	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	???;	212.5639259815216	0	1	1	0	0
0	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertTrue(getValueOfClassUnderTestForKey(""STR"").isShutdown());"	73.80298495292664	0	1	1	0	0
	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertFalse(isClassUnderTestProperty(""STR"")&&getValueOfClassUnderTestProperty(""STR"").shutdownCalled());"	126.22703504562378	0	1	1	0	0
	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	113.17396211624146	0	1	1	0	0
	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(this.reconnectManager);	65.04621529579163	0	1	1	0	0
	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertEquals()`methoddirectly.);	56.78412103652954	0	1	1	0	0
	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(connectionMonitor);	62.804344177246094	0	1	1	0	0
	10	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(userProcessor.isRegistered());	73.53071689605713	0	1	1	0	0
	15	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull()`method.Wecanaddanif-elsestatementtohandlethis.);	59.702340841293335	0	1	1	0	0
	18	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(actual);	52.21543502807617	0	1	1	0	0
	26	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(reconnectManager);	65.84285593032837	0	1	1	0	0
0	0	rhwayfun/spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotNull(getProducer());	140.62487769126892	0	1	1	0	0
	1	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	???;	139.50801301002502	0	1	1	0	0
	10	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(condition);	16.857749223709106	0	1	1	0	0
	11	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotNull(getProducer());	32.53092408180237	0	1	1	0	0
