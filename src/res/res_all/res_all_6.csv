TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	redraiment/jactiverecord	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",me.zzp.util.Seq.joinAsText(testList,""STR""));"	68.07588219642639	0	0
/	1	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(seqJoin(testList,""STR"").contains(""STR""));"	73.65522789955139	0	0
/	2	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotNull(String.join(""STR"",testList));"	70.09426093101501	0	0
/	3	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotEquals(""STR"",me.zzp.util.Seq.join(testList,""STR"").toString());"	63.490371227264404	0	0
/	4	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(!testList.stream().map(obj->obj.toString()).collect(Collectors.joining(""STR"")).isEmpty());"	57.731842041015625	0	0
/	5	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(testList.contains(EXPECTED_VALUE)&&join.equals(""STR""));"	49.84647297859192	0	0
/	8	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotEquals(EXPECTED_VALUE,joinList(testList,""STR""));"	72.31178188323975	0	0
/	9	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(seqJoin(testList,""STR"").startsWith(""STR""));"	28.55866813659668	0	0
/	10	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertFalse(newTestClass().testList.isEmpty());	39.96946096420288	0	0
/	11	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertEquals(EXPECTED_SIZE,testList.size());	64.4875898361206	0	0
/	12	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotSame(""STR"",seq.join(testList,""STR""));"	74.51556611061096	0	0
/	13	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertTrue(testList.contains(EXPECTED_VALUE));	47.72061634063721	0	0
/	15	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertEquals(EXPECTED_ARRAY',testList.toArray());	34.0275661945343	0	0
/	16	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertNotSame(EXPECTED_VALUE,joinList(testList,delimiter));	53.58495497703552	0	0
/	17	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertTrue(expectedJoin);	72.91961979866028	0	0
/	19	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertArrayEquals(expectedArray,testList.toArray());	46.49629807472229	0	0
/	26	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertNotEquals(expectedValue,actualValue);	72.993577003479	0	0
/	27	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertTrue(testList.contains(expectedValue));	69.06173300743103	0	0
/	28	//	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	assertSame(expectedObject,actualObject);	27.72459888458252	0	0
1	0	redraiment/jactiverecord	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.select().from(""STR"").where(""STR"").toString().toLowerCase().contains(""STR""));"	39.94798016548157	0	0
/	5	//	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.select().from(""STR"").where(""STR"").toString().trim());"	30.773951292037964	0	0
/	13	//	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.select().from(""STR"").where(""STR"").toString().contains(""STR""));"	32.34122371673584	0	0
/	16	//	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertEquals(sql.getClass(),me.zzp.ar.sql.SqlBuilder.class);	34.4819610118866	0	0
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertEquals(expected,actual);	105.81673765182495	0	0
/	3	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNotEquals(expected,actual);	105.02033996582031	0	0
/	4	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.select().from(""STR"").orderBy(""STR"").size()>0);"	106.05497074127197	0	0
/	5	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(expectedSize,sql.selectAllFrom(""STR"").orderBy(""STR"").getResult().size());"	93.28695511817932	0	0
/	10	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.select().from(""STR"").hasRows());"	103.08561205863953	0	0
/	11	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(expectedArray,sql.select().from(""STR"").orderBy(""STR""));"	99.89375424385071	0	0
/	12	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertTrue(expectedObject.equals(actualObject));	106.20379614830017	0	0
/	18	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.select().from(""STR"").orderBy(""STR"").getResponse().toString().contains(""STR""));"	104.55744004249573	0	0
/	19	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNotSame(expectedValue,actualValue);	97.596834897995	0	0
/	25	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertArrayEquals(expectedArray,sqlBuilder.actualArray());	108.00817394256592	0	0
/	28	//	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	???;	30.391255140304565	0	0
/	8	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expectedValue,actualValue);	699.1074533462524	0	0
/	9	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(result);	680.8600809574127	0	0
/	10	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(result);	229.1146330833435	0	0
/	12	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotEquals(expectedValue,actualValue);	473.1728000640869	0	0
/	13	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expectedValue,actualValue);	701.635680437088	0	0
/	16	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotSame(expectedObject,actualObject);	700.2122349739075	0	0
/	25	//	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNull(objectBuf.toString());	480.6247630119324	0	0
4	0	jcodec/jcodec	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(expectedBytes,YourClassName.ebmlEncode(input));	420.49247884750366	0	0
/	1	//	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(EbmlUtil.ebmlEncode(file));	420.11896777153015	0	0
