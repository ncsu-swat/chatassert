TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	5	//	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(expectedExtension,draft_6455.getExtension());	296.39997696876526	0	0
1	0	TooTallNate/Java-WebSocket	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(FOCAL.createWebSocket(newCustomWebSocketAdapter(),newDraft_6455()));	496.4131410121918	0	0
/	1	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(newDefaultSSLWebSocketServerFactory().createWebSocket(webSocketAdapter,newDraft_6455()));	143.60828495025635	0	0
/	8	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertTrue(webSocketImplinstanceofMyWebSocketImpl);	378.4810039997101	0	0
/	16	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketAdapterinstanceofCustomWebSocketAdapter);	377.3331518173218	0	0
/	19	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotEquals(WebSocketImpl.class,webSocketImpl.getClass());	29.300379991531372	0	0
/	28	//	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull(webSocketImpl);	assertTrue(webSocketImplinstanceofFOCAL);	145.23064184188843	0	0
2	0	redraiment/jactiverecord	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",FOCAL(Collections.emptyList(),""STR""));"	32.845585107803345	0	0
/	1	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",FOCAL.join(testList,null));"	39.49119520187378	0	0
/	3	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(join(testList,""STR"").startsWith(""STR""));"	55.40827298164368	0	0
/	4	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertEquals(expected,FOCAL.join(list,delimiter));	54.24486994743347	0	0
/	5	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	???;	55.727702140808105	0	0
/	7	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	???;	41.57184910774231	0	0
/	8	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",result);"	40.42946100234985	0	0
/	9	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertEquals(expectedValue,result);	41.15583801269531	0	0
/	10	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertEquals(expected,result);	42.744428873062134	0	0
/	13	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",FOCAL.join(list,delimiter));"	60.615854024887085	0	0
/	14	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",FOCAL.join(list,delimiter));"	69.68668389320374	0	0
/	15	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(""STR"",FOCAL.join(null,delimiter));"	55.84444522857666	0	0
/	16	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(""STR"",FOCAL.join(list,delimiter));"	46.79279923439026	0	0
/	17	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertTrue(SeqTest.join(list,delimiter).contains(element1));	47.84425091743469	0	0
/	20	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertNotNull(SeqUtil.join(list,delimiter));	48.3901891708374	0	0
/	22	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	???;	49.97956395149231	0	0
/	23	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",FOCAL.join(someList,""STR""));"	64.21914005279541	0	0
/	24	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(SeqTest.join(someList,""STR"").isEmpty());"	46.83206582069397	0	0
/	25	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertEquals(expectedList.toString(),FOCAL.join(Arrays.asList(inputlist),delimiter));	47.61993193626404	0	0
/	26	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	???;	41.166417837142944	0	0
/	27	//	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(FOCAL+""(null,\""delimiter\"").isEmpty());"	39.72145938873291	0	0
3	0	adlnet/jxapi	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	22.483731985092163	0	0
/	2	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(Double.valueOf(expected),Double.valueOf(actual));	22.078450918197632	0	0
/	3	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	23.214778184890747	0	0
/	5	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	50.08300590515137	0	0
/	9	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	22.811434984207153	0	0
/	10	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual,delta);	78.22349786758423	0	0
/	20	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual,delta);	46.81166887283325	0	0
/	24	//	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	"assertArrayEquals(...)`.Tryreplacingtheplaceholder<AssertPlaceHolder>withtheupdatedassertstatementshownbelow:

```java
assertEquals(expected,actual,delta_tolerance);"	42.905925989151	0	0
/	3	//	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual);	21.661893844604492	0	0
7	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",FOCAL.normalize(""STR"").toString());"	852.7383008003235	0	0
/	1	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(OpenKoreanTextProcessor.normalize(newStringBuilder(""STR"").toString()),FOCAL.normalize(newStringBuilder(""STR"").toString()));"	816.1683919429779	0	0
/	2	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",focalNormalizedName.toString());"	1034.7796080112457	0	0
/	3	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",normalize(text).toString());"	654.2179200649261	0	0
/	4	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",normalizedText.toString());"	658.0789380073547	0	0
/	5	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(FOCAL.normalize(""STR""));"	954.1641600131989	0	0
/	6	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertTrue(FOCAL.normalize(""STR"").toString().length()>0);"	625.6012148857117	0	0
/	7	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(FOCAL.normalize(""STR""));"	800.7294631004333	0	0
/	9	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	assertTrue(KoreanToken-testMention());	620.342698097229	0	0
/	10	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotEquals(""STR"",FOCAL.normalize((CharSequence)""STR"").toString());"	629.2646718025208	0	0
/	11	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(OpenKoreanProcessorJavaTest.normalize(""STR""),FOCAL.normalize(""STR""));"	802.2930378913879	0	0
/	12	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(FOCAL.normalize((CharSequence)""STR""));"	263.69840693473816	0	0
/	14	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	???;	602.5022280216217	0	0
/	15	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotEquals(""STR"",FOCAL.normalize(""STR"").toString().trim());"	638.5646469593048	0	0
/	16	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	assertTrue(FOCAL.normalize(text).toString().contains(expectedSubstring));	453.0910577774048	0	0
/	23	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertTrue(FOCAL.normalize(CharBuffer.wrap(""STR"")).toString().startsWith(""STR""));"	561.6750481128693	0	0
/	28	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotEquals(""STR"",FOCAL.normalize(""STR""));"	642.3924911022186	0	0
/	29	//	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",FOCAL.normalize(""STR"").toString());"	548.5394787788391	0	0
8	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(false,tokens.toList().get(0).isUnknown());	715.1681191921234	0	0
/	1	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.toList().get(0).isUnknown());	657.4104261398315	0	0
/	3	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(OpenKoreanTextProcessorJava.tokenize(text).get(0).isUnknownTokenType(KoreanToken.Result.KoreanToken));	527.4437129497528	0	0
/	4	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",tokens.toList().get(0).getSurface());"	518.4124901294708	0	0
/	9	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",tokenList.stream().map(KoreanTokenizer.KoreanToken::getText).collect(Collectors.joining()));"	538.215882062912	0	0
/	10	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.stream().anyMatch(KoreanToken::isUnknown));	844.7704319953918	0	0
/	14	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",tokens.iterator().next().getText());"	804.893826007843	0	0
/	15	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertNotEquals(""STR"",tokens.toList().get(0).getSurface());"	476.13741278648376	0	0
/	16	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertTrue(tokens.obtain(0).getSurface().startsWith(""STR""));"	800.5595948696136	0	0
/	17	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertTrue(tokensJava.stream().anyMatch(token->token.getSurface().contains(""STR"")));"	760.2808041572571	0	0
/	18	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertTrue(tokens.stream().anyMatch(token->token.getSurface().equals(""STR"")));"	812.5766978263855	0	0
/	19	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertTrue(tokenList.stream().anyMatch(token->token.getSurface().equals(""STR"")));"	733.551833152771	0	0
/	20	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(Seq.seq(tokens).stream().anyMatch(token->token.getSurface().isEmpty()));	799.6979949474335	0	0
/	24	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.stream().anyMatch(KoreanTokenizer.KoreanToken::isUnknown));	328.4673910140991	0	0
/	25	//	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.stream().anyMatch(token->token.isUnknown()));	701.3370718955994	0	0
/	5	//	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertArrayEquals(a.getPuzzle()[i],b.getPuzzle()[i]);	23.142518043518066	0	0
/	3	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	???;	125.61392283439636	0	0
/	5	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(objectVariableName);	327.53919315338135	0	0
/	6	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(expectedValue,actualValue);	217.53574395179749	0	0
/	21	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(YourTestClass.class,testContainer.getTestInstance().getClass());	32.84770107269287	0	0
/	27	//	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.hasExecutionCompleted());	318.96535205841064	0	0
/	8	//	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertEquals(""STR"",((TestCase)registry.getTest(""STR"")).getName());"	289.59377694129944	0	0
/	1	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(true,CloudProviderUtils.isLocal(""STR""));"	29.534024953842163	0	0
/	19	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(true,JavaClass.isLocal(""STR""));"	124.4443142414093	0	0
/	20	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(FOCAL.isLocal(""STR""));"	142.31638383865356	0	0
/	21	//	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	145.4978039264679	0	0
15	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(object,""STR"",""STR""));"	372.21336793899536	0	0
/	5	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(expectedValue,bind0(this,""STR"",""STR""));"	382.7445418834686	0	0
/	8	//	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(this,""STR"",""STR""));"	245.07751178741455	0	0
/	1	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(FOCAL(bind_Float));	380.7483069896698	0	0
/	2	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR"",fieldValue));"	143.57002806663513	0	0
/	4	//	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(someObject,""STR"",""STR""));"	355.42530369758606	0	0
/	3	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	"assertEquals(""STR"",workerProcessManager.getServer().getSettings().getStrategy());"	311.20038890838623	0	0
/	9	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(workerProcess1.getLastSeen(),firstLastSeen);	299.8532409667969	0	0
/	10	//	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(workerProcess1,workerProcessManager.get(workerAddress1));	297.4811987876892	0	0
18	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	assertEquals(defaultValue,properties.get(name));	280.4582259654999	0	0
/	1	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(defaultValue,focalObject.get(""STR"",""STR""));"	293.88532614707947	0	0
/	2	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	185.62413692474365	0	0
/	5	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotEquals(""STR"",focalInstance.get(""STR"",""STR""));"	107.01699900627136	0	0
/	10	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertTrue(simulatorProperties.get(""STR"",""STR"")!=simulatorProperties.get(""STR"",""STR""));"	38.563693046569824	0	0
/	23	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotEquals(""STR"",focal.get(""STR"",""STR""));"	191.86435198783875	0	0
/	25	//	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focal.get(""STR"",""STR""));"	245.97458004951477	0	0
19	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR""+YOUR_AGENT_INDEX_VARIABLE,focalObj.toString());"	165.8258352279663	0	0
/	2	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR""+agentIndex,focalObj.toString());"	197.60021805763245	0	0
/	3	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR""+focalObj.getAgentIndex(),focalObj.toString().substring(0,6));"	141.39295721054077	0	0
/	6	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(result.startsWith(""STR""+addr.getAgentIndex()));"	172.1226212978363	0	0
/	7	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(focalObj.toString().contains(""STR""+agentIndex));"	194.43793416023254	0	0
/	8	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertNotEquals(""STR"",focalObj.toString());"	199.7789318561554	0	0
/	9	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(focalObj.toString().matches(""STR""));"	145.1722218990326	0	0
/	10	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(newSimulatorAddress().toString().equals(""STR""));"	148.10560393333435	0	0
/	11	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(newYourTableName().newFocalClassName().toString().startsWith(""STR"")||newYourTableName().newFocalClassName().toString().startsWith(""STR"")||newYourTableName().newFocalClassName().toString().startsWith(""STR""));"	114.51825881004333	0	0
/	12	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	???;	171.22359490394592	0	0
/	14	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertNotNull(obj.toString());	127.0816719532013	0	0
/	15	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(l.toString().contains(""STR""+agentIndex)||l.toString().contains(""STR""+agentIndex+""STR""+workerIndex),""STR"");"	206.8512728214264	0	0
/	16	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",newclasseUnderTest().given-method());"	121.52067708969116	0	0
/	17	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(FOCAL(null).toString().startsWith(""STR"")||FOCAL(null).toString().startsWith(""STR""));"	106.95572209358215	0	0
/	18	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertNotEquals(""STR"",focalObjUnderTest.toString());"	110.96083903312683	0	0
/	19	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	???;	111.47851276397705	0	0
/	21	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(focalInstance.toString().matches(""STR""),""STR"");"	115.76841497421265	0	0
/	22	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(newClassName().toString().startsWith(""STR"")||newClassName().toString().startsWith(""STR""));"	127.9860348701477	0	0
/	23	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertTrue(simulatorAddress.toString().contains(""STR"")||simulatorAddress.toString().contains(""STR""));"	137.6185610294342	0	0
/	24	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertFalse(newSimulatorAddress().toString().isEmpty());	116.61924505233765	0	0
/	25	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertNotNull(focalObj.toString());	113.3072817325592	0	0
/	26	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertNotEquals(""STR"",obj.toString());"	108.92916464805603	0	0
/	27	//	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",this.toString());"	53.68055605888367	0	0
/	6	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(OTestProfiler.getInstance().isRecording());	2604.7558410167694	0	0
/	11	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(Integer.valueOf(expectedSize),Integer.valueOf(qResult.size()));	1843.0177359580994	0	0
/	16	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(qResult.contains(expectedDocument));	927.3050889968872	0	0
/	17	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	"assertTrue(qResult.stream().anyMatch(doc->doc.getRecord().getProperty(""STR"").equals(expectedName)));"	1823.103796005249	0	0
/	19	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	"assertEquals(expectedCount,qResult.stream().filter(doc->((ODocument)doc.getRecord().getProperty(""STR"")).properties().containsKey(paramValue)).count());"	2621.464674949646	0	0
/	20	//	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	"assertTrue(qResult.stream().allMatch(doc->((ODocument)doc.getProperty(""STR"")).fieldNames().length<=expectedSize));"	1763.6337730884552	0	0
23	0	orientechnologies/orientdb	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(!manager.getNewRecords().isEmpty());	143.58695721626282	0	0
/	1	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	137.78278803825378	0	0
/	3	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNull(manager.getNewRecords());	107.51539587974548	0	0
/	4	//	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(0,manager.getNewRecords().size());	139.83431768417358	0	0
24	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(result.field(""STR""));"	603.7189891338348	0	0
/	1	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(result.field(""STR""));"	592.8953850269318	0	0
/	2	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	???;	35.07555294036865	0	0
/	3	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertEquals(expectedValue,result.<FieldValueRetrieverReference>field(""STR""));"	594.3339071273804	0	0
/	6	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	???;	206.03776812553406	0	0
/	11	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertEquals(expectedValue,obj.field(""STR""));"	403.02457904815674	0	0
/	13	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertNotNull(value);	462.704824924469	0	0
/	17	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(doc.field(""STR""));"	224.090234041214	0	0
/	18	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(doc.field(""STR""));"	586.0448999404907	0	0
/	19	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	237.94115614891052	0	0
/	20	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(db.getMetadata().getSchema().getClass(""STR""));"	255.69273591041565	0	0
/	24	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(result.field(""STR""));"	220.94063210487366	0	0
/	26	//	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	???;	32.641721963882446	0	0
25	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	???;	92.60560894012451	0	0
/	9	//	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	???;	471.0166630744934	0	0
26	1	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotNull(result);	1060.1601297855377	0	0
/	8	//	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotNull(result);	869.6607339382172	0	0
27	0	orientechnologies/orientdb	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(expected,actual,delta);	68.66327404975891	0	0
/	6	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(expectedSize,res.size());	352.5740497112274	0	0
/	12	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(expectedDateFormatValue,actualDateFormatValue);	440.28064799308777	0	0
/	14	//	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(res.contains(expectedElement));	171.02164387702942	0	0
31	0	rockagen/commons-lib	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",FocalClass.toDBC(""STR""));"	117.00857377052307	0	0
/	1	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(FocalClass.toDBC(""STR""),""STR"");"	89.65035605430603	0	0
/	2	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotEquals(""STR"",FocalClass.toDBC(""STR""));"	91.7405469417572	0	0
/	3	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(className.toDBC(""STR"").isEmpty());"	96.4167890548706	0	0
/	4	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotNull(FocalClass.toDBC(""STR""));"	66.34323406219482	0	0
/	5	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertFalse(Focal.toDBC(""STR"").isEmpty());"	80.14854192733765	0	0
/	6	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotEquals(""STR"",MainClass.toDBC(""STR""));"	93.69553589820862	0	0
/	11	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR""));"	20.583269834518433	0	0
/	14	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotEquals(""STR"",com.rockagen.commons.util.CommUtil.toDBC(""STR"").length());"	23.45424199104309	0	0
/	15	//	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(""STR"".equals(com.rockagen.commons.util.CommUtil.toDBC(""STR"").trim()));"	25.596632719039917	0	0
/	12	//	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertSame(pool,cm.getPool(poolKey));	613.8927869796753	0	0
33	0	sofastack/sofa-bolt	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	"assertEquals(""STR"",System.getProperty(Configs.CONN_MONITOR_SWITCH));"	35.13103914260864	0	0
/	1	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(Boolean.parseBoolean(System.getProperty(Configs.CONN_MONITOR_SWITCH)));	20.871100902557373	0	0
/	2	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(newYourClassName().isConnectionMonitorSwitchOn());	50.47899794578552	0	0
/	4	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,Boolean.parseBoolean(System.getProperty(Configs.CONN_MONITOR_SWITCH)));	36.753687143325806	0	0
/	9	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(Boolean.valueOf(System.getProperty(Configs.CONN_MONITOR_SWITCH)));	30.79110026359558	0	0
/	10	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(System.getProperty(Configs.CONN_MONITOR_SWITCH));	75.4379231929779	0	0
/	12	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(Boolean.valueOf(System.getProperty(Configs.CONN_MONITOR_SWITCH)));	35.205185890197754	0	0
/	13	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	32.11406111717224	0	0
/	14	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	34.728431940078735	0	0
/	15	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(expected,isConnectionMonitorSwitchOn());	26.303733110427856	0	0
/	16	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	21.754462003707886	0	0
/	17	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn()||client2.isConnectionMonitorSwitchOn());	35.26701903343201	0	0
/	18	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	30.454283237457275	0	0
/	20	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(M',client1.isConnectionMonitorSwitchOn(),client2.isConnectionMonitorSwitchOn());	34.28301382064819	0	0
/	21	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1.isConnectionMonitorSwitchOn(),client2.isConnectionMonitorSwitchOn());	33.643348932266235	0	0
/	22	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn()||client2.isConnectionMonitorSwitchOn());	31.51300597190857	0	0
/	23	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1.isConnectionMonitorSwitchOn(),client2.isConnectionMonitorSwitchOn());	34.7378408908844	0	0
/	25	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	"assertNotEquals(""STR"",System.getProperty(Configs.CONN_MONITOR_SWITCH));"	31.83062720298767	0	0
/	27	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorExceptionHandlerDisableDisabled()||client2.isConnectionMonitorExceptionHandlerDisableDisabled());	36.353999853134155	0	0
/	28	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,RpcConnectionManager.getInstance().isConnectionMonitorSwitchOn());	32.94994306564331	0	0
/	29	//	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(Client.isConnectionMonitorSwitchOn());	28.12789511680603	0	0
35	0	jcodec/jcodec	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,SeekUtils.estimeteSeekSize(idLength,offsetSize));	1484.852473974228	0	0
/	1	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	"assertTrue(""STR""+expectedValue+""STR""+actualValue,actualValue==expectedValue);"	1177.6016159057617	0	0
/	3	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(newArrayList());	1157.1629691123962	0	0
/	4	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,SeekUtils.estimeteSeekSize(idLength,offsetSize));	804.4193060398102	0	0
/	5	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(expectedValue,SeekUtils.estimeteSeekSize(EbmlFixedElements.Video.TrackUID,offsetSizeInBytes));	1170.7443149089813	0	0
/	6	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(36,SeekUtils.estimeteSeekSize(4,8));	975.9734687805176	0	0
/	10	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(objectReference);	1160.7275998592377	0	0
/	11	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(expectedObject,actualObject);	1147.7172780036926	0	0
/	12	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	1170.6227488517761	0	0
/	13	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(actualValue);	1162.4605419635773	0	0
/	15	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(expectedValue.size(),actualValue.size());	1166.7415249347687	0	0
/	16	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(actualValue);	781.7143759727478	0	0
/	17	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(condition);	785.270632982254	0	0
/	28	//	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(expectedValue,actualValue);	789.4131078720093	0	0
36	0	jcodec/jcodec	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	224.09358406066895	0	0
/	1	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	71.2754762172699	0	0
/	2	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertEquals(""STR"",newString(res));"	632.1721558570862	0	0
/	3	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(actualString.contains(""STR""));"	645.5222520828247	0	0
/	7	//	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	70.43414306640625	0	0
/	1	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(expectedSize,profiles.size());	274.28727197647095	0	0
/	5	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(expectedProfileCount,profiles.size());	316.6881458759308	0	0
/	9	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotSame(expectedList,profiles);	122.17138481140137	0	0
/	11	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.contains(expectedProfile));	222.24424600601196	0	0
/	12	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	"assertTrue(newjava.io.File(""STR"").exists());"	310.9285490512848	0	0
/	26	//	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(expectedMinSize,profiles.size());	307.47199010849	0	0
38	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(hasInitContainer(builder,""STR""));"	23.284800052642822	0	0
/	3	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	27.605255842208862	0	0
/	11	//	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	115.2445559501648	0	0
/	2	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(tag1Date.compareTo(tag2Date)>0?oldTag:latestTag,resultedTag);	872.5650391578674	0	0
/	3	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(tag1Date.compareTo(tag2Date)>0?tag1:tag2,resultedTag);	878.8776321411133	0	0
/	4	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)>0&&expected(resultedTag,tag1)||expected(resultedTag,tag2Date,tag1));	858.5741939544678	0	0
/	7	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(tag2,resultedTag);	646.840585231781	0	0
/	8	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(tag1.equals(resultedTag),tag1Date.compareTo(tag2Date)<=0);	546.8482151031494	0	0
/	9	//	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(service.extractDate(tag1).compareTo(service.extractDate(tag2))<=0||service.extractDate(tag1).compareTo(service.extractDate(tag2))>0&&service.newerTag(tag1,tag2)==tag1);	884.883229970932	0	0
