TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
1	2	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertEquals(webSocketAdapter,webSocketServerFactory.createWebSocket(webSocketAdapter,newDraft_6455()).getAdapter());	45.42904329299927	0	1	1	0	0
0	0	redraiment/jactiverecord	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"	56.824788093566895	0	1	1	0	0
	1	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",TestJoinDelimiterNull.Scacola_Version3_results18.list_join_normal_string(Arrays.asList(""STR"",""STR""),""STR""));"	84.43129396438599	0	1	1	0	0
	2	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(FOCAL.join(newArrayList<>(),""STR"").isEmpty());"	37.405843019485474	0	1	1	0	0
	3	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",SeqTest.join(Arrays.asList(""STR"",""STR""),""STR""));"	51.98995900154114	0	1	1	0	0
	4	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(FocalClass.join(Arrays.asList(""STR"",""STR""),""STR"").isEmpty());"	34.750890016555786	0	1	1	0	0
0	0	adlnet/jxapi	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	41.117403984069824	0	1	1	0	0
	1	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	41.542344093322754	0	1	1	0	0
	5	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertThat(actual).isEqualTo(expected);	44.29214000701904	0	1	1	0	0
	6	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	48.59696102142334	0	1	1	0	0
2	5	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual);	35.919243812561035	0	1	1	0	0
	11	/	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(expected.equals(actual));	36.73584723472595	0	1	1	0	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",result.toString());"	264.7418222427368	0	1	1	0	0
	1	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	???;	163.96448469161987	0	1	1	0	0
	2	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(FOCAL(""STR""));"	218.21862602233887	0	1	1	0	0
	3	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(FOCAL.normalize(""STR""));"	211.4709177017212	0	1	1	0	0
	6	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	assertEquals(expected_normalized_text,OpenKoreanTextProcessor.normalize(your_example_text_here).toString().trim());	219.73700499534607	0	1	1	0	0
	12	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotEquals(""STR"",normalize(""STR""));"	319.5015940666199	0	1	1	0	0
	15	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR"").toString());"	222.4283802509308	0	1	1	0	0
	19	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	assertEquals(expected.substring(0,minLength),actual.substring(0,minLength));	220.13688278198242	0	1	1	0	0
	21	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR"").toString().trim());"	224.724702835083	0	1	1	0	0
	22	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR"").toString().trim());"	228.82514905929565	0	1	1	0	0
	23	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	???;	212.7263581752777	0	1	1	0	0
	24	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR""));"	222.42929577827454	0	1	1	0	0
	26	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(expected.toString().trim(),normalize(""STR"").toString().trim());"	114.5083429813385	0	1	1	0	0
	28	/	OpenKoreanProcessorJavaTest	testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertNotNull(normalize(""STR""));"	269.9814257621765	0	1	1	0	0
1	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(false,tokens.apply(0).isUnknown());	165.88620710372925	0	1	1	0	0
	1	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertEquals(false,tokens.get(0).isUnknown());	220.0419430732727	0	1	1	0	0
	3	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.get(0).isUnknown());	266.94573998451233	0	1	1	0	0
	4	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertTrue(tokens.getList().get(0).text.toString().equals(""STR""&&tokens.getList().get(1).isUnknown()));"	162.60947489738464	0	1	1	0	0
	11	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",tokens.first().getText());"	162.80978107452393	0	1	1	0	0
	13	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.get(0).verboseTokenType().getStartOffset().equals(KoreanTokenizer.KoreanToken.Id.Unknown));	215.0402810573578	0	1	1	0	0
	14	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.stream().noneMatch(token->token.isUnknown()));	218.8438217639923	0	1	1	0	0
	15	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertEquals(""STR"",tokens.apply(0).toString());"	286.8644700050354	0	1	1	0	0
0	0	xmlet/XsdParser	IssuesTest	testIssue23	assertTrue(true);	assertThat(schemas,IsCollectionWithSize.hasSize(1));	146.73690605163574	0	1	1	0	0
1	1	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.isEmpty());	99.98812985420227	0	1	1	0	0
	11	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	"assertTrue(schemas.stream().anyMatch(schema->schema.getTargetNamespace().equals(""STR"")));"	50.585341930389404	0	1	1	0	0
0	2	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(!a.equals(b));	47.00974225997925	0	1	1	0	0
1	0	hazelcast/hazelcast-simulator	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertEquals(""STR"",testData.getTestCaseName());"	61.71737813949585	0	1	1	0	0
	1	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	"assertEquals(""STR"",testData.getTestCase().toString());"	55.346765756607056	0	1	1	0	0
	18	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(null,testData.getTestCase().getId());	680.6200540065765	0	1	1	0	0
2	7	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(false,MainClass.isLocal(""STR""));"	55.54654788970947	0	1	1	0	0
	8	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertEquals(false,YourClassName.isLocal(""STR""));"	61.42535614967346	0	1	1	0	0
3	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	63.45445489883423	0	1	1	0	0
	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	104.39890313148499	0	1	1	0	0
	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(FOCAL);	63.16346001625061	0	1	1	0	0
	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(bind0.field);	53.658650159835815	0	1	1	0	0
	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(ClassName.bind0(object,property,value));	49.15948796272278	0	1	1	0	0
	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	71.19269585609436	0	1	1	0	0
	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertThrows(BindException.class,()->YourClassName.bind(""STR"",""STR"",""STR""));"	62.517231941223145	0	1	1	0	0
	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	55.970593214035034	0	1	1	0	0
	12	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	49.18405079841614	0	1	1	0	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	101.70526003837585	0	1	1	0	0
	16	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(SOME_CONDITION);	88.62372708320618	0	1	1	0	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(""STR"",bind0(newObject(),""STR"",""STR""));"	41.92040205001831	0	1	1	0	0
	26	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	44.57844662666321	0	1	1	0	0
	28	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	62.53501510620117	0	1	1	0	0
4	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	169.88023710250854	0	1	1	0	0
	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(!result);	63.42940282821655	0	1	1	0	0
	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(newObject(),""STR"",""STR""));"	49.670904874801636	0	1	1	0	0
	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(object,null,value));	59.612300872802734	0	1	1	0	0
	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(object);	45.370607137680054	0	1	1	0	0
	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(mockObject,""STR"",""STR""));"	50.205617904663086	0	1	1	0	0
	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	???;	51.4303412437439	0	1	1	0	0
	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(null,null,null));	60.05523991584778	0	1	1	0	0
	12	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(dummyObject,""STR"",""STR""));"	57.78753304481506	0	1	1	0	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(!result);	25.5821430683136	0	1	1	0	0
	14	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(null,""STR"",""STR""));"	56.89627003669739	0	1	1	0	0
	15	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(null"",""invalidproperty"",""invalidvalue""));"	60.42209196090698	0	1	1	0	0
	21	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(null,""STR"",value));"	54.90289807319641	0	1	1	0	0
	23	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(""STR"");"	58.23707294464111	0	1	1	0	0
5	0	hazelcast/hazelcast-simulator	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(workerProcess1.getLastSeen()>firstLastSeen);	53.444441080093384	0	1	1	0	0
	1	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen,workerProcess1.getLastSeen());	63.65469002723694	0	1	1	0	0
	2	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals()methodwiththeexpectedandactualvaluesaslongtypes.Here'sthecorrect);	60.72285318374634	0	1	1	0	0
	3	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	???;	63.07047128677368	0	1	1	0	0
	4	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	"assertNotEquals(""STR"",workerProcess1.getLastSeen());"	57.34665489196777	0	1	1	0	0
	12	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(workerProcessManager.get(workerAddress1));	58.591081857681274	0	1	1	0	0
	13	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(workerProcessManager.get(workerAddress2));	59.354002237319946	0	1	1	0	0
	14	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(firstLastSeen,secondLastSeen);	59.29164910316467	0	1	1	0	0
	15	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(firstLastSeen,secondLastSeen);	57.45737600326538	0	1	1	0	0
	16	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(secondLastSeen,workerProcess1.getLastSeen());	56.02470302581787	0	1	1	0	0
	17	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(secondLastSeen,workerProcess1.getLastSeen());	45.32081913948059	0	1	1	0	0
	18	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(firstLastSeen,workerProcess2.getLastSeenLong());	56.89892792701721	0	1	1	0	0
	20	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue()`methodwiththecondition`workerProcess1.getLastSeen()!=secondLastSeen`,convertedtoa`boolean`value.Here'stheupdatedworkerProcess1.getLastSeen()!=secondLastSeen);	60.89496207237244	0	1	1	0	0
	21	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(workerProcess1.getLastSeen(),Long.parseLong(secondLastSeen));	60.549598932266235	0	1	1	0	0
	22	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(firstLastSeen,workerProcess1.getLastSeen());	59.23642182350159	0	1	1	0	0
	24	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(workerProcess1.getLastSeen(),secondLastSeen);	60.84731698036194	0	1	1	0	0
	26	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(firstLastSeen,secondLastSeen);	45.368704080581665	0	1	1	0	0
	28	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(workerProcess1.getLastSeen(),workerProcess2.getLastSeen());	48.51769280433655	0	1	1	0	0
	29	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals()`methodfromthe`Assert`class.Replace`<AssertPlaceHolder>`withthefollowingcode:);	49.78513312339783	0	1	1	0	0
6	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertNotNull(focalObject.get(""STR"",""STR""));"	58.951416015625	0	1	1	0	0
	1	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	60.59641194343567	0	1	1	0	0
	2	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	58.14209008216858	0	1	1	0	0
	3	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	58.11547517776489	0	1	1	0	0
	4	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	assertNotNull(actualResult);	53.11720013618469	0	1	1	0	0
	5	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	57.05123472213745	0	1	1	0	0
	6	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	61.52991604804993	0	1	1	0	0
	7	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	???;	57.34837985038757	0	1	1	0	0
	8	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(focalObject.get(""STR"",""STR""),org.hamcrest.Matchers.equalTo(""STR""));"	57.840076208114624	0	1	1	0	0
	9	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	56.5298388004303	0	1	1	0	0
	10	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	58.41932702064514	0	1	1	0	0
	13	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	assertEquals(expectedResult,actualResult);	56.70002579689026	0	1	1	0	0
	14	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	57.707255840301514	0	1	1	0	0
	18	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(expectedValue,focalObject.get(""STR"",""STR""));"	61.64347195625305	0	1	1	0	0
	19	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(Boolean.parseBoolean(expectedValue),focalObject.get(""STR"",""STR""));"	56.41022610664368	0	1	1	0	0
	25	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	53.851186990737915	0	1	1	0	0
	28	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",focalObject.get(""STR"",""STR""));"	57.83392000198364	0	1	1	0	0
7	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expected,actual);	45.36092281341553	0	1	1	0	0
	1	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedResult,actualResult);	57.9438750743866	0	1	1	0	0
	2	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedResult,actualResult);	47.92968010902405	0	1	1	0	0
	3	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedToStringValue,yourObject.toString());	58.0931830406189	0	1	1	0	0
	4	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertTrue(expectedValue.equals(focal.toString()));	56.80558204650879	0	1	1	0	0
	5	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",yourObject.toString());"	61.827038049697876	0	1	1	0	0
	12	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertNotNull(toString());	58.22711396217346	0	1	1	0	0
	13	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertTrue(yourObject.toString()!=null);	52.89048981666565	0	1	1	0	0
	14	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedString,yourObject.toString());	57.87728977203369	0	1	1	0	0
	15	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedString,yourObject.toString());	71.98186707496643	0	1	1	0	0
	16	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	???;	53.6340389251709	0	1	1	0	0
	17	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertNotEquals(expectedString,yourObject.toString());	44.363786935806274	0	1	1	0	0
	20	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertNotEquals(null,yourObject.toString());	53.14076209068298	0	1	1	0	0
	21	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedString,yourObject.toString());	57.010947942733765	0	1	1	0	0
	23	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedToString,instanceOfFOCAL.toString());	56.81724500656128	0	1	1	0	0
	24	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedResult,focal.toString());	51.61874008178711	0	1	1	0	0
	27	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedString,String.valueOf(actualString));	64.01479005813599	0	1	1	0	0
	29	/	SimulatorAddressTest	testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	assertEquals(expectedString,yourObject.toString());	54.69164276123047	0	1	1	0	0
0	5	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(expectedList,qResult);	113.3225040435791	0	1	1	0	0
	6	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.stream().anyMatch(doc->doc.values().contains(expectedValue)));	113.2659740447998	0	1	1	0	0
	12	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.contains(expectedResult));	77.33660221099854	0	1	1	0	0
1	3	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(53,qResult.size());	188.0750172138214	0	1	1	0	0
	11	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	???;	136.31642317771912	0	1	1	0	0
3	0	orientechnologies/orientdb	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	151.2924931049347	0	1	1	0	0
4	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertEquals(expectedValue,actualValue);	61.30117130279541	0	1	1	0	0
	1	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(FieldName.class.getResource(""STR""));"	67.8682599067688	0	1	1	0	0
	2	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertNotNull(iFieldName);	75.32179880142212	0	1	1	0	0
	3	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertTrue(condition);	27.45125389099121	0	1	1	0	0
	4	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertFalse(condition);	24.271996021270752	0	1	1	0	0
	5	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"assertNotNull(className.field(""STR""));"	71.11206293106079	0	1	1	0	0
	8	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertEquals(expectedValue,actualValue);	40.97571611404419	0	1	1	0	0
	13	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertNotNull(actualValue);	68.78507113456726	0	1	1	0	0
	18	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	???;	42.831159830093384	0	1	1	0	0
	22	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertEquals(actualObject);	62.01933693885803	0	1	1	0	0
	23	/	OMatchStatementExecutionTest	testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	assertNotNull(value);	66.02046418190002	0	1	1	0	0
5	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertArrayEquals(""b"",""c""});"	40.170693159103394	0	1	1	0	0
	1	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertTrue(Arrays.asList(fields).contains(""STR""));"	39.589646100997925	0	1	1	0	0
	2	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	39.01041793823242	0	1	1	0	0
	3	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields`isaplausiblefields);	39.90960717201233	0	1	1	0	0
	4	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotEquals(0,fields.length`isaplausible0);	39.343234062194824	0	1	1	0	0
	5	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length>0`isaplausiblefields.length>0);	39.179545164108276	0	1	1	0	0
	6	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	"assertArrayEquals(newString[]{""a"",""b"",""c""},fields`isaplausiblenewString[]{""a"",""b"",""c""},fields);"	40.00592112541199	0	1	1	0	0
	8	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length<=10);	49.14132881164551	0	1	1	0	0
	9	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotSame(document,fields);	39.3379430770874	0	1	1	0	0
	10	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertFalse(Arrays.asList(fields).isEmpty()`isaplausibleArrays.asList(fields).isEmpty());	39.23761200904846	0	1	1	0	0
7	0	orientechnologies/orientdb	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertEquals(-1.0,Double.parseDouble(res.get(0).field(""STR"").toString()));"	128.94584107398987	0	1	1	0	0
	2	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertNotEquals(-1.0f,Float.parseFloat(res.get(0).field(""STR"").toString()));"	88.20523691177368	0	1	1	0	0
	3	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertEquals(-1.0,Double.parseDouble(res.get(0).field(""STR"").toString()));"	90.97106790542603	0	1	1	0	0
	12	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertEquals(-1.0,(Double)res.get(0).field(""STR""));"	60.77181124687195	0	1	1	0	0
	13	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	"assertEquals(-1.0f,(Float)res.get(0).field(""STR""));"	79.9839038848877	0	1	1	0	0
0	0	amlinv/stat-collection-utils	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog().toString());	166.4838342666626	0	1	1	0	0
	1	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(System.identityHashCode(mockLogger),System.identityHashCode(jolokiaConnection.getLog()));	47.059508085250854	0	1	1	0	0
	12	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog());	46.93862700462341	0	1	1	0	0
1	4	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNul(result`with`result);	38.35203814506531	0	1	1	0	0
	5	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals()`statementaccordingly.Here'sanexample:);	35.58071780204773	0	1	1	0	0
	10	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result!=-1);	28.04304599761963	0	1	1	0	0
	11	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull()`result);	45.46381902694702	0	1	1	0	0
	12	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	44.503340005874634	0	1	1	0	0
	15	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	40.875609159469604	0	1	1	0	0
	17	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result)`with`result)`inyourtestcase.Thiswillresult);	39.2486617565155	0	1	1	0	0
0	0	rockagen/commons-lib	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	???;	42.78309416770935	0	1	1	0	0
	1	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertEquals(expectedOutput,FocalClass.toDBC(actualOutput));	46.340110063552856	0	1	1	0	0
	2	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertAEqualsB(expectedOutput,actualOutput);	46.1772301197052	0	1	1	0	0
	4	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	???;	43.338340759277344	0	1	1	0	0
	5	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertNotNull(actual);	39.028318881988525	0	1	1	0	0
	6	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertfail""));"	36.53755021095276	0	1	1	0	0
	13	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertNotNull(result);	40.072185039520264	0	1	1	0	0
	14	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	???;	33.12470293045044	0	1	1	0	0
	18	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertEquals(expectedOutput,CommUtil.toDBC(input));	55.531840085983276	0	1	1	0	0
	20	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	???;	31.999382972717285	0	1	1	0	0
	21	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",MyClass.toDBC(""STR""));"	36.08698487281799	0	1	1	0	0
	23	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertNotNull(sb.toString());	38.98806595802307	0	1	1	0	0
	24	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertNotEquals(""STR"",CommUtil.TO_BOLD_COLUMNS(""STR""));"	49.16710305213928	0	1	1	0	0
	25	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	assertTrue(result.contains(expected));	41.899738073349	0	1	1	0	0
	26	/	CommUtilTest	testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	???;	39.83853483200073	0	1	1	0	0
0	0	jcodec/jcodec	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,FOCAL(idLength,offsetSizeInBytes));	96.88188624382019	0	1	1	0	0
	1	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedSeekSize,actualSeekSize);	80.6270661354065	0	1	1	0	0
	2	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,10)>0);	89.27629971504211	0	1	1	0	0
	3	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	100.90354108810425	0	1	1	0	0
	4	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedSeekSize,FOCAL.estimeteSeekSize(idLength,offsetSizeInBytes));	73.73672437667847	0	1	1	0	0
	5	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(10,20)>=0);	58.99369788169861	0	1	1	0	0
	8	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,YourClassName.estimeteSeekSize(8,16));	97.20659923553467	0	1	1	0	0
	9	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedSeekSize,result);	95.71727299690247	0	1	1	0	0
	10	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedSeekSize,FOCAL(idLength,offsetSizeInBytes));	89.22557282447815	0	1	1	0	0
	11	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	89.12186002731323	0	1	1	0	0
	12	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,FOCAL(argumentValue1,argumentValue2));	91.49812698364258	0	1	1	0	0
	13	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,SeekHeadFactory.estimeteSeekSize(idLength,offsetSizeInBytes));	100.5993299484253	0	1	1	0	0
	14	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedSeekSize,FOCAL.estimeteSeekSize(idLength,offsetSizeInBytes));	98.29676914215088	0	1	1	0	0
	15	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,actualValue);	79.17451596260071	0	1	1	0	0
	18	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(errors);	89.49049782752991	0	1	1	0	0
	22	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,actualValue);	91.6251151561737	0	1	1	0	0
	23	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(ClassName.estimeteSeekSize(10,20)>=minValue);	94.80006766319275	0	1	1	0	0
	24	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(actualOutput,expectedOutput);	97.9197690486908	0	1	1	0	0
	25	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(result);	90.8602979183197	0	1	1	0	0
	28	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,FOCAL.estimeteSeekSize(idLength,offsetSizeInBytes));	98.41550612449646	0	1	1	0	0
1	1	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(expectedValue,actualValue);	75.21783185005188	0	1	1	0	0
	2	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(byteArrayLength,res.length`:);	85.22551393508911	0	1	1	0	0
	3	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(avcCBox.getIdLength());	93.19782090187073	0	1	1	0	0
	4	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	71.35402917861938	0	1	1	0	0
	5	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	73.66800999641418	0	1	1	0	0
	6	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	86.76372790336609	0	1	1	0	0
	8	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(res,H264Utils.toByteArray(H264Utils.fromNALFile(payload)));	91.68231987953186	0	1	1	0	0
	9	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(expected,res));	91.60491490364075	0	1	1	0	0
	10	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(idLength,res.length);	55.000993967056274	0	1	1	0	0
	11	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(expectedLength,actualByteBuffer.length);	79.18073201179504	0	1	1	0	0
	13	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	91.15406799316406	0	1	1	0	0
	19	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	90.70295286178589	0	1	1	0	0
	20	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(expectedByteArray,res}));	74.76926636695862	0	1	1	0	0
	22	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(expectedResult.getBytes(),res));	54.4253671169281	0	1	1	0	0
	25	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(result);	74.97937488555908	0	1	1	0	0
0	2	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.contains(expectedProfile));	40.267308950424194	0	1	1	0	0
	8	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	???;	39.89921689033508	0	1	1	0	0
	11	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.isEmpty());	70.08394002914429	0	1	1	0	0
	18	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.stream().anyMatch(profile->profile.getName().equals(name)));	142.31032586097717	0	1	1	0	0
1	3	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	47.89089107513428	0	1	1	0	0
	6	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNotNull(handler.getInitContainer(builder.build(),""STR""));"	41.95858407020569	0	1	1	0	0
	7	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(newio.fabric8.kubernetes.api.model.PodTemplateSpecBuilder(templateSpec),""STR""));"	35.07588315010071	0	1	1	0	0
	9	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(hasInitContainer(builder,""STR""));"	44.276548862457275	0	1	1	0	0
	10	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	42.303600788116455	0	1	1	0	0
	14	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	assertEquals(expected,actual);	26.245049953460693	0	1	1	0	0
	22	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	37.886924743652344	0	1	1	0	0
2	6	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)>0||tag1Date.compareTo(tag2Date)==0||tag2Date.compareTo(tag1Date)<0);	68.68689894676208	0	1	1	0	0
0	0	arnohaase/a-foundation	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL(input));"	68.90900301933289	0	1	1	0	0
	1	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCALMethodGoesHere);"	51.922306060791016	0	1	1	0	0
	2	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals(expectedOutput.trim(),result.trim());	65.32299375534058	0	1	1	0	0
	5	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(StringHelper.bytesToHexString(newbyte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF}),""STR"");"	126.29816102981567	0	1	1	0	0
	6	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertNotEquals(""STR"",FOCAL(newbyte[]{}));"	78.07698273658752	0	1	1	0	0
	15	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",com.ajjpj.afoundation.util.StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}));"	64.37597894668579	0	1	1	0	0
0	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertFalse(headers.containsKey(""STR""));"	57.079430103302	0	1	1	0	0
	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertTrue(headers.containsKey(""STR""));"	7.2189040184021	0	1	1	0	0
	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(1,headers.size());	5.724250793457031	0	1	1	0	0
	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotNull(headers);	5.890376806259155	0	1	1	0	0
	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotEquals(0,headers.size());	6.480907201766968	0	1	1	0	0
	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertTrue(headers.isEmpty());	8.755014896392822	0	1	1	0	0
	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotSame(headers,requestTemplate.headers()`isaplausibleheaders,requestTemplate.headers());	6.589282989501953	0	1	1	0	0
	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotEquals(headers,requestTemplate.headers());	7.379582166671753	0	1	1	0	0
	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertSame(headers,requestTemplate.headers()`isaplausibleheaders);	6.562128067016602	0	1	1	0	0
	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertNull(headers.get(""header"")`isaplausibleheaders.get(""header""));"	6.368570804595947	0	1	1	0	0
0	10	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals()`methodinsteadof`)`inthiscase.Here'sthecorrectedexpectedResult,normalizedUrl);	60.20962691307068	0	1	1	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",focalMethodResult);"	48.29681897163391	0	1	1	0	0
	1	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotNull(result);	38.59235692024231	0	1	1	0	0
0	10	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertTrue(newArrayList<>(map.values()).containsAll(java.util.Arrays.asList(7,9,15)));	37.06154417991638	0	1	1	0	0
0	3	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	"assertTrue(formas.stream().anyMatch(wordform->wordform.getLemma().equals(""STR"")));"	53.504966259002686	0	1	1	0	0
	14	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(expected,actual);	47.55586290359497	0	1	1	0	0
	15	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedWordform));	33.84123611450195	0	1	1	0	0
0	3	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNull(config.get(""STR""));"	38.74054312705994	0	1	1	0	0
	4	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNull(config.getAsMap().get(""STR""));"	34.17882800102234	0	1	1	0	0
