TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	nidi3/raml-loader	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(((CachingLoaderInterceptor)newLoader(LoaderInterceptor.dummy())).fetchResource(""STR"",0));"	178.94132280349731	0	0
/	1	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	329.9220218658447	0	0
/	2	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(newLoader(LoaderInterceptor.dummy(fooIntercept(InterceptorCriteria.of(Resource.name.searchIfCompressedFullOrHttp(""STR""),DurationExtension.newCustom()))).fetchResource(""STR"",ALL)));"	464.00525283813477	0	0
/	3	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotEquals(expectedStream,focalObject.fetchResource(""STR"",Long.MAX_VALUE));"	754.1240780353546	0	0
/	4	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(focalObject.fetchResource(""STR"",System.currentTimeMillis()));"	473.1440830230713	0	0
/	5	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(focalObject.fetchResource(""STR"",System.currentTimeMillis()));"	320.0805661678314	0	0
/	7	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(loaderTest.fetchResource(""STR"",System.currentTimeMillis())!=null);"	473.72936606407166	0	0
/	8	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(assertThrows(ResourceNotFoundException.class,()->focalObject.fetchResource(""STR"",System.currentTimeMillis()))!=null);"	453.71921491622925	0	0
/	11	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertFalse(newClassName().fetchResource(""STR"",System.currentTimeMillis())==null);"	795.8240220546722	0	0
/	12	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(focalObject.fetchResource(""STR"",0));"	617.3751418590546	0	0
/	13	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(focalObjectName().fetchResource(""STR"",0));"	761.3045771121979	0	0
/	20	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	182.81521010398865	0	0
/	23	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertNotNull(result);	156.61857104301453	0	0
/	29	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotSame(null,focalObject.fetchResource(""STR"",0));"	472.5815670490265	0	0
1	1	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(result);	490.96690797805786	0	0
/	2	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(url);	499.4368109703064	0	0
/	4	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(condition);	331.72464895248413	0	0
/	6	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(exceptioninstanceofResourceNotFoundException);	498.8964259624481	0	0
/	7	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNull(actualValue);	335.1540858745575	0	0
/	19	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertFalse(expectedCondition);	337.9705150127411	0	0
/	28	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	???;	194.81603026390076	0	0
/	29	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotSame(IllegalArgumentException.class,expectedException.getClass());	498.03930497169495	0	0
/	1	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(expectedValue,actualValue);	234.3335509300232	0	0
/	14	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(actualValue);	345.89669489860535	0	0
3	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.toString());	30.043606758117676	0	0
/	3	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getErrorMessage());	203.29407691955566	0	0
/	4	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	210.86018896102905	0	0
/	9	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(valCheck.test(string1));	208.80899477005005	0	0
/	10	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertFalse(valCheck.test(sample1));	107.95612001419067	0	0
/	12	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getCefString());"	301.6326730251312	0	0
/	13	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	211.8196461200714	0	0
/	15	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	211.08239579200745	0	0
/	19	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals(null,event);	37.90772032737732	0	0
/	20	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(expectedDate,event.getSourceReceivedTime());	204.84609007835388	0	0
/	21	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getSource());	210.9290850162506	0	0
/	22	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	29.631911277770996	0	0
/	23	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event.getErrorMessage());	300.67268919944763	0	0
/	28	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getPropertyName());	206.50177216529846	0	0
/	29	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.isValidEvent());	209.25857615470886	0	0
/	2	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString().replaceAll(""STR"",""STR"").toLowerCase());"	31.563793897628784	0	0
/	3	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().toUpperCase().contains(""STR""));"	37.550901889801025	0	0
/	17	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",sql.toString().replaceAll(""STR"",""STR"").trim());"	31.428935050964355	0	0
/	18	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString().replaceAll(""STR"",""STR""));"	31.954039096832275	0	0
/	19	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toLowerCase().replaceAll(""STR"",""STR""));"	30.35861611366272	0	0
/	1	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	???;	22.594315767288208	0	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(expected,res);	108.90429306030273	0	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceoforg.slf4j.impl.JDK14LoggerAdapter);	193.7830548286438	0	0
7	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	29.420555114746094	0	0
/	6	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	35.62763810157776	0	0
/	19	//	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(Mockito.mock(ObjectQueryPreparer.class).getClass(),poller.getObjectQueryPreparer().getClass());	834.5268149375916	0	0
8	0	NanoHttpd/nanohttpd	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),router.getField(routerNanoHttpd).getPoweredErrorHandler());	1427.9763667583466	0	0
/	1	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(router.getField(routerNanoHttpd).getPoweredNotFoundError().getClass(),NullResponseException.class);	495.9361219406128	0	0
/	2	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(notImplementedHandler,routerNanoHttpd.getNotImplementedHandler());	27.768539905548096	0	0
/	3	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertEquals(""STR"",notImplementedHandler.getClass().getSimpleName());"	504.0370149612427	0	0
/	4	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),router.getNotImplementedHandler());	966.7145998477936	0	0
/	5	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(notImplementedHandler,router.getNotImplementedHandler());	1428.5412590503693	0	0
/	6	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(router.getNotImplementedHandlerClassName().equals(notImplementedHandler.getClass().getName()));	1434.4257290363312	0	0
/	8	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notFoundHandler.getClass(),getNotFoundHandlerFromClass(router.getNotFoundHandler()));	966.555367231369	0	0
/	9	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notFoundHandler.getClass(),router.getNotFoundHandler().getClass());	1431.925686120987	0	0
/	10	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notFoundHandler.getClass(),routerNanoHttpd.getNotFoundHandler().getClass());	1428.585011959076	0	0
/	11	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notFoundHandler.getClass(),router.getNotFoundHandler().getClass());	964.9368069171906	0	0
/	12	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(notFoundHandler.getClass().isAssignableFrom(routerNanoHttpd.getNotFoundHandler().getClass()));	964.2887189388275	0	0
/	14	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertEquals(notFoundHandler,RouterNanoHTTPD.getAppTempFolder(myapp,mycookie,SHA1,varUriRouter,'""trueHS2Ph')""router0ewDe+""/efiZSTFfChXT7PlufXIcniybcCl9QzvbyauRI15IdbMXvxu/y24HlFCp.q.""'=yt);"	1425.1953139305115	0	0
/	16	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(handler.getName().equals(router.getNotImplemented().getName()));	1427.447170972824	0	0
/	17	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(handler==router.getNotImplementedSetter());	1430.1858160495758	0	0
/	18	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler,routerNanoHttpd.getRouter().getNotImplementedHandler());	1425.5820169448853	0	0
/	19	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notImplementedHandler,routerNanoHttpd.getNotImplemented());	1433.8467669487	0	0
/	20	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(routerNanoHttpd.getNotImplementedHandler(),notImplementedHandler.getClass());	1049.089229106903	0	0
/	21	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(router.getNotImplementedHandler().getClass()==GeneralHandler.class);	968.7292268276215	0	0
/	23	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(router.getNotImplementedHandler().getClass()==notImplementedHandler.getClass());	1430.846445798874	0	0
/	24	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),router.getNotImplementedHandler(handler).getClass());	1427.5709221363068	0	0
/	26	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(notImplementedHandler,router.getNotImplemented().getClass());	1433.4419162273407	0	0
/	27	//	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),routerNanoHttpd.getNotImplementedHandler().getClass());	1416.5035729408264	0	0
9	1	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	123.4865870475769	0	0
/	4	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	32.013864040374756	0	0
/	5	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(ResponseStatus.REPLAYED_OTP!=response.getStatus());	120.66578507423401	0	0
/	7	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(YubicoClientUnderTest.YubicoResponseStatus.REPLAYED_OTP,response.getStatus());	111.6358368396759	0	0
/	12	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	122.36432576179504	0	0
/	16	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus()||ResponseStatus.FAILURE,response.getStatus());	113.73674511909485	0	0
/	18	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.VALIDATION_SUCCESS,response.getStatus());	114.28959107398987	0	0
/	19	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==com.yubico.client.v2.ResponseStatus.VALIDATION_SUCCESS||response.getStatus()==com.yubico.client.v2.ResponseStatus.OTP_REPLAYED);	298.4076318740845	0	0
/	21	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.FAILURE,com.yubico.client.v2.ResponseStatus.valueOf(response.getStatus().name()));	296.37807273864746	0	0
10	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR"",underTest.getBuildUrl());"	273.9390301704407	0	0
/	1	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+underTest.props.getProperty(""STR""),underTest.getBuildUrl());"	292.27228021621704	0	0
/	14	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+getProperty(SHIPPABLE_BUILD_ID),focalObject.getBuildUrl());"	289.71795773506165	0	0
/	17	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertTrue(buildUrlinstanceofString);	293.11304688453674	0	0
/	18	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+expectedURLProperty,shipTestObject.getBuildUrl());"	353.9997081756592	0	0
/	19	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+shipTestObject.getProperty(SHIPPABLE_BUILD_ID),((YourClass)shipTestObject).getBuildUrl());"	213.7032709121704	0	0
/	23	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+shippableObject.getProperty((String)SHIPPABLE_PROPERTIES.get(0)),shippableObject.getBuildUrl());"	288.3586070537567	0	0
/	25	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+underTest.getProperty(SHIPPABLE_BUILD_ID),underTest.getBuildUrl());"	286.37386107444763	0	0
/	26	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotNull(underTest.getBuildUrl());	291.07074213027954	0	0
11	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(EXPECTED_VALUE,p.getBlankIndex());	194.1456241607666	0	0
/	11	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	"assertNotEquals(-1,p.getBlankIndex(),""STR"");"	33.28371214866638	0	0
/	2	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",String.valueOf(CommUtil.repeatChar('B',3)));"	38.76688289642334	0	0
/	7	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotEquals(ProcessUtil.repeatChar('F',3),ProcessUtil.repeatChar('G',3));	77.18995809555054	0	0
/	10	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotEquals(exit.repeatChar('u',5).charAt(0),exit.repeatChar('Y',5).charAt(0));	79.87962579727173	0	0
