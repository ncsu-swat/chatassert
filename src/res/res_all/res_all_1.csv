TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	5	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(expected,query.execute(list));	76.8184266090393	0	1	1	0	0
1	6	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(expectedCount,registry.agentCount());	71.06983685493469	0	1	1	0	0
0	5	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertEquals(expectedResult,actualResult);	35.59359788894653	0	1	1	0	0
	6	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(actualResult);	27.233973741531372	0	1	1	0	0
	7	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(actualResult);	28.675306797027588	0	1	1	0	0
	8	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(moneyToStrRU.convert(10.0));	26.96784520149231	0	1	1	0	0
0	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize,cm.count(poolKey));	85.0767970085144	0	1	1	0	0
	1	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize,cm.count(poolKey));	45.0164110660553	0	1	1	0	0
	2	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize,cm.count(poolKey));	86.32233166694641	0	1	1	0	0
	6	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getConnection(cln.KEY_POOL_TAGS,poolKey));	42.855870485305786	0	1	1	0	0
	11	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	???;	69.61040019989014	0	1	1	0	0
1	1	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertEquals(expectedSize,this.count(""STR""));"	63.58729004859924	0	1	1	0	0
	2	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertTrue(count(""STR"")>0);"	35.80156087875366	0	1	1	0	0
	3	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,count(poolKey));	59.82835268974304	0	1	1	0	0
	4	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertNotEquals(0,focalInstance.count(""STR""));"	62.25903034210205	0	1	1	0	0
	5	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertEquals()`methodfromthe`Assert`classtocomparetheactualvaluereturnedbythe`count()`methodwithanexpectedvalue.HereistheupdatedexpectedValue,count(""poolKey""));"	70.651113986969	0	1	1	0	0
	6	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertTrue(focalInstance.count(""STR"")>=0);"	54.593133211135864	0	1	1	0	0
	8	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertFalse(focalInstance.count(""STR"")<0);"	66.54641556739807	0	1	1	0	0
	9	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(focalInstance.cm.getPool(poolKey));	61.781232833862305	0	1	1	0	0
	10	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(pool);	46.798375606536865	0	1	1	0	0
	13	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertNotEquals(0,focalInstance.count(""STR""));"	62.71318507194519	0	1	1	0	0
	14	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertTrue(fionalInstance.count(""STR"")!=0);"	49.98741436004639	0	1	1	0	0
	19	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.activeConnections()>0);	60.70028018951416	0	1	1	0	0
	23	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,count(poolKey));	73.19005990028381	0	1	1	0	0
	25	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	225.9354031085968	0	1	1	0	0
0	0	arnohaase/a-foundation	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(2,result.size());	48.462347745895386	0	1	1	0	0
	1	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(groups.containsKey(newAEqualsWrapper<>(equality,1)));	53.55322456359863	0	1	1	0	0
	2	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	52.921934366226196	0	1	1	0	0
	4	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	42.697805881500244	0	1	1	0	0
	7	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,result.size());	58.658543825149536	0	1	1	0	0
	15	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.isEmpty());	59.14226484298706	0	1	1	0	0
	16	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(groupBy(coll,f,keyEquality).containsKey(newAEqualsWrapper<>(keyEquality,((AFunction1<?superT,?extendsX,E>)f).apply(o))));	49.11111092567444	0	1	1	0	0
	17	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	56.709553480148315	0	1	1	0	0
	18	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.isEmpty());	40.53518605232239	0	1	1	0	0
	20	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertThrows(Exception.class,()->{
});"	60.24561309814453	0	1	1	0	0
	23	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(expectedSize,result.size());	41.270612955093384	0	1	1	0	0
	24	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	64.74332284927368	0	1	1	0	0
	26	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(groupByResult);	58.290998220443726	0	1	1	0	0
1	0	arnohaase/a-foundation	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	48.7316415309906	1	0	1	0	0
	1	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertTrue(graph.hasVertex(""STR""));"	46.019041538238525	0	1	1	0	0
	2	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(0,graph.maxNonPrimaryAlt(groupsByName,delimiter,storeOrd.length));	34.33666372299194	0	1	1	0	0
	3	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	53.19039249420166	0	1	1	0	0
	4	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	44.52596163749695	0	1	1	0	0
	5	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(groupByResults.hasCycles());	47.1018853187561	0	1	1	0	0
	8	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	49.520718574523926	0	1	1	0	0
	15	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.minimalCycles().isEmpty());	43.086875438690186	0	1	1	0	0
	17	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotNull(graph);	60.1311674118042	0	1	1	0	0
	19	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.isEmpty());	23.292527675628662	0	1	1	0	0
	20	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotNull(graph);	55.726717948913574	0	1	1	0	0
	21	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotNull(graph);	53.587273597717285	0	1	1	0	0
	22	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertTrue(groupByResult.containsEdge(""STR"",""STR""));"	34.204243898391724	0	1	1	0	0
	24	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	55.54213833808899	1	0	1	0	0
	26	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(3,result.size());	46.61701250076294	0	1	1	0	0
	28	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotNull(graph);	39.933308601379395	0	1	1	0	0
	29	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	???;	46.53468346595764	0	1	1	0	0
2	0	arnohaase/a-foundation	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()==0);	52.40998101234436	0	1	1	0	0
	1	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(('error).isEmpty());	36.144477128982544	0	1	1	0	0
	2	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	72.02982759475708	0	1	1	0	0
	3	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNull(edges());	55.80053734779358	0	1	1	0	0
	4	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges().iterator().next());	50.57602000236511	0	1	1	0	0
	7	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	51.84395384788513	1	0	1	0	0
	9	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	62.656712770462036	1	0	1	0	0
	11	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEmpty(graph.edges());	22.502605676651	0	1	1	0	0
	15	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(expectedResult,actualResult);	48.2811381816864	0	1	1	0	0
	18	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(expectedSize,groupByResult.size());	45.377864837646484	0	1	1	0	0
	22	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	51.21615743637085	0	1	1	0	0
	26	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	46.454102993011475	0	1	1	0	0
	27	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	49.82907319068909	0	1	1	0	0
0	0	nidi3/raml-loader	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(fetchResource(""STR"",50000L));"	194.6990909576416	0	1	1	0	0
	1	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(newLoaderTest().fetchResource(""STR"",50000L));"	120.38963842391968	0	1	1	0	0
	2	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(newMyLoaderTest().fetchResource(""STR"",50000L));"	117.75352811813354	0	1	1	0	0
	3	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThrows(ResourceNotFoundException.class,()->newMyLoaderTest().fetchResource(""STR"",50000L));"	36.770742654800415	0	1	1	0	0
	4	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(fetchResource(""STR"",50000L));"	41.851436614990234	0	1	1	0	0
	5	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(newLoaderTest().fetchResource(""STR"",50000L));"	40.05254030227661	0	1	1	0	0
	6	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(newMyResourceFetcher().fetchResource(""STR"",50000L)instanceofInputStream);"	118.55500674247742	0	1	1	0	0
	7	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertFalse(newLoaderTest().fetchResource(""STR"",50000L)!=null);"	35.09045338630676	0	1	1	0	0
	8	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThrows(ResourceNotFoundException.class,()->{
???;
});"	29.660567045211792	0	1	1	0	0
	9	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertEquals(null,newFocal().fetchResource(""STR"",50000L));"	30.659977436065674	0	1	1	0	0
	10	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	35.555240869522095	0	1	1	0	0
	11	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(newLoader().fetchResource(""STR"",50000L)==null);"	40.29984092712402	0	1	1	0	0
	15	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThrows(ResourceNotFoundException.class,()->focal.fetchResource(""STR"",50000L));"	44.72237586975098	0	1	1	0	0
	16	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThrows(guru.nidi.loader.ResourceNotFoundException.class,()->focal.fetchResource(""STR"",50000L));"	39.161978006362915	0	1	1	0	0
	17	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertNotNull(result);	44.04509973526001	0	1	1	0	0
	19	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(newFocalClassObject().fetchResource(""STR"",50000L)==null);"	43.43151068687439	0	1	1	0	0
	21	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotEquals(null,focal.fetchResource(""STR"",50000L));"	37.50437879562378	0	1	1	0	0
	22	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(loaderRamlResourceLoader.fetchResource(""STR"",50000L));"	141.69341254234314	0	1	1	0	0
	23	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(focal.fetchResource(""STR"",50000L));"	34.3403422832489	0	1	1	0	0
	25	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotSame(null,focal.fetchResource(""STR"",50000L));"	36.615134716033936	0	1	1	0	0
	27	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(newLoaderTest().fetchResource(""STR"",50000L)instanceofInputStream);"	38.2187123298645	0	1	1	0	0
	29	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(fetchResource(""STR"",ifModifiedSince));"	33.554994106292725	0	1	1	0	0
1	0	nidi3/raml-loader	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(newLoaderTest().newFocalClass().fetchResource(""STR"",0));"	106.54185891151428	0	1	1	0	0
	1	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(newFocalClass().fetchResource(""STR"",0));"	34.9415500164032	0	1	1	0	0
	3	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	???;	22.51905107498169	0	1	1	0	0
	4	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(exceptionThrown);	38.610084533691406	0	1	1	0	0
	5	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertEquals(""STR"",""STR"");"	32.627628564834595	0	1	1	0	0
	6	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotEquals(""STR"",""STR"");"	9.807469844818115	0	1	1	0	0
	7	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(org.example.Loader.fetchResource(""STR"",0));"	111.16669225692749	0	1	1	0	0
	8	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(object.fetchResource(""STR"",System.currentTimeMillis()));"	195.1906280517578	0	1	1	0	0
	9	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(newFOCALClassName().fetchResource(""STR"",0));"	113.2051112651825	0	1	1	0	0
	11	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(newLoader().fetchResource(""STR"",0));"	113.893550157547	0	1	1	0	0
	12	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertFalse(obj.fetchResource(""STR"",System.currentTimeMillis())==null);"	114.82360887527466	0	1	1	0	0
	13	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(fetchResource(""STR"",System.currentTimeMillis()));"	36.44839119911194	0	1	1	0	0
	16	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNull(actualResult);	28.26459765434265	0	1	1	0	0
	22	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	???;	26.6893150806427	0	1	1	0	0
	23	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(false);	21.29158902168274	0	1	1	0	0
	27	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(actualValue);	22.288896560668945	0	1	1	0	0
	28	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNull(instance.fetchResource(""STR"",0));"	117.0836443901062	0	1	1	0	0
	29	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertTrue(newGithubLoader().fetchResource(""STR"",0)!=null);"	113.48752164840698	0	1	1	0	0
2	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	17.77964735031128	0	1	1	0	0
	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(loader,factory.getLoader());	31.60442280769348	0	1	1	0	0
	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(loader,factory.builder());	34.86884546279907	0	1	1	0	0
	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.$$-UriDownloader());	32.60026407241821	0	1	1	0	0
	11	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	58.16254186630249	0	1	1	0	0
	12	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factory.getOption(JsonSchemaFactory.Option.AGGRESSIVE_ENUM_STRINGS));	33.97473359107971	0	1	1	0	0
	13	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.overridesKindll());	36.33276319503784	0	1	1	0	0
	14	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(actualValue);	29.454322814941406	0	1	1	0	0
	15	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.archiveToJson(baseUrl,toMap.apply(location,permitMap.isEmpty())));	32.84561038017273	0	1	1	0	0
	16	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertTrue(factory.isCached(URI.create(""STR"")));"	35.169273853302	0	1	1	0	0
	17	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	???;	171.4580533504486	0	1	1	0	0
	19	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertTrue(factory.loader.getEntries().hasEntry(URI.create(""STR"")));"	30.84077739715576	0	1	1	0	0
	21	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.getOption(JsonSchemaFactory.Option.IGNORE_OPTIONS_COMPARE_SCOPE));	124.5876739025116	0	1	1	0	0
	23	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.getPreprocessorFactory());	36.13924193382263	0	1	1	0	0
	24	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.getBackend());	35.47092318534851	0	1	1	0	0
	26	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(factory.getFetcher().getClass(),GithubLoader.class);	47.54857158660889	0	1	1	0	0
	27	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertEquals(""STR"",factory.getValidatorSource().getClass().getName());"	33.97659611701965	0	1	1	0	0
	28	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(0,factory.getMaxDepth());	25.257444381713867	0	1	1	0	0
	29	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.validator.getConnectionFactory());	37.606478452682495	0	1	1	0	0
0	6	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.isValid());	25.694596767425537	0	1	1	0	0
	8	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getEventName());"	22.64845061302185	0	1	1	0	0
	12	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertTrue(event.getHeader().toCEF().contains(""STR""));"	53.575584173202515	0	1	1	0	0
	16	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertNotEquals(""STR"",event.getEventType());"	22.699546098709106	0	1	1	0	0
	17	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getSourceAddress());"	23.410051584243774	0	1	1	0	0
	18	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDestinationAddressString());	22.9328670501709	0	1	1	0	0
	19	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertTrue(event.toString().contains(""STR""));"	27.81028962135315	0	1	1	0	0
	20	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(1.0F,(Float)event.getHeader().getValue(""STR""));"	22.382343292236328	0	1	1	0	0
	21	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	23.167399883270264	0	1	1	0	0
	22	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	20.567936897277832	0	1	1	0	0
	23	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertNotNull(event.getHeader().get(""STR""));"	26.89921236038208	0	1	1	0	0
	24	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertNotNull(event.getHeader().get(""STR""));"	35.19641828536987	0	1	1	0	0
	25	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.isValid());	29.706604957580566	0	1	1	0	0
	26	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getExtensions().get(""STR""));"	22.183362007141113	0	1	1	0	0
	29	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	23.709639072418213	0	1	1	0	0
0	6	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(Collections.emptyList(),res);	26.643667936325073	0	1	1	0	0
0	12	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(locītājs.wordforms.isEmpty());	44.268166065216064	0	1	1	0	0
	15	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(locītājs.isRecognized());	42.204147815704346	0	1	1	0	0
0	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(expectedValue,objectQueryPreparer.getObjectQueryPreparer());	28.50324535369873	0	1	1	0	0
	8	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals()`method.HereistheupdatedobjectQueryPreparer);	32.62598943710327	0	1	1	0	0
	10	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	30.98855233192444	0	1	1	0	0
	13	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	30.109935522079468	0	1	1	0	0
	23	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(objectQueryPreparer);	23.62542200088501	0	1	1	0	0
	24	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(actualValue);	19.969613075256348	0	1	1	0	0
	26	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(getObjectQueryPreparer());	130.0618073940277	0	1	1	0	0
0	0	NanoHttpd/nanohttpd	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(notImplementedHandler.getClass().isAssignableFrom(router.getNotImplementedHandler().getClass()));	39.984044790267944	0	1	1	0	0
	1	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),((TestRouter)router).getNotImplemented());	38.125123500823975	0	1	1	0	0
	2	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(notImplementedHandler,router.getNotImplementedHandler());	29.155417919158936	0	1	1	0	0
	3	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertTrue(router.getClass().getDeclaredField(""STR"").get(router)!=null);"	45.87298369407654	0	1	1	0	0
	18	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),router.getNotImplementedHandlerClassClass());	30.750037670135498	0	1	1	0	0
0	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	42.09504842758179	0	1	1	0	0
	2	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	51.69656014442444	0	1	1	0	0
	3	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotNull(getBuildUrl());	53.87930965423584	0	1	1	0	0
	4	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",newClassName().getBuildUrl());"	154.94726419448853	0	1	1	0	0
	5	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	49.908424854278564	0	1	1	0	0
	6	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	57.98810052871704	0	1	1	0	0
	7	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(newShippableTest().getBuildUrl().startsWith(""STR""));"	49.3039755821228	0	1	1	0	0
	8	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR"",newClassUnderTest().getBuildUrl().substring(0,""STR"".length()));"	62.24497699737549	0	1	1	0	0
	9	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(newMyClass().getBuildUrl().contains(""STR""));"	47.982476234436035	0	1	1	0	0
	10	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",instance.getBuildUrl());"	161.77355289459229	0	1	1	0	0
	11	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	57.054519176483154	0	1	1	0	0
	12	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+getProperty(""STR""),newShippableTest().getBuildUrl());"	59.06051421165466	0	1	1	0	0
	13	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",newShipable().getBuildUrl(newHashMap<String,String>()));"	56.63930535316467	0	1	1	0	0
	14	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	47.698943853378296	0	1	1	0	0
	15	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	57.96006679534912	0	1	1	0	0
	16	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR"",newClassName().getBuildUrl());"	48.32105326652527	0	1	1	0	0
	17	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertFalse(newSomeClass().getBuildUrl().isEmpty());	47.454020977020264	0	1	1	0	0
	24	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	155.4164321422577	0	1	1	0	0
	26	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	59.50285053253174	0	1	1	0	0
	27	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR""+getProperty(""STR""),shippableObject.getBuildUrl());"	57.41640377044678	0	1	1	0	0
	28	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",shippableObject.getBuildUrl());"	53.7692711353302	0	1	1	0	0
