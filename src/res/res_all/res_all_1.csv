TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(Objects.equals(expected,actual));	33.318248987197876	0	0
/	13	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	25.455313205718994	0	0
/	22	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals(expected,actual);	29.283836126327515	0	0
/	23	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	23.830878973007202	0	0
/	26	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.length()>0);	25.711222171783447	0	0
/	27	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(expression);	29.386010885238647	0	0
/	28	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual);	26.267345905303955	0	0
/	6	//	VerbsTest	testVoided	assertNotNull(actual);	"assertNotEquals(""STR"",actual.toString());"	28.858865976333618	0	0
/	9	//	VerbsTest	testVoided	assertNotNull(actual);	assertSame(Verbs.voided(),actual);	23.428000926971436	0	0
/	22	//	VerbsTest	testVoided	assertNotNull(actual);	???;	31.979129791259766	0	0
/	24	//	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals(expectedString,actualString);	21.711342096328735	0	0
/	25	//	VerbsTest	testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual);"	26.341402053833008	0	0
/	27	//	VerbsTest	testVoided	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getId());"	24.31948184967041	0	0
/	4	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals((Object)expected,(Object)actual);	26.674702167510986	0	0
/	5	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(expected==actual);	29.147170066833496	0	0
/	7	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expectedValue,actualValue);	29.626486778259277	0	0
/	9	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(yourBooleanExpression);	25.958977937698364	0	0
3	1	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	52.131147146224976	0	0
/	4	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	57.46833086013794	0	0
/	5	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	56.5930860042572	0	0
/	11	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(buffer1.hasArray());	46.10649085044861	0	0
/	6	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertSame(expectedArray,actualArray);	37.64882206916809	0	0
/	7	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertTrue(qResult.contains(""STR""));"	40.21741700172424	0	0
/	8	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotSame(expectedValue,actualObject);	35.36026978492737	0	0
/	16	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(actualValue);	40.059622049331665	0	0
/	18	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(expectedValue,actualValue);	50.4160897731781	0	0
/	20	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotEquals(expectedValue,actualValue);	34.4573450088501	0	0
/	22	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(condition);	33.47757601737976	0	0
/	23	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(condition);	47.53915286064148	0	0
/	5	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	???;	53.0517418384552	0	0
8	0	orientechnologies/orientdb	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertTrue(proc.getContext().getVariable(""STR"").toString().contains(""STR""));"	38.729822874069214	0	0
/	4	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertTrue(proc.getContext().getVariables().containsKey(""STR""));"	57.727150678634644	0	0
/	5	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	31.002197980880737	0	0
/	7	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	???;	28.5758159160614	0	0
/	8	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertFalse(proc.getContext().containsVariable(""STR""));"	35.43506193161011	0	0
/	11	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getContext().deserializeValues(null).isEmpty());	36.39522409439087	0	0
/	13	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	29.016350984573364	0	0
/	16	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	???;	31.617752075195312	0	0
/	17	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	???;	26.46748185157776	0	0
/	18	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expected,actual);	23.321040868759155	0	0
/	19	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNotNull(proc.getContext().getVariable(""STR""));"	60.09003019332886	0	0
/	21	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNotEquals(""STR""+expectedValue+""STR""+actualValue,expectedValue,actualValue);"	22.574008226394653	0	0
/	25	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertEquals(expectedValue,proc.getContext().getVariable(""STR""));"	40.6860888004303	0	0
/	26	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertTrue(context.getVariables().containsKey(""STR""));"	29.86158585548401	0	0
/	28	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue,delta);	24.025681972503662	0	0
/	29	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedObject,actualObject);	29.69895315170288	0	0
/	2	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(expectedValue,actualValue);	34.582950830459595	0	0
11	1	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expected,actualCount);	41.01887083053589	0	0
/	5	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expectedSize,actualSize);	19.14204216003418	0	0
/	9	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(condition);	16.194812297821045	0	0
/	10	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	???;	24.710745811462402	0	0
/	11	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(actualValue);	35.25687003135681	0	0
/	12	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertArrayEquals(expectedArray,actualArray);	48.07400298118591	0	0
/	14	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expectedValue,actualValue);	45.18045425415039	0	0
/	17	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	???;	40.383535861968994	0	0
/	22	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertSame(expectedObj,actualObj);	27.206735134124756	0	0
/	24	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotSame(expectedValue,actualValue);	36.7869508266449	0	0
/	27	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(condition);	37.46644473075867	0	0
/	29	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expected,actual);	40.21592092514038	0	0
/	15	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	???;	62.45477604866028	0	0
13	0	jcodec/jcodec	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(ExpectedValue,actual);	49.88619303703308	0	0
/	1	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(expectedValue,readInterIntraUvMode(intraMode,decoder,c));	61.8458890914917	0	0
/	7	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(someVariable==10);	46.92110896110535	0	0
/	25	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(count>0);	49.154576778411865	0	0
15	0	fabric8io/fabric8-maven-plugin	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertEquals(expectedValue,config.get(key));	26.662896871566772	0	0
/	3	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.getProperties().containsKey(""STR""));"	23.569617986679077	0	0
/	4	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.getKeys().contains(""STR""));"	24.830312252044678	0	0
/	5	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.getName());"	14.45953893661499	0	0
/	9	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(containsDefaultServiceField);	29.880025148391724	0	0
/	10	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	???;	31.229946851730347	0	0
/	11	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.containsKey(""STR""));"	27.449708938598633	0	0
/	13	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(config.hasKeys());	21.393239974975586	0	0
/	15	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.getName().startsWith(""STR""));"	15.728698015213013	0	0
/	17	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.getKeys().stream().anyMatch(key->key.getName().equals(""STR"")));"	30.31501793861389	0	0
/	20	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertTrue(config.getRawConfig().containsKey(""STR""));"	15.757811307907104	0	0
/	23	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",((LinkedHashMap)((TreeMap)config.getRawConfig().get(""STR"")).get(""STR"")).get(""STR""));"	24.71476912498474	0	0
/	25	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertSame(""STR"",config.getName());"	17.051976919174194	0	0
/	3	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(Arrays.asList(""STR""),resultList);"	47.7701370716095	0	0
/	4	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedSize,filtered.size());	47.245184898376465	0	0
/	7	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(test->""STR"".equals(test.getName())));"	29.065636157989502	0	0
/	13	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedValue,actual);	45.127684116363525	0	0
/	14	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(expectedList,filtered);	21.296721935272217	0	0
/	15	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.indexOf(""STR"")<filtered.indexOf(""STR""));"	45.8558132648468	0	0
/	16	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	???;	42.34139013290405	0	0
17	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(fromYaml(is));	17.958941221237183	0	0
/	6	//	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(objectToAssertinstanceofInputStream);	35.2156720161438	0	0
/	7	//	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(expectedObj,actualObj);	35.357069969177246	0	0
/	10	//	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(expectedValue,actualValue);	35.78585600852966	0	0
/	12	//	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedValue,actualValue);	45.79764676094055	0	0
/	18	//	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(is.markSupported());	30.830227851867676	0	0
/	19	//	ProfileUtilTest	multiple	assertNotNull(is);	???;	26.176006078720093	0	0
/	22	//	ProfileUtilTest	multiple	assertNotNull(is);	???;	44.550204038619995	0	0
/	24	//	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(5,myList.size());	37.21410393714905	0	0
/	25	//	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(myArray);	35.87086200714111	0	0
/	26	//	ProfileUtilTest	multiple	assertNotNull(is);	???;	38.171406984329224	0	0
/	28	//	ProfileUtilTest	multiple	assertNotNull(is);	???;	25.521221160888672	0	0
18	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(builder.build().hasInitContainer(""STR""));"	32.44656682014465	0	0
/	1	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(hasInitContainer(builder,""STR""));"	20.740803003311157	0	0
/	4	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertTrue(actualValue);	25.341991901397705	0	0
/	7	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertTrue(builder.build().getSpec().getInitContainers().contains(expectedInitContainer));	30.16423010826111	0	0
/	8	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(builder.build().getSpec().getInitContainers().stream().anyMatch(initContainer->initContainer.getName().equals(""STR"")));"	16.575583934783936	0	0
/	10	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertNotSame(initContainer1,initContainer2);	29.90214490890503	0	0
/	16	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertArrayEquals(expectedNames,actualNames.toArray());	23.18954110145569	0	0
/	18	//	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	assertEquals(expectedSize,builder.build().getSpec().getInitContainers().size());	31.691318035125732	0	0
/	6	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	assertEquals(0,config.getChildren().size());	25.544517040252686	0	0
/	7	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertEquals(expectedValue,config.get(""STR""));"	33.97445607185364	0	0
/	10	//	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	assertNotSame(expectedObject,actualObject);	20.04849410057068	0	0
21	0	OpenLiberty/ci.common	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(file.exists());	20.47474718093872	0	0
/	1	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile.exists());	23.42277503013611	0	0
/	3	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertEquals(""STR"",newString(expectedBytes));"	18.713669061660767	0	0
/	4	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile!=null&&(serverEnvFile.exists()||serverEnvBackup.exists()));	23.209096908569336	0	0
/	6	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBackup.exists());	29.58903408050537	0	0
/	9	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals(expectedBytes[i],fileBytes[i]);	28.098877906799316	0	0
/	10	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertEquals(""STR""+serverEnvBak.getName()+""STR"",""STR"",serverEnvBak.getName());"	30.1629056930542	0	0
/	16	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile.canRead());	27.162841081619263	0	0
/	18	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNull(serverEnv);	28.83610510826111	0	0
/	22	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBackup.isHidden());	30.679789781570435	0	0
/	23	//	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverDir.exists()&&serverDir.isDirectory());	23.095344066619873	0	0
/	7	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertFalse(condition);	32.131417751312256	0	0
/	11	//	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotSame(""STR"",myValue);"	25.82393193244934	0	0
/	8	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertNull(DevUtil.class.getDeclaredMethod(""STR"",File.class,File.class,File.class,String.class).invoke(null,null,srcDir,targetDir,""STR""));"	19.928559064865112	0	0
/	10	//	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(""STR"",newString(java.nio.file.Files.readAllBytes(targetFile.toPath())));"	28.4699547290802	0	0
/	6	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertEquals(true,trueUrl.contains(""STR""));"	60.6741669178009	0	0
/	8	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	51.2384078502655	0	0
/	12	//	BasicURLNormalizerTest	testQuerySort	assertEquals(expectedResult,normalizedUrl);	"assertSame(testSourceUrl,urlFilter.filter(newURL(""STR""),newMetadata(),testUrl));"	44.02796697616577	0	0
26	1	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNull(normalizeUrl);	52.25671410560608	0	0
/	8	//	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	54.70766091346741	0	0
/	7	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertTrue(result.stream().anyMatch(worker->worker.getWorkerType().equals(""STR"")));"	25.053724765777588	0	0
/	9	//	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertFalse(result.stream().anyMatch(TestUtils.hasWorkerType(""STR"")));"	34.52071189880371	0	0
/	8	//	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registryinstanceofRegistry);	25.32602071762085	0	0
30	0	hazelcast/hazelcast-simulator	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,agentCount());	25.87865400314331	0	0
/	1	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertEquals(true,registry.containsAgent(""STR""));"	33.117785930633545	0	0
/	6	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotNull(registry.getAgent(ipAddress));	32.91182518005371	0	0
/	8	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	???;	29.53815793991089	0	0
/	14	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.getAgents().contains(agentInfo));	31.610701084136963	0	0
/	15	//	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertNotNull(registry.getAgent(""STR"").getData());"	27.18246817588806	0	0
31	0	javadev/moneytostr-russian	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",String.format(""STR"",money*100));"	19.638442993164062	0	0
/	1	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(theMoney);	22.510531187057495	0	0
/	2	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotEquals(0,convert(123.45));	23.40926694869995	0	0
/	4	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	???;	18.590572118759155	0	0
/	5	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertFalse(Double.isNaN(newpackage_name.Class_Name().convert(123.45)));	20.57087993621826	0	0
/	6	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertNotEquals(""STR"",convert(123.45));"	22.73829412460327	0	0
/	7	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertTrue(expected.equals(actual));	18.106735944747925	0	0
/	8	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(YourClassName.convert(123.45));	19.71133828163147	0	0
/	9	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotSame(expected,YourClassName.convert(123.45));	18.285722017288208	0	0
/	10	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertTrue(String.valueOf(YourClassName.convert(123.45)).getClass().equals(String.class));	22.29861092567444	0	0
/	11	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertSame(expectedValue,YourClassName.convert(123.45));	19.556936979293823	0	0
/	12	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotEquals(expectedValue,YourClassName.convert(123.45));	28.035154104232788	0	0
/	14	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(true,YourClassName.convert(123.45).startsWith(""STR""));"	21.822354793548584	0	0
/	15	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertTrue(YourClassName.convert(123.45).contains(""STR""));"	24.642643928527832	0	0
/	17	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertFalse(YourClassName.convert(123.45).isEmpty());	19.358469247817993	0	0
/	19	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertTrue(YourClassName.convert(123.45).length()>0);	18.582207918167114	0	0
/	23	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(result);	20.130820751190186	0	0
/	25	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotSame(expectedValue,result);	21.491508960723877	0	0
/	26	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertTrue(result.startsWith(""STR""));"	20.895626068115234	0	0
/	27	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertEquals(expectedValue,result);	22.81742215156555	0	0
/	28	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotEquals(expectedValue,result);	21.146265983581543	0	0
/	29	//	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	???;	20.827039003372192	0	0
32	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedResult,cm.count(poolKey));	26.773940086364746	0	0
/	2	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	"assertNotNull(cm.getConnection(""STR""));"	34.69957399368286	0	0
/	7	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0&&cm.count(poolKey)<=MyTestClass.EXPECTED_MAX_COUNT);	43.861586809158325	0	0
/	11	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(null,cm.getConnection(poolKey));	34.03845810890198	0	0
/	17	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	???;	24.071150064468384	0	0
/	21	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedValue,actualValue);	36.213428020477295	0	0
/	25	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getRpcClient(poolKey).getConnectionPool().isEmpty());	37.0317587852478	0	0
/	26	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.getRpcClient(poolKey).getConnectionPool().size());	36.636205196380615	0	0
/	27	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getPoolConfiguration(poolKey).getClient());	43.21544003486633	0	0
/	28	//	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	???;	53.135915994644165	0	0
33	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedValue,actualValue);	33.673892974853516	0	0
/	1	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(condition);	32.000834226608276	0	0
/	2	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(object);	32.68486189842224	0	0
/	3	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(condition);	34.04006791114807	0	0
/	5	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(expectedValue,actualValue,ErrorMessage);	37.946279764175415	0	0
/	6	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(object);	36.733867168426514	0	0
/	9	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertArrayEquals(expectedArray,actualArray);	38.83190703392029	0	0
/	11	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedValue,actualValue,delta);	33.37109923362732	0	0
/	12	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(actualCondition);	32.98759889602661	0	0
/	13	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(object);	32.69286799430847	0	0
/	14	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(expectedValue,actualValue);	36.97325801849365	0	0
/	15	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(result.total()==10);	26.851186275482178	0	0
/	21	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedValue,actualValue);	38.04435205459595	0	0
/	22	//	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(expectedObject,actualObject);	34.578084230422974	0	0
37	0	nidi3/raml-loader	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertEquals(expectedInputStream,fetchResource(""STR"",ifModifiedWhile));"	22.65924882888794	0	0
/	1	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(fetchResource(""STR"",param_ILIC_generated));"	29.256632089614868	0	0
/	2	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	27.845843076705933	0	0
/	3	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(fetchResource(""STR"",param_ILIC_generated));"	32.36826300621033	0	0
/	4	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(fetchResource(""STR"",newIfModifiedWhile()));"	26.692706823349	0	0
/	5	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(fetchResource(""STR"",ifModifiedSince));"	21.213161945343018	0	0
/	6	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(fetchResource(""STR"",null)!=null);"	20.84968900680542	0	0
/	10	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotEquals(""STR"",loaderTest.fetchResource(""STR"",""STR""));"	28.429238080978394	0	0
/	11	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	30.354710817337036	0	0
/	12	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	22.801477193832397	0	0
/	13	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	26.362132787704468	0	0
/	14	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertFalse(instanceVariableName.fetchResource(""STR"",ifModifiedSince)==null);"	17.855954885482788	0	0
/	15	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	28.39839792251587	0	0
/	17	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	???;	27.146994829177856	0	0
/	18	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotSame(""STR"",fetchResource(""STR"",ifModifiedSince));"	29.37278413772583	0	0
/	19	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertNotEquals(expectedValue,actualValue);	14.5796058177948	0	0
/	22	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertTrue(result);	19.81575298309326	0	0
/	24	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertNotSame(expectedObject,actualObject);	26.281503915786743	0	0
/	25	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertNotNull(result);	23.41411304473877	0	0
/	26	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertTrue(condition);	14.869890928268433	0	0
/	27	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertEquals(expectedResult,actualResult);	19.403428077697754	0	0
/	28	//	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	assertArrayEquals(expectedArray,actualArray);	19.242507934570312	0	0
38	1	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(fetchResource(""STR"",0));"	25.11729383468628	0	0
/	2	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertNotNull(fetchResource(""STR"",0));"	23.454575061798096	0	0
/	4	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(focal.focusByIndex(0));	31.41710591316223	0	0
/	5	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertTrue(loaderTest.isResourceFound(""STR""));"	18.840113162994385	0	0
/	6	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertEquals(expectedValue,result);	33.58087110519409	0	0
/	7	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertFalse(condition);	24.957762956619263	0	0
/	8	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotEquals(expectedValue,actualValue);	19.703695058822632	0	0
/	9	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(condition);	14.257840156555176	0	0
/	11	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertArrayEquals(expectedArray,actualArray);	29.958636045455933	0	0
/	12	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotSame(expectedObject,actualObject);	19.405091047286987	0	0
/	14	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertEquals(expectedValue,actualValue);	35.43250393867493	0	0
/	16	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(actualValue);	26.452897787094116	0	0
/	20	//	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotSame(object1,object2);	20.498399019241333	0	0
/	1	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofcom.github.fge.jsonschema.main.JsonSchemaFactory);	29.840792894363403	0	0
/	5	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(containsDraft3);	35.53263592720032	0	0
/	6	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expectedValue,actualValue);	32.477795124053955	0	0
/	7	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factory.isCacheEnabled());	20.35681676864624	0	0
/	11	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(!factory.isCustomDefaultsEnabled());	25.96982502937317	0	0
/	14	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(factory.isWrapperFactoryEnabled());	29.033225059509277	0	0
/	15	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory.builderObjectMapper());	29.276501178741455	0	0
/	16	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expectedValue,actualValue);	29.42433500289917	0	0
/	17	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factory.isIdKeywordEnabled());	32.35561800003052	0	0
/	19	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(expectedValue,actualValue);	18.253588914871216	0	0
/	21	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(SomeClass.class,factory.getClass().getEnclosingClass());	35.16912293434143	0	0
/	22	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertFalse(factory.fillAttributeInMacro(""STR"",false));"	27.536484003067017	0	0
/	26	//	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(objectinstanceofSomeClass);	30.548286199569702	0	0
40	1	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(expectedEvent,actualEvent);	22.476445198059082	0	0
/	3	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.isEventMalicious());	19.516039848327637	0	0
/	6	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertNotEquals(""STR"",actualEvent);"	27.963481187820435	0	0
/	8	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getHeader());	26.35755705833435	0	0
/	9	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(expectedCount,actualCount);	15.114920854568481	0	0
/	11	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals(expectedValue,actualValue);	22.525882244110107	0	0
/	12	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	???;	22.495464086532593	0	0
/	14	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertFalse(myVariable>10);	28.378056287765503	0	0
/	15	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertArrayEquals(expectedArray,actualArray);	15.038559913635254	0	0
/	16	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotSame(expectedObject,actualObject);	14.727831840515137	0	0
/	17	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getExtension());	22.20084285736084	0	0
/	20	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals(expectedString,actualString);	23.295342683792114	0	0
/	22	//	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(expectedValue,actualValue);	25.720762968063354	0	0
41	1	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(instanceinstanceofTSqlBuilder);	25.734495162963867	0	0
/	6	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR"")&&sql.toString().contains(""STR""));"	26.59380292892456	0	0
/	9	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().startsWith(""STR""));"	25.26030683517456	0	0
/	14	//	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertEquals(String.expected,String.actual);	25.399724006652832	0	0
42	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceofjava.util.ArrayList);	25.954263925552368	0	0
/	1	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(java.util.List.class,res.getClass());	25.788661003112793	0	0
/	4	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.isEmpty(),""STR"");"	23.180188179016113	0	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,res.size());	28.07854700088501	0	0
/	7	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(ArrayList.class,res.getClass());	20.335514783859253	0	0
/	11	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(expected,res);	21.9328932762146	0	0
/	12	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceofjava.util.List);	20.47241997718811	0	0
/	14	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.size()==10);	22.621127367019653	0	0
/	15	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(actual,res);	23.596980094909668	0	0
/	20	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(expectedSize,res.size());	22.853253841400146	0	0
/	25	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(expectedValue,actualValue);	17.814009189605713	0	0
/	27	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(expectedList,res);	21.40979290008545	0	0
/	28	//	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertEquals(""STR"",res);"	27.45355486869812	0	0
43	1	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(expectedCount,ceļu.getWordformCount());	37.18538999557495	0	0
/	2	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(actualValue);	39.65335726737976	0	0
/	3	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	"assertTrue(ceļu.getWordforms().contains(""STR""));"	36.75011897087097	0	0
/	4	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(expectedSize,ceļu.getWordforms().size());	27.63802480697632	0	0
/	6	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotSame(expectedWord,focal);	29.81063485145569	0	0
/	7	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertSame(expected,focal);	24.31212306022644	0	0
/	15	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertArrayEquals(expectedArray,actualArray);	25.13773798942566	0	0
/	18	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.getCorrectWordform().equals(expectedResult));	34.45629096031189	0	0
/	19	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	???;	33.00640892982483	0	0
/	24	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(expectedValue,actualValue);	23.52767586708069	0	0
/	26	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotSame(expectedValue,actualValue);	28.269620895385742	0	0
/	29	//	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	"assertTrue(ceļu.toString().contains(""STR""));"	42.7074019908905	0	0
46	1	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	30.34339714050293	0	0
/	4	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	31.457821130752563	0	0
/	7	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	27.47644591331482	0	0
/	12	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	30.540727138519287	0	0
/	14	//	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	"assertTrue(""STR""+response.getStatus().name(),response.getStatus().name().startsWith(""STR""));"	34.067935943603516	0	0
47	1	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	45.35653305053711	0	0
/	2	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(MyClass.getBuildUrl().startsWith(""STR""));"	31.60494112968445	0	0
/	3	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotNull(SomeClass.getBuildUrl());	36.49227690696716	0	0
/	5	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(MyClass.getBuildUrl().contains(""STR""));"	33.82703995704651	0	0
/	8	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotEquals(null,actual);	32.96462106704712	0	0
/	12	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertEquals(expected,actual);	23.8334903717041	0	0
/	17	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertArrayEquals(expectedArray,actualArray);	37.08927392959595	0	0
/	19	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertEquals(expectedValue,actualValue);	34.197978019714355	0	0
/	20	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotSame(expectedObject,actualObject);	34.35580015182495	0	0
/	22	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotNull(someObject);	16.59049963951111	0	0
/	23	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertEquals(expected,actual);	26.552255868911743	0	0
/	27	//	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	???;	40.077167987823486	0	0
48	1	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	???;	32.72935199737549	0	0
/	3	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotNull(solution);	29.326000928878784	0	0
/	8	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex()+4);	34.890300273895264	0	0
/	11	//	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	30.596039056777954	0	0
/	2	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"".length(),CommUtil.repeatChar('A',4).length());"	31.79065704345703	0	0
/	3	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",org.apache.commons.lang3.StringUtils.repeat('A',4));"	27.74203896522522	0	0
/	5	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotEquals(6,CommUtil.repeatChar('A',4).length());	27.23876404762268	0	0
/	11	//	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",repeatChar('A',4));"	30.985299348831177	0	0
