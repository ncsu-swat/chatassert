TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	3	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(expected.equals(actual));	21.420666694641113	0	0
/	10	//	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	75.0090639591217	0	0
/	2	//	VerbsTest	testVoided	assertNotNull(actual);	"assertEquals(voided,actual.getCanonicalForm().split(""STR"")[1]);"	66.38561367988586	0	0
/	12	//	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(condition);	22.15764093399048	0	0
/	15	//	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actualValue);	43.7261962890625	0	0
/	16	//	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals(someExpectedVerb,Gov.ADAPTER(someActualVerb));	39.272891998291016	0	0
/	20	//	VerbsTest	testVoided	assertNotNull(actual);	???;	56.22417426109314	0	0
/	3	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	53.08365797996521	0	0
/	7	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	20.028578758239746	0	0
/	10	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	"assertNotNull(someMap.get(""STR""));"	471.1286759376526	0	0
/	18	//	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expectedVerb,actualVerb);	480.0563099384308	0	0
3	0	orientechnologies/orientdb	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.declareIntent(__yourOIntentinstancehere__));	1624.390362739563	0	0
/	1	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(db.getActiveIntent(),expectedValue);	2374.815325975418	0	0
/	3	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	77.04782223701477	0	0
/	4	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	77.20231914520264	0	0
/	5	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	???;	128.15014815330505	0	0
/	13	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(intentInstance,db.getActiveIntent());	2471.2597579956055	0	0
/	19	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(expectedIntent,db.getActiveIntent());	1654.4124059677124	0	0
/	20	//	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(expectedIntent.toString(),db.getActiveIntent().toString());	2398.3344390392303	0	0
/	5	//	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	???;	102.32145285606384	0	0
/	2	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertTrue(qResult.contains(""STR""));"	24.4655339717865	0	0
/	7	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotSame(expectedValue,actualValue);	200.2970530986786	0	0
/	15	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(expectedSize,qResult.size());	519.9889380931854	0	0
/	16	//	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertEquals(true,qResult.contains(""STR""));"	49.41966390609741	0	0
/	6	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertArrayEquals(expectedTypes,actualTypes);	105.27537798881531	0	0
/	9	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(expected,actual);	138.86950135231018	0	0
/	11	//	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,keyIndexDefinition.getFields().size());	140.87869000434875	0	0
7	0	orientechnologies/orientdb	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(expectedNewRecordsSet.toString(),manager.getNewRecords().toString());	1506.264301776886	0	0
/	11	//	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().stream().allMatch(record->recordinstanceofORecordLazySet));	975.364618062973	0	0
8	1	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	144.59115314483643	0	0
/	9	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertFalse(condition);	104.40418672561646	0	0
/	14	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	57.65375995635986	0	0
/	21	//	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(list);	140.38803005218506	0	0
/	4	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(2,result.stream().map(ORID::toString).distinct().count());	1362.4574840068817	0	0
/	8	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(!result.hasNext());	1315.127289056778	0	0
/	10	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertTrue(result.isEmpty(),""STR"");"	106.7514660358429	0	0
/	12	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(resultinstanceofcom.orientechnologies.orient.core.sql.executor.OResultSet);	74.62439823150635	0	0
/	13	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNull(result);	112.67307496070862	0	0
/	17	//	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(resultinstanceofjava.util.Map);	3787.4555571079254	0	0
/	6	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame((Object)oldDoc.get(0),(Object)doc.get(0));	1751.9165766239166	0	0
/	7	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	"assertNotNull(doc.getClass().getField(""STR""));"	1152.682324886322	0	0
/	8	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.get(0).before(newDate));	1619.616576910019	0	0
/	10	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame((Object)expectedList,(Object)actualList);	589.6265726089478	0	0
/	11	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(expectedSize,actualList.size());	1150.2437961101532	0	0
/	12	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(actualList.contains(expectedElement));	1143.549607038498	0	0
/	13	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(actualList!=null&&!actualList.isEmpty());	1148.9211430549622	0	0
/	14	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(expectedArray,actualArray);	1699.1726460456848	0	0
/	15	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(expectedValue,actualValue,delta);	588.5372400283813	0	0
/	16	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(expectedCondition,actualDocument!=null);	1163.2320997714996	0	0
/	17	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(isDirty);	1213.807867050171	0	0
/	18	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	"assertNotNull(doc.<fieldtype>Field(""STR""));"	1243.6160531044006	0	0
/	19	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	???;	1207.3156669139862	0	0
/	20	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(false,doc.isNew());	1737.1571938991547	0	0
/	23	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(expectedValue,actualValue);	111.80660724639893	0	0
/	27	//	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(expectedValue,actualValue);	1154.8667540550232	0	0
/	7	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotSame(expectedValue,actualValue);	244.05651926994324	0	0
/	9	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.iterator().hasNext());	635.6964619159698	0	0
/	10	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertEquals(""STR"",""STR"");"	86.85623288154602	0	0
/	11	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertTrue(((Long)qResult.<Long>fieldFromDocument(""STR""))<1000);"	647.6323008537292	0	0
/	12	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertArrayEquals(expectedArray,actualArray);	198.98798394203186	0	0
/	14	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotSame(expectedObject,actualObject);	663.3735198974609	0	0
/	15	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertTrue(qResult.stream().filter(result->result.getVertex().isPresent()).anyMatch(result->result.getChild(""STR"").filter(""STR""::equals).isPresent()));"	271.82411098480225	0	0
/	20	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertTrue(""STR""+testName,isTestSuccessful());"	239.81779193878174	0	0
/	21	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expectedValue,actualValue);	247.48135209083557	0	0
/	22	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNull((com.orientechnologies.MatchPrefetchStep)object);	586.4141387939453	0	0
/	23	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(resultSet.iterator().hasNext());	482.7606267929077	0	0
/	25	//	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(expectedValue,actualValue);	685.9388628005981	0	0
/	7	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertFalse(test.contains(23));	472.26341485977173	0	0
/	9	//	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(Arrays.asList(test.values().toArray(newInteger[0])).contains(11));	354.76302576065063	0	0
13	0	jcodec/jcodec	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(1,readInterIntraUvMode(intraMode,decoder,c));	50.50214195251465	0	0
/	2	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(2,readInterIntraUvMode(intraMode,mockDecoder,context));	289.02467370033264	0	0
/	3	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(isCorrect);	194.12365698814392	0	0
/	5	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(myCondition);	391.1679651737213	0	0
/	6	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(expectedValue,actualValue);	252.15227603912354	0	0
/	7	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotEquals(5,someVariable);	372.26233887672424	0	0
/	9	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertArrayEquals(expectedArray,actualArray);	138.0346610546112	0	0
/	10	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(expectedObject,actualObject);	370.52434825897217	0	0
/	15	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(expected,actual);	256.70906496047974	0	0
/	23	//	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(DecodingContext.someVariable>0);	407.2843768596649	0	0
15	0	fabric8io/fabric8-maven-plugin	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get().getName());"	90.75687003135681	0	0
/	1	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertNotNull(config.get(""STR""));"	90.11666822433472	0	0
/	2	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertEquals(0,config.getRawConfig().size());	22.410616874694824	0	0
/	15	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(configinstanceofHashMap);	231.39955830574036	0	0
/	19	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(io.fabric8.maven.core.util.Configs.Key.NAME,null));"	17.15287709236145	0	0
/	21	//	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	???;	166.86915397644043	0	0
16	1	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(expectedSize,filtered.size());	382.7679991722107	0	0
/	3	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue()`.Here'sanexample:

```java
assertEquals(1,filtered.size());"	26.334954977035522	0	0
/	11	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(""STR"",Integer.toString(filtered.get(0).getName()));"	36.185081005096436	0	0
/	15	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(element->element.name().equals(""STR"")));"	377.2360918521881	0	0
/	16	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(""STR"",actualResult);"	344.6473820209503	0	0
/	17	//	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.containsKey(""STR""));"	619.6553609371185	0	0
