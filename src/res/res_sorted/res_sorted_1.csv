TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	63.8723521232605
0	1	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1	0	63.8723521232605
0	2	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	0	0	63.8723521232605
0	3	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0	0	63.8723521232605
0	4	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNull(actual);	0	0	63.8723521232605
0	5	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0	0	63.8723521232605
0	6	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	63.8723521232605
0	7	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(condition);	0	0	63.8723521232605
0	8	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	0	0	63.8723521232605
0	9	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(condition);	0	0	63.8723521232605
1	0	adlnet/jxapi	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	1	0	49.65318822860718
1	1	/	VerbsTest	testVoided	assertNotNull(actual);	"assertNotSame(Verbs.createVerb(""STR""),actual);"	0	0	49.65318822860718
1	2	/	VerbsTest	testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0	0	49.65318822860718
1	3	/	VerbsTest	testVoided	assertNotNull(actual);	"assertArrayEquals(newString[]{""STR""},actual.getAliases());"	0	0	49.65318822860718
1	4	/	VerbsTest	testVoided	assertNotNull(actual);	"assertNotEquals(Verbs.createVerb(""STR""),actual);"	0	0	49.65318822860718
1	5	/	VerbsTest	testVoided	assertNotNull(actual);	"assertSame(Verbs.createVerb(""STR""),actual);"	0	0	49.65318822860718
1	6	/	VerbsTest	testVoided	assertNotNull(actual);	assertThrows(IllegalArgumentException.class,()->Verbs.createVerb(null));	0	0	49.65318822860718
1	7	/	VerbsTest	testVoided	assertNotNull(actual);	assertFalse(actual.isNotVoided());	0	0	49.65318822860718
1	8	/	VerbsTest	testVoided	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getName());"	0	0	49.65318822860718
1	9	/	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actual.isVoided());	0	0	49.65318822860718
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	41.38656282424927
2	1	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	0	0	41.38656282424927
2	2	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0	0	41.38656282424927
2	3	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	41.38656282424927
2	4	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(object);	0	0	41.38656282424927
2	5	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNull(object);	0	0	41.38656282424927
2	6	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(condition);	0	0	41.38656282424927
2	7	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	0	0	41.38656282424927
2	8	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(condition);	0	0	41.38656282424927
3	0	orientechnologies/orientdb	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(internal.getActiveIntent());	0	0	776.0850610733032
3	1	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(getActiveIntent()instanceofOIntent);	0	0	776.0850610733032
3	2	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	1	0	776.0850610733032
3	3	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(intent,getActiveIntent());	0	0	776.0850610733032
3	4	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntent.class,getActiveIntent().getClass());	0	0	776.0850610733032
3	5	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()instanceofOIntentMassiveInsert);	0	0	776.0850610733032
3	6	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(getActiveIntent(),internal.getActiveIntent());	0	0	776.0850610733032
3	7	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	0	0	776.0850610733032
3	8	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(internal.getActiveIntent(),getActiveIntent());	0	0	776.0850610733032
3	9	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(intent,getActiveIntent());	0	0	776.0850610733032
4	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	0	0	253.28370785713196
4	1	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	1	0	253.28370785713196
4	2	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>var);	0	0	253.28370785713196
4	3	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(storedVar<var);	0	0	253.28370785713196
4	4	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNull(buffer2.get(9));	0	0	253.28370785713196
4	5	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(buffer1.get(9),buffer.get(0));	0	0	253.28370785713196
4	6	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer,buffer2);	0	0	253.28370785713196
4	7	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertSame(buffer,buffer1);	0	0	253.28370785713196
4	8	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1.get(8),buffer.get(1));	0	0	253.28370785713196
4	9	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertArrayEquals(buffer.array(),buffer2.array());	0	0	253.28370785713196
5	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(5,qResult.size());	0	0	211.95056009292603
5	1	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertEquals(1,qResult.get(0).field(""STR""));"	0	0	211.95056009292603
5	2	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertFalse(qResult.stream().anyMatch(doc->doc.field(""STR"").equals(""STR"")));"	0	0	211.95056009292603
5	3	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertNotNull(qResult.get(0).field(""STR""));"	0	0	211.95056009292603
5	4	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.isEmpty());	0	0	211.95056009292603
5	5	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(0,qResult.size());	0	0	211.95056009292603
5	6	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertTrue(qResult.stream().anyMatch(doc->doc.field(""STR"").equals(""STR"")));"	0	0	211.95056009292603
5	7	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	0	0	211.95056009292603
5	8	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	"assertEquals(""STR"",qResult.get(0).field(""STR""));"	0	0	211.95056009292603
5	9	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>3);	0	0	211.95056009292603
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(getParamCount()==0);	0	0	256.25074100494385
6	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(getParamCount()>0);	0	0	256.25074100494385
6	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(simpleKeyIndexDefinition.getKeyType(),OType.DOUBLE);	0	0	256.25074100494385
6	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(1,getParamCount());	0	0	256.25074100494385
6	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNull(null);	0	0	256.25074100494385
6	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyTypes);	0	0	256.25074100494385
6	6	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,getParamCount());	0	0	256.25074100494385
6	7	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	???;	0	0	256.25074100494385
6	8	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(keyTypes.length,0);	0	0	256.25074100494385
6	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(simpleKeyIndexDefinition.getKeyType(),OType.INTEGER);	0	0	256.25074100494385
7	0	orientechnologies/orientdb	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	"assertTrue(doc.containsField(""STR""));"	0	0	235.64831399917603
7	1	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	"assertFalse(doc2.containsField(""STR""));"	0	0	235.64831399917603
7	2	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(getReal().newRecords.contains(doc));	0	0	235.64831399917603
7	3	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	"assertEquals(""STR"",doc.field(""STR""));"	0	0	235.64831399917603
7	4	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc,manager.getRecord());	0	0	235.64831399917603
7	5	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager);	0	0	235.64831399917603
7	6	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	0	0	235.64831399917603
7	7	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(getReal().newRecords,getNewRecords());	0	0	235.64831399917603
7	8	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc,doc2);	0	0	235.64831399917603
8	0	orientechnologies/orientdb	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStopped());	0	0	92.51036024093628
8	1	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStarted());	0	0	92.51036024093628
8	2	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	"assertNotEquals(""STR"",proc.getExtractor().getCurrentRecord().toString());"	0	0	92.51036024093628
8	3	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	0	0	92.51036024093628
8	4	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotEquals(0,proc.getExtractor().getProcessedRecords());	0	0	92.51036024093628
8	5	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNull(proc.getError());	0	0	92.51036024093628
8	6	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(0,proc.getExtractor().getTotalRecords());	0	0	92.51036024093628
8	7	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(1,proc.getLoader().getTotalRecords());	0	0	92.51036024093628
8	8	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotSame(proc.getExtractor(),proc.getLoader());	0	0	92.51036024093628
8	9	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertFalse(proc.isStopped());	0	0	92.51036024093628
9	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertSame(result,db.query(""STR""));"	0	0	255.45303225517273
9	1	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	0	0	255.45303225517273
9	2	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNotEquals(2L,result.getProperty(""STR""));"	0	0	255.45303225517273
9	3	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0	0	255.45303225517273
9	4	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNotEquals(1L,result.getProperty(""STR""));"	0	0	255.45303225517273
9	5	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNull(result.getProperty(""STR""));"	0	0	255.45303225517273
9	6	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertNotSame(result,db.query(""STR""));"	0	0	255.45303225517273
9	7	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertEquals(1L,result.getProperty(""STR""));"	0	0	255.45303225517273
9	8	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	0	255.45303225517273
9	9	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	"assertEquals(2L,result.getProperty(""STR""));"	0	0	255.45303225517273
10	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{true},newboolean[]{doc.isDirty()});	0	0	218.58432793617249
10	1	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	0	218.58432793617249
10	2	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	0	218.58432793617249
10	3	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0	0	218.58432793617249
10	4	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0	0	218.58432793617249
10	5	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0	0	218.58432793617249
10	6	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0	0	218.58432793617249
10	7	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	0	0	218.58432793617249
10	8	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(true,doc.isDirty());	0	0	218.58432793617249
11	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResultinstanceofOResultSet);	0	0	213.50217175483704
11	1	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1	0	213.50217175483704
11	2	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	"assertEquals(""STR"",qResult.next().getProperty(""STR""));"	0	0	213.50217175483704
11	3	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(!qResult.hasNext());	0	0	213.50217175483704
11	4	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(OResultSet.class,qResult.getClass());	0	0	213.50217175483704
11	5	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0	0	213.50217175483704
11	6	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(OResultSet.class,qResult.getClass());	0	0	213.50217175483704
11	7	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0	0	213.50217175483704
11	8	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext()&&!qResult.hasNext());	0	0	213.50217175483704
11	9	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(!qResult.hasNext());	0	0	213.50217175483704
12	0	jcodec/jcodec	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(20),test.get(24));	0	0	247.59162712097168
12	1	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	1	0	247.59162712097168
12	2	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	0	0	247.59162712097168
12	3	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertSame(Integer.valueOf(11),test.get(24));	0	0	247.59162712097168
12	4	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(10),test.get(24));	0	0	247.59162712097168
12	5	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(test.get(24).toString(),String.CASE_INSENSITIVE_ORDER);	0	0	247.59162712097168
12	6	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.get(24)instanceofInteger);	0	0	247.59162712097168
12	7	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThrows(NullPointerException.class,()->test.get(24));	0	0	247.59162712097168
12	8	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(Integer.valueOf(10),test.get(24));	0	0	247.59162712097168
12	9	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(null,test.get(24));	0	0	247.59162712097168
13	0	jcodec/jcodec	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(readInterIntraUvMode(5,decoder,c));	0	0	718.5232901573181
13	1	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(5,readInterIntraUvMode(0,decoder,c));	0	0	718.5232901573181
13	2	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(readInterIntraUvMode(2,decoder,c)>0);	0	0	718.5232901573181
13	3	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	718.5232901573181
13	4	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotEquals(7,readInterIntraUvMode(1,decoder,c));	0	0	718.5232901573181
13	5	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNull(readInterIntraUvMode(4,decoder,c));	0	0	718.5232901573181
13	6	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(readInterIntraUvMode(3,decoder,c)==10);	0	0	718.5232901573181
13	7	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotSame(decoder,readInterIntraUvMode(6,decoder,c));	0	0	718.5232901573181
13	8	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertSame(c,readInterIntraUvMode(7,decoder,c));	0	0	718.5232901573181
14	0	fabric8io/fabric8-maven-plugin	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertEquals(""STR"",kindAndName.getKind());"	0	0	102.83639097213745
14	1	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertNotEquals(""STR"",kindAndName.getName());"	0	0	102.83639097213745
14	2	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(secondKindAndName);	0	0	102.83639097213745
14	3	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(kindAndName,secondKindAndName);	0	0	102.83639097213745
14	4	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertSame(kindAndName,secondKindAndName);	0	0	102.83639097213745
14	5	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(kindAndName,thirdKindAndName);	0	0	102.83639097213745
14	6	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNull(kindAndName);	0	0	102.83639097213745
14	7	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertTrue(kindAndName.getKind().equals(""STR""));"	0	0	102.83639097213745
14	8	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(kindAndName,thirdKindAndName);	0	0	102.83639097213745
14	9	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	"assertFalse(kindAndName.getKind().equals(""STR""));"	0	0	102.83639097213745
15	0	fabric8io/fabric8-maven-plugin	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertSame(object1,object2);	0	0	55.11753010749817
15	1	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.SOME_KEY));"	0	0	55.11753010749817
15	2	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(string.contains(substring));	0	0	55.11753010749817
15	3	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotSame(object1,object2);	0	0	55.11753010749817
15	4	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertFalse(condition);	0	0	55.11753010749817
15	5	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(list.isEmpty());	0	0	55.11753010749817
15	6	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertNotNull(config.get(Configs.Key.SOME_KEY));	0	0	55.11753010749817
15	7	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertEquals(expectedValue,actualValue);	0	0	55.11753010749817
15	8	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(collection.contains(element));	0	0	55.11753010749817
15	9	/	EnricherConfigTest	simple	"assertEquals(""STR"",config.get(Config.type));"	assertTrue(condition);	0	0	55.11753010749817
16	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertNotSame(pConfig.prepareProcessors(getAllTestData(),""STR""),filtered);"	0	0	94.37704515457153
16	1	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(0,filtered.size());	0	0	94.37704515457153
16	2	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertNotEquals(0,pConfig.prepareProcessors(getAllTestData(),""STR"").size());"	0	0	94.37704515457153
16	3	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertFalse(filtered.contains(null));	0	0	94.37704515457153
16	4	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.isEmpty());	0	0	94.37704515457153
16	5	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(10,pConfig.prepareProcessors(getAllTestData(),""STR"").size());"	0	0	94.37704515457153
16	6	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(3,pConfig.prepareProcessors(getAllTestData(),""STR"").size());"	0	0	94.37704515457153
16	7	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(pConfig);	0	0	94.37704515457153
16	8	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(pConfig.prepareProcessors(getAllTestData(),""STR"").contains(filter));"	0	0	94.37704515457153
16	9	/	ProcessorConfigTest	incAndExc	"assertTrue(contains(filtered,""STR""));"	assertNotSame(getAllTestData(),filtered);	0	0	94.37704515457153
17	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedSize,result.size());	0	0	83.39675068855286
17	1	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(result);	0	0	83.39675068855286
17	2	/	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedProfile.hashCode(),result.get(0).hashCode());	0	0	83.39675068855286
17	3	/	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(result.isEmpty());	0	0	83.39675068855286
17	4	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotSame(expectedProfile,result.get(0));	0	0	83.39675068855286
17	5	/	ProfileUtilTest	multiple	assertNotNull(is);	assertThrows(IOException.class,()->focalMethodThrowsIOException());	0	0	83.39675068855286
17	6	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(expectedProfile,result.get(0));	0	0	83.39675068855286
17	7	/	ProfileUtilTest	multiple	assertNotNull(is);	assertArrayEquals(expectedProfiles.toArray(),result.toArray());	0	0	83.39675068855286
17	8	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(result.contains(expectedProfile));	0	0	83.39675068855286
17	9	/	ProfileUtilTest	multiple	assertNotNull(is);	"assertTrue(result.stream().allMatch(p->p.getName().startsWith(""STR"")));"	0	0	83.39675068855286
18	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(hasInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	1	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertArrayEquals(expectedArray,getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	2	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNotSame(expectedObj,getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	3	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNull(getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	4	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNotNull(getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	5	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNotEquals(expectedArray,getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	6	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNotEquals(""STR"",getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	7	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertEquals(""STR"",getInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	8	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(hasInitContainer(builder,""STR""));"	0	0	159.6506631374359
18	9	/	InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertSame(expectedObj,getInitContainer(builder,""STR""));"	0	0	159.6506631374359
19	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertEquals(expectedUrl,url);	0	0	72.78742504119873
19	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertTrue(url.startsWith(expectedPrefix));	0	0	72.78742504119873
19	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertNotEquals(unexpectedUrl,url);	0	0	72.78742504119873
19	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertSame(expectedUrl,url);	0	0	72.78742504119873
19	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertNotSame(""STR"",expectedUrl,url);"	0	0	72.78742504119873
19	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertFalse(url.startsWith(unexpectedPrefix));	0	0	72.78742504119873
19	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertNotNull(url);	0	0	72.78742504119873
19	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertFalse(url.isEmpty());	0	0	72.78742504119873
19	8	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertTrue(url.isEmpty());	0	0	72.78742504119873
19	9	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	assertNull(url);	0	0	72.78742504119873
20	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	unset_value_is_null	"assertTrue(config.isNull(""STR""));"	???;	0	0	51.78665900230408
21	0	OpenLiberty/ci.common	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertSame(serverEnvFile,newFile(serverDirectory.getCanonicalPath()+""STR""));"	0	0	49.514442920684814
21	1	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertEquals(""STR"",newString(Files.readAllBytes(serverEnvBackup.toPath())));"	0	0	49.514442920684814
21	2	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNull(serverEnvFile.getParentFile());	0	0	49.514442920684814
21	3	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile.exists());	0	0	49.514442920684814
21	4	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotNull(serverEnvBackup.getParentFile());	0	0	49.514442920684814
21	5	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotSame(serverEnvBackup,serverEnvFile);	0	0	49.514442920684814
21	6	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBackup.exists());	0	0	49.514442920684814
21	7	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(serverEnv.toPath()));	0	0	49.514442920684814
21	8	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"assertNotEquals(""STR"",newString(Files.readAllBytes(serverEnvBackup.toPath())));"	0	0	49.514442920684814
21	9	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBackup.delete());	0	0	49.514442920684814
22	0	OpenLiberty/ci.common	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotSame(""STR"",fileString);"	0	0	54.91417074203491
22	1	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertSame(""STR"",fileString);"	0	0	54.91417074203491
22	2	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertNotEquals(""STR"",fileString);"	0	0	54.91417074203491
22	3	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	0	0	54.91417074203491
22	4	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertArrayEquals(""STR"".getBytes(),fileString.getBytes());"	0	0	54.91417074203491
22	5	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(util.readFile(tempFile).contains(""STR""));"	0	0	54.91417074203491
22	6	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0	0	54.91417074203491
22	7	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertFalse(fileString.isEmpty());	0	0	54.91417074203491
22	8	/	DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotEquals(null,fileString);	0	0	54.91417074203491
23	0	OpenLiberty/ci.common	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists()&&targetFile.length()>0);	0	0	58.114375829696655
23	1	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(srcDir));	0	0	58.114375829696655
23	2	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0	0	58.114375829696655
23	3	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(""STR"",targetFile.getName());"	0	0	58.114375829696655
23	4	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.exists());	0	0	58.114375829696655
23	5	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0	0	58.114375829696655
23	6	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1	0	58.114375829696655
23	7	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(newFile(targetDir,""STR"").getCanonicalPath(),targetFile.getCanonicalPath());"	0	0	58.114375829696655
23	8	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(targetDir));	0	0	58.114375829696655
24	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	"assertFalse(evt.getLoggerName().equals(""STR""));"	0	0	45.13249707221985
24	1	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotNull(filter.decide(evt));	0	0	45.13249707221985
24	2	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNull(filter.decide(null));	0	0	45.13249707221985
24	3	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(null));	0	0	45.13249707221985
24	4	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertArrayEquals(newObject[]{FilterReply.DENY},newObject[]{filter.decide(evt)});	0	0	45.13249707221985
24	5	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	"assertTrue(evt.getLoggerName().startsWith(""STR""));"	0	0	45.13249707221985
24	6	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotSame(FilterReply.ACCEPT,filter.decide(evt));	0	0	45.13249707221985
24	7	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1	0	45.13249707221985
24	8	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0	0	45.13249707221985
24	9	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertSame(FilterReply.DENY,filter.decide(evt));	0	0	45.13249707221985
25	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult.length(),normalizedUrl.length());	0	0	120.31581902503967
25	1	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(normalizedUrl.startsWith(testSourceUrl.getProtocol()));	0	0	120.31581902503967
25	2	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	0	120.31581902503967
25	3	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testSourceUrl,sourceUrl);	0	0	120.31581902503967
25	4	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(sourceUrl.getRef());	0	0	120.31581902503967
25	5	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	0	0	120.31581902503967
25	6	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult,normalizedUrl);	0	0	120.31581902503967
25	7	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	0	120.31581902503967
25	8	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(urlToFilter.isEmpty());	0	0	120.31581902503967
25	9	/	BasicURLNormalizerTest	testQuerySort	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(urlToFilter.contains(testSourceUrl.getHost()));	0	0	120.31581902503967
26	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.startsWith(""STR""));"	0	0	124.1377341747284
26	1	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testSourceUrl,sourceUrl);	0	0	124.1377341747284
26	2	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	0	124.1377341747284
26	3	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(testUrl,normalizedUrl);	0	0	124.1377341747284
26	4	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	0	0	124.1377341747284
26	5	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl,normalizedUrl);	0	0	124.1377341747284
26	6	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(normalizedUrl.contains(""STR""));"	0	0	124.1377341747284
26	7	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	0	124.1377341747284
26	8	/	BasicURLNormalizerTest	testRemoveAllQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(urlFilter.filter(null,null,null));	0	0	124.1377341747284
27	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(urlWithEscapedCharacters.length()>0);	0	0	131.54361987113953
27	1	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	0	131.54361987113953
27	2	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(sourceUrl,testSourceUrl);	0	0	131.54361987113953
27	3	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0	0	131.54361987113953
27	4	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.contains(""STR""));"	0	0	131.54361987113953
27	5	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl);	0	0	131.54361987113953
27	6	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(normalizedUrl.isEmpty());	0	0	131.54361987113953
27	7	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(urlWithEscapedCharacters,testUrl);	0	0	131.54361987113953
27	8	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(sourceMetadata);	0	0	131.54361987113953
27	9	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	0	131.54361987113953
28	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.CLIENT,result.get(0).getTargetType());	0	0	84.45892286300659
28	1	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.PREFER_CLIENT));	0	0	84.45892286300659
28	2	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	0	0	84.45892286300659
28	3	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.PREFER_CLIENT,result.get(2).getTargetType());	0	0	84.45892286300659
28	4	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.MEMBER));	0	0	84.45892286300659
28	5	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.size());	0	0	84.45892286300659
28	6	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.CLIENT));	0	0	84.45892286300659
28	7	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.isEmpty());	0	0	84.45892286300659
28	8	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.ALL));	0	0	84.45892286300659
28	9	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.MEMBER,result.get(1).getTargetType());	0	0	84.45892286300659
29	0	hazelcast/hazelcast-simulator	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	"assertTrue(registry.contains(""STR""));"	0	0	73.15382289886475
29	1	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.size());	0	0	73.15382289886475
29	2	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(5,registry.size());	0	0	73.15382289886475
29	3	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	0	0	73.15382289886475
29	4	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertSame(agents,registry);	0	0	73.15382289886475
29	5	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	"assertFalse(registry.contains(""STR""));"	0	0	73.15382289886475
29	6	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	"assertNull(registry.get(""STR""));"	0	0	73.15382289886475
29	7	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.isEmpty());	0	0	73.15382289886475
29	8	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	"assertNotNull(registry.get(""STR""));"	0	0	73.15382289886475
29	9	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotSame(agents,registry);	0	0	73.15382289886475
30	0	hazelcast/hazelcast-simulator	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	1	0	74.28058791160583
30	1	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0	0	74.28058791160583
30	2	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.agents.isEmpty());	0	0	74.28058791160583
30	3	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.agents.entrySet().stream().anyMatch(e->e.getKey().equals(""STR"")&&e.getValue().equals(""STR"")));"	0	0	74.28058791160583
30	4	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(2,registry.agentCount());	0	0	74.28058791160583
30	5	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertNotNull(registry.getAgent(""STR""));"	0	0	74.28058791160583
30	6	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertNull(registry.getAgent(""STR""));"	0	0	74.28058791160583
30	7	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertSame(agentsFile,registry.getAgentsFile());	0	0	74.28058791160583
30	8	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.agents.containsKey(""STR""));"	0	0	74.28058791160583
30	9	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	"assertTrue(registry.agents.containsValue(""STR""));"	0	0	74.28058791160583
31	0	javadev/moneytostr-russian	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertEquals(MoneyToStr.Currency.UAH,moneyToStrUAH.getCurrency());	0	0	47.39478302001953
31	1	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotEquals(moneyToStrUAH.getCurrency(),moneyToStrRUR.getCurrency());	0	0	47.39478302001953
31	2	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertNotSame(""STR"",fractPart,theMoney);"	0	0	47.39478302001953
31	3	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(moneyToStrRUR.getCurrency());	0	0	47.39478302001953
31	4	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertTrue(moneyToStrEURRUS.getCurrency()instanceofMoneyToStr.Currency);	0	0	47.39478302001953
31	5	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertFalse(moneyToStrUSDENG.getCurrency()==MoneyToStr.Currency.RUR);	0	0	47.39478302001953
31	6	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNull(intPart);	0	0	47.39478302001953
31	7	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertSame(intPart,theMoney.longValue());	0	0	47.39478302001953
31	8	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotEquals(moneyToStrUAHENG.getCurrency(),moneyToStrUAH.getCurrency());	0	0	47.39478302001953
31	9	/	MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""},moneyToStrCustom.getStringArray());"	0	0	47.39478302001953
32	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertSame(0,focal.count(poolKey));	0	0	93.62941598892212
32	1	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(focal.count(poolKey)==10);	0	0	93.62941598892212
32	2	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(null);	0	0	93.62941598892212
32	3	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(5,focal.count(poolKey));	0	0	93.62941598892212
32	4	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertArrayEquals(2,3});	0	0	93.62941598892212
32	5	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,focal.count(poolKey));	0	0	93.62941598892212
32	6	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(5,focal.count(poolKey));	0	0	93.62941598892212
32	7	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(focal.count(poolKey)>0);	0	0	93.62941598892212
32	8	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(focal.count(poolKey),CoreMatchers.is(0));	0	0	93.62941598892212
32	9	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(focal.count(poolKey));	0	0	93.62941598892212
33	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertNotNull(this.getConnectionPool(this.connTasks.get(""STR"")));"	0	0	73.90972399711609
33	1	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertTrue(StringUtils.isBlank(""STR""));"	0	0	73.90972399711609
33	2	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertNull(this.getConnectionPool(this.connTasks.get(""STR"")));"	0	0	73.90972399711609
33	3	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(pool.size()==0);	0	0	73.90972399711609
33	4	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertEquals(0,count(""STR""));"	0	0	73.90972399711609
33	5	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertFalse(count(""STR"")<0);"	0	0	73.90972399711609
33	6	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertFalse(StringUtils.isBlank(""STR""));"	0	0	73.90972399711609
33	7	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertTrue(count(""STR"")>=0);"	0	0	73.90972399711609
33	8	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	"assertNotEquals(0,count(""STR""));"	0	0	73.90972399711609
33	9	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(pool.size()>0);	0	0	73.90972399711609
34	0	arnohaase/a-foundation	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsValue(someValue));	0	0	50.77014899253845
34	1	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,result.size());	0	0	50.77014899253845
34	2	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedValue,result.get(someKey));	0	0	50.77014899253845
34	3	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	0	0	50.77014899253845
34	4	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsKey(null));	0	0	50.77014899253845
34	5	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.isEmpty());	0	0	50.77014899253845
34	6	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsKey(someKey));	0	0	50.77014899253845
34	7	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsValue(someValue));	0	0	50.77014899253845
34	8	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedCount,result.keySet().size());	0	0	50.77014899253845
34	9	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(resultinstanceofHashMap);	0	0	50.77014899253845
35	0	arnohaase/a-foundation	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertEquals(""STR"",graph.minimalCycles().get(1));"	0	0	53.56606602668762
35	1	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.minimalCycles().isEmpty());	0	0	53.56606602668762
35	2	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0	0	53.56606602668762
35	3	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(0,graph.minimalCycles().size());	0	0	53.56606602668762
35	4	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertNotEquals(""STR"",graph.minimalCycles().get(0));"	0	0	53.56606602668762
35	5	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1	0	53.56606602668762
35	6	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.minimalCycles().isEmpty());	0	0	53.56606602668762
35	7	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(2,graph.minimalCycles().size());	0	0	53.56606602668762
35	8	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles()||!graph.hasCycles());	0	0	53.56606602668762
35	9	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	"assertEquals(""STR"",graph.minimalCycles().get(0));"	0	0	53.56606602668762
36	0	arnohaase/a-foundation	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofArrayIterable);	0	0	50.420151710510254
36	1	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()>=0);	0	0	50.420151710510254
36	2	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0	0	50.420151710510254
36	3	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1	0	50.420151710510254
36	4	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0	0	50.420151710510254
36	5	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(null,graph.edges());	0	0	50.420151710510254
36	6	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().iterator().hasNext());	0	0	50.420151710510254
36	7	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofCollection);	0	0	50.420151710510254
36	8	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertDoesNotThrow(()->graph.edges().forEach(System.out::println));	0	0	50.420151710510254
36	9	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	0	0	50.420151710510254
37	0	nidi3/raml-loader	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThrows(ResourceNotFoundException.class,()->fetchResource(""STR"",0));"	0	0	365.3798129558563
37	1	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotNull(fetchResource(""STR"",0));"	0	0	365.3798129558563
37	2	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertSame(expectedObject,fetchResource(""STR"",0));"	0	0	365.3798129558563
37	3	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNull(fetchResource(""STR"",0));"	0	0	365.3798129558563
37	4	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertFalse(fetchResource(""STR"",0)instanceofInputStream);"	0	0	365.3798129558563
37	5	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotEquals(""STR"",fetchResource(""STR"",0));"	0	0	365.3798129558563
37	6	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertEquals(""STR"",fetchResource(""STR"",0));"	0	0	365.3798129558563
37	7	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertTrue(fetchResource(""STR"",0)instanceofInputStream);"	0	0	365.3798129558563
37	8	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertNotSame(expectedObject,fetchResource(""STR"",0));"	0	0	365.3798129558563
37	9	/	LoaderTest	jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertDoesNotThrow(()->fetchResource(""STR"",0));"	0	0	365.3798129558563
38	0	nidi3/raml-loader	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertTrue(url.getProtocol().equals(""STR""));"	0	0	50.91839408874512
38	1	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertEquals(name,exception.getName());	0	0	50.91839408874512
38	2	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(newFile(url.getPath()).lastModified()>ifModifiedSince);	0	0	50.91839408874512
38	3	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertEquals(""STR"",url.getProtocol());"	0	0	50.91839408874512
38	4	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertTrue(url.getPath().endsWith(""STR""));"	0	0	50.91839408874512
38	5	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"assertTrue(url.getPath().startsWith(""STR""));"	0	0	50.91839408874512
38	6	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertNotNull(url);	0	0	50.91839408874512
38	7	/	LoaderTest	jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	assertTrue(newFile(url.getPath()).lastModified()<=ifModifiedSince);	0	0	50.91839408874512
39	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(false);	0	0	54.49095821380615
39	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	"assertNotEquals(""STR"",factory);"	0	0	54.49095821380615
39	2	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	0	0	54.49095821380615
39	3	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(Uninitialized,factory);	0	0	54.49095821380615
39	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	0	0	54.49095821380615
39	5	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(expected,factory);	0	0	54.49095821380615
39	6	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expected,factory);	0	0	54.49095821380615
39	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(true);	0	0	54.49095821380615
39	8	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofJsonSchemaFactory);	0	0	54.49095821380615
39	9	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(expected,factory);	0	0	54.49095821380615
40	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(7,event.getFieldCount());	0	0	54.691978931427
40	1	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getSourceIP());"	0	0	54.691978931427
40	2	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(sample1,event.getRawString());	0	0	54.691978931427
40	3	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDestinationIP());	0	0	54.691978931427
40	4	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDetectionTime());	0	0	54.691978931427
40	5	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0	0	54.691978931427
40	6	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getSeverity()>=5);	0	0	54.691978931427
40	7	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(0,event.getProtocolVersion());	0	0	54.691978931427
40	8	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertTrue(event.getDetectedMessage().contains(""STR""));"	0	0	54.691978931427
40	9	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	"assertEquals(""STR"",event.getThreatManager());"	0	0	54.691978931427
41	0	redraiment/jactiverecord	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(sql.toString().length()>0);	0	0	49.80850410461426
41	1	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNull(sql.toString());	0	0	49.80850410461426
41	2	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1	0	49.80850410461426
41	3	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertSame(expectedString,sql.toString());	0	0	49.80850410461426
41	4	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertNotSame(""STR"",sql.toString());"	0	0	49.80850410461426
41	5	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(sql.toString()instanceofMyClass);	0	0	49.80850410461426
41	6	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().startsWith(""STR""));"	0	0	49.80850410461426
41	7	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertTrue(sql.toString()instanceofString);	0	0	49.80850410461426
41	8	/	TSqlBuilderTest	testHaving	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	0	0	49.80850410461426
42	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(5,res.size());	0	0	48.24916195869446
42	1	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertSame(String.class,res.get(0).getClass());	0	0	48.24916195869446
42	2	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertFalse(res.contains(""STR""));"	0	0	48.24916195869446
42	3	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Integer.class,res.get(1).getClass());	0	0	48.24916195869446
42	4	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertNotNull(helloClass.getDeclaredField(""STR""));"	0	0	48.24916195869446
42	5	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	48.24916195869446
42	6	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	0	0	48.24916195869446
42	7	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(10,res.size());	0	0	48.24916195869446
42	8	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertNull(helloClass.getMethod(""STR""));"	0	0	48.24916195869446
42	9	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThrows(RuntimeException.class,()->helloClass.getConstructor(Integer.class));	0	0	48.24916195869446
43	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(true,ceļu.isRecognized());	0	0	90.35048294067383
43	1	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu.isRecognized());	0	0	90.35048294067383
43	2	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertDoesNotThrow(()->ceļu.isRecognized());	0	0	90.35048294067383
43	3	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized()>=0&&ceļu.isRecognized()<=100);	0	0	90.35048294067383
43	4	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	1	0	90.35048294067383
43	5	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertThrows(Exception.class,()->ceļu.isRecognized());	0	0	90.35048294067383
43	6	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertSame(expected,ceļu.isRecognized());	0	0	90.35048294067383
43	7	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotSame(unexpected,ceļu.isRecognized());	0	0	90.35048294067383
43	8	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.isRecognized());	0	0	90.35048294067383
44	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller);	0	0	28.04159712791443
44	1	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(null,testObjectName001);	0	0	28.04159712791443
44	2	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(polledObjects.contains(polled001));	0	0	28.04159712791443
44	3	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	"assertEquals(""STR"",accessConnectionFactoryDesc);"	0	0	28.04159712791443
44	4	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0	0	28.04159712791443
44	5	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockLogger,poller.getLogger());	0	0	28.04159712791443
44	6	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockAccessConnection,mockBatchCapableAccessConnection);	0	0	28.04159712791443
44	7	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertArrayEquals(newObject[]{mockScheduler},poller.getSchedulers().toArray());	0	0	28.04159712791443
44	8	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNull(mockBatchCapableAccessConnection.getBatchExecutionResult());	0	0	28.04159712791443
44	9	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(processes.isEmpty());	0	0	28.04159712791443
45	0	NanoHttpd/nanohttpd	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(SpecificHandler.class,routerNanoHttpd.getNotFoundHandler());	0	0	61.671947956085205
45	1	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(null,routerNanoHttpd.getNotImplementedHandler());	0	0	61.671947956085205
45	2	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNull(routerNanoHttpd.getNotImplementedHandler());	0	0	61.671947956085205
45	3	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertArrayEquals(""two"",""three""});"	0	0	61.671947956085205
45	4	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(null,routerNanoHttpd.getNotFoundHandler());	0	0	61.671947956085205
45	5	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(GeneralHandler.class,routerNanoHttpd.getNotFoundHandler());	0	0	61.671947956085205
45	6	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(GeneralHandler.class,routerNanoHttpd.getNotImplementedHandler());	0	0	61.671947956085205
45	7	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd.getNotImplementedHandler());	0	0	61.671947956085205
45	8	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getNotFoundHandler()instanceofGeneralHandler);	0	0	61.671947956085205
45	9	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertFalse(routerNanoHttpd.getNotFoundHandler()instanceofSpecificHandler);	0	0	61.671947956085205
46	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(0,response.getTimestamp());	0	0	51.116992712020874
46	1	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(client,response.getClient());	0	0	51.116992712020874
46	2	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0	0	51.116992712020874
46	3	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0	0	51.116992712020874
46	4	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response.getNonce());	0	0	51.116992712020874
46	5	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isVerified());	0	0	51.116992712020874
46	6	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.isError());	0	0	51.116992712020874
46	7	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0	0	51.116992712020874
46	8	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(client,response.getClient());	0	0	51.116992712020874
46	9	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isOk());	0	0	51.116992712020874
47	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertArrayEquals(""STR"".toCharArray(),getBuildUrl().toCharArray());"	0	0	662.4065411090851
47	1	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertTrue(getBuildUrl().startsWith(""STR""));"	0	0	662.4065411090851
47	2	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertThat(getBuildUrl(),equalToIgnoringCase(""STR""));"	0	0	662.4065411090851
47	3	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertEquals(""STR"",getBuildUrl());"	0	0	662.4065411090851
47	4	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertSame(""STR"",getBuildUrl());"	0	0	662.4065411090851
47	5	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertThat(getBuildUrl(),containsString(""STR""));"	0	0	662.4065411090851
47	6	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertFalse(getBuildUrl().isEmpty());	0	0	662.4065411090851
47	7	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotSame(""STR"",getBuildUrl());"	0	0	662.4065411090851
47	8	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	assertNotNull(getBuildUrl());	0	0	662.4065411090851
47	9	/	ShippableTest	testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	"assertNotEquals(""STR"",getBuildUrl());"	0	0	662.4065411090851
48	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()<0);	0	0	87.79899024963379
48	1	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	0	0	87.79899024963379
48	2	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(2,p.getBlankIndex());	0	0	87.79899024963379
48	3	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==-1||p.getBlankIndex()>0);	0	0	87.79899024963379
48	4	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()<9);	0	0	87.79899024963379
48	5	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==0||p.getBlankIndex()==8);	0	0	87.79899024963379
48	6	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(3,p.getBlankIndex());	0	0	87.79899024963379
48	7	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(4,p.getBlankIndex());	0	0	87.79899024963379
48	8	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<=8);	0	0	87.79899024963379
48	9	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	0	0	87.79899024963379
48	10	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>2||p.getBlankIndex()<7);	0	0	87.79899024963379
49	0	rockagen/commons-lib	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",FOCAL.repeatChar('B',3));"	0	0	57.074180126190186
49	1	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertSame(FOCAL.repeatChar('A',3),FOCAL.repeatChar('A',3));	0	0	57.074180126190186
49	2	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertThat(FOCAL.repeatChar('A',3),containsString(""STR""));"	0	0	57.074180126190186
49	3	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('A',3));"	0	0	57.074180126190186
49	4	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertArrayEquals('A','A'});	0	0	57.074180126190186
49	5	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertTrue(FOCAL.repeatChar('A',5).startsWith(""STR""));"	0	0	57.074180126190186
49	6	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNotNull(FOCAL.repeatChar('B',0));	0	0	57.074180126190186
49	7	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertNull(FOCAL.repeatChar('A',-1));	0	0	57.074180126190186
49	8	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotSame(""STR"",FOCAL.repeatChar('A',3));"	0	0	57.074180126190186
49	9	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertFalse(FOCAL.repeatChar('B',2).isEmpty());	0	0	57.074180126190186
