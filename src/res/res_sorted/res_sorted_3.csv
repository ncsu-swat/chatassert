TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotNull(qResult);	0	1	16.69209313392639
	1	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	0	1	16.69209313392639
	2	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1	1	16.69209313392639
	3	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotEquals(expectedResult,actualResult);	0	1	16.69209313392639
	4	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertSame(expectedObject,actualObject);	0	1	16.69209313392639
22	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	0	1	33.788313150405884
	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0	1	33.788313150405884
	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",companyClass.getName());"	0	1	33.788313150405884
	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(idProperty.getName(),PROP_ID);	1	1	33.788313150405884
	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(OType.INTEGER,idProperty.getType());	0	1	33.788313150405884
	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isMandatory());	0	1	33.788313150405884
	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	0	1	33.788313150405884
	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isReadonly());	0	1	33.788313150405884
	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(Integer.valueOf(10),idProperty.getMax());	0	1	33.788313150405884
	9	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(Integer.valueOf(4),idProperty.getMin());	0	1	33.788313150405884
23	0	orientechnologies/orientdb	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertNotNull(execute);	0	1	49.86923384666443
	1	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertTrue(execute.size()>0);	0	1	49.86923384666443
	2	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertEquals(0.1980897715667625,0.0001);	0	1	49.86923384666443
	3	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertFalse(execute.isEmpty());	0	1	49.86923384666443
	4	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"assertEquals(next.getClassName(),""STR"");"	0	1	49.86923384666443
	5	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertTrue(next.isEmbedded());	0	1	49.86923384666443
	6	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertFalse(next.isLazyLoad());	0	1	49.86923384666443
	7	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertNotNull(next.asStream());	0	1	49.86923384666443
	8	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertTrue(next.equals(next));	0	1	49.86923384666443
	9	/	LuceneSpatialMiscFunctionsTest	testDistance	"assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	assertFalse(next.equals(newObject()));	0	1	49.86923384666443
24	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	60.64891505241394
	1	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotNull(result);	0	1	60.64891505241394
	2	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertTrue(query.length()>0);	0	1	60.64891505241394
	3	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertFalse(query.toString().isEmpty());	0	1	60.64891505241394
	4	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertSame(db,result.getDatabase());	0	1	60.64891505241394
	5	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotSame(null,db);	0	1	60.64891505241394
	6	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertNotNull(""STR"");"	0	1	60.64891505241394
	7	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertFalse(""STR"");"	0	1	60.64891505241394
	8	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertNotSame(""STR"",db.getName());"	0	1	60.64891505241394
	9	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertEquals(2,""STR"");"	0	1	60.64891505241394
25	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(hasNext());	0	1	34.062031984329224
	1	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(true,hasNext());	0	1	34.062031984329224
	2	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(Boolean.TRUE,hasNext());	0	1	34.062031984329224
	3	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(Boolean.TRUE==hasNext());	0	1	34.062031984329224
	4	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(Boolean.TRUE.equals(hasNext()));	0	1	34.062031984329224
	5	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertNotNull(hasNext());	0	1	34.062031984329224
	6	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertSame(Boolean.class,hasNext().getClass());	0	1	34.062031984329224
	7	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertArrayEquals(newObject[]{true},newObject[]{hasNext()});	0	1	34.062031984329224
	8	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(Boolean.TRUE.toString(),hasNext().toString());	0	1	34.062031984329224
	9	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	"assertEquals(""STR"",Boolean.toString(hasNext()));"	0	1	34.062031984329224
26	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotNull(""STR"");"	0	1	62.14734482765198
	1	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNull(""STR"");"	0	1	62.14734482765198
	2	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertTrue(""STR"");"	0	1	62.14734482765198
	3	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertFalse(""STR"");"	0	1	62.14734482765198
	4	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	62.14734482765198
	5	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	62.14734482765198
	6	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertSame(filter,""STR"");"	0	1	62.14734482765198
	7	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotSame(cache1,""STR"");"	0	1	62.14734482765198
	8	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertArrayEquals(expectedArray,""STR"");"	0	1	62.14734482765198
	9	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertEquals(3.14,""STR"");"	0	1	62.14734482765198
27	0	orientechnologies/orientdb	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertNotNull(item);	0	1	45.153018951416016
	1	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertTrue(res.hasNext());	0	1	45.153018951416016
	2	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertTrue(set.contains(emb));	0	1	45.153018951416016
	3	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertSame(doc,doc);	0	1	45.153018951416016
	4	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertSame(emb,emb);	0	1	45.153018951416016
	5	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertNotEquals(0,set.size());	0	1	45.153018951416016
	6	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertFalse(set.isEmpty());	0	1	45.153018951416016
	7	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertTrue(set.iterator().next().getType()instanceofOType.EMBEDDEDSET);	0	1	45.153018951416016
	8	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,""STR"");"	0	1	45.153018951416016
	9	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertNotEquals(0,doc.getProperties().size());	0	1	45.153018951416016
28	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	1	28.969252109527588
	1	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0	1	28.969252109527588
	2	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	1	28.969252109527588
	3	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getInternalStatus().equals(ORecordElement.STATUS.LOADED));	0	1	28.969252109527588
	4	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(doc.getInternalStatus().equals(ORecordElement.STATUS.INITIALIZED));	0	1	28.969252109527588
	5	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertNotNull(doc.getIdentity());	0	1	28.969252109527588
	6	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isValid());	0	1	28.969252109527588
	7	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getClassName().isEmpty());	0	1	28.969252109527588
	8	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().getClusterId()==0);	0	1	28.969252109527588
	9	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().getClusterPosition()==-1);	0	1	28.969252109527588
29	0	orientechnologies/orientdb	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(db.getMetadata().getSchema().existsClass(className));	0	1	65.33069801330566
	1	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(className,clazz.getName());	0	1	65.33069801330566
	2	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length==32);	0	1	65.33069801330566
	3	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getName().equals(className));	0	1	65.33069801330566
	4	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertNotNull(clazz);	1	1	65.33069801330566
	5	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertNotEquals(null,db.getMetadata().getSchema());	0	1	65.33069801330566
	6	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(clazz,db.getMetadata().getSchema().getClass(className));	0	1	65.33069801330566
	7	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterSelection()>-1);	0	1	65.33069801330566
	8	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(32,clazz.getDefaultClusterIdForNewInstance());	0	1	65.33069801330566
	9	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length>=1);	0	1	65.33069801330566
30	0	orientechnologies/orientdb	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(1,operations.size());	0	1	49.34961009025574
	1	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(operations);	0	1	49.34961009025574
	2	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(operationsinstanceofList);	0	1	49.34961009025574
	3	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(operations.isEmpty());	0	1	49.34961009025574
	4	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(null,request);	0	1	49.34961009025574
	5	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),request.getRecordSerializer());	0	1	49.34961009025574
	6	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(channel,null);	0	1	49.34961009025574
	7	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(-1,request.getTransactionId());	0	1	49.34961009025574
	8	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations,request.getOperations());	0	1	49.34961009025574
	9	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getByteCount()>0);	0	1	49.34961009025574
31	0	orientechnologies/orientdb	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(db);	0	1	28.977619886398315
	1	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.exists());	0	1	28.977619886398315
	2	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(className);	0	1	28.977619886398315
	3	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(itemclassName);	0	1	28.977619886398315
	4	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isActiveOnCurrentThread());	0	1	28.977619886398315
	5	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertFalse(db.isClosed());	0	1	28.977619886398315
	6	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isDocument());	0	1	28.977619886398315
	7	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertEquals(1,db.getClusters());	0	1	28.977619886398315
	8	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNull(db.getDefaultClusterId());	0	1	28.977619886398315
	9	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isUseCache());	0	1	28.977619886398315
32	0	orientechnologies/orientdb	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc);	0	1	32.46160006523132
	1	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager);	0	1	32.46160006523132
	2	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager.getRecord());	0	1	32.46160006523132
	3	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()instanceofODocument);	0	1	32.46160006523132
	4	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&manager.isDirty(doc));	0	1	32.46160006523132
	5	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&!manager.isNew(doc));	0	1	32.46160006523132
	6	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&!manager.isDirty(doc));	0	1	32.46160006523132
	7	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&manager.isNew(doc));	0	1	32.46160006523132
	8	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.getIdentity().getClusterId());	0	1	32.46160006523132
	9	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.getIdentity().getClusterPosition());	0	1	32.46160006523132
33	0	orientechnologies/orientdb	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNotNull(array);	0	1	29.791091918945312
	1	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertTrue(array.isEmpty());	0	1	29.791091918945312
	2	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.size());	1	1	29.791091918945312
	3	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertArrayEquals(newInteger[]{},array.toArray());	0	1	29.791091918945312
	4	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.indexOf(1));	0	1	29.791091918945312
	5	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.lastIndexOf(1));	0	1	29.791091918945312
	6	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertFalse(array.contains(1));	0	1	29.791091918945312
	7	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertFalse(array.contains(null));	0	1	29.791091918945312
	8	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNull(array.get(0));	0	1	29.791091918945312
	9	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertThrows(IndexOutOfBoundsException.class,()->array.get(1));	0	1	29.791091918945312
34	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(result);	0	1	28.15706706047058
	1	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(!result);	0	1	28.15706706047058
	2	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	0	1	28.15706706047058
	3	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove);	0	1	28.15706706047058
	4	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToAdd.size());	0	1	28.15706706047058
	5	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToRemove.size());	0	1	28.15706706047058
	6	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	0	1	28.15706706047058
	7	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(13));	0	1	28.15706706047058
	8	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get(12));	0	1	28.15706706047058
	9	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(removedKeys,keysToRemove);	0	1	28.15706706047058
35	0	orientechnologies/orientdb	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(rid,from.getRid());	0	1	45.36013388633728
	1	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(from.getRid());	0	1	45.36013388633728
	2	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(from.getRid().isValid());	0	1	45.36013388633728
	3	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(1,from.getVersion());	0	1	45.36013388633728
	4	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(12,from.getClusterId());	0	1	45.36013388633728
	5	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertFalse(from.getRid().isTemporary());	0	1	45.36013388633728
	6	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotEquals(newORecordId(0,0),from.getRid());	0	1	45.36013388633728
	7	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNull(to.getRid());	0	1	45.36013388633728
	8	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotSame(from.getRid(),to.getRid());	0	1	45.36013388633728
	9	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNull(to.getVal());	0	1	45.36013388633728
36	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(42));	0	1	91.66114902496338
	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	0	1	91.66114902496338
	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	0	1	91.66114902496338
	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.size());	0	1	91.66114902496338
	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(42));	0	1	91.66114902496338
	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToRemove.size());	0	1	91.66114902496338
	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	0	1	91.66114902496338
	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	0	1	91.66114902496338
	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove);	0	1	91.66114902496338
	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(processChangeEvent);	0	1	91.66114902496338
37	0	orientechnologies/orientdb	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertNotNull(db);	0	1	49.026999950408936
	1	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	"assertEquals(""STR"",db.getName());"	0	1	49.026999950408936
	2	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(false,db.isClosed());	0	1	49.026999950408936
	3	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertNotNull(index);	0	1	49.026999950408936
	4	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,index.getType());	0	1	49.026999950408936
	5	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	"assertEquals(4,""STR"");"	0	1	49.026999950408936
	6	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(true,person1.getIdentity().isValid());	0	1	49.026999950408936
	7	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(true,person2.getIdentity().isValid());	0	1	49.026999950408936
	8	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(true,person3.getIdentity().isValid());	0	1	49.026999950408936
	9	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	"assertRids(""STR"");"	assertEquals(true,person4.getIdentity().isValid());	0	1	49.026999950408936
38	0	orientechnologies/orientdb	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotNull(birthday);	0	1	33.06078791618347
	1	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertFalse(birthday==null);	0	1	33.06078791618347
	2	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(birthday,null);	0	1	33.06078791618347
	3	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotSame(birthday,null);	0	1	33.06078791618347
	4	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertEquals(newDate(108,3,30),birthday);	0	1	33.06078791618347
	5	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertEquals(birthday.getTime(),newDate(108,3,30).getTime());	0	1	33.06078791618347
	6	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(birthday,newDate(109,3,30));	0	1	33.06078791618347
	7	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotSame(newDate(109,3,30),birthday);	0	1	33.06078791618347
	8	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	"assertNull(""STR"");"	0	1	33.06078791618347
	9	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	"assertArrayEquals(newObject[]{birthday},""STR"");"	0	1	33.06078791618347
39	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(cfgJson);	0	1	29.18778705596924
	1	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(ODefaultRecordMapper.DEFAULT_CLASS_NAME,res.get(0).getClassName());	0	1	29.18778705596924
	2	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(configurator);	0	1	29.18778705596924
	3	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(proc);	0	1	29.18778705596924
	4	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0	1	29.18778705596924
	5	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0	1	29.18778705596924
	6	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0	1	29.18778705596924
	7	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res.get(0));	0	1	29.18778705596924
	8	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotSame(cfgJson,res.toString());	0	1	29.18778705596924
	9	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotSame(cfgJson,res.get(0).toString());	0	1	29.18778705596924
40	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotNull(compositeKey);	0	1	43.8287239074707
	1	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertTrue(compositeKey.getKeys().size()==1);	0	1	43.8287239074707
	2	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertFalse(compositeKey.getKeys().isEmpty());	0	1	43.8287239074707
	3	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertEquals(2,compositeKey.getKeys().size());	0	1	43.8287239074707
	4	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertTrue(compositeKey.getKeys().contains(compositeKeyToAdd));	0	1	43.8287239074707
	5	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotSame(compositeKey.getKeys(),compositeKeyToAdd.getKeys());	0	1	43.8287239074707
	6	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertFalse(compositeKey.getKeys().equals(compositeKeyToAdd.getKeys()));	0	1	43.8287239074707
	7	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotSame(compositeKey,compositeKeyToAdd);	0	1	43.8287239074707
	8	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotNull(compositeKey.getKeys().get(0));	0	1	43.8287239074707
	9	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertThrows(IndexOutOfBoundsException.class,()->compositeKey.getKeys().get(2));	0	1	43.8287239074707
41	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0	1	35.01261520385742
	1	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	"assertTrue(""STR"");"	0	1	35.01261520385742
	2	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotNull(result);	0	1	35.01261520385742
	3	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertEquals(1,result.getMetadata().getColumnNames().size());	0	1	35.01261520385742
	4	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	"assertEquals(""STR"",result.getMetadata().getColumnNames().get(0));"	0	1	35.01261520385742
	5	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals(0,result.getMetadata().getColumnNames().size());	0	1	35.01261520385742
	6	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals(null,result.getMetadata().getColumnNames());	0	1	35.01261520385742
	7	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	"assertFalse(""STR"");"	0	1	35.01261520385742
	8	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	"assertNotEquals(""STR"",result.getMetadata().getColumnNames().get(0));"	0	1	35.01261520385742
	9	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	"assertNull(""STR"");"	0	1	35.01261520385742
42	0	orientechnologies/orientdb	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"assertEquals(""STR"",decryptedMsg);"	0	1	43.71794080734253
	1	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertNotNull(decryptedMsg);	0	1	43.71794080734253
	2	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"assertTrue(""STR"");"	0	1	43.71794080734253
	3	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"assertNotEquals(""STR"",decryptedMsg);"	0	1	43.71794080734253
	4	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertNotEquals(magic,decryptedMsg);	0	1	43.71794080734253
	5	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"assertThrows(""STR"",OSecurityException.class,""STR"");"	0	1	43.71794080734253
	6	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertEquals(20,decryptedMsg.length());	0	1	43.71794080734253
	7	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertArrayEquals(msgToEncrypt.getBytes(),decryptedMsg.getBytes());	0	1	43.71794080734253
	8	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"assertFalse(""STR"");"	0	1	43.71794080734253
	9	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertSame(sk,newOSymmetricKey(sk.getType(),sk.getEncoded()));	0	1	43.71794080734253
43	0	orientechnologies/orientdb	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNull(treeValue);	1	1	30.71724796295166
	1	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotNull(treeValue);	0	1	30.71724796295166
	2	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNull(treeValue.getValue());	0	1	30.71724796295166
	3	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotNull(treeValue.getValue());	0	1	30.71724796295166
	4	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertEquals(null,treeValue.getLink());	0	1	30.71724796295166
	5	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotEquals(null,treeValue.getLink());	0	1	30.71724796295166
	6	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertTrue(treeValue.isNull());	0	1	30.71724796295166
	7	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(treeValue.isNull());	0	1	30.71724796295166
	8	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertTrue(isLink(treeValue));	0	1	30.71724796295166
	9	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(isLink(treeValue));	0	1	30.71724796295166
44	0	orientechnologies/orientdb	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotNull(db);	0	1	57.472429037094116
	1	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotEquals(null,vertices);	0	1	57.472429037094116
	2	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertEquals(1,vertices.size());	0	1	57.472429037094116
	3	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	"assertEquals(""STR"",doc.getClassName());"	0	1	57.472429037094116
	4	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertTrue(db.isActiveOnCurrentThread());	0	1	57.472429037094116
	5	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertTrue(db.getTransaction().isActive());	0	1	57.472429037094116
	6	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotEquals(null,db.query(newOSQLSynchQuery<ODocument>(query)));	0	1	57.472429037094116
	7	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertFalse(db.isClosed());	0	1	57.472429037094116
	8	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	"assertEquals(1,""STR"");"	0	1	57.472429037094116
	9	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	"assertNotEquals(null,""STR"");"	0	1	57.472429037094116
45	0	DigitalPebble/storm-crawler	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	"assertThrows(MalformedURLException.class,""STR"");"	0	0	19.3572039604187
46	0	adlnet/jxapi	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0	1	28.778206825256348
	1	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0	1	28.778206825256348
	2	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotSame(expected,actual);	0	1	28.778206825256348
	3	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(activity.getId());	0	1	28.778206825256348
	4	/	ActivityTest	testGetId	assertNotNull(actual);	assertNull(activity.getResult());	0	1	28.778206825256348
	5	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(expected.equals(actual));	0	1	28.778206825256348
	6	/	ActivityTest	testGetId	assertNotNull(actual);	assertFalse(expected.equals(actual));	0	1	28.778206825256348
	7	/	ActivityTest	testGetId	assertNotNull(actual);	assertSame(expected,actual);	0	1	28.778206825256348
	8	/	ActivityTest	testGetId	assertNotNull(actual);	assertArrayEquals(expectedArray,resultArray);	0	1	28.778206825256348
	9	/	ActivityTest	testGetId	assertNotNull(actual);	assertThat(expected,equalTo(actual));	0	1	28.778206825256348
47	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	1	1	61.64394235610962
	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(statementRefinstanceofStatementReference);	0	1	61.64394235610962
	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getID());	0	1	61.64394235610962
	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	"assertNotEquals(""STR"",statementRef.getID());"	0	1	61.64394235610962
	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getID()));	0	1	61.64394235610962
	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertSame(statementRef,statementRef);	0	1	61.64394235610962
	6	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotSame(statementRef.getID(),newStatementReference(ID).getID());	0	1	61.64394235610962
	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getID());	0	1	61.64394235610962
	8	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertFalse(id.equals(null));	0	1	61.64394235610962
	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(String.class,statementRef.getID().getClass());	0	1	61.64394235610962
48	0	adlnet/jxapi	AccountTest	testAccount	assertNotNull(account);	assertNotEquals(account,newObject(){);	0	1	83.86084699630737
49	0	adlnet/jxapi	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	1	1	28.867536306381226
	1	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected.length,actual.length);	0	1	28.867536306381226
	2	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(actual);	0	1	28.867536306381226
	3	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected[0],actual[0]);	0	1	28.867536306381226
	4	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected[1],actual[1]);	0	1	28.867536306381226
	5	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.hasMbox());	0	1	28.867536306381226
	6	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.getName().equals(NAME));	0	1	28.867536306381226
	7	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(person.getMbox());	0	1	28.867536306381226
	8	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotEquals(expected,actual);	0	1	28.867536306381226
	9	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.getMbox()==actual);	0	1	28.867536306381226
50	0	fabric8io/fabric8-maven-plugin	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	assertNotNull(fakePlugin);	0	1	42.035351037979126
	1	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertNotNull(""STR"");"	0	1	42.035351037979126
	2	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertNotEquals(null,""STR"");"	0	1	42.035351037979126
	3	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	assertNotEquals(fakePlugin.getConfiguration(),null);	0	1	42.035351037979126
	4	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertTrue(""STR"");"	0	1	42.035351037979126
	5	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertEquals(""STR"",""STR"");"	0	1	42.035351037979126
	6	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	assertFalse(config.isEmpty());	0	1	42.035351037979126
	7	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	assertNotEquals(newHashMap<>(),config);	0	1	42.035351037979126
	8	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertEquals(1,""STR"");"	0	1	42.035351037979126
	9	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	"assertThat(config).containsEntry(""STR"",expected);"	"assertNotEquals(""STR"",""STR"");"	0	1	42.035351037979126
51	0	trautonen/coveralls-maven-plugin	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertTrue(source1.equals(source1));	0	1	34.41255021095276
	1	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertFalse(source1.equals(source2));	1	1	34.41255021095276
	2	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertEquals(source1.hashCode(),source1.hashCode());	0	1	34.41255021095276
	3	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotEquals(source1.hashCode(),source2.hashCode());	0	1	34.41255021095276
	4	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNull(source1.getCoverage());	0	1	34.41255021095276
	5	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source2.getCoverage());	0	1	34.41255021095276
	6	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNull(source2.getCompilationUnit());	0	1	34.41255021095276
	7	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source1.getDigest());	0	1	34.41255021095276
	8	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source1);	0	1	34.41255021095276
	9	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertSame(source1.getName(),source1.getName());	0	1	34.41255021095276
52	0	trautonen/coveralls-maven-plugin	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	36.245928049087524
	1	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertTrue(""STR"");"	0	1	36.245928049087524
	2	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	assertFalse(env.isEmpty());	0	1	36.245928049087524
	3	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	assertEquals(1,env.size());	0	1	36.245928049087524
	4	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNotNull(""STR"");"	0	1	36.245928049087524
	5	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNull(""STR"");"	0	1	36.245928049087524
	6	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	36.245928049087524
	7	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	36.245928049087524
	8	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	assertThrows(NullPointerException.class,()->getProperty(null));	0	1	36.245928049087524
	9	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertTrue(""STR"");"	0	1	36.245928049087524
53	0	trautonen/coveralls-maven-plugin	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertNotNull(stream);	0	1	32.150256872177124
	1	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertTrue(expectedFileName.equals(actualFileName));	0	1	32.150256872177124
	2	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertFalse(expectedFileName.equals(actualFileName));	0	1	32.150256872177124
	3	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertTrue(locate(sourceFile)!=null);	0	1	32.150256872177124
	4	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertFalse(IOUtils.toByteArray(locate(sourceFile)).length==0);	0	1	32.150256872177124
	5	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertNotNull(getSourceEncoding());	0	1	32.150256872177124
	6	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertFalse(getSourceEncoding().isEmpty());	0	1	32.150256872177124
	7	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertEquals(expectedSource,actualSource);	0	1	32.150256872177124
	8	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertFalse(expectedSource.equals(actualSource));	0	1	32.150256872177124
	9	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertTrue(expectedMd5Hash.equals(actualMd5Hash));	0	1	32.150256872177124
54	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotNull(getAddressLevel());	0	1	49.245975971221924
	1	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertEquals(AddressLevel.class,getAddressLevel().getClass());	0	1	49.245975971221924
	2	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertSame(AddressLevel.LEVEL3,getAddressLevel());	0	1	49.245975971221924
	3	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel().equals(AddressLevel.LEVEL3));	0	1	49.245975971221924
	4	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(addressLevel.name().equalsIgnoreCase(getAddressLevel().name()));	0	1	49.245975971221924
	5	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotNull(getAddressLevel().getDisplayName());	0	1	49.245975971221924
	6	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNull(getAddressLevel().getParent());	0	1	49.245975971221924
	7	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel().compareTo(AddressLevel.LEVEL3)<=0);	0	1	49.245975971221924
	8	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel()==AddressLevel.LEVEL2);	0	1	49.245975971221924
	9	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel()==null);	0	1	49.245975971221924
55	0	hazelcast/hazelcast-simulator	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNull(operation.getWorkerAddress());	1	1	40.85042190551758
	1	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(null,operation.getCause());	0	1	40.85042190551758
	2	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	"assertEquals(""STR"",operation.getTestCase().getTestCaseId());"	0	1	40.85042190551758
	3	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotEquals(null,operation.getWorkerAddress());	0	1	40.85042190551758
	4	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertSame(null,operation.getTestCase().getTestSuite());	0	1	40.85042190551758
	5	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(newInteger(4),newInteger(operation.hashCode()));	0	1	40.85042190551758
	6	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotEquals(newInteger(3),newInteger(operation.hashCode()));	0	1	40.85042190551758
	7	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotSame(fullOperation,operation);	0	1	40.85042190551758
	8	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(null,operation.toString());	0	1	40.85042190551758
	9	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotSame(testCase,fullOperation.getTestCase());	0	1	40.85042190551758
56	0	hazelcast/hazelcast-simulator	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertTrue(workerDeployment.containsKey(agent1.getAddress()));	0	1	39.72527837753296
	1	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertFalse(workerDeployment.isEmpty());	0	1	39.72527837753296
	2	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotNull(driver);	0	1	39.72527837753296
	3	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotEquals(workerDeployment.get(agent3.getAddress()).size(),0);	0	1	39.72527837753296
	4	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertEquals(2,workerDeployment.size());	0	1	39.72527837753296
	5	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertSame(registry,driver.getRegistry());	0	1	39.72527837753296
	6	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotEquals(workerDeployment.get(agent1.getAddress()).size(),workerDeployment.get(agent2.getAddress()).size());	0	1	39.72527837753296
	7	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertEquals(workerDeployment.get(agent1.getAddress()).get(0),driver.getWorkersPerAgent().get(agent1.getAddress()).getWorkers().get(0));	0	1	39.72527837753296
	8	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	"assertEquals(""STR"",workerDeployment.get(agent2.getAddress()).get(0).getType());"	0	1	39.72527837753296
	9	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertTrue(workerDeployment.get(agent3.getAddress()).get(0).isRunning());	0	1	39.72527837753296
57	0	jcodec/jcodec	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,true,0));	0	1	83.17997288703918
	1	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,true,0));	0	1	83.17997288703918
	2	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,1));	0	1	83.17997288703918
	3	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,2));	0	1	83.17997288703918
	4	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,3));	0	1	83.17997288703918
	5	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,true,4));	0	1	83.17997288703918
	6	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,false,true,5));	0	1	83.17997288703918
	7	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,false,6));	0	1	83.17997288703918
	8	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,false,false,7));	0	1	83.17997288703918
	9	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.I,true,true,8));	0	1	83.17997288703918
58	0	jcodec/jcodec	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotNull(color);	0	1	33.17408800125122
	1	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertEquals(64,buf.capacity());	0	1	33.17408800125122
	2	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(dup.hasArray());	0	1	33.17408800125122
	3	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(buf.isDirect());	0	1	33.17408800125122
	4	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(buf.capacity()>=64);	0	1	33.17408800125122
	5	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertFalse(NIOUtils.isEmpty(buf));	0	1	33.17408800125122
	6	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertFalse(NIOUtils.atEof(buf));	0	1	33.17408800125122
	7	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(NIOUtils.remainingInBuffer(buf)>=0);	0	1	33.17408800125122
	8	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotEquals(header.getData(),null);	0	1	33.17408800125122
	9	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotSame(color,null);	0	1	33.17408800125122
59	0	amlinv/stat-collection-utils	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockLogger);	0	1	36.38454794883728
	1	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pClient);	0	1	36.38454794883728
	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pReadResponse1);	0	1	36.38454794883728
	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pReadResponse2);	0	1	36.38454794883728
	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pSearchResponse);	0	1	36.38454794883728
	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection);	0	1	36.38454794883728
	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(objectName1);	0	1	36.38454794883728
	7	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(objectName2);	0	1	36.38454794883728
	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(queryExp);	0	1	36.38454794883728
	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(att1);	0	1	36.38454794883728
60	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockJmxConnector);	0	1	30.30351710319519
	1	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockMBeanServerConnection);	0	1	30.30351710319519
	2	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockAttributeList);	0	1	30.30351710319519
	3	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockQueryExp);	0	1	30.30351710319519
	4	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(objectName);	0	1	30.30351710319519
	5	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(testAttributeList);	0	1	30.30351710319519
	6	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockJmxConnector.getMBeanServerConnection());	0	1	30.30351710319519
	7	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockMBeanServerConnection.queryNames(objectName,mockQueryExp));	0	1	30.30351710319519
	8	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockAttributeList.asList());	0	1	30.30351710319519
	9	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(testAttributeList.size(),0);	0	1	30.30351710319519
61	0	TooTallNate/Java-WebSocket	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertNotNull(frame);	0	1	56.24690890312195
	1	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frameinstanceofBinaryFrame);	0	1	56.24690890312195
	2	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertEquals(Opcode.BINARY,frame.getOpcode());	0	1	56.24690890312195
	3	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertFalse(frame.isExtended());	0	1	56.24690890312195
	4	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertArrayEquals(newbyte[0],frame.getData());	0	1	56.24690890312195
	5	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertEquals(0,frame.getDataLength());	0	1	56.24690890312195
	6	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertNull(frame.getData());	0	1	56.24690890312195
	7	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frame.isEqual(frame));	0	1	56.24690890312195
	8	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertFalse(frame.isEqual(null));	0	1	56.24690890312195
	9	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertEquals(0,frame.getArg());	0	1	56.24690890312195
62	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,env.size());	0	1	44.584200859069824
	1	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(5,env.size());	0	1	44.584200859069824
	2	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(env.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList()),focal.filter(env).entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList()));	0	1	44.584200859069824
	3	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(env.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList()),focal.filter(env).entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList()));	0	1	44.584200859069824
	4	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertArrayEquals(env.keySet().toArray(),focal.filter(env).keySet().toArray());	0	1	44.584200859069824
	5	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertArrayEquals(env.values().toArray(),focal.filter(env).values().toArray());	0	1	44.584200859069824
	6	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,focal.filter(env).size());	0	1	44.584200859069824
	7	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(env,focal.filter(env));	0	1	44.584200859069824
	8	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(""STR"");"	0	1	44.584200859069824
	9	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(""STR"");"	0	1	44.584200859069824
63	0	PeterisP/morphology	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	46.30014705657959
	1	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	1	46.30014705657959
	2	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	46.30014705657959
	3	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs);	0	1	46.30014705657959
	4	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotEquals(null,locītājs.getDefaultLanguage());	0	1	46.30014705657959
	5	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs.getLoadedLanguages());	0	1	46.30014705657959
	6	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	"assertNotEquals(""STR"",locītājs.getDefaultLanguage());"	0	1	46.30014705657959
	7	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(locītājs.wordforms.size(),locītājs.getWordCount());	0	1	46.30014705657959
	8	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(locītājs.getCacheSize(),locītājs.getCacheLimit());	0	1	46.30014705657959
	9	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs.getAvailableLanguages());	0	1	46.30014705657959
64	0	PeterisP/morphology	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertEquals(formas.size(),expectedSize);	0	1	43.66848373413086
	1	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertNotEquals(formas.size(),unexpectedSize);	0	1	43.66848373413086
	2	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertTrue(formas.contains(expectedWordform));	0	1	43.66848373413086
	3	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertFalse(formas.contains(unexpectedWordform));	0	1	43.66848373413086
	4	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertNotNull(formas);	0	1	43.66848373413086
	5	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertNull(nullFormas);	0	1	43.66848373413086
	6	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertArrayEquals(expectedArray,actualArray);	0	1	43.66848373413086
	7	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertNotSame(expectedObject,actualObject);	0	1	43.66848373413086
	8	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertSame(expectedObject,actualObject);	0	1	43.66848373413086
	9	/	MorphologyTest	būt	"assertInflection(formas,testset,""STR"");"	assertThrows(Exception.class,()->{thrownewException(});	0	1	43.66848373413086
65	0	sharneng/gm4java	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertNotNull(sut);	0	1	83.13576602935791
	1	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertSame(service,sut.getService());	0	1	83.13576602935791
	2	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertNull(sut.getErrorStream());	0	1	83.13576602935791
	3	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertSame(format,op.getCmdArgs().get(2));	0	1	83.13576602935791
	4	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertNotSame(null,service);	0	1	83.13576602935791
	5	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	"assertArrayEquals(newString[]{command,""STR"",""STR"",format,SOURCE_IMAGE},sut.getCommand().toArray());"	0	1	83.13576602935791
	6	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	"assertEquals(""STR"",sut.getOutputConsumer().getOutput().get(0));"	0	1	83.13576602935791
	7	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertFalse(sut.isErrorStreamRedirected());	0	1	83.13576602935791
	8	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertTrue(output.getOutput().size()>0);	0	1	83.13576602935791
	9	/	GMBatchCommandTest	run_returnsResultBack	"assertThat(iter.next(),is(""STR""));"	assertFalse(output.getOutput().isEmpty());	0	1	83.13576602935791
66	0	redraiment/jactiverecord	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotNull(sql);	0	1	31.760244131088257
	1	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",""STR"");"	0	1	31.760244131088257
	2	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertTrue(true);	0	1	31.760244131088257
	3	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertFalse(false);	0	1	31.760244131088257
	4	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotEquals(expectedValue,actualValue);	0	1	31.760244131088257
	5	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertEquals(expectedDouble,actualDouble);	0	1	31.760244131088257
	6	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotEquals(expectedDouble,actualDouble);	0	1	31.760244131088257
	7	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertEquals(expectedLong,actualLong);	0	1	31.760244131088257
	8	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotEquals(expectedLong,actualLong);	0	1	31.760244131088257
	9	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertTrue(condition);	0	1	31.760244131088257
67	0	nidi3/graphviz-java	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertEquals(""STR"",options.basedir);"	0	1	33.64618182182312
	1	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotNull(options.basedir);	0	1	33.64618182182312
	2	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertSame(expected,""STR"");"	0	1	33.64618182182312
	3	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertNotSame(expected,""STR"");"	0	1	33.64618182182312
	4	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNull(options.basedir(null));	0	1	33.64618182182312
	5	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertEquals(""STR"",options.basedir);"	0	1	33.64618182182312
	6	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotNull(options.basedir);	0	1	33.64618182182312
	7	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertSame(expected,""STR"");"	0	1	33.64618182182312
	8	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertNotSame(expected,""STR"");"	0	1	33.64618182182312
	9	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNull(options.basedir(null));	0	1	33.64618182182312
68	0	basis-technology-corp/tcl-regex-java	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertNotNull(exp);	0	1	62.67823004722595
	1	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertTrue(exp.pattern().length()>0);	0	1	62.67823004722595
	2	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertNotEquals(0,exp.flags());	0	1	62.67823004722595
	3	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	"assertFalse(""STR"");"	0	1	62.67823004722595
	4	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	"assertTrue(""STR"");"	0	1	62.67823004722595
	5	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertEquals(PatternFlags.ADVANCED,exp.flags());	0	1	62.67823004722595
	6	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertNotEquals(PatternFlags.IGNORECASE,exp.flags());	0	1	62.67823004722595
	7	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	assertNull(Compiler.compile(null,null));	0	1	62.67823004722595
	8	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	"assertThrows(RegexException.class,""STR"");"	0	1	62.67823004722595
	9	/	RangeTest	testNotBom	"assertThat(""STR"",matches(exp));"	"assertArrayEquals(""STR"",""STR"");"	0	1	62.67823004722595
69	0	jsevellec/cassandra-unit	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertFalse(isUsageBeenPrinted());	0	1	29.05088520050049
	1	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(false,isUsageBeenPrinted());	0	1	29.05088520050049
	2	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNull(isUsageBeenPrinted());	0	1	29.05088520050049
	3	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNotNull(isUsageBeenPrinted());	0	1	29.05088520050049
	4	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertTrue(!isUsageBeenPrinted());	0	1	29.05088520050049
	5	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(true,isUsageBeenPrinted());	0	1	29.05088520050049
	6	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(true,!isUsageBeenPrinted());	0	1	29.05088520050049
	7	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertTrue(isUsageBeenPrinted());	0	1	29.05088520050049
	8	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNotEquals(false,isUsageBeenPrinted());	0	1	29.05088520050049
	9	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertFalse(isUsageBeenPrinted());	0	1	29.05088520050049
70	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals(0,outputDirectory.list().length);	0	1	28.500125885009766
	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.exists());	0	1	28.500125885009766
	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.isFile());	0	1	28.500125885009766
	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.isDirectory());	0	1	28.500125885009766
	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.isHidden());	0	1	28.500125885009766
	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(outputDirectory.getPath());	0	1	28.500125885009766
	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(targetDir,outputDirectory);	0	1	28.500125885009766
	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(configDirectory,outputDirectory);	0	1	28.500125885009766
	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(serverDirectory,outputDirectory);	0	1	28.500125885009766
	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(src,outputDirectory);	0	1	28.500125885009766
