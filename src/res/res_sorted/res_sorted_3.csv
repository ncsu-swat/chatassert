TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	trautonen/coveralls-maven-plugin	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy.getPort());	0	0	89.79831027984619
0	1	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotSame(""STR"",proxy.getProtocol());"	0	0	89.79831027984619
0	2	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertEquals(8080,proxy.getPort());	0	0	89.79831027984619
0	3	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(""STR"",proxy.getHost());"	0	0	89.79831027984619
0	4	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertEquals(""STR"",proxy.getProtocol());"	0	0	89.79831027984619
0	5	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy.getHost());	0	0	89.79831027984619
0	6	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotSame(1234,proxy.getPort());	0	0	89.79831027984619
0	7	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertNotSame(""STR"",proxy.getHost());"	0	0	89.79831027984619
0	8	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"assertTrue(proxy.getHost().startsWith(""STR""));"	0	0	89.79831027984619
0	9	/	CoverallsProxyClientTest	testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	assertNotNull(proxy.getProtocol());	0	0	89.79831027984619
1	0	jcodec/jcodec	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expected,FOCAL.estimeteSeekSize(10,5));	0	0	195.37758994102478
1	1	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>=5&&FOCAL.estimeteSeekSize(5,3)<=10);	0	0	195.37758994102478
1	2	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	0	0	195.37758994102478
1	3	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)<100);	0	0	195.37758994102478
1	4	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)%2==0);	0	0	195.37758994102478
1	5	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>=0);	0	0	195.37758994102478
1	6	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>0);	0	0	195.37758994102478
1	7	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(FOCAL.estimeteSeekSize(5,3));	0	0	195.37758994102478
1	8	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(10,FOCAL.estimeteSeekSize(5,3));	0	0	195.37758994102478
1	9	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(20,FOCAL.estimeteSeekSize(5,3));	0	0	195.37758994102478
2	0	jcodec/jcodec	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(expectedLength,res.length);	0	0	174.88018989562988
2	1	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(expectedResult,res);	0	0	174.88018989562988
2	2	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0	0	174.88018989562988
2	3	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0	0	174.88018989562988
2	4	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(res.length==0);	0	0	174.88018989562988
2	5	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(expectedResult,res);	0	0	174.88018989562988
2	6	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedLength,res.length);	0	0	174.88018989562988
2	7	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNull(nullValue);	0	0	174.88018989562988
2	8	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertSame(expectedResult,res);	0	0	174.88018989562988
2	9	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedResult,res);	0	0	174.88018989562988
3	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(hasProfile);	0	0	97.4747383594513
3	1	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertArrayEquals(profile2,profile3});	0	0	97.4747383594513
3	2	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(0,profiles.size());	0	0	97.4747383594513
3	3	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profile);	0	0	97.4747383594513
3	4	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(3,profiles.size());	0	0	97.4747383594513
3	5	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	0	0	97.4747383594513
3	6	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles.get(0));	0	0	97.4747383594513
3	7	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(hasProfile);	0	0	97.4747383594513
3	8	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(profiles.size(),profileSet.size());	0	0	97.4747383594513
3	9	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.isEmpty());	0	0	97.4747383594513
4	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertEquals(""STR"",getInitContainer(builder,""STR"").getName());"	0	0	180.03864812850952
4	1	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertEquals(""STR"",getInitContainer(builder,""STR"").getImage());"	0	0	180.03864812850952
4	2	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1	0	180.03864812850952
4	3	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	assertTrue(builder.build().getSpec().getInitContainers().size()>2);	0	0	180.03864812850952
4	4	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertArrayEquals(""command2""},getInitContainer(builder,""initContainerName"").getCommand());"	0	0	180.03864812850952
4	5	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	assertEquals(3,builder.build().getSpec().getInitContainers().size());	0	0	180.03864812850952
4	6	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(hasInitContainer(builder,""STR""));"	0	0	180.03864812850952
4	7	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNotNull(getInitContainer(builder,""STR""));"	0	0	180.03864812850952
4	8	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	assertTrue(builder.build().getSpec().getInitContainers().size()<5);	0	0	180.03864812850952
4	9	/	InitContainerHandlerTest	append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	0	0	180.03864812850952
5	0	fabric8io/fabric8-maven-plugin	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	0	0	87.5558590888977
5	1	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag2Date);	0	0	87.5558590888977
5	2	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)>0);	0	0	87.5558590888977
5	3	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag1Date);	0	0	87.5558590888977
5	4	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag2Date.compareTo(tag1Date)<0);	0	0	87.5558590888977
5	5	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0	0	87.5558590888977
5	6	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0	0	87.5558590888977
5	7	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1	0	87.5558590888977
6	0	arnohaase/a-foundation	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL.bytesToHexString(newbyte[]{(byte)0xFF}));"	0	0	50.69378185272217
6	1	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL.bytesToHexString(newbyte[]{65,66,67}));"	0	0	50.69378185272217
6	2	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertNotEquals(""STR"",FOCAL.bytesToHexString(newbyte[]{65,66,67,68}));"	0	0	50.69378185272217
6	3	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotNull(FOCAL.bytesToHexString(newbyte[]{65}));	0	0	50.69378185272217
6	4	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL.bytesToHexString(newbyte[0]));"	0	0	50.69378185272217
6	5	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL.bytesToHexString(newbyte[]{63}));"	0	0	50.69378185272217
6	6	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",FOCAL.bytesToHexString(newbyte[]{0}));"	0	0	50.69378185272217
6	7	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(FOCAL.bytesToHexString(newbyte[]{65}).isEmpty());	0	0	50.69378185272217
6	8	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertTrue(FOCAL.bytesToHexString(newbyte[]{65}).startsWith(""STR""));"	0	0	50.69378185272217
6	9	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(FOCAL.bytesToHexString(null));	0	0	50.69378185272217
7	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	0	0	124.60482716560364
7	1	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	124.60482716560364
7	2	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(cookies.getCookies().size()>0);	0	0	124.60482716560364
7	3	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertEquals(""STR"",cookies.getCookies().get(0).getName());"	0	0	124.60482716560364
7	4	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNull(cookies.getCookies().get(1));	0	0	124.60482716560364
7	5	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(responseHandler.handleResponse(null).isEmpty());	0	0	124.60482716560364
7	6	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(cookies.getCookies().get(0));	0	0	124.60482716560364
7	7	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertFalse(cookies.getCookies().isEmpty());	0	0	124.60482716560364
7	8	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	0	0	124.60482716560364
7	9	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertNotEquals(""STR"",cookies.getCookies().get(0).getValue());"	0	0	124.60482716560364
8	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertTrue(headers.isEmpty());	0	0	66.91244101524353
8	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertFalse(headers.containsKey(""STR""));"	0	0	66.91244101524353
8	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(0,headers.size());	0	0	66.91244101524353
8	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertSame(requestTemplate,oAuth2FeignRequestInterceptor.getRequestTemplate());	0	0	66.91244101524353
8	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertTrue(headers.containsKey(""STR""));"	0	0	66.91244101524353
8	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotSame(template,requestTemplate);	0	0	66.91244101524353
8	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(HttpMethod.GET,requestTemplate.method());	0	0	66.91244101524353
8	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertNotNull(headers.get(""STR""));"	0	0	66.91244101524353
8	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertNull(headers.get(""STR""));"	0	0	66.91244101524353
8	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotEquals(0,headers.size());	0	0	66.91244101524353
9	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.ACCEPT);	0	0	43.375487089157104
9	1	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0	0	43.375487089157104
9	2	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0	0	43.375487089157104
9	3	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),CoreMatchers.equalTo(FilterReply.NEUTRAL));	0	0	43.375487089157104
9	4	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNull(filter.decide(evt));	0	0	43.375487089157104
9	5	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0	0	43.375487089157104
9	6	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0	0	43.375487089157104
9	7	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0	0	43.375487089157104
9	8	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0	0	43.375487089157104
9	9	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertArrayEquals(newFilterReply[]{FilterReply.ACCEPT},newFilterReply[]{filter.decide(evt)});	0	0	43.375487089157104
10	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.startsWith(""STR""));"	0	0	120.29398107528687
10	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(sourceMetadata);	0	0	120.29398107528687
10	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0	0	120.29398107528687
10	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(testSourceUrl,sourceUrl);	0	0	120.29398107528687
10	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl,normalizedUrl);	0	0	120.29398107528687
10	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(sourceUrl);	0	0	120.29398107528687
10	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	0	120.29398107528687
10	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(normalizedUrl.contains(""STR""));"	0	0	120.29398107528687
10	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testUrl,normalizedUrl);	0	0	120.29398107528687
11	0	javadev/moneytostr-russian	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotEquals(0,Double.compare(10.5,moneyToStrUSDRUS.convert(10.5).length()));	0	0	91.9648368358612
11	1	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNull(moneyToStrRUR);	0	0	91.9648368358612
11	2	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotSame(moneyToStrRURRUS,moneyToStrUAHENG);	0	0	91.9648368358612
11	3	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""},moneyToStrCustom.getCustomStrings());"	0	0	91.9648368358612
11	4	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.getCurrency().toString());"	0	0	91.9648368358612
11	5	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertTrue(moneyToStrUSDENGinstanceofMoneyToStr);	0	0	91.9648368358612
11	6	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertSame(moneyToStrUAHENG,moneyToStrUAHENG);	0	0	91.9648368358612
11	7	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertFalse(moneyToStrUAHRUS.convert(100.0).isEmpty());	0	0	91.9648368358612
11	8	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrPER100.convert(null));	0	0	91.9648368358612
11	9	/	MoneyToStrTest	checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	assertNotNull(moneyToStrUAH);	0	0	91.9648368358612
12	0	myabc/markdownj	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).length()>0);	0	0	51.75566291809082
12	1	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertSame(""STR"",FOCAL.decode(encoded));"	0	0	51.75566291809082
12	2	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertTrue(FOCAL.decode(encoded).endsWith(""STR""));"	0	0	51.75566291809082
12	3	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertNotEquals(""STR"",FOCAL.decode(encoded));"	0	0	51.75566291809082
12	4	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotNull(FOCAL.decode(encoded));	0	0	51.75566291809082
12	5	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertFalse(FOCAL.decode(encoded).isEmpty());	0	0	51.75566291809082
12	6	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertEquals(""STR"",FOCAL.decode(encoded));"	0	0	51.75566291809082
12	7	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertTrue(FOCAL.decode(encoded).startsWith(""STR""));"	0	0	51.75566291809082
12	8	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertTrue(FOCAL.decode(encoded).contains(""STR""));"	0	0	51.75566291809082
12	9	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertTrue(FOCAL.decode(encoded).matches(""STR""));"	0	0	51.75566291809082
13	0	gvlasov/collections-utils	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertNotNull(map);	0	0	52.25952386856079
13	1	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertEquals(3,map.size());	0	0	52.25952386856079
13	2	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertNotSame(map.getClass(),ZippedMap.class);	0	0	52.25952386856079
13	3	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertArrayEquals(""goodbye"",""hey""});"	0	0	52.25952386856079
13	4	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	0	0	52.25952386856079
13	5	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertThrows(NullPointerException.class,()->map.containsKey(null));	0	0	52.25952386856079
13	6	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	1	0	52.25952386856079
13	7	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertNotSame(map,newZippedMap<>());	0	0	52.25952386856079
13	8	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertNotEquals(map.size(),0);	0	0	52.25952386856079
13	9	/	ZippedMapTest	constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertSame(map,map);	0	0	52.25952386856079
14	0	PeterisP/morphology	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(0,formas.size());	0	0	115.73157596588135
14	1	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0	0	115.73157596588135
14	2	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	0	0	115.73157596588135
14	3	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedElement));	0	0	115.73157596588135
14	4	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertArrayEquals(expectedElements,formas.toArray());	0	0	115.73157596588135
14	5	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1	0	115.73157596588135
14	6	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	0	0	115.73157596588135
14	7	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(condition(forma));	0	0	115.73157596588135
14	8	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	0	0	115.73157596588135
14	9	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.contains(unexpectedElement));	0	0	115.73157596588135
15	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	assertSame(config,config);	0	0	67.58951878547668
15	1	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNotEquals(config.get(""STR""),config.get(""STR""));"	0	0	67.58951878547668
15	2	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertArrayEquals(""nonk""},config.getValues(""kasha""));"	0	0	67.58951878547668
15	3	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	assertNotSame(config,config.clone());	0	0	67.58951878547668
15	4	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(""STR"",config.get(""STR""));"	0	0	67.58951878547668
15	5	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNotEquals(""STR"",config.get(""STR""));"	0	0	67.58951878547668
15	6	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.getIn(""STR"").isNull());"	0	0	67.58951878547668
15	7	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertNull(config.get(""STR""));"	0	0	67.58951878547668
15	8	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.getIn(""STR"").isNull());"	0	0	67.58951878547668
15	9	/	ConfigTest	set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	assertNotNull(config);	0	0	67.58951878547668
