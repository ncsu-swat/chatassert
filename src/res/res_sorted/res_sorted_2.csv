TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNull(locītājs.getDefaultSettings());	0	0	77.79789590835571
0	1	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	"assertNotEquals(""STR"",vārds.toString());"	0	0	77.79789590835571
0	2	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(wordforms.isEmpty());	0	0	77.79789590835571
0	3	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	"assertNotSame(vārds,locītājs.analyze(""STR""));"	0	0	77.79789590835571
0	4	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(0,locītājs.clearCache());	0	0	77.79789590835571
0	5	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	0	77.79789590835571
0	6	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertArrayEquals(2,3});	0	0	77.79789590835571
0	7	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(locītājs.getAnalyzerType());	0	0	77.79789590835571
0	8	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertSame(locītājs,locītājs.getInstance());	0	0	77.79789590835571
0	9	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableGuessing);	0	0	77.79789590835571
1	0	PeterisP/morphology	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	0	0	73.18462109565735
1	1	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotEquals(unexpectedValue,actualValue);	0	0	73.18462109565735
1	2	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertArrayEquals(expectedArray,actualArray);	0	0	73.18462109565735
1	3	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotSame(unexpectedObject,actualObject);	0	0	73.18462109565735
1	4	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(locītājs.isRecognized());	0	0	73.18462109565735
1	5	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertSame(expectedObject,actualObject);	0	0	73.18462109565735
1	6	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(locītājs);	0	0	73.18462109565735
1	7	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNull(locītājs);	0	0	73.18462109565735
1	8	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertEquals(expectedValue,actualValue);	0	0	73.18462109565735
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	0	77.23554420471191
2	1	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	0	0	77.23554420471191
2	2	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	0	0	77.23554420471191
2	3	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.isRecognized());	0	0	77.23554420471191
2	4	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.isRecognized());	0	0	77.23554420471191
2	5	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0	0	77.23554420471191
2	6	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0	0	77.23554420471191
2	7	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	0	77.23554420471191
2	8	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,locītājs.wordforms.size());	0	0	77.23554420471191
2	9	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	0	0	77.23554420471191
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	0	0	90.26562309265137
3	1	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(expectedObject,actualObject);	0	0	90.26562309265137
3	2	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	0	0	90.26562309265137
3	3	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(2,w.wordforms.size());	0	0	90.26562309265137
3	4	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	"assertFalse(w.wordforms.contains(""STR""));"	0	0	90.26562309265137
3	5	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=1);	0	0	90.26562309265137
3	6	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(expectedObject,actualObject);	0	0	90.26562309265137
3	7	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	"assertTrue(w.wordforms.contains(""STR""));"	0	0	90.26562309265137
3	8	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0	0	90.26562309265137
3	9	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.isEmpty());	0	0	90.26562309265137
4	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(1,focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	1	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	2	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	3	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(focalObject.getCoordinatorPort()>=0);	0	0	77.0362229347229
4	4	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	5	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertArrayEquals(newint[]{0},newint[]{focalObject.getCoordinatorPort()});	0	0	77.0362229347229
4	6	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNull(null);	0	0	77.0362229347229
4	7	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertSame(0,focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	8	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(null,focalObject.getCoordinatorPort());	0	0	77.0362229347229
4	9	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertFalse(focalObject.getCoordinatorPort()<0);	0	0	77.0362229347229
5	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertFalse(exception.getMessage().isEmpty());	0	0	68.68728613853455
5	1	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0	0	68.68728613853455
5	2	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertSame(""STR"",exception.getMessage());"	0	0	68.68728613853455
5	3	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNull(exception.getCause().getMessage());	0	0	68.68728613853455
5	4	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertTrue(exception.getCause()instanceofRuntimeException);	0	0	68.68728613853455
5	5	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1	0	68.68728613853455
5	6	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertNotEquals(""STR"",exception.getMessage());"	0	0	68.68728613853455
5	7	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNull(exception.getDescription());	0	0	68.68728613853455
5	8	/	TestExceptionTest	testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertNotSame(""STR"",exception.getMessage());"	0	0	68.68728613853455
6	0	hazelcast/hazelcast-simulator	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1	0	72.04337692260742
6	1	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	"assertEquals(""STR"",exceptionFile.getName());"	0	0	72.04337692260742
6	2	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotSame(IOException.class,ExceptionReporter.getException(exceptionFile).getClass());	0	0	72.04337692260742
6	3	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().isDirectory(),CoreMatchers.equalTo(true));	0	0	72.04337692260742
6	4	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().getName(),CoreMatchers.notNullValue());	0	0	72.04337692260742
6	5	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(null,exceptionFile.getParentFile());	0	0	72.04337692260742
6	6	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertSame(RuntimeException.class,ExceptionReporter.getException(exceptionFile).getClass());	0	0	72.04337692260742
6	7	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertArrayEquals(newbyte[]{},ExceptionReporter.getException(exceptionFile).getMessage().getBytes());	0	0	72.04337692260742
6	8	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	0	0	72.04337692260742
6	9	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(ExceptionReporter.getException(exceptionFile).getCause(),CoreMatchers.instanceOf(RuntimeException.class));	0	0	72.04337692260742
7	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotEquals(expected,bind0(object,property,value));	0	0	75.20873618125916
7	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertArrayEquals(expectedArray,bind0(object,property,value));	0	0	75.20873618125916
7	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotSame(expected,bind0(object,property,value));	0	0	75.20873618125916
7	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNull(bind0(object,property,value));	0	0	75.20873618125916
7	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(bind0(object,property,value));	0	0	75.20873618125916
7	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertNotNull(bind0(object,property,value));	0	0	75.20873618125916
7	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(bind0(object,property,value));	0	0	75.20873618125916
7	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertEquals(expected,bind0(object,property,value));	0	0	75.20873618125916
7	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertSame(expected,bind0(object,property,value));	0	0	75.20873618125916
7	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertThrows(BindException.class,()->bind0(object,property,value));	0	0	75.20873618125916
8	0	fluent/fluent-logger-java	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA0);	0	0	73.97312498092651
8	1	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA1instanceofFluentLogger);	0	0	73.97312498092651
8	2	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA_lh0.getReconnector()instanceofExponentialDelayReconnector);	0	0	73.97312498092651
8	3	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(1234,loggerA_lh1.getPort());	0	0	73.97312498092651
8	4	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertEquals(""STR"",loggerB0.getTagPrefix());"	0	0	73.97312498092651
8	5	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	???;	0	0	73.97312498092651
8	6	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotEquals(loggerA0.getTagPrefix(),loggerB0.getTagPrefix());	0	0	73.97312498092651
8	7	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertSame(loggerA0,loggerA1);	0	0	73.97312498092651
8	8	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	0	0	73.97312498092651
8	9	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	"assertEquals(""STR"",loggerA_lh0.getHost());"	0	0	73.97312498092651
9	0	nidi3/graphviz-java	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotEquals(attrs(),attrs(attrs()));	0	0	164.8704137802124
9	1	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotSame(attrs(),attrs(attrs()));	0	0	164.8704137802124
9	2	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(1,attrs(attrs()).size());	0	0	164.8704137802124
9	3	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertFalse(attrs().isEmpty());	0	0	164.8704137802124
9	4	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertArrayEquals(newAttributes[]{},attrs().toArray());	0	0	164.8704137802124
9	5	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertEquals(attrs(attrs()),attrs(attrs(attrs())));	0	0	164.8704137802124
9	6	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertSame(attrs(),attrs());	0	0	164.8704137802124
9	7	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNull(attrs());	0	0	164.8704137802124
9	8	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertTrue(attrs().isEmpty());	0	0	164.8704137802124
9	9	/	StyleTest	tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	assertNotNull(attrs());	0	0	164.8704137802124
10	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	0	0	82.41999411582947
10	1	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.isEmpty());	0	0	82.41999411582947
10	2	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertSame(GraphvizServer.CmdOptions.class,opts.getClass());	0	0	82.41999411582947
10	3	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR""));"	0	0	82.41999411582947
10	4	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.opts.isEmpty());	0	0	82.41999411582947
10	5	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.opts.size());	0	0	82.41999411582947
10	6	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsValue(""STR""));"	0	0	82.41999411582947
10	7	/	GraphvizServerTest	cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	0	0	82.41999411582947
11	0	nidi3/graphviz-java	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotNull(object);	0	0	80.7512559890747
11	1	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertFalse(condition);	0	0	80.7512559890747
11	2	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertArrayEquals(expectedArray,actualArray);	0	0	80.7512559890747
11	3	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertTrue(condition);	0	0	80.7512559890747
11	4	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertSame(expected,actual);	0	0	80.7512559890747
11	5	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNotSame(expected,actual);	0	0	80.7512559890747
11	6	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertEquals(expected,actual);	0	0	80.7512559890747
11	7	/	RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	assertNull(object);	0	0	80.7512559890747
12	0	nidi3/graphviz-java	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNull(tail);	0	0	77.70136213302612
12	1	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertSame(tail,EndLabel.tail(Label.of(""STR""),1d,2d));"	0	0	77.70136213302612
12	2	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotNull(tail);	0	0	77.70136213302612
12	3	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertArrayEquals(newObject[]{1d,2d});	0	0	77.70136213302612
12	4	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotSame(tail,EndLabel.tail(Label.of(""STR""),1d,2d));"	0	0	77.70136213302612
12	5	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertTrue(tailinstanceofEndLabel);	0	0	77.70136213302612
12	6	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertNotEquals(newObject[]{1d,2d});	0	0	77.70136213302612
12	7	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertNotEquals(""STR"",tail.getLabel());"	0	0	77.70136213302612
12	8	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertEquals(""STR"",tail.getLabel());"	0	0	77.70136213302612
12	9	/	EndLabelTest	attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertFalse(tailinstanceofEndLabel);	0	0	77.70136213302612
13	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{doc.isDirty()});	0	0	335.1595108509064
13	1	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	0	335.1595108509064
13	2	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0	0	335.1595108509064
13	3	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0	0	335.1595108509064
13	4	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(null,doc.isDirty());	0	0	335.1595108509064
13	5	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0	0	335.1595108509064
13	6	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	0	335.1595108509064
13	7	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0	0	335.1595108509064
13	8	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNull(null);	0	0	335.1595108509064
13	9	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0	0	335.1595108509064
14	0	orientechnologies/orientdb	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA.getName(),classLinked.getName());	0	0	379.1927499771118
14	1	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertNotEquals(classA.getName(),""STR"");"	0	0	379.1927499771118
14	2	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertNull(classA.getProperty(""STR""));"	0	0	379.1927499771118
14	3	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertFalse(schema.existsClass(""STR""));"	0	0	379.1927499771118
14	4	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertNotSame(classA.getProperty(""STR""),classA.getProperty(""STR""));"	0	0	379.1927499771118
14	5	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(prop.getType(),OType.LINK);	0	0	379.1927499771118
14	6	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(db);	0	0	379.1927499771118
14	7	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertTrue(classA.existsProperty(""STR""));"	0	0	379.1927499771118
14	8	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertEquals(classA.getName(),""STR"");"	0	0	379.1927499771118
14	9	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classLinked,classA);	0	0	379.1927499771118
15	0	orientechnologies/orientdb	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getThreadPool());	0	0	142.84067106246948
15	1	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNull(g);	0	0	142.84067106246948
15	2	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	0	0	142.84067106246948
15	3	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,factory.getPool().getMin());	0	0	142.84067106246948
15	4	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	142.84067106246948
15	5	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	"assertNotEquals(""STR"",""STR"");"	0	0	142.84067106246948
15	6	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getPool());	0	0	142.84067106246948
15	7	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.getRawGraph()instanceofOrientGraph);	0	0	142.84067106246948
15	8	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(10,factory.getPool().getMax());	0	0	142.84067106246948
15	9	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	0	0	142.84067106246948
16	0	orientechnologies/orientdb	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(doc.field(""STR"")instanceofInteger);"	0	0	304.1822967529297
16	1	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(1,doc.field(""STR""));"	0	0	304.1822967529297
16	2	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(doc.field(""STR"")instanceofHashMap);"	0	0	304.1822967529297
16	3	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(doc.field(""STR"")instanceofMap);"	0	0	304.1822967529297
16	4	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertFalse(doc.field(""STR"")instanceofString);"	0	0	304.1822967529297
16	5	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNull(doc.field(""STR""));"	0	0	304.1822967529297
16	6	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertTrue(doc.field(""STR"").toString().startsWith(""STR""));"	0	0	304.1822967529297
16	7	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotEquals(""STR"",doc.field(""STR""));"	0	0	304.1822967529297
16	8	/	ODocumentTest	testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertNotNull(doc.field(""STR""));"	0	0	304.1822967529297
17	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotSame(now,compare(OType.DATETIME,10l));	0	0	9513.821584701538
17	1	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(now,compare(OType.DATETIME,10l));	0	0	9513.821584701538
17	2	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(compare(OType.DATETIME,10l)>10);	0	0	9513.821584701538
17	3	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(OType.DATETIME,10l)<20);	0	0	9513.821584701538
17	4	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(now);	0	0	9513.821584701538
17	5	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertArrayEquals(2,3});	0	0	9513.821584701538
17	6	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),is(notNullValue()));	0	0	9513.821584701538
17	7	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),anyOf(is(10),is(20)));	0	0	9513.821584701538
17	8	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(10,compare(OType.DATETIME,10l));	0	0	9513.821584701538
17	9	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertSame(now,compare(OType.DATETIME,10l));	0	0	9513.821584701538
18	0	orientechnologies/orientdb	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertArrayEquals(expectedArray,value);	0	0	255.75959014892578
18	1	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertEquals(""STR"",value);"	0	0	255.75959014892578
18	2	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNotSame(expectedValue,value);	0	0	255.75959014892578
18	3	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertTrue(valueinstanceofString);	0	0	255.75959014892578
18	4	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertSame(expectedValue,value);	0	0	255.75959014892578
18	5	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNotNull(value);	0	0	255.75959014892578
18	6	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNull(value);	0	0	255.75959014892578
18	7	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertNotEquals(""STR"",value);"	0	0	255.75959014892578
18	8	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertFalse(valueinstanceofInteger);	0	0	255.75959014892578
18	9	/	OJsonWithCustom	testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNotEquals(expectedArray,value);	0	0	255.75959014892578
19	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	0	0	256.20921778678894
19	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	0	0	256.20921778678894
19	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(42,addedKeys.get(42));	0	0	256.20921778678894
19	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(555));	0	0	256.20921778678894
19	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	0	0	256.20921778678894
19	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertSame(addedKeys,addedKeys);	0	0	256.20921778678894
19	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(1));	0	0	256.20921778678894
19	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndex,null);	0	0	256.20921778678894
19	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd.values());	0	0	256.20921778678894
19	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	0	0	256.20921778678894
20	0	orientechnologies/orientdb	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertSame(owner1,owner2);	0	0	189.41535997390747
20	1	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner2));	0	0	189.41535997390747
20	2	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	0	0	189.41535997390747
20	3	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.isEmpty());	0	0	189.41535997390747
20	4	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(0,list.size());	0	0	189.41535997390747
20	5	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	0	0	189.41535997390747
20	6	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotSame(owner1,owner2);	0	0	189.41535997390747
20	7	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner1));	0	0	189.41535997390747
20	8	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner1));	0	0	189.41535997390747
20	9	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner2));	0	0	189.41535997390747
21	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(-1,sqlQuery.getLimit());	0	0	254.48909211158752
21	1	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotEquals(0,results.size());	0	0	254.48909211158752
21	2	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	"assertFalse(results.stream().anyMatch(doc->doc.containsField(""STR"")));"	0	0	254.48909211158752
21	3	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	"assertTrue(results.stream().allMatch(doc->doc.getClassName().equals(""STR"")));"	0	0	254.48909211158752
21	4	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.isEmpty());	0	0	254.48909211158752
21	5	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	0	0	254.48909211158752
21	6	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.contains(doc1));	0	0	254.48909211158752
21	7	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertSame(sql,sqlQuery);	0	0	254.48909211158752
21	8	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(doc1,doc2);	0	0	254.48909211158752
21	9	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	1	0	254.48909211158752
22	0	Yubico/yubico-java-client	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0	0	59.288979053497314
22	1	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	0	0	59.288979053497314
22	2	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThrows(YubicoVerificationException.class,()->client.verify(otp));	0	0	59.288979053497314
22	3	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.OK,response.getStatus());	0	0	59.288979053497314
22	4	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	0	0	59.288979053497314
22	5	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0	0	59.288979053497314
22	6	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response);	0	0	59.288979053497314
22	7	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus());	0	0	59.288979053497314
22	8	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK);	0	0	59.288979053497314
23	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.startsWith(expectedPrefix));	0	0	47.7928409576416
23	1	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(resultinstanceofString);	0	0	47.7928409576416
23	2	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	0	0	47.7928409576416
23	3	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertNotNull(result);	0	0	47.7928409576416
23	4	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertFalse(result.contains(unexpectedSubstring));	0	0	47.7928409576416
23	5	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.endsWith(expectedSuffix));	0	0	47.7928409576416
23	6	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.matches(expectedRegex));	0	0	47.7928409576416
23	7	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertEquals(expectedLength,result.length());	0	0	47.7928409576416
23	8	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertTrue(result.contains(expectedSubstring));	0	0	47.7928409576416
23	9	/	AJsonSerHelperTest	testArray3	"assertEquals(""STR"",result);"	assertEquals(expectedResult,result);	0	0	47.7928409576416
24	0	arnohaase/a-foundation	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotSame(ser,out);	0	0	44.091697692871094
24	1	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	0	44.091697692871094
24	2	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertSame(baos,ser.getStream());	0	0	44.091697692871094
24	3	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0	0	44.091697692871094
24	4	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	0	0	44.091697692871094
24	5	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNotNull(result);	0	0	44.091697692871094
24	6	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertEquals(16,result.length());	0	0	44.091697692871094
24	7	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	0	0	44.091697692871094
24	8	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertArrayEquals(""STR"".toCharArray(),result.toCharArray());"	0	0	44.091697692871094
24	9	/	AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertNull(null);	0	0	44.091697692871094
25	0	DigitalPebble/storm-crawler	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertNotNull(content);	0	0	992.2069249153137
25	1	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertFalse(sha1str.contains(""STR""));"	0	0	992.2069249153137
25	2	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertFalse(sha1str.isEmpty());	0	0	992.2069249153137
25	3	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertNotNull(WARCRecordFormat.getDigestSha1(content));	0	0	992.2069249153137
25	4	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertFalse(base32.encodeAsString(DigestUtils.sha1(content)).isEmpty());	0	0	992.2069249153137
25	5	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertNotEquals(""STR"",sha1str);"	0	0	992.2069249153137
25	6	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertNotNull(robotsTxt);	0	0	992.2069249153137
25	7	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertTrue(base32.encodeAsString(DigestUtils.sha1(content)).startsWith(""STR""));"	0	0	992.2069249153137
25	8	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	assertEquals(22,content.length);	0	0	992.2069249153137
25	9	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	"assertEquals(""STR"",sha1str,WARCRecordFormat.getDigestSha1(content));"	"assertEquals(""STR"",sha1str);"	0	0	992.2069249153137
26	0	DigitalPebble/storm-crawler	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	0	0	139.07781600952148
26	1	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertArrayEquals(newString[]{""STR""},fields.get(""STR""));"	0	0	139.07781600952148
26	2	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertFalse(fields.containsKey(""STR""));"	0	0	139.07781600952148
26	3	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(""STR"",fields.get(""STR""));"	0	0	139.07781600952148
26	4	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotSame(""STR"",fields.get(""STR""));"	0	0	139.07781600952148
26	5	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	0	0	139.07781600952148
26	6	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertSame(""STR"",fields.get(""STR""));"	0	0	139.07781600952148
26	7	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertTrue(fields.entrySet().size()>0);	0	0	139.07781600952148
26	8	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	0	0	139.07781600952148
26	9	/	BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0	0	139.07781600952148
27	0	sofastack/sofa-bolt	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(object);	0	0	73.0190327167511
27	1	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertFalse(condition);	0	0	73.0190327167511
27	2	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotSame(unexpectedObject,actualObject);	0	0	73.0190327167511
27	3	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertArrayEquals(expectedArray,actualArray);	0	0	73.0190327167511
27	4	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertSame(expectedObject,actualObject);	0	0	73.0190327167511
27	5	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertTrue(condition);	0	0	73.0190327167511
27	6	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertThat(actualValue,CoreMatchers.equalTo(expectedValue));	0	0	73.0190327167511
27	7	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",actualValue);"	0	0	73.0190327167511
27	8	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNull(object);	0	0	73.0190327167511
28	0	myabc/markdownj	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	0	0	44.75581908226013
28	1	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokensinstanceofjava.util.Collection);	0	0	44.75581908226013
28	2	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertFalse(tokens.contains(""STR""));"	0	0	44.75581908226013
28	3	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertSame(expectedCollection,tokens);	0	0	44.75581908226013
28	4	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokensinstanceofjava.util.List);	0	0	44.75581908226013
28	5	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertTrue(tokens.contains(""STR""));"	0	0	44.75581908226013
28	6	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotSame(expectedCollection,tokens);	0	0	44.75581908226013
28	7	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	0	0	44.75581908226013
28	8	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(5,tokens.size());	0	0	44.75581908226013
28	9	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()>0);	0	0	44.75581908226013
29	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()instanceofExpectedClass);	0	0	65.06160402297974
29	1	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertSame(expectedCloseCode,invalidHandshakeException.getCloseCode());	0	0	65.06160402297974
29	2	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()<unexpectedCloseCode);	0	0	65.06160402297974
29	3	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotNull(invalidHandshakeException.getCloseCode());	0	0	65.06160402297974
29	4	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNull(invalidHandshakeException.getCloseCode());	0	0	65.06160402297974
29	5	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()>=minCloseCode&&invalidHandshakeException.getCloseCode()<=maxCloseCode);	0	0	65.06160402297974
29	6	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertFalse(invalidHandshakeException.getCloseCode()instanceofUnexpectedClass);	0	0	65.06160402297974
29	7	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()>expectedCloseCode);	0	0	65.06160402297974
29	8	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(unexpectedCloseCode,invalidHandshakeException.getCloseCode());	0	0	65.06160402297974
29	9	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertEquals(expectedCloseCode,invalidHandshakeException.getCloseCode());	0	0	65.06160402297974
30	0	NanoHttpd/nanohttpd	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertFalse(cookie.getHTTPHeader().isEmpty());	0	0	101.5302050113678
30	1	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertEquals(""STR"",cookie.getHTTPHeader());"	0	0	101.5302050113678
30	2	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertTrue(cookie.getHTTPHeader().contains(""STR""));"	0	0	101.5302050113678
30	3	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotNull(cookie.getHTTPHeader());	0	0	101.5302050113678
30	4	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertEquals(expectedLength,cookie.getHTTPHeader().length());	0	0	101.5302050113678
30	5	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertThrows(Exception.class,()->{
???;
});"	0	0	101.5302050113678
30	6	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertNotEquals(0,randomExpirationTime);	0	0	101.5302050113678
30	7	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertEquals(expectedDouble,actualDouble);	0	0	101.5302050113678
30	8	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	"assertTrue(cookie.getHTTPHeader().startsWith(""STR""));"	0	0	101.5302050113678
30	9	/	CookieTest	testCookieWithExpiresString	"assertTrue(""STR"",cookie.getHTTPHeader().contains(expiresString));"	assertArrayEquals(expectedArray,cookie.getHTTPHeader().toCharArray());	0	0	101.5302050113678
31	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazzs);	0	0	53.68547582626343
31	1	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp.getClass(),clazzs.getClass());	0	0	53.68547582626343
31	2	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotSame(exp,clazzs);	0	0	53.68547582626343
31	3	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	"assertThrows(NullPointerException.class,()->{
???;
});"	0	0	53.68547582626343
31	4	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazzs.length);	0	0	53.68547582626343
31	5	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(exp.length>0);	0	0	53.68547582626343
31	6	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazzs);	0	0	53.68547582626343
31	7	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,clazzs.length+1);	0	0	53.68547582626343
31	8	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNull(null);	0	0	53.68547582626343
31	9	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(exp.length==0);	0	0	53.68547582626343
32	0	rockagen/commons-lib	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertTrue(hexdump(""STR"".getBytes()).startsWith(""STR""));"	0	0	48.94421911239624
32	1	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotNull(hexdump(""STR"".getBytes()));"	0	0	48.94421911239624
32	2	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertThrows(Exception.class,()->hexdump(null));	0	0	48.94421911239624
32	3	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertSame(hexdump(""STR"".getBytes()),hexdump(""STR"".getBytes()));"	0	0	48.94421911239624
32	4	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNull(hexdump(null));	0	0	48.94421911239624
32	5	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",hexdump(""STR"".getBytes()));"	0	0	48.94421911239624
32	6	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotSame(hexdump(""STR"".getBytes()),hexdump(""STR"".getBytes()));"	0	0	48.94421911239624
32	7	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertFalse(hexdump(""STR"".getBytes()).endsWith(""STR""));"	0	0	48.94421911239624
32	8	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertNotEquals(""STR"",hexdump(""STR"".getBytes()));"	0	0	48.94421911239624
32	9	/	CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertArrayEquals(""STR"".toCharArray(),hexdump(""STR"".getBytes()).toCharArray());"	0	0	48.94421911239624
33	0	rockagen/commons-lib	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertFalse(isBlank(escapeJava(""STR"")));"	0	0	48.60181403160095
33	1	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotSame(str,escapeJava(""STR""));"	0	0	48.60181403160095
33	2	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",escapeJava(""STR""));"	0	0	48.60181403160095
33	3	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(escapeJava(""STR""));"	0	0	48.60181403160095
33	4	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertArrayEquals(""World""},newString[]{escapeJava(""Hello""));"	0	0	48.60181403160095
33	5	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertTrue(isBlank(escapeJava(""STR"")));"	0	0	48.60181403160095
33	6	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertSame(str,escapeJava(""STR""));"	0	0	48.60181403160095
33	7	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNull(escapeJava(null));	0	0	48.60181403160095
33	8	/	CommUtilTest	testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotEquals(""STR"",escapeJava(""STR""));"	0	0	48.60181403160095
34	0	javadev/moneytostr-russian	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(123.45));"	0	0	125.19189190864563
34	1	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAH.convert(678.90));"	0	0	125.19189190864563
34	2	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(987.65));"	0	0	125.19189190864563
34	3	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHENG.convert(321.0));"	0	0	125.19189190864563
34	4	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(987.65));"	0	0	125.19189190864563
34	5	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHENG.convert(543.0));"	0	0	125.19189190864563
34	6	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(456.78));"	0	0	125.19189190864563
34	7	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrCustom.convert(678.90));"	0	0	125.19189190864563
34	8	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAH.convert(123.45));"	0	0	125.19189190864563
34	9	/	MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(456.78));"	0	0	125.19189190864563
35	0	fabric8io/fabric8-maven-plugin	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()>=0);	0	0	99.59796714782715
35	1	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()<=10);	0	0	99.59796714782715
35	2	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.containsKey(""STR""));"	0	0	99.59796714782715
35	3	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size());	1	0	99.59796714782715
35	4	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotNull(map);	0	0	99.59796714782715
35	5	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsValue(null));	0	0	99.59796714782715
35	6	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR"")&&map.get(""STR"").equals(""STR""));"	0	0	99.59796714782715
35	7	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.isEmpty());	0	0	99.59796714782715
35	8	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey(null));	0	0	99.59796714782715
36	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	1	0	72.65740394592285
36	1	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotSame(2,p.getDistanceToGoal());	0	0	72.65740394592285
36	2	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	0	0	72.65740394592285
36	3	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertSame(0,p.getDistanceToGoal());	0	0	72.65740394592285
36	4	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()==0);	0	0	72.65740394592285
36	5	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()>0);	0	0	72.65740394592285
36	6	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p.getDistanceToGoal());	0	0	72.65740394592285
36	7	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(-1,p.getDistanceToGoal());	0	0	72.65740394592285
36	8	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(1,p.getDistanceToGoal());	0	0	72.65740394592285
37	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	0	0	83.53711318969727
37	1	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNull(panel.getTurtleCount());	0	0	83.53711318969727
37	2	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(1,panel.getTurtleCount());	0	0	83.53711318969727
37	3	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0	0	83.53711318969727
37	4	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0	0	83.53711318969727
37	5	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertArrayEquals(newint[]{1},newint[]{panel.getTurtleCount()});	0	0	83.53711318969727
37	6	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1	0	83.53711318969727
37	7	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0	0	83.53711318969727
37	8	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0	0	83.53711318969727
37	9	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(true,false);	0	0	83.53711318969727
38	0	redraiment/jactiverecord	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[1]);	0	0	50.628589153289795
38	1	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[4]);	0	0	50.628589153289795
38	2	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-2]);	0	0	50.628589153289795
38	3	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[2]);	0	0	50.628589153289795
38	4	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[0]);	0	0	50.628589153289795
38	5	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-1]);	0	0	50.628589153289795
38	6	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-4,a[6]);	0	0	50.628589153289795
38	7	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[3]);	0	0	50.628589153289795
38	8	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-1,a[5]);	0	0	50.628589153289795
38	9	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(7,a.length);	0	0	50.628589153289795
39	0	redraiment/jactiverecord	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertSame(""STR"",FOCAL.join(Collections.emptyList(),""STR""));"	0	0	40.26744985580444
39	1	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Arrays.asList(1,2,3),""STR""));"	0	0	40.26744985580444
39	2	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertTrue(FOCAL.join(Arrays.asList(1,2,3),""STR"").contains(""STR""));"	0	0	40.26744985580444
39	3	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotEquals(""STR"",FOCAL.join(Arrays.asList(1,2,3),""STR""));"	0	0	40.26744985580444
39	4	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotSame(""STR"",FOCAL.join(Collections.emptyList(),""STR""));"	0	0	40.26744985580444
39	5	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotEquals(""STR"",FOCAL.join(Collections.singletonList(""STR""),""STR""));"	0	0	40.26744985580444
39	6	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(null,""STR""));"	0	0	40.26744985580444
39	7	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNotNull(FOCAL.join(Arrays.asList(1,2,3),""STR""));"	0	0	40.26744985580444
39	8	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertArrayEquals(""STR"".split(""STR""),FOCAL.join(Arrays.asList(1,2,3),""STR"").split(""STR""));"	0	0	40.26744985580444
39	9	/	SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",FOCAL.join(Collections.singletonList(1),""STR""));"	0	0	40.26744985580444
40	0	redraiment/jactiverecord	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertNotSame(actuals,newString[]{""STR"",""STR"",""STR""});"	0	0	39.545976877212524
40	1	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""2"",""3""});"	0	0	39.545976877212524
40	2	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertFalse(actuals.length==0);	0	0	39.545976877212524
40	3	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertTrue(actuals.length>0);	0	0	39.545976877212524
40	4	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""2"",""3""});"	0	0	39.545976877212524
40	5	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertNotEquals(""5"",""6""});"	0	0	39.545976877212524
40	6	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertSame(actuals,actuals);	0	0	39.545976877212524
40	7	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNotNull(actuals);	0	0	39.545976877212524
40	8	/	SeqTest	testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertNull(null);	0	0	39.545976877212524
41	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(2*macAddress.getAddress().length-1,macAddress.toString().length());	0	0	56.61834478378296
41	1	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0	0	56.61834478378296
41	2	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().matches(""STR""));"	0	0	56.61834478378296
41	3	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0	0	56.61834478378296
41	4	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertNotEquals(""STR"",macAddress.toString());"	0	0	56.61834478378296
41	5	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(STANDARD_SEPARATOR));	0	0	56.61834478378296
41	6	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0	0	56.61834478378296
41	7	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertFalse(macAddress.toString().contains(""STR""));"	0	0	56.61834478378296
41	8	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),Matchers.matchesPattern(""STR""));"	0	0	56.61834478378296
42	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertTrue(StringUtils.isBlank(timestamp));	0	0	79.71010112762451
42	1	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertSame(expectedDate,parsed);	0	0	79.71010112762451
42	2	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(expectedDate,parsed);	0	0	79.71010112762451
42	3	/	TimestampParserTest	testParseNull	assertNull(parsed);	"assertDoesNotThrow(()->newTimestampParser(null).parse(""STR""));"	0	0	79.71010112762451
42	4	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotNull(parsed);	0	0	79.71010112762451
42	5	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	1	0	79.71010112762451
42	6	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotEquals(unexpectedDate,parsed);	0	0	79.71010112762451
42	7	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertFalse(StringUtils.isBlank(timestamp));	0	0	79.71010112762451
42	8	/	TimestampParserTest	testParseNull	assertNull(parsed);	"assertThrows(ProcessingException.class,()->newTimestampParser(null).parse(""STR""));"	0	0	79.71010112762451
42	9	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(null,parsed);	0	0	79.71010112762451
43	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1	0	75.88910913467407
43	1	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception.getMessage());	0	0	75.88910913467407
43	2	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	0	0	75.88910913467407
43	3	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull(exception.getCause());	0	0	75.88910913467407
43	4	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame(null,exception.getMessage());	0	0	75.88910913467407
43	5	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exception.getMessage().contains(MESSAGE));	0	0	75.88910913467407
43	6	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertThrows(ValidationException.class,()->{
???;
});"	0	0	75.88910913467407
43	7	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertSame(MESSAGE,exception.getMessage());	0	0	75.88910913467407
43	8	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotEquals(""STR"",exception.getMessage());"	0	0	75.88910913467407
43	9	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertNotSame(""STR"",exception.getMessage());"	0	0	75.88910913467407
44	0	gvlasov/collections-utils	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	0	0	46.82972288131714
45	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertFalse(actual.getNalRefIdc()<NALUnit.EXPECTED_REF_IDC);	0	0	186.02634406089783
45	1	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(NALUnit.EXPECTED_REF_IDC,actual.getNalRefIdc());	0	0	186.02634406089783
45	2	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual.getType());	0	0	186.02634406089783
45	3	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getNalRefIdc()>0);	0	0	186.02634406089783
45	4	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getNalRefIdc()>=MIN_REF_IDC&&actual.getNalRefIdc()<=MAX_REF_IDC);	0	0	186.02634406089783
45	5	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getType()instanceofNALUnitType);	0	0	186.02634406089783
45	6	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getNalRefIdc()>=NALUnit.EXPECTED_REF_IDC);	0	0	186.02634406089783
45	7	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(NALUnitType.EXPECTED_TYPE,actual.getType());	0	0	186.02634406089783
45	8	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertSame(actual.getType(),NALUnitType.SOME_OTHER_TYPE);	0	0	186.02634406089783
45	9	/	NalUnitTest	testCanWriteNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(actual.getType(),newObject());	0	0	186.02634406089783
46	0	jcodec/jcodec	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotNull(objectReference);	0	0	159.76380491256714
46	1	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertArrayEquals(expectedArray,actualArray);	0	0	159.76380491256714
46	2	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertTrue(booleanExpression);	0	0	159.76380491256714
46	3	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNotEquals(expectedValue,calculatedValue);	0	0	159.76380491256714
46	4	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertSame(expectedObject,actualObject);	0	0	159.76380491256714
46	5	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertFalse(booleanExpression);	0	0	159.76380491256714
46	6	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertNull(objectReference);	0	0	159.76380491256714
46	7	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	assertEquals(expectedValue,calculatedValue);	0	0	159.76380491256714
46	8	/	ToJSONTest	testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertNotSame(""STR"",expectedObject,actualObject);"	0	0	159.76380491256714
47	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(null,matcher.find());	0	0	447.02749490737915
47	1	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals(false,matcher.find());	0	0	447.02749490737915
47	2	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(find());	0	0	447.02749490737915
47	3	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1	0	447.02749490737915
47	4	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertSame(true,matcher.find());	0	0	447.02749490737915
47	5	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	"assertNotEquals(""STR"",matcher.find());"	0	0	447.02749490737915
47	6	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertThrows(Exception.class,()->find());	0	0	447.02749490737915
47	7	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNull(null);	0	0	447.02749490737915
47	8	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0	0	447.02749490737915
47	9	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher.find());	0	0	447.02749490737915
48	0	basis-technology-corp/tcl-regex-java	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.lookingAt()});	0	0	89.29081606864929
48	1	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0	0	89.29081606864929
48	2	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNull(null);	0	0	89.29081606864929
48	3	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0	0	89.29081606864929
48	4	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0	0	89.29081606864929
48	5	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	0	0	89.29081606864929
48	6	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0	0	89.29081606864929
48	7	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0	0	89.29081606864929
48	8	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1	0	89.29081606864929
49	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1	0	46.60129117965698
49	1	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface());	0	0	46.60129117965698
49	2	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertTrue(helloClass.getDeclaredMethod(""STR"")!=null);"	0	0	46.60129117965698
49	3	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertNotEquals(""STR"",helloClass.getName());"	0	0	46.60129117965698
49	4	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertSame(org.mdkt.HelloClass.class,helloClass);	0	0	46.60129117965698
49	5	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getMethods().length>0);	0	0	46.60129117965698
49	6	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getDeclaredFields().length);	0	0	46.60129117965698
49	7	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0	0	46.60129117965698
49	8	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getModifiers()==java.lang.reflect.Modifier.PUBLIC);	0	0	46.60129117965698
49	9	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.isAssignableFrom(org.mdkt.HelloClass.class));	0	0	46.60129117965698
