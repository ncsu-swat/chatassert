TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	redraiment/jactiverecord	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",FOCAL+""STR"");"	0	0	58.59268522262573
1	0	redraiment/jactiverecord	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertTrue(true);	0	0	42.62616300582886
1	1	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	42.62616300582886
1	2	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNull(null);	0	0	42.62616300582886
1	3	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNotSame(object1,object2);	0	0	42.62616300582886
1	4	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	???;	0	0	42.62616300582886
1	5	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertSame(object1,object2);	0	0	42.62616300582886
1	6	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertFalse(false);	0	0	42.62616300582886
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertArrayEquals(newString[]{""STR""},sql.getTables());"	0	0	45.445918798446655
2	1	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertFalse(sql.toString().endsWith(""STR""));"	0	0	45.445918798446655
2	2	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	0	0	45.445918798446655
2	3	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString());"	0	0	45.445918798446655
2	4	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertNotSame(""STR"",sql.getTables()[0]);"	0	0	45.445918798446655
2	5	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql);	0	0	45.445918798446655
2	6	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNull(sql);	0	0	45.445918798446655
2	7	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().startsWith(""STR""));"	0	0	45.445918798446655
2	8	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1	0	45.445918798446655
2	9	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertSame(""STR"",sql.toString());"	0	0	45.445918798446655
3	0	jcodec/jcodec	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotSame(_in,expecteds);	0	0	403.3546769618988
3	1	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(lacesCount<0);	0	0	403.3546769618988
3	2	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	1	0	403.3546769618988
3	3	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(3,calcEbmlLacingDiffs(_in).length);	0	0	403.3546769618988
3	4	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertSame(_in,_in);	0	0	403.3546769618988
3	5	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(443,MkvBlock.calcEbmlLacingDiffs(_in)[1]);	0	0	403.3546769618988
3	6	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(_in));	0	0	403.3546769618988
3	7	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(187.0,calcEbmlLacingDiffs(_in)[0]);	0	0	403.3546769618988
3	8	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNull(null);	0	0	403.3546769618988
3	9	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(lacesCount>0);	0	0	403.3546769618988
4	0	jcodec/jcodec	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(127,ebmlEncode(20)[2]);	0	0	174.57629299163818
4	1	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[]{0,0,0,20},ebmlEncode(20));	0	0	174.57629299163818
4	2	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame(first,second);	0	0	174.57629299163818
4	3	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(4,ebmlEncode(15).length);	0	0	174.57629299163818
4	4	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(10).length>0);	0	0	174.57629299163818
4	5	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[0],ebmlEncode(0));	0	0	174.57629299163818
4	6	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertSame(first,second);	0	0	174.57629299163818
4	7	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNull(ebmlEncode(0));	0	0	174.57629299163818
4	8	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(ebmlEncode(5));	0	0	174.57629299163818
5	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(""STR"",focal.convert(10.0));"	0	0	50.4219970703125
5	1	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotNull(focal.convert(5.0));	0	0	50.4219970703125
5	2	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",focal.convert(1.0));"	0	0	50.4219970703125
5	3	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",focal.convert(1000.0));"	0	0	50.4219970703125
5	4	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(""STR"",focal.convert(99.99));"	0	0	50.4219970703125
5	5	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",focal.convert(0.01));"	0	0	50.4219970703125
5	6	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertTrue(focal.convert(50.0).startsWith(""STR""));"	0	0	50.4219970703125
5	7	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotSame(""STR"",focal.convert(500.0));"	0	0	50.4219970703125
5	8	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",focal.convert(1234.56));"	0	0	50.4219970703125
5	9	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertFalse(focal.convert(0.0).isEmpty());	0	0	50.4219970703125
6	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotSame(moneyToStrRUR,moneyToStrUSDENG);	0	0	87.5942702293396
6	1	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotNull(moneyToStrUAH);	0	0	87.5942702293396
6	2	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNull(moneyToStrRURRUS);	0	0	87.5942702293396
6	3	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(323.0));"	0	0	87.5942702293396
6	4	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	???;	0	0	87.5942702293396
6	5	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertTrue(moneyToStrPER1000.convert(10.05).startsWith(""STR""));"	0	0	87.5942702293396
6	6	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""},moneyToStrCustom.getCustomStrings());"	0	0	87.5942702293396
6	7	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotEquals(moneyToStrUSDENG.convert(50.5),moneyToStrUSDENG.convert(50.50));	0	0	87.5942702293396
6	8	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertFalse(moneyToStrUSDENG.convert(100.0).endsWith(""STR""));"	0	0	87.5942702293396
7	0	orientechnologies/orientdb	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(OMultiValue.getFirstValue(newObject()));	0	0	821.7624428272247
7	1	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	1	0	821.7624428272247
7	2	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(OMultiValue.getFirstValue(newArrayList<String>()));	0	0	821.7624428272247
7	3	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(OMultiValue.getFirstValue(newString[]{}));	0	0	821.7624428272247
7	4	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(""STR"",getFirstValue(Arrays.asList(""STR"",""STR"",""STR"")));"	0	0	821.7624428272247
7	5	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(""STR"",OMultiValue.getFirstValue(newString[]{""STR"",""STR"",""STR""}));"	0	0	821.7624428272247
7	6	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	???;	0	0	821.7624428272247
7	7	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(getFirstValue(newHashMap<String,String>()));	0	0	821.7624428272247
7	8	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(OMultiValue.getFirstValue(null));	0	0	821.7624428272247
7	9	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertNull(OMultiValue.getFirstValue(""STR""));"	0	0	821.7624428272247
8	0	orientechnologies/orientdb	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertArrayEquals(newObject[]{doc},vertices.toArray());	0	0	236.01864886283875
8	1	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	1	0	236.01864886283875
8	2	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size());	0	0	236.01864886283875
8	3	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	"assertEquals(""STR"",vertices.get(0).field(""STR""));"	0	0	236.01864886283875
8	4	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(doc,vertices.get(0));	0	0	236.01864886283875
8	5	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertSame(doc,vertices.get(0));	0	0	236.01864886283875
8	6	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	0	0	236.01864886283875
8	7	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNull(vertices.get(0));	0	0	236.01864886283875
8	8	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.size()>0);	0	0	236.01864886283875
8	9	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	0	0	236.01864886283875
9	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(compositeIndex);	0	0	339.9348978996277
9	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys[0],result.getKeys().get(0));	0	0	339.9348978996277
9	2	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	0	0	339.9348978996277
9	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(documentinstanceofODocument);	0	0	339.9348978996277
9	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	0	0	339.9348978996277
9	5	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys.length,result.getKeys().size());	0	0	339.9348978996277
9	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertEquals(""STR"",compositeIndex.getIndex(1).getDefinition().getFields().get(0));"	0	0	339.9348978996277
9	7	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertEquals(""STR"",compositeIndex.getIndex(0).getDefinition().getFields().get(0));"	0	0	339.9348978996277
9	8	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofOCompositeKey);	0	0	339.9348978996277
9	9	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(2,compositeIndex.size());	0	0	339.9348978996277
10	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndex);	0	0	326.80855202674866
10	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	"assertFalse(compositeIndex.hasIndex(""STR""));"	0	0	326.80855202674866
10	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,keys.size());	0	0	326.80855202674866
10	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,compositeIndex.getIndexes().size());	0	0	326.80855202674866
10	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	0	0	326.80855202674866
10	5	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	"assertTrue(compositeIndex.hasIndex(""STR"",OType.INTEGER));"	0	0	326.80855202674866
10	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	0	0	326.80855202674866
10	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1	0	326.80855202674866
10	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,((ArrayList<OCompositeKey>)result).size());	0	0	326.80855202674866
10	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList);	0	0	326.80855202674866
11	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	0	0	208.24104619026184
11	1	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.stream().count(),CoreMatchers.is(0));	0	0	208.24104619026184
11	2	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertArrayEquals(newObject[]{},result.stream().toArray());	0	0	208.24104619026184
11	3	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1	0	208.24104619026184
11	4	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotEquals(0,result.stream().count());	0	0	208.24104619026184
11	5	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNull(result.next());	0	0	208.24104619026184
11	6	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.next());	0	0	208.24104619026184
11	7	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertSame(0,result.stream().count());	0	0	208.24104619026184
11	8	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotSame(0,result.stream().count());	0	0	208.24104619026184
11	9	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0	0	208.24104619026184
12	0	orientechnologies/orientdb	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedLength,stream.length);	0	0	305.79588413238525
12	1	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(expectedByteArray,stream);	0	0	305.79588413238525
12	2	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedByte,stream[0]);	0	0	305.79588413238525
12	3	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream[0]);	0	0	305.79588413238525
12	4	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newbyte[0],stream);	0	0	305.79588413238525
12	5	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],greaterThan(minValue));	0	0	305.79588413238525
12	6	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertSame(expectedByte,stream[0]);	0	0	305.79588413238525
12	7	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],instanceOf(Byte.class));	0	0	305.79588413238525
12	8	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],lessThan(maxValue));	0	0	305.79588413238525
12	9	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(expectedByte,stream[0]);	0	0	305.79588413238525
12	10	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNull(stream[0]);	0	0	305.79588413238525
13	0	orientechnologies/orientdb	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(database.getRecordById(docOne.getIdentity()));	0	0	273.0919260978699
13	1	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo);	0	0	273.0919260978699
13	2	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNull(database.getRecordById(newORecordId(-1,-1)));	0	0	273.0919260978699
13	3	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertArrayEquals(2,3});	0	0	273.0919260978699
13	4	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotEquals(0,database.countClusterElements(database.getDefaultClusterId()));	0	0	273.0919260978699
13	5	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	1	0	273.0919260978699
13	6	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(recordsCount==0);	0	0	273.0919260978699
13	7	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertSame(docOne,ridBag.get(0));	0	0	273.0919260978699
13	8	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(0,database.countClusterElements(database.getClusterIdByName(database.getDefaultClusterName())));	0	0	273.0919260978699
13	9	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(recordsCount>0);	0	0	273.0919260978699
14	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",idProperty.getName());"	0	0	255.57462906837463
14	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(idProperty.getName().startsWith(""STR""));"	0	0	255.57462906837463
14	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(Pattern.matches(""STR"",idProperty.getName()));"	0	0	255.57462906837463
14	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName()instanceofString);	0	0	255.57462906837463
14	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(idProperty.getName().contains(""STR""));"	0	0	255.57462906837463
14	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0	0	255.57462906837463
14	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().length()>=1&&idProperty.getName().length()<=100);	0	0	255.57462906837463
14	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty.getName());	0	0	255.57462906837463
14	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(!idProperty.getName().isEmpty());	0	0	255.57462906837463
15	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",idProperty.getName());"	0	0	264.5458679199219
15	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,idProperty.getMin());	0	0	264.5458679199219
15	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax());	0	0	264.5458679199219
15	3	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	0	0	264.5458679199219
15	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isUnsafe());	0	0	264.5458679199219
15	5	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getOwnerClass().getName());"	0	0	264.5458679199219
15	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0	0	264.5458679199219
15	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0	0	264.5458679199219
15	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(OType.EMBEDDEDLIST,idProperty.getType());	0	0	264.5458679199219
15	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(db);	0	0	264.5458679199219
16	0	orientechnologies/orientdb	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(0,getClusterIds().length);	0	0	263.0731658935547
16	1	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(1,getClusterIds()[0]);	0	0	263.0731658935547
16	2	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).contains(5));	0	0	263.0731658935547
16	3	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(3,getClusterIds().length);	0	0	263.0731658935547
16	4	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(getClusterIds().length,clusterIdsSet.size());	0	0	263.0731658935547
16	5	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).contains(2));	0	0	263.0731658935547
16	6	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).isEmpty());	0	0	263.0731658935547
16	7	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(getClusterIds());	0	0	263.0731658935547
16	8	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).isEmpty());	0	0	263.0731658935547
16	9	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(getClusterIds().length>0);	0	0	263.0731658935547
17	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	0	247.35720872879028
17	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0	0	247.35720872879028
17	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0	0	247.35720872879028
17	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	0	0	247.35720872879028
17	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0	0	247.35720872879028
17	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0	0	247.35720872879028
17	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	0	0	247.35720872879028
17	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0	0	247.35720872879028
17	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()==false);	0	0	247.35720872879028
17	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	0	247.35720872879028
18	0	orientechnologies/orientdb	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	1	0	93.79950594902039
18	1	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(ret.getId()>0);	0	0	93.79950594902039
18	2	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(OServerPluginHelper.isHandlerCallbackInvoked(ret.getProtocol().getServer(),ret));	0	0	93.79950594902039
18	3	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	0	0	93.79950594902039
18	4	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsValue(ret));	0	0	93.79950594902039
18	5	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(connectionSerial.get()-1,ret.getConnectionSerial());	0	0	93.79950594902039
18	6	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(protocol,ret.getProtocol());	0	0	93.79950594902039
18	7	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsKey(ret.getId()));	0	0	93.79950594902039
18	8	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	"assertTrue(OLogManager.instance().getConfiguredLoggers().contains(""STR""+ret));"	0	0	93.79950594902039
18	9	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(server,ret.getProtocol().getServer());	0	0	93.79950594902039
19	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(res);	0	0	244.6759488582611
19	1	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions(),serializerVersion);	0	0	244.6759488582611
19	2	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertTrue(document.containsProperty(""STR""));"	0	0	244.6759488582611
19	3	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertFalse(mappa.containsKey(""STR""));"	0	0	244.6759488582611
19	4	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(serializerinstanceofORecordSerializerNetwork);	0	0	244.6759488582611
19	5	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extrinstanceofODocument);	0	0	244.6759488582611
19	6	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	0	0	244.6759488582611
19	7	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotEquals(ORecordSerializerNetworkV37.class,serializer.getClass());	0	0	244.6759488582611
19	8	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(2,lista.size());	0	0	244.6759488582611
19	9	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(_fieldSize>0);	0	0	244.6759488582611
20	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(anotherCompositeKey);	0	0	249.39754915237427
20	1	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	0	0	249.39754915237427
20	2	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKeyinstanceofString);	0	0	249.39754915237427
20	3	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0	0	249.39754915237427
20	4	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKeyinstanceofOCompositeKey);	0	0	249.39754915237427
20	5	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1	0	249.39754915237427
20	6	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	0	0	249.39754915237427
20	7	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0	0	249.39754915237427
20	8	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	0	0	249.39754915237427
20	9	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0	0	249.39754915237427
21	0	orientechnologies/orientdb	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(0,request.getCommand());	0	0	110.84635806083679
21	1	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals(0,request.getCommand());	0	0	110.84635806083679
21	2	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	0	0	110.84635806083679
21	3	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getErrorMessage());	0	0	110.84635806083679
21	4	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertFalse(request.getCommand()!=OChannelBinaryProtocol.REQUEST_QUERY);	0	0	110.84635806083679
21	5	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertArrayEquals(2,3});	0	0	110.84635806083679
21	6	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertNotEquals(""STR"",params.get(""STR""));"	0	0	110.84635806083679
21	7	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertTrue(request.getCommand()==OChannelBinaryProtocol.REQUEST_QUERY);	0	0	110.84635806083679
21	8	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	0	0	110.84635806083679
21	9	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNull(other.getErrorMessage());	0	0	110.84635806083679
22	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotEquals(expectedValue,result);	0	0	252.64814496040344
22	1	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(expectedValue,result);	0	0	252.64814496040344
22	2	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertSame(expectedObject,result);	0	0	252.64814496040344
22	3	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertFalse(result);	0	0	252.64814496040344
22	4	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotNull(result);	0	0	252.64814496040344
22	5	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertTrue(result);	0	0	252.64814496040344
22	6	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertNotSame(""STR"",expectedObject,result);"	0	0	252.64814496040344
22	7	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNull(result);	0	0	252.64814496040344
22	8	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertArrayEquals(expectedArray,result);	0	0	252.64814496040344
23	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertEquals(""STR"",config.get(Keys.CUCUMBERPRO_LOGGING));"	0	0	69.66193795204163
23	1	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(config,logger.getConfig());	0	0	69.66193795204163
23	2	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertNotEquals(""STR"",logger.getLogLevelType());"	0	0	69.66193795204163
23	3	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(config.get(Keys.CUCUMBERPRO_LOGGING));	0	0	69.66193795204163
23	4	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(loggerinstanceofLogger.ConsoleLogger);	0	0	69.66193795204163
23	5	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertNotEquals(""STR"",config.get(Keys.CUCUMBERPRO_LOGGING));"	0	0	69.66193795204163
23	6	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"assertArrayEquals(newString[]{""STR""},config.logLevelsToArray());"	0	0	69.66193795204163
23	7	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertSame(config,logger.getConfig());	0	0	69.66193795204163
23	8	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNull(config.get(Keys.CUCUMBERPRO_LOGGING));	0	0	69.66193795204163
23	9	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(loggerinstanceofLogger.SystemLogger);	0	0	69.66193795204163
24	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertEquals(""STR"",config.get(CUCUMBERPRO_URL));"	0	0	71.9595730304718
24	1	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config.get(CUCUMBERPRO_LOGGING));	0	0	71.9595730304718
24	2	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(logger,newLogger(config));	0	0	71.9595730304718
24	3	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNull(config.get(CUCUMBERPRO_PROFILE));	0	0	71.9595730304718
24	4	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertNotEquals(config.get(CUCUMBERPRO_LOGFILE),""STR"");"	0	0	71.9595730304718
24	5	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0	0	71.9595730304718
24	6	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.isDebugEnabled());	0	0	71.9595730304718
24	7	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},config.get(CUCUMBERPRO_ENVMASK));"	0	0	71.9595730304718
24	8	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(config,createConfig());	0	0	71.9595730304718
24	9	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(5001,config.get(CUCUMBERPRO_CONNECTION_TIMEOUT));	0	0	71.9595730304718
25	0	fluenda/ParCEFone	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0);	0	0	74.16234278678894
25	1	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0);	0	0	74.16234278678894
25	2	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison>0);	0	0	74.16234278678894
25	3	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<=0);	0	0	74.16234278678894
25	4	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>=0);	0	0	74.16234278678894
25	5	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0	0	74.16234278678894
25	6	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(macAddress,macAddress.address);	0	0	74.16234278678894
25	7	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison);	0	0	74.16234278678894
25	8	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	1	0	74.16234278678894
26	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	0	0	80.54571080207825
26	1	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedLength,macAddress.getAddress().length);	0	0	80.54571080207825
26	2	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddressinstanceofMacAddress);	0	0	80.54571080207825
26	3	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(macAddress));	0	0	80.54571080207825
26	4	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(someObject));	0	0	80.54571080207825
26	5	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	0	0	80.54571080207825
26	6	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedResult,macAddress.equals(otherMacAddress));	0	0	80.54571080207825
26	7	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0	0	80.54571080207825
26	8	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedMacAddress,macAddress);	0	0	80.54571080207825
26	9	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(expectedMacAddress,macAddress);	0	0	80.54571080207825
27	0	fluenda/ParCEFone	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"assertEquals(""STR"",parser.parse(sample1,true,Locale.US).getVendor());"	0	0	86.84517478942871
27	1	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	0	0	86.84517478942871
27	2	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame(parser.parse(sample1,true,Locale.US),parser.parse(sample1,true,Locale.US));	0	0	86.84517478942871
27	3	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertThat(parser.parse(sample1,true,Locale.US),instanceOf(CommonEvent.class));	0	0	86.84517478942871
27	4	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"assertArrayEquals(""FireEye"",""CMS""});"	0	0	86.84517478942871
27	5	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).isValidate());	0	0	86.84517478942871
27	6	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNull(parser.parse(null,true,Locale.US));	0	0	86.84517478942871
27	7	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(7.2,parser.parse(sample1,true,Locale.US).getVersion());	0	0	86.84517478942871
27	8	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(parser.parse(sample1,false,Locale.US).isNormalize());	0	0	86.84517478942871
27	9	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).getExtensions().isEmpty());	0	0	86.84517478942871
28	0	nidi3/graphviz-java	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotNull(markdown(""STR""));"	0	0	115.51231503486633
28	1	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertSame(html(""STR""),markdown(""STR""));"	0	0	115.51231503486633
28	2	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertNull(markdown(null));	0	0	115.51231503486633
28	3	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertFalse(html(""STR"").contains(""STR""));"	0	0	115.51231503486633
28	4	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotSame(html(""STR""),markdown(""STR""));"	0	0	115.51231503486633
28	5	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertArrayEquals(html(""STR"").toCharArray(),markdown(""STR"").toCharArray());"	0	0	115.51231503486633
28	6	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(html(""STR""),markdown(""STR""));"	0	0	115.51231503486633
28	7	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertTrue(html(""STR"").contains(""STR""));"	0	0	115.51231503486633
28	8	/	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotEquals(html(""STR""),markdown(""STR""));"	0	0	115.51231503486633
29	0	trautonen/coveralls-maven-plugin	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(getBranch()instanceofString);	0	0	534.009715795517
29	1	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertFalse(condition);	0	0	534.009715795517
29	2	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(getBranch().isEmpty());	0	0	534.009715795517
29	3	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNotNull(getBranch());	0	0	534.009715795517
29	4	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(getBranch().startsWith(prefix));	0	0	534.009715795517
29	5	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertEquals(expectedValue,getBranch());	0	0	534.009715795517
29	6	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(getBranch().endsWith(suffix));	0	0	534.009715795517
29	7	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertTrue(condition);	0	0	534.009715795517
29	8	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertFalse(getBranch().isEmpty());	0	0	534.009715795517
29	9	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNotEquals(unexpectedValue,getBranch());	0	0	534.009715795517
30	0	trautonen/coveralls-maven-plugin	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(isSelected());	0	0	711.664302110672
30	1	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNull(getProperty(CIRCLE));	0	0	711.664302110672
30	2	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotNull(getProperty(CIRCLE));	0	0	711.664302110672
30	3	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertFalse(!isSelected());	0	0	711.664302110672
30	4	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotEquals(false,isSelected());	0	0	711.664302110672
30	5	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertEquals(true,isSelected());	0	0	711.664302110672
31	0	trautonen/coveralls-maven-plugin	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(isSelected());	0	0	86.27158308029175
31	1	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(null,getProperty(JENKINS_URL));	0	0	86.27158308029175
31	2	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotNull(getProperty(JENKINS_URL));	0	0	86.27158308029175
31	3	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotEquals(null,getProperty(JENKINS_URL));	0	0	86.27158308029175
31	4	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(true,isSelected());	0	0	86.27158308029175
31	5	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertEquals(null,getProperty(JENKINS_URL));	0	0	86.27158308029175
31	6	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(isSelected());	0	0	86.27158308029175
31	7	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(true,isSelected());	0	0	86.27158308029175
31	8	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(null,getProperty(JENKINS_URL));	0	0	86.27158308029175
31	9	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNull(getProperty(JENKINS_URL));	0	0	86.27158308029175
32	0	adlnet/jxapi	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected.toString(),actual.toString());	0	0	47.0613739490509
32	1	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0	0	47.0613739490509
32	2	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNull(actual);	0	0	47.0613739490509
32	3	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertFalse(expected.isEquals(actual));	0	0	47.0613739490509
32	4	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	47.0613739490509
32	5	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0	0	47.0613739490509
32	6	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0	0	47.0613739490509
32	7	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	1	0	47.0613739490509
32	8	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	47.0613739490509
32	9	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(expected.isEquals(actual));	0	0	47.0613739490509
33	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertSame(statementRef,statementRef);	0	0	47.81071186065674
33	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(null,statementRef);	0	0	47.81071186065674
33	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	0	0	47.81071186065674
33	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	1	0	47.81071186065674
33	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(StatementReference.class,statementRef.getClass());	0	0	47.81071186065674
33	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotSame(id,statementRef.getId());	0	0	47.81071186065674
33	6	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertThrows(IllegalArgumentException.class,()->newStatementReference(null));	0	0	47.81071186065674
33	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(id,statementRef.getId());	0	0	47.81071186065674
33	8	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getId()));	0	0	47.81071186065674
33	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertArrayEquals(newObject[]{id},newObject[]{statementRef.getId()});	0	0	47.81071186065674
34	0	adlnet/jxapi	GroupTest	testSetMember	assertNotNull(actual);	"assertThrows(Exception.class,()->{
/*codethatshouldthrowanexception*/
});"	0	0	49.484588861465454
34	1	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0	0	49.484588861465454
34	2	/	GroupTest	testSetMember	assertNotNull(actual);	assertThat(actual,Matchers.hasItem(expected));	0	0	49.484588861465454
34	3	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0	0	49.484588861465454
34	4	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	49.484588861465454
34	5	/	GroupTest	testSetMember	assertNotNull(actual);	assertSame(expected,actual);	0	0	49.484588861465454
34	6	/	GroupTest	testSetMember	assertNotNull(actual);	assertNull(actual);	0	0	49.484588861465454
34	7	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	1	0	49.484588861465454
34	8	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	49.484588861465454
34	9	/	GroupTest	testSetMember	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0	0	49.484588861465454
35	0	adlnet/jxapi	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertThat(actual,CoreMatchers.is(expected));	0	0	44.796942710876465
35	1	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equalsIgnoreCase(actual));	0	0	44.796942710876465
35	2	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	1	0	44.796942710876465
35	3	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(expected.equals(actual));	0	0	44.796942710876465
35	4	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0	0	44.796942710876465
35	5	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(expected,actual);	0	0	44.796942710876465
35	6	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	0	0	44.796942710876465
35	7	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNull(actual);	0	0	44.796942710876465
35	8	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual);	0	0	44.796942710876465
35	9	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0	0	44.796942710876465
36	0	adlnet/jxapi	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(InteractionComponent.class,actual.get(0).getClass());	0	0	59.47784900665283
36	1	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	"assertFalse(actual.stream().anyMatch(comp->comp.getId().equals(""STR"")));"	0	0	59.47784900665283
36	2	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(1,actual.size());	0	0	59.47784900665283
36	3	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.stream().anyMatch(Objects::isNull));	0	0	59.47784900665283
36	4	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.isEmpty());	0	0	59.47784900665283
36	5	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>0);	0	0	59.47784900665283
36	6	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	59.47784900665283
36	7	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	"assertTrue(actual.stream().anyMatch(comp->comp.getId().equals(""STR"")));"	0	0	59.47784900665283
36	8	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual);	1	0	59.47784900665283
36	9	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0	0	59.47784900665283
37	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertNotEquals(""STR"",normalizedUrl);"	0	0	149.99645686149597
37	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertNotSame(""STR"",normalizedUrl);"	0	0	149.99645686149597
37	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	0	149.99645686149597
37	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertEquals(""STR"",normalizedUrl);"	0	0	149.99645686149597
37	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl);	0	0	149.99645686149597
37	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.contains(""STR""));"	0	0	149.99645686149597
37	6	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(normalizedUrl.isEmpty());	0	0	149.99645686149597
37	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertSame(""STR"",normalizedUrl);"	0	0	149.99645686149597
37	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertArrayEquals(newString[]{""STR""},normalizedUrl.split(""STR"")[1].split(""STR""));"	0	0	149.99645686149597
38	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl);	0	0	129.37304425239563
38	1	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	0	129.37304425239563
38	2	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.equals(normalizedUrl));	0	0	129.37304425239563
38	3	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testSourceUrl,sourceUrl);	0	0	129.37304425239563
38	4	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(testSourceUrl,sourceUrl);	0	0	129.37304425239563
38	5	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0	0	129.37304425239563
38	6	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl);	0	0	129.37304425239563
38	7	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(expectedResult.equals(normalizedUrl));	0	0	129.37304425239563
38	8	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult.length(),normalizedUrl.length());	0	0	129.37304425239563
38	9	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	0	129.37304425239563
39	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	"assertNotEquals(aXls.getURL(),newClassPathResource(""STR"").getURL());"	0	0	108.78569507598877
39	1	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.exists());	0	0	108.78569507598877
39	2	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	"assertThat(aXls.getFile().getName(),Matchers.startsWith(""STR""));"	0	0	108.78569507598877
39	3	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	0	0	108.78569507598877
39	4	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertSame(CodeListDocument.class,super.getBoundType());	0	0	108.78569507598877
39	5	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(o->newObjectFactory().createCodeList(o)instanceofCodeList);	0	0	108.78569507598877
39	6	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	"assertNotSame(aXls,newClassPathResource(""STR""));"	0	0	108.78569507598877
39	7	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(aXls,null);	0	0	108.78569507598877
39	8	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(CGenericode.GENERICODE_10_XSDS,super.getSchemaLocations());	0	0	108.78569507598877
39	9	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	"assertArrayEquals(""banana"",""orange""});"	0	0	108.78569507598877
40	0	TooTallNate/Java-WebSocket	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(Opcode.CLOSING,frame.getOpcode());	0	0	73.68603301048279
40	1	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertArrayEquals(newbyte[0],frame.getPayloadData());	0	0	73.68603301048279
40	2	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertNotEquals(""STR"",frame.getReason());"	0	0	73.68603301048279
40	3	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertNotEquals(CloseFrame.CONTINUOUS,frame.getCode());	0	0	73.68603301048279
40	4	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertNotSame(""STR"",frame.getReason());"	0	0	73.68603301048279
40	5	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertSame(Opcode.CLOSING,frame.getOpcode());	0	0	73.68603301048279
40	6	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertFalse(frame.getReason().isEmpty());	0	0	73.68603301048279
40	7	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertNotNull(frame.toString());	0	0	73.68603301048279
40	8	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertTrue(frame.getCode()==CloseFrame.NORMAL);	0	0	73.68603301048279
40	9	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertNull(frame.getCloseCode());	0	0	73.68603301048279
41	0	TooTallNate/Java-WebSocket	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""STR"",protocol0.getProvidedProtocol());"	0	0	61.32477593421936
41	1	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertSame(""STR"",protocol0.getProvidedProtocol());"	0	0	61.32477593421936
41	2	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0	0	61.32477593421936
41	3	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(protocol0.getProvidedProtocol().equals(""STR""));"	0	0	61.32477593421936
41	4	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""STR"",protocol0.getProvidedProtocol());"	0	0	61.32477593421936
41	5	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0.getProvidedProtocol());	0	0	61.32477593421936
41	6	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertArrayEquals(newString[]{""STR""},newString[]{protocol0.getProvidedProtocol()});"	0	0	61.32477593421936
41	7	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1	0	61.32477593421936
41	8	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNull(protocol0.getProvidedProtocol());	0	0	61.32477593421936
42	0	TooTallNate/Java-WebSocket	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	0	0	61.999778032302856
42	1	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertTrue(client.removeHeader(""STR"").isEmpty());"	0	0	61.999778032302856
42	2	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotEquals(""STR"",client.removeHeader(""STR""));"	0	0	61.999778032302856
42	3	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotNull(client.removeHeader(""STR""));"	0	0	61.999778032302856
42	4	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertArrayEquals(httpHeaders.keySet().toArray(),client.removeHeader(""STR"").split(""STR""));"	0	0	61.999778032302856
42	5	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	assertSame(httpHeaders,client.headers);	0	0	61.999778032302856
42	6	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertFalse(client.removeHeader(""STR"").contains(""STR""));"	0	0	61.999778032302856
42	7	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNotSame(httpHeaders,client.removeHeader(""STR""));"	0	0	61.999778032302856
42	8	/	HeadersTest	test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertEquals(""STR"",client.removeHeader(""STR""));"	1	0	61.999778032302856
43	0	gvlasov/collections-utils	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(1,2,3)).collect(Collectors.toSet()).containsAll(Arrays.asList(1,3)));	0	0	107.28880405426025
43	1	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(5,2,8,1)).sorted().collect(Collectors.toList()).equals(Arrays.asList(1,2,5,8)));	0	0	107.28880405426025
43	2	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(IterableToStream.stream(Arrays.asList(1,2,3)));	0	0	107.28880405426025
43	3	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(0,stream(newHashSet<>()).count());	0	0	107.28880405426025
43	4	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element>3));	0	0	107.28880405426025
43	5	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(10,(int)IterableToStream.stream(Arrays.asList(10,20,30)).findFirst().orElse(-1));	0	0	107.28880405426025
43	6	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element==4));	0	0	107.28880405426025
43	7	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(newArrayList<>()));	0	0	107.28880405426025
43	8	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(IterableToStream.stream(Arrays.asList(2,4,6)).allMatch(element->element%2==0));	0	0	107.28880405426025
43	9	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertTrue(IterableToStream.stream(Arrays.asList(""STR"",""STR"",""STR"")).count()>0);"	0	0	107.28880405426025
44	0	gvlasov/collections-utils	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(null));	0	0	58.061272859573364
44	1	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertEquals(1,stream(Collections.singleton(""STR"").iterator()).count());"	0	0	58.061272859573364
44	2	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertTrue(stream(Collections.singleton(""STR"").iterator()).findFirst().isPresent());"	0	0	58.061272859573364
44	3	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(Collections.emptyIterator()).findFirst().isPresent());	0	0	58.061272859573364
44	4	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2,3),stream(Arrays.asList(1,2,3).iterator()));	0	0	58.061272859573364
44	5	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertNotNull(stream(Collections.singleton(""STR"").iterator()).findFirst().orElse(null));"	0	0	58.061272859573364
44	6	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertTrue(stream(Collections.singleton(""STR"").iterator()).anyMatch(e->e.equals(""STR"")));"	0	0	58.061272859573364
44	7	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.emptyIterator()).count()==0);	0	0	58.061272859573364
44	8	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.empty(),stream(Collections.emptyIterator()));	0	0	58.061272859573364
44	9	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertFalse(stream(Collections.singleton(""STR"").iterator()).anyMatch(e->e.equals(""STR"")));"	0	0	58.061272859573364
45	0	NanoHttpd/nanohttpd	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertFalse(testServer.response.getBody().contains(""STR""));"	0	0	98.75527095794678
45	1	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertEquals(""STR"",contentEncoding.getValue());"	0	0	98.75527095794678
45	2	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertTrue(httpclient.getConnectionManager()instanceofSingleClientConnManager);	0	0	98.75527095794678
45	3	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNull(contentEncoding);	0	0	98.75527095794678
45	4	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertTrue(testServer.response.getBody().contains(""STR""));"	0	0	98.75527095794678
45	5	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertFalse(httpclient.getConnectionManager()instanceofThreadSafeClientConnManager);	0	0	98.75527095794678
45	6	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertFalse(response.getStatusLine().getStatusCode()==404);	0	0	98.75527095794678
45	7	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertTrue(response.getStatusLine().getStatusCode()==200);	0	0	98.75527095794678
45	8	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertNotEquals(""STR"",contentEncoding.getValue());"	0	0	98.75527095794678
45	9	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNotNull(contentEncoding);	0	0	98.75527095794678
46	0	OpenLiberty/ci.common	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.isEmpty());	0	0	54.24923634529114
46	1	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertFalse(result.contains(""STR""));"	0	0	54.24923634529114
46	2	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertArrayEquals(""10""},result.toArray());"	0	0	54.24923634529114
46	3	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertSame(options,result);	0	0	54.24923634529114
46	4	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	0	0	54.24923634529114
46	5	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotSame(options,result);	0	0	54.24923634529114
46	6	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(2,result.size());	0	0	54.24923634529114
46	7	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertNotEquals(Arrays.asList(""STR""),result);"	0	0	54.24923634529114
46	8	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertThat(result,IsIterableWithSize.iterableWithSize(2));	0	0	54.24923634529114
46	9	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(3,result.size());	0	0	54.24923634529114
47	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(KoreanPos.Noun,tokens.get(0).getPos());	0	0	210.91936421394348
47	1	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(3,tokens.size());	0	0	210.91936421394348
47	2	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(text.contains(""STR""));"	0	0	210.91936421394348
47	3	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertDoesNotThrow(()->{
});"	0	0	210.91936421394348
47	4	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.stream().anyMatch(token->token.getText().equals(""STR"")));"	0	0	210.91936421394348
47	5	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(5,tokens.size());	0	0	210.91936421394348
47	6	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	0	0	210.91936421394348
47	7	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>2);	0	0	210.91936421394348
47	8	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",tokens.get(1).getText());"	0	0	210.91936421394348
47	9	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertFalse(tokens.stream().anyMatch(token->token.getText().equals(""STR"")));"	0	0	210.91936421394348
48	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(userProcessor.isStarted());	0	0	173.0496962070465
48	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(loggerinstanceofLogger);	0	0	173.0496962070465
48	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.size()>=2);	0	0	173.0496962070465
48	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().iterator().next().isStarted());	0	0	173.0496962070465
48	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionManager);	0	0	173.0496962070465
48	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(connectionMonitorinstanceofConnectionMonitor);	0	0	173.0496962070465
48	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	0	0	173.0496962070465
48	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertSame(connectionManager,taskScanner);	0	0	173.0496962070465
48	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(shutdown());	0	0	173.0496962070465
48	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionMonitor);	0	0	173.0496962070465
48	10	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(logger.hasWarning());	0	0	173.0496962070465
49	0	rhwayfun/spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(getProducer().getDefaultTopicQueueNum()>0);	0	0	57.40427589416504
49	1	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(getProducer().getMaxMessageSize()>0);	0	0	57.40427589416504
49	2	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(!getProducer().getInstanceName().isEmpty());	0	0	57.40427589416504
49	3	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(getProducer().getSendMsgTimeout()>0);	0	0	57.40427589416504
49	4	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(getProducer().getCompressMsgBodyOverHowmuch()<=1024);	0	0	57.40427589416504
49	5	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(getProducer().getRetryTimesWhenSendFailed()<=5);	0	0	57.40427589416504
49	6	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotNull(getProducer());	0	0	57.40427589416504
49	7	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertEquals(TEST_NAME_SERVER,getProducer().getNameServerAddress());	0	0	57.40427589416504
49	8	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertEquals(TEST_PRODUCER_GROUP,getProducer().getProducerGroup());	0	0	57.40427589416504
49	9	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotEquals(ServiceState.RUNNING,getProducer().getServiceState());	0	0	57.40427589416504
