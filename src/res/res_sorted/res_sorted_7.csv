TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	OpenLiberty/ci.common	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertSame(tempTextFile,configFile);	0	0	55.895461082458496
0	1	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0	0	55.895461082458496
0	2	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0	0	55.895461082458496
0	3	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNull(configFile);	0	0	55.895461082458496
0	4	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile,configFile);	0	0	55.895461082458496
0	5	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	0	0	55.895461082458496
0	6	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1	0	55.895461082458496
0	7	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.exists());	0	0	55.895461082458496
0	8	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertArrayEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	0	0	55.895461082458496
0	9	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0	0	55.895461082458496
1	0	nidi3/graphviz-java	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertThrows(NullPointerException.class,()->FOCAL(null));	0	0	91.30165982246399
1	1	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertNotEquals(attrs(attr(SHAPE,RECORD),attr(LABEL,String.join(""STR"",newString[]{""STR""}))),FOCAL(of(""STR"")));"	0	0	91.30165982246399
1	2	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertNotEquals(attrs(attr(SHAPE,RECTANGLE),attr(LABEL,""STR"")),FOCAL(of()).getAttr(LABEL));"	0	0	91.30165982246399
1	3	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertEquals(attrs(attr(SHAPE,RECORD),attr(LABEL,String.join(""STR"",newString[]{}))),FOCAL(of()));"	0	0	91.30165982246399
1	4	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertNotSame(attrs(attr(SHAPE,RECTANGLE),attr(LABEL,""STR"")),FOCAL(of(""STR"")));"	0	0	91.30165982246399
1	5	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNull(FOCAL(of()).getAttr(SHAPE));	0	0	91.30165982246399
1	6	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertTrue(FOCAL(of(""STR"")).hasAttr(LABEL));"	0	0	91.30165982246399
1	7	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertFalse(FOCAL(of()).hasAttr(LABEL));	0	0	91.30165982246399
1	8	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertArrayEquals(newString[]{SHAPE,LABEL});	0	0	91.30165982246399
1	9	/	RecordsTest	of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	assertNotNull(FOCAL(of()));	0	0	91.30165982246399
2	0	nidi3/graphviz-java	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertFalse(zigzag.contains(10));	0	0	169.2880518436432
2	1	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotEquals(5,zigzag.size());	0	0	169.2880518436432
2	2	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertEquals(0,zigzag.size());	0	0	169.2880518436432
2	3	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertTrue(zigzag.contains(4));	0	0	169.2880518436432
2	4	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertTrue(zigzaginstanceofZigzag);	0	0	169.2880518436432
2	5	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotNull(zigzag);	0	0	169.2880518436432
2	6	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertNotSame(zigzag1,zigzag2);	0	0	169.2880518436432
2	7	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertFalse(zigzag.isEmpty());	0	0	169.2880518436432
2	8	/	FillStyleTest	zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertArrayEquals(2,3});	0	0	169.2880518436432
3	0	rockagen/commons-lib	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertArrayEquals(expectedArray,actualArray);	0	0	55.61489677429199
3	1	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertThat(value,CoreMatchers.is(expectedValue));	0	0	55.61489677429199
3	2	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertTrue(condition);	0	0	55.61489677429199
3	3	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNull(object);	0	0	55.61489677429199
3	4	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertFalse(condition);	0	0	55.61489677429199
3	5	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotSame(expectedObject,actualObject);	0	0	55.61489677429199
3	6	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertSame(expectedObject,actualObject);	0	0	55.61489677429199
3	7	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertNotEquals(""STR"",""STR"");"	0	0	55.61489677429199
3	8	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",""STR"");"	0	0	55.61489677429199
3	9	/	OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(object);	0	0	55.61489677429199
4	0	rockagen/commons-lib	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	"assertNotEquals(""STR"",obj.getName());"	0	0	54.573010206222534
4	1	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertFalse(map.isEmpty());	0	0	54.573010206222534
4	2	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertTrue(paramsMap.size()>0);	0	0	54.573010206222534
4	3	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNull(obj.getEmail());	0	0	54.573010206222534
4	4	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	"assertArrayEquals(newObject[]{""STR"",""STR"",""STR"",""STR""},paramsMap.keySet().toArray());"	0	0	54.573010206222534
4	5	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertSame(TestVo.class,obj.getClass());	0	0	54.573010206222534
4	6	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getAddr());"	0	0	54.573010206222534
4	7	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	"assertTrue(map.containsKey(""STR""));"	0	0	54.573010206222534
4	8	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(21,obj.getAge());	1	0	54.573010206222534
4	9	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0	0	54.573010206222534
5	0	sofastack/sofa-bolt	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNull(someObject);	0	0	87.0566520690918
5	1	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(value>=min&&value<=max);	0	0	87.0566520690918
5	2	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someBooleanValue);	0	0	87.0566520690918
5	3	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(someBooleanValue);	0	0	87.0566520690918
5	4	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotEquals(expectedObject,actualObject);	0	0	87.0566520690918
5	5	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(someObject);	0	0	87.0566520690918
5	6	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(expectedObject,actualObject);	0	0	87.0566520690918
5	7	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someCondition);	0	0	87.0566520690918
5	8	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertArrayEquals(expectedArray,actualArray);	0	0	87.0566520690918
6	0	sofastack/sofa-bolt	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertEquals(1,btUrl.getProtocol());	0	0	92.76079106330872
6	1	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getSerializeType());"	0	0	92.76079106330872
6	2	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertNotEquals(""STR"",btUrl.getIp());"	0	0	92.76079106330872
6	3	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotSame(parser,null);	0	0	92.76079106330872
6	4	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(url.contains(""STR""));"	0	0	92.76079106330872
6	5	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotEquals(btUrl,null);	0	0	92.76079106330872
6	6	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertFalse(url.isEmpty());	0	0	92.76079106330872
6	7	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertEquals(3000,btUrl.getTimeout());	0	0	92.76079106330872
6	8	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertEquals(2000,btUrl.getConnectTimeout());	0	0	92.76079106330872
6	9	/	RpcAddressParserTest	testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(btUrl);	0	0	92.76079106330872
7	0	sofastack/sofa-bolt	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	0	0	101.1541690826416
7	1	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(processorManager.getDefaultProcessor(),processorManager.getProcessor(null));	0	0	101.1541690826416
7	2	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0	0	101.1541690826416
7	3	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getDefaultProcessor());	0	0	101.1541690826416
7	4	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd1)instanceofRpcRequestProcessor);	0	0	101.1541690826416
7	5	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	???;	0	0	101.1541690826416
7	6	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd1));	0	0	101.1541690826416
7	7	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd2));	0	0	101.1541690826416
7	8	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor2,processorManager.getProcessor(cmd2));	0	0	101.1541690826416
7	9	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0	0	101.1541690826416
8	0	Yubico/yubico-java-client	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.SUCCESS);	0	0	52.70734190940857
8	1	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertArrayEquals(newbyte[]{1,1,0,0},response.getStatus().toByteArray());	0	0	52.70734190940857
8	2	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.ERROR,response.getStatus());	0	0	52.70734190940857
8	3	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.TOO_MANY_REQUESTS,response.getStatus());	0	0	52.70734190940857
8	4	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotNull(response.getStatus());	0	0	52.70734190940857
8	5	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.OUTPUT,response.getStatus());	0	0	52.70734190940857
8	6	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	0	0	52.70734190940857
8	7	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNull(response.getError());	0	0	52.70734190940857
8	8	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertSame(ResponseStatus.NO_SUCH_CLIENT,response.getStatus());	0	0	52.70734190940857
8	9	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.REPLAYED_OTP);	0	0	52.70734190940857
9	0	Yubico/yubico-java-client	YubicoClientTest	testBadOTP	assertNotNull(response);	assertArrayEquals(0x02,0x03});	0	0	45.66587996482849
9	1	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.isSuccess());	0	0	45.66587996482849
9	2	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	0	0	45.66587996482849
9	3	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNull(response.getErrorMessage());	0	0	45.66587996482849
9	4	/	YubicoClientTest	testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getStatus());"	0	0	45.66587996482849
9	5	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertSame(client,response.getClient());	0	0	45.66587996482849
9	6	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(null,response.getRequest());	0	0	45.66587996482849
9	7	/	YubicoClientTest	testBadOTP	assertNotNull(response);	"assertNotEquals(""STR"",response.getStatus());"	0	0	45.66587996482849
9	8	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	0	0	45.66587996482849
9	9	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isRetryable());	0	0	45.66587996482849
10	0	adlnet/jxapi	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertFalse(expected.isEmpty());	0	0	44.27880907058716
10	1	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	44.27880907058716
10	2	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0	0	44.27880907058716
10	3	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotNull(actual);	1	0	44.27880907058716
10	4	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertSame(expected,actual);	0	0	44.27880907058716
10	5	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(expected.equals(actual));	0	0	44.27880907058716
10	6	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	0	0	44.27880907058716
10	7	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0	0	44.27880907058716
10	8	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNull(actual);	0	0	44.27880907058716
10	9	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	44.27880907058716
11	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	"assertNull(actual.getAsJsonObject().get(""STR""));"	0	0	49.112603187561035
11	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1	0	49.112603187561035
11	2	/	ScoreTest	testSerialize	assertNotNull(actual);	"assertEquals(MAX,actual.getAsJsonObject().get(""STR"").getAsInt());"	0	0	49.112603187561035
11	3	/	ScoreTest	testSerialize	assertNotNull(actual);	"assertEquals(RAW,actual.getAsJsonObject().get(""STR"").getAsInt());"	0	0	49.112603187561035
11	4	/	ScoreTest	testSerialize	assertNotNull(actual);	"assertEquals(MIN,actual.getAsJsonObject().get(""STR"").getAsInt());"	0	0	49.112603187561035
11	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(0,actual.getAsJsonObject().entrySet().size());	0	0	49.112603187561035
11	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0	0	49.112603187561035
11	7	/	ScoreTest	testSerialize	assertNotNull(actual);	"assertEquals(SCALED,actual.getAsJsonObject().get(""STR"").getAsInt());"	0	0	49.112603187561035
11	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actualinstanceofJsonObject);	0	0	49.112603187561035
12	0	adlnet/jxapi	VerbTest	testSetDisplay	assertNotNull(actual);	"assertTrue(expected.containsKey(""STR""));"	0	0	45.43014478683472
12	1	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.isEmpty());	0	0	45.43014478683472
12	2	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	45.43014478683472
12	3	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0	0	45.43014478683472
12	4	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	0	0	45.43014478683472
12	5	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1	0	45.43014478683472
12	6	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	0	0	45.43014478683472
12	7	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	0	0	45.43014478683472
12	8	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNull(actual);	0	0	45.43014478683472
12	9	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	45.43014478683472
13	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertTrue(condition);	0	0	45.34590792655945
13	1	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0	0	45.34590792655945
13	2	/	StatementTest	testGetId	assertNotNull(actual);	assertFalse(condition);	0	0	45.34590792655945
13	3	/	StatementTest	testGetId	assertNotNull(actual);	assertNull(object);	0	0	45.34590792655945
13	4	/	StatementTest	testGetId	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	45.34590792655945
13	5	/	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.containsString(expected));	0	0	45.34590792655945
13	6	/	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.is(expected));	0	0	45.34590792655945
13	7	/	StatementTest	testGetId	assertNotNull(actual);	assertSame(expected,actual);	0	0	45.34590792655945
13	8	/	StatementTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	45.34590792655945
13	9	/	StatementTest	testGetId	assertNotNull(actual);	assertNotNull(object);	0	0	45.34590792655945
14	0	TooTallNate/Java-WebSocket	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertTrue(frame.isFin());	0	0	59.633087158203125
14	1	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotNull(frame.isFin());	0	0	59.633087158203125
14	2	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertSame(true,frame.isFin());	0	0	59.633087158203125
14	3	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertEquals(true,frame.isFin());	0	0	59.633087158203125
14	4	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertArrayEquals(newboolean[]{true},newboolean[]{frame.isFin()});	0	0	59.633087158203125
14	5	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotEquals(false,frame.isFin());	0	0	59.633087158203125
14	6	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotEquals(true,frame.isFin());	0	0	59.633087158203125
14	7	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertFalse(frame.isFin());	0	0	59.633087158203125
14	8	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNull(frame.isFin());	0	0	59.633087158203125
14	9	/	FramedataImpl1Test	testSetters	"assertEquals(""STR"",false,frame.isFin());"	assertNotSame(false,frame.isFin());	0	0	59.633087158203125
15	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0	0	213.20542287826538
15	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	0	0	213.20542287826538
15	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertArrayEquals(newODocument[0],qResult.toArray());	0	0	213.20542287826538
15	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertNotEquals(""STR"",qResult.get(0).field(""STR""));"	0	0	213.20542287826538
15	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1	0	213.20542287826538
15	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertEquals(1,qResult.get(0).field(""STR""));"	0	0	213.20542287826538
15	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0	0	213.20542287826538
15	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertSame(qResult,db.command(newOCommandSQL(""STR"")).execute());"	0	0	213.20542287826538
15	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0	0	213.20542287826538
15	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertNotSame(db.command(newOCommandSQL(""STR"")).execute(),qResult);"	0	0	213.20542287826538
16	0	orientechnologies/orientdb	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR""));"	1	0	380.01163697242737
16	1	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotNull(names);	0	0	380.01163697242737
16	2	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotEquals(2,names.size());	0	0	380.01163697242737
16	3	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertArrayEquals(""foo.bar"",""""});"	0	0	380.01163697242737
16	4	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertFalse(names.contains(""STR""));"	0	0	380.01163697242737
16	5	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNull(names);	0	0	380.01163697242737
16	6	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(3,names.size());	0	0	380.01163697242737
16	7	/	OElementTest	testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertNotEquals(4,names.size());	0	0	380.01163697242737
17	0	orientechnologies/orientdb	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertTrue(condition);	0	0	80.8984968662262
17	1	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"assertEquals(""STR"",value);"	0	0	80.8984968662262
17	2	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertFalse(condition);	0	0	80.8984968662262
17	3	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertThat(actualValue,Matchers.equalTo(expectedValue));	0	0	80.8984968662262
17	4	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertSame(expectedObject,actualObject);	0	0	80.8984968662262
17	5	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"assertNotEquals(""STR"",value);"	0	0	80.8984968662262
17	6	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotNull(value);	0	0	80.8984968662262
17	7	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertNotSame(notExpectedObject,actualObject);	0	0	80.8984968662262
17	8	/	HttpCommandTest	commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	assertArrayEquals(expectedArray,actualArray);	0	0	80.8984968662262
18	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertFalse(ddl.contains(""STR""));"	0	0	465.1424391269684
18	1	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.startsWith(""STR""));"	0	0	465.1424391269684
18	2	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.endsWith(indexType+""STR""));"	0	0	465.1424391269684
18	3	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertNotNull(ddl);	0	0	465.1424391269684
18	4	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.endsWith(className+""STR""));"	0	0	465.1424391269684
18	5	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertTrue(ddl.contains(indexName));	0	0	465.1424391269684
18	6	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.endsWith(""STR""));"	0	0	465.1424391269684
18	7	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.contains(""STR""+field+""STR""));"	0	0	465.1424391269684
18	8	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.contains(""STR""));"	0	0	465.1424391269684
18	9	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertFalse(ddl.isEmpty());	0	0	465.1424391269684
19	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue(v>0.0f);	0	0	254.57112193107605
19	1	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotSame(OBJECT,v);	0	0	254.57112193107605
19	2	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertSame(OBJECT,v);	0	0	254.57112193107605
19	3	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	0	0	254.57112193107605
19	4	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(floatSerializer,v);	0	0	254.57112193107605
19	5	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertFalse(v<=0.0f);	0	0	254.57112193107605
19	6	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(3.14f,v);	0	0	254.57112193107605
19	7	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertArrayEquals(newfloat[]{1.0f,2.0f,3.0f},newfloat[]{1.0f,2.0f,3.0f});	0	0	254.57112193107605
19	8	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNull(v);	0	0	254.57112193107605
19	9	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	1	0	254.57112193107605
20	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{});	0	0	258.3312871456146
20	1	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0	0	258.3312871456146
20	2	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	0	258.3312871456146
20	3	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	0	258.3312871456146
20	4	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	0	0	258.3312871456146
20	5	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0	0	258.3312871456146
20	6	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertSame(Boolean.FALSE,doc.isDirty());	0	0	258.3312871456146
20	7	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotSame(Boolean.TRUE,doc.isDirty());	0	0	258.3312871456146
20	8	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0	0	258.3312871456146
21	0	orientechnologies/orientdb	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertTrue(db.existsClass(""STR""));"	0	0	247.65099120140076
21	1	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.hasNext());	0	0	247.65099120140076
21	2	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNull(r.current());	0	0	247.65099120140076
21	3	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertEquals(4,db.countClass(""STR""));"	0	0	247.65099120140076
21	4	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(db.newInstance());	0	0	247.65099120140076
21	5	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(db.isClosed());	0	0	247.65099120140076
21	6	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.hasNext());	0	0	247.65099120140076
21	7	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertEquals(""STR"",r.get(0).field(""STR""));"	0	0	247.65099120140076
21	8	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertSame(OLegacyResultSet.class,r.getClass());	0	0	247.65099120140076
21	9	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(3,r.size());	0	0	247.65099120140076
22	0	orientechnologies/orientdb	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	???;	0	0	68.20587801933289
23	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertFalse(env.containsKey(""STR""));"	0	0	112.13370299339294
23	1	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR""));"	0	0	112.13370299339294
23	2	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.get(""STR"").startsWith(""STR""));"	0	0	112.13370299339294
23	3	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.get(""STR"").endsWith(""STR""));"	0	0	112.13370299339294
23	4	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(env.get(""STR""));"	0	0	112.13370299339294
23	5	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertFalse(env.get(""STR"").isEmpty());"	0	0	112.13370299339294
23	6	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR""));"	0	0	112.13370299339294
23	7	/	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(env);	0	0	112.13370299339294
24	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertSame(CIEnvironment.class,ci.getClass());	0	0	88.58211588859558
24	1	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(0,env.size());	0	0	88.58211588859558
24	2	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(env.isEmpty());	0	0	88.58211588859558
24	3	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(ci);	0	0	88.58211588859558
24	4	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(0,env.size());	0	0	88.58211588859558
24	5	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotNull(ci);	0	0	88.58211588859558
24	6	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotSame(CIEnvironment.class,ci.getClass());	0	0	88.58211588859558
24	7	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(newString[]{},env.keySet().toArray());	0	0	88.58211588859558
24	8	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertArrayEquals(newString[]{},env.keySet().toArray());	0	0	88.58211588859558
24	9	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(env.isEmpty());	0	0	88.58211588859558
25	0	cucumber-ltd/cucumber-pro-plugin-jvm	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.toYaml(""STR"").contains(""STR""));"	0	0	103.84888172149658
25	1	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertArrayEquals(yaml.toCharArray(),config.toYaml(""STR"").toCharArray());"	0	0	103.84888172149658
25	2	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertSame(yaml,config.toYaml(""STR""));"	0	0	103.84888172149658
25	3	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),CoreMatchers.containsStringIgnoringCase(""STR""));"	0	0	103.84888172149658
25	4	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1	0	103.84888172149658
25	5	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotEquals(""STR"",config.toYaml(""STR""));"	0	0	103.84888172149658
25	6	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotSame(""STR"",config.toYaml(""STR""));"	0	0	103.84888172149658
25	7	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertFalse(config.toYaml(""STR"").isEmpty());"	0	0	103.84888172149658
25	8	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	assertNull(null);	0	0	103.84888172149658
25	9	/	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotNull(config.toYaml(""STR""));"	0	0	103.84888172149658
26	0	tradier/dropwizard-raven	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertArrayEquals(newObject[]{""STR""},newObject[]{factory.getDsn()});"	0	0	43.515056848526
26	1	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertTrue(factory.getDsn().startsWith(""STR""));"	0	0	43.515056848526
26	2	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNotNull(factory.getDsn());	0	0	43.515056848526
26	3	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertNotEquals(""STR"",factory.getDsn());"	0	0	43.515056848526
26	4	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertFalse(factory.getDsn().isEmpty());	0	0	43.515056848526
26	5	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertThat(factory.getDsn(),CoreMatchers.containsString(""STR""));"	0	0	43.515056848526
26	6	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertEquals(""STR"",factory.getDsn());"	0	0	43.515056848526
26	7	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertSame(""STR"",factory.getDsn());"	0	0	43.515056848526
26	8	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	"assertNotSame(""STR"",factory.getDsn());"	0	0	43.515056848526
26	9	/	RavenAppenderFactoryTest	hasValidDefaults	"assertNull(""STR"",factory.getDsn());"	assertNull(factory.getDsn());	0	0	43.515056848526
27	0	arnohaase/a-foundation	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	0	0	50.25426506996155
27	1	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(AEquality.IDENTITY,map.getEquality());	0	0	50.25426506996155
27	2	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.values().isEmpty());	0	0	50.25426506996155
27	3	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertSame(key1,key3);	0	0	50.25426506996155
27	4	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key2);	0	0	50.25426506996155
27	5	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.isEmpty());	0	0	50.25426506996155
27	6	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertFalse(map.containsKey(key2));	0	0	50.25426506996155
27	7	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map);	0	0	50.25426506996155
27	8	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(mapinstanceofAHashMap);	0	0	50.25426506996155
27	9	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size());	0	0	50.25426506996155
28	0	arnohaase/a-foundation	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotSame(coll,result);	0	0	45.344019174575806
28	1	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.isEmpty());	0	0	45.344019174575806
28	2	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(result.isEmpty());	0	0	45.344019174575806
28	3	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.hasSize(expectedSize));	0	0	45.344019174575806
28	4	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result);	0	0	45.344019174575806
28	5	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNull(result);	0	0	45.344019174575806
28	6	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedSize,result.size());	0	0	45.344019174575806
28	7	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.anyOf(Matchers.empty(),Matchers.hasSize(expectedSize)));	0	0	45.344019174575806
28	8	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertSame(coll,result);	0	0	45.344019174575806
28	9	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(unexpectedSize,result.size());	0	0	45.344019174575806
29	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(a.equals(b));	0	0	73.05411672592163
29	1	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(a,b);	0	0	73.05411672592163
29	2	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(a.getCells(),b.getCells());	0	0	73.05411672592163
29	3	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(a,b);	0	0	73.05411672592163
29	4	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertSame(a,b);	0	0	73.05411672592163
29	5	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNull(b);	0	0	73.05411672592163
29	6	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	1	0	73.05411672592163
29	7	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	"assertThrows(Exception.class,()->{
???;
});"	0	0	73.05411672592163
29	8	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	0	0	73.05411672592163
29	9	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a);	0	0	73.05411672592163
30	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0	0	85.76925420761108
30	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0	0	85.76925420761108
30	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1	0	85.76925420761108
30	3	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(false,matcher.lookingAt());	0	0	85.76925420761108
30	4	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(true,matcher.lookingAt());	0	0	85.76925420761108
30	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0	0	85.76925420761108
30	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0	0	85.76925420761108
30	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(true,matcher.lookingAt());	0	0	85.76925420761108
30	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0	0	85.76925420761108
30	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	0	0	85.76925420761108
31	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.isRecognized());	0	0	95.59354591369629
31	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk.isRecognized());	0	0	95.59354591369629
31	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(false,jāmāk.isRecognized());	0	0	95.59354591369629
31	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(true,jāmāk.isRecognized());	0	0	95.59354591369629
31	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(false,jāmāk.isRecognized());	0	0	95.59354591369629
31	5	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNull(jāmāk);	0	0	95.59354591369629
31	6	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(true,jāmāk.isRecognized());	0	0	95.59354591369629
31	7	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	1	0	95.59354591369629
31	8	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	0	0	95.59354591369629
31	9	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertArrayEquals(newboolean[]{true},newboolean[]{jāmāk.isRecognized()});	0	0	95.59354591369629
32	0	PeterisP/morphology	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	0	0	80.50535488128662
32	1	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1	0	80.50535488128662
32	2	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	0	0	80.50535488128662
32	3	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	0	0	80.50535488128662
32	4	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertArrayEquals(expectedArray,resultArray);	0	0	80.50535488128662
32	5	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotSame(obj1,obj2);	0	0	80.50535488128662
32	6	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0	0	80.50535488128662
32	7	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertSame(obj1,obj1);	0	0	80.50535488128662
32	8	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNull(null);	0	0	80.50535488128662
32	9	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(expected,actual);	0	0	80.50535488128662
33	0	nidi3/raml-loader	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNull(fetcher.fetchResource(""STR"",System.currentTimeMillis()));"	0	0	60.14156198501587
33	1	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotNull(resource);	0	0	60.14156198501587
33	2	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertTrue(file.lastModified()>ifModifiedSince);	0	0	60.14156198501587
33	3	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertFalse(file.lastModified()>ifModifiedSince);	0	0	60.14156198501587
33	4	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertEquals(""STR"",resource.getFile());"	0	0	60.14156198501587
33	5	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNotEquals(""STR"",resource.getFile());"	0	0	60.14156198501587
33	6	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertFalse(file.exists());	0	0	60.14156198501587
33	7	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertTrue(file.exists());	0	0	60.14156198501587
33	8	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNull(resource);	0	0	60.14156198501587
33	9	/	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNotNull(fetcher.fetchResource(""STR"",System.currentTimeMillis()));"	0	0	60.14156198501587
34	0	fluent/fluent-logger-java	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0	0	49.2602801322937
34	1	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	0	0	49.2602801322937
34	2	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertNotEquals(""STR"",System.getProperty(Config.FLUENT_SENDER_CLASS));"	0	0	49.2602801322937
34	3	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertNotEquals(FluentLogger.getLogger(""STR""),logger);"	0	0	49.2602801322937
34	4	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertTrue(logger.hasTag(""STR""));"	0	0	49.2602801322937
34	5	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getFactory());	0	0	49.2602801322937
34	6	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertNotSame(logger,FluentLogger.getLogger(""STR""));"	0	0	49.2602801322937
34	7	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertFalse(logger.hasTag(""STR""));"	0	0	49.2602801322937
34	8	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertEquals(""STR"",logger.getTag());"	0	0	49.2602801322937
34	9	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertSame(sysLogger,logger.getLogger());	0	0	49.2602801322937
35	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(testTarget001,testTarget003);	0	0	28.865483045578003
35	1	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(true);	0	0	28.865483045578003
35	2	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertFalse(false);	0	0	28.865483045578003
35	3	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(5,2+3);	0	0	28.865483045578003
35	4	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(testTarget001);	0	0	28.865483045578003
35	5	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(testTarget001,testTarget002);	0	0	28.865483045578003
35	6	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals(parameterReplacer,testTarget001.getParameterReplacer());	0	0	28.865483045578003
35	7	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	"assertNotEquals(""STR"",""STR"");"	0	0	28.865483045578003
35	8	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertThrows(NullPointerException.class,()->testTarget001.getParameterReplacer().doSomething());	0	0	28.865483045578003
35	9	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(mockLog);	0	0	28.865483045578003
36	0	amlinv/stat-collection-utils	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertTrue(focal.getTargetDescription().startsWith(""STR""));"	0	0	27.836813926696777
36	1	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotEquals(""STR"",focal.getTargetDescription());"	0	0	27.836813926696777
36	2	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertFalse(focal.getTargetDescription().endsWith(""STR""));"	0	0	27.836813926696777
36	3	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertNotNull(focal.getTargetDescription());	0	0	27.836813926696777
36	4	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertSame(""STR"",focal.getTargetDescription());"	0	0	27.836813926696777
36	5	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",focal.getTargetDescription());"	0	0	27.836813926696777
36	6	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotSame(""STR"",focal.getTargetDescription());"	0	0	27.836813926696777
36	7	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertNull(null);	0	0	27.836813926696777
36	8	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertArrayEquals(newString[]{""STR""},newString[]{focal.getTargetDescription()});"	0	0	27.836813926696777
37	0	hazelcast/hazelcast-simulator	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotSame(methods.get(0),methods.iterator().next());	0	0	63.51979923248291
37	1	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(methods.get(0));	0	0	63.51979923248291
37	2	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertSame(methods.get(0),methods.iterator().next());	0	0	63.51979923248291
37	3	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(methods.size()==0);	0	0	63.51979923248291
37	4	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size());	0	0	63.51979923248291
37	5	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotEquals(0,methods.size());	0	0	63.51979923248291
37	6	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	"assertNotEquals(format(""STR"",clazz.getName(),annotationClazz.getName()),newReflectionException().getMessage());"	0	0	63.51979923248291
37	7	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNull(methods.get(0));	0	0	63.51979923248291
37	8	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertFalse(methods.size()==0);	0	0	63.51979923248291
38	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertEquals(true,bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertNull(bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertSame(expectedObject,bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertThrows(BindException.class,()->bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertNotSame(unexpectedObject,bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertThat(bind0(object,""STR"",""STR""),CoreMatchers.is(true));"	0	0	66.11508989334106
38	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertNotNull(bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
38	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertNotEquals(false,bind0(object,""STR"",""STR""));"	0	0	66.11508989334106
39	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertSame(words,focalMethodName(words));	0	0	380.992644071579
39	1	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""},focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))).split(""STR""));"	0	0	380.992644071579
39	2	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertFalse(focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))).endsWith(""STR""));"	0	0	380.992644071579
39	3	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertNull(focalMethodName(null));	0	0	380.992644071579
39	4	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	???;	0	0	380.992644071579
39	5	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertTrue(focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))).startsWith(""STR""));"	0	0	380.992644071579
39	6	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotNull(focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))));"	0	0	380.992644071579
39	7	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))));"	0	0	380.992644071579
39	8	/	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotEquals(""STR"",focalMethodName(newArrayList<>(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""))));"	0	0	380.992644071579
40	0	AlejandroRivera/embedded-rabbitmq	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor,newBasicExtractor(config));	0	0	100.23197793960571
40	1	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(extractor,extractor);	0	0	100.23197793960571
40	2	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0	0	100.23197793960571
40	3	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	0	0	100.23197793960571
40	4	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.hashCode(),newBasicExtractor(config).hashCode());	0	0	100.23197793960571
40	5	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0	0	100.23197793960571
40	6	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0	0	100.23197793960571
40	7	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newCachedExtractor(extractor,config));	0	0	100.23197793960571
40	8	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.getClass(),CachedExtractor.class);	0	0	100.23197793960571
40	9	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newExtractorFactory(builder.build()).getNewInstance());	0	0	100.23197793960571
41	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.cookiesToSend.get(3).getValue());"	0	0	96.88293790817261
41	1	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertNotEquals(""STR"",testServer.cookiesToSend.get(0).getValue());"	0	0	96.88293790817261
41	2	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.cookiesToSend.get(1).getValue());"	0	0	96.88293790817261
41	3	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.cookiesToSend.get(0).getValue());"	0	0	96.88293790817261
41	4	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	0	0	96.88293790817261
41	5	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(testServer.cookiesToSend.size()==4);	0	0	96.88293790817261
41	6	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertEquals(""STR"",testServer.cookiesToSend.get(2).getValue());"	0	0	96.88293790817261
41	7	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotSame(testServer,httpclient);	0	0	96.88293790817261
41	8	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(testServer);	0	0	96.88293790817261
41	9	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(httpclient);	0	0	96.88293790817261
42	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNotNull(properties.getProperty(""STR""));"	0	0	99.60475277900696
42	1	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.getProperty(""STR"").startsWith(""STR""));"	0	0	99.60475277900696
42	2	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNull(properties.getProperty(""STR""));"	0	0	99.60475277900696
42	3	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNotEquals(""STR"",properties.getProperty(""STR""));"	0	0	99.60475277900696
42	4	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.getProperty(""STR"").contains(""STR""));"	0	0	99.60475277900696
42	5	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0	0	99.60475277900696
43	0	trautonen/coveralls-maven-plugin	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertThat(focalClass.getName(),is(equalTo(""STR"")));"	0	0	80.24581098556519
43	1	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertArrayEquals(newString[]{""STR""},newString[]{focalClass.getName()});"	0	0	80.24581098556519
43	2	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",focalClass.getName());"	0	0	80.24581098556519
43	3	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertNotEquals(""STR"",focalClass.getName());"	0	0	80.24581098556519
43	4	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertTrue(""STR"".equals(focalClass.getName()));"	0	0	80.24581098556519
43	5	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertSame(""STR"",focalClass.getName());"	0	0	80.24581098556519
43	6	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertNotSame(""STR"",focalClass.getName());"	0	0	80.24581098556519
43	7	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNull(nullNameVariable);	0	0	80.24581098556519
43	8	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertFalse(""STR"".equals(focalClass.getName()));"	0	0	80.24581098556519
43	9	/	BambooTest	testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertNotNull(focalClass.getName());	0	0	80.24581098556519
44	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertNotEquals(""STR"",accessToken.getSomeValue());"	0	0	80.69421195983887
44	1	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertEquals(""STR"",accessToken.getSomeValue());"	0	0	80.69421195983887
44	2	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(accessToken);	0	0	80.69421195983887
44	3	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotSame(expectedObject,actualObject);	0	0	80.69421195983887
44	4	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertSame(expectedObject,actualObject);	0	0	80.69421195983887
44	5	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNull(accessToken);	0	0	80.69421195983887
44	6	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotEquals(expectedArray,actualArray);	0	0	80.69421195983887
44	7	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertFalse(accessToken.isExpired());	0	0	80.69421195983887
44	8	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(accessToken.isExpired());	0	0	80.69421195983887
44	9	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertArrayEquals(expectedArray,actualArray);	0	0	80.69421195983887
45	0	fluenda/ParCEFone	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(collection.contains(element));	0	0	51.081178188323975
45	1	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value<otherValue);	0	0	51.081178188323975
45	2	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(condition);	0	0	51.081178188323975
45	3	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(condition);	0	0	51.081178188323975
45	4	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotSame(object1,object2);	0	0	51.081178188323975
45	5	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedObject,actualObject);	0	0	51.081178188323975
45	6	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value>otherValue);	0	0	51.081178188323975
45	7	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedString.toLowerCase(),actualString.toLowerCase());	0	0	51.081178188323975
45	8	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(object);	0	0	51.081178188323975
46	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",markdown(""STR""));"	0	0	88.9653639793396
46	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotNull(m.markdown(""STR""));"	0	0	88.9653639793396
46	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",markdown(null));"	0	0	88.9653639793396
46	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertTrue(m.markdown(""STR"").endsWith(""STR""));"	0	0	88.9653639793396
46	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(m.markdown(""STR""),m.markdown(""STR""));"	0	0	88.9653639793396
46	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotSame(text,markdown(""STR""));"	0	0	88.9653639793396
46	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertFalse(m.markdown(""STR"").isEmpty());"	0	0	88.9653639793396
46	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(""STR"",m.markdown(""STR""));"	0	0	88.9653639793396
46	8	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertThrows(NullPointerException.class,()->markdown(null));	0	0	88.9653639793396
47	0	retog/wymiwyg-commons-core	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR""},node.getPath().split(""STR""));"	0	0	62.80253195762634
47	1	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	0	0	62.80253195762634
47	2	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertNotNull(node.getPath());	0	0	62.80253195762634
47	3	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	1	0	62.80253195762634
47	4	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotEquals(""STR"",node.getPath());"	0	0	62.80253195762634
47	5	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertSame(""STR"",node.getPath());"	0	0	62.80253195762634
47	6	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().startsWith(""STR""));"	0	0	62.80253195762634
47	7	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertEquals(19,node.getPath().length());	0	0	62.80253195762634
47	8	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertThrows(NullPointerException.class,()->node.getPath().toLowerCase());	0	0	62.80253195762634
47	9	/	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(node.getPath().endsWith(""STR""));"	0	0	62.80253195762634
48	0	vdmeer/execs	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs.getAppName());	0	0	42.067233085632324
48	1	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertFalse(execs.getAppName().isEmpty());	0	0	42.067233085632324
48	2	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotSame(unexpectedAppName,execs.getAppName());	0	0	42.067233085632324
48	3	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNull(execs.getAppName());	0	0	42.067233085632324
48	4	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertSame(expectedAppName,execs.getAppName());	0	0	42.067233085632324
48	5	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertArrayEquals(expectedAppNameArray,execs.getAppName().toCharArray());	0	0	42.067233085632324
48	6	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertTrue(execs.getAppName().length()>0);	0	0	42.067233085632324
48	7	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1	0	42.067233085632324
48	8	/	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotEquals(""STR"",execs.getAppName());"	0	0	42.067233085632324
49	0	jcodec/jcodec	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(0,convertToBytes(4)[0]);	0	0	228.56549096107483
49	1	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.toString(convertToBytes(8)));	0	0	228.56549096107483
49	2	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(8,convertToBytes(2).length);	0	0	228.56549096107483
49	3	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(Arrays.equals(convertToBytes(6),newbyte[]{0x00}));	0	0	228.56549096107483
49	4	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x09,0x09});	0	0	228.56549096107483
49	5	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},convertToBytes(1));	0	0	228.56549096107483
49	6	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(-1,convertToBytes(9).length);	0	0	228.56549096107483
49	7	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.equals(convertToBytes(3),newbyte[]{0x03,0x00,0x00,0x00}));	0	0	228.56549096107483
49	8	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertSame(byte[].class,convertToBytes(5).getClass());	0	0	228.56549096107483
49	9	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(0x00,convertToBytes(7)[0]);	0	0	228.56549096107483
