TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	basis-technology-corp/tcl-regex-java	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getColorMapSize());	0	0	96.03056311607361
0	1	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(cm.getcolor('a'),cm.getcolor('b'));	0	0	96.03056311607361
0	2	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().isEmpty());	0	0	96.03056311607361
0	3	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm.getcolor('a'));	0	0	96.03056311607361
0	4	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(nfa.size(),cm.getColorMapSize());	0	0	96.03056311607361
0	5	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertFalse(cm.getColorMap().containsValue(0));	0	0	96.03056311607361
0	6	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('a')>0);	0	0	96.03056311607361
0	7	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(expected,actual);	0	0	96.03056311607361
0	8	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().containsKey('b'));	0	0	96.03056311607361
0	9	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNull(cm.getcolor('z'));	0	0	96.03056311607361
1	0	basis-technology-corp/tcl-regex-java	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(true,matcher.find());	0	0	83.02560210227966
1	1	/	MatcherTest	reset	assertTrue(matcher.find());	assertEquals(false,matcher.find());	0	0	83.02560210227966
1	2	/	MatcherTest	reset	assertTrue(matcher.find());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.find()});	0	0	83.02560210227966
1	3	/	MatcherTest	reset	assertTrue(matcher.find());	assertSame(false,matcher.find());	0	0	83.02560210227966
1	4	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotSame(true,matcher.find());	0	0	83.02560210227966
1	5	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(null,matcher.find());	0	0	83.02560210227966
1	6	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0	0	83.02560210227966
1	7	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.find());	0	0	83.02560210227966
1	8	/	MatcherTest	reset	assertTrue(matcher.find());	assertNull(matcher.find());	0	0	83.02560210227966
1	9	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1	0	83.02560210227966
2	0	orientechnologies/orientdb	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes));	0	0	726.9542388916016
2	1	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	0	0	726.9542388916016
2	2	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0L,OVarIntSerializer.readAsLong(bytes));	0	0	726.9542388916016
2	3	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNull(null);	0	0	726.9542388916016
2	4	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(null,OVarIntSerializer.readAsLong(bytes));	0	0	726.9542388916016
2	5	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertSame(Long.class,readAsLong(bytes).getClass());	0	0	726.9542388916016
2	6	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertArrayEquals(newlong[]{20432343L},newlong[]{OVarIntSerializer.readAsLong(bytes)});	0	0	726.9542388916016
2	7	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0L);	0	0	726.9542388916016
2	8	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0);	0	0	726.9542388916016
2	9	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0L,OVarIntSerializer.readAsLong(bytes));	0	0	726.9542388916016
3	0	orientechnologies/orientdb	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()<0);	0	0	333.05879497528076
3	1	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertSame(0,treeBucket.size());	0	0	333.05879497528076
3	2	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	0	0	333.05879497528076
3	3	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(5,treeBucket.size());	0	0	333.05879497528076
3	4	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1	0	333.05879497528076
3	5	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertThat(treeBucket.size(),CoreMatchers.is(0));	0	0	333.05879497528076
3	6	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNull(treeBucket.size());	0	0	333.05879497528076
3	7	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(10,treeBucket.size());	0	0	333.05879497528076
3	8	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertArrayEquals(newint[]{0},newint[]{treeBucket.size()});	0	0	333.05879497528076
3	9	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket.size());	0	0	333.05879497528076
4	0	orientechnologies/orientdb	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(existsDatabase(""STR""));"	0	0	382.5475640296936
4	1	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertTrue(existsDatabase(databaseName));	0	0	382.5475640296936
4	2	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertTrue(existsDatabase(longDatabaseName));	0	0	382.5475640296936
4	3	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertFalse(existsDatabase(databaseName));	0	0	382.5475640296936
4	4	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertEquals(expectedDatabaseCount,actualDatabaseCount);	0	0	382.5475640296936
4	5	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertNotNull(db);	0	0	382.5475640296936
4	6	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	1	0	382.5475640296936
4	7	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	assertFalse(existsDatabase(longDatabaseName));	0	0	382.5475640296936
5	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotSame(res.get(0),res.get(1));	0	0	174.9878830909729
5	1	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0	0	174.9878830909729
5	2	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertNotNull(res.get(0).field(""STR""));"	0	0	174.9878830909729
5	3	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertNotEquals(5.0f,res.get(0).field(""STR""));"	0	0	174.9878830909729
5	4	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertEquals(10.78f,res.get(0).field(""STR""));"	0	0	174.9878830909729
5	5	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertThat(res.get(0).field(""STR""),is(equalTo(10.78f)));"	0	0	174.9878830909729
5	6	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertNull(res.get(0).field(""STR""));"	0	0	174.9878830909729
5	7	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	"assertArrayEquals(newFloat[]{10.78f},newFloat[]{res.get(0).field(""STR"")});"	0	0	174.9878830909729
5	8	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1	0	174.9878830909729
5	9	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertSame(res.get(0),res.get(0));	0	0	174.9878830909729
6	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(anotherCompositeKey.equals(compositeKey));	0	0	257.8563277721405
6	1	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	0	0	257.8563277721405
6	2	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey)||anotherCompositeKey.equals(compositeKey));	0	0	257.8563277721405
6	3	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(anotherCompositeKey.equals(anotherCompositeKey));	0	0	257.8563277721405
6	4	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0	0	257.8563277721405
6	5	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	0	0	257.8563277721405
6	6	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	0	0	257.8563277721405
6	7	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(null));	0	0	257.8563277721405
6	8	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	"assertFalse(compositeKey.equals(""STR""));"	0	0	257.8563277721405
6	9	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1	0	257.8563277721405
7	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),result.size());	0	0	261.66836977005005
7	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0),result.get(0));	0	0	261.66836977005005
7	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList<?>);	0	0	261.66836977005005
7	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotSame(expectedResult,result);	0	0	261.66836977005005
7	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	0	0	261.66836977005005
7	5	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals(expectedResult,result);	0	0	261.66836977005005
7	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(result.containsAll(expectedResult));	0	0	261.66836977005005
7	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"assertTrue(compositeIndexDefinition.getFields().contains(""STR""));"	0	0	261.66836977005005
7	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	0	0	261.66836977005005
7	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertArrayEquals(expectedResult.toArray(),result.toArray());	0	0	261.66836977005005
8	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertFalse(property.getName().endsWith(""STR""));"	0	0	259.50887513160706
8	1	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertNotEquals(""STR"",property.getName());"	0	0	259.50887513160706
8	2	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(""STR"",property.getName());"	0	0	259.50887513160706
8	3	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertFalse(property.getName().contains(""STR""));"	0	0	259.50887513160706
8	4	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertTrue(property.getName().startsWith(""STR""));"	0	0	259.50887513160706
8	5	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertTrue(property.getName().contains(""STR""));"	0	0	259.50887513160706
8	6	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertNotSame(property.getName(),""STR"");"	0	0	259.50887513160706
8	7	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertArrayEquals(property.getName().toCharArray(),""STR"".toCharArray());"	0	0	259.50887513160706
8	8	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property.getName());	0	0	259.50887513160706
8	9	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertSame(property.getName(),""STR"");"	0	0	259.50887513160706
9	0	orientechnologies/orientdb	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objectsinstanceofHashSet);	0	0	262.4658989906311
9	1	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.size()>0);	0	0	262.4658989906311
9	2	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLineinstanceofOMultiValueChangeTimeLine);	0	0	262.4658989906311
9	3	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	"assertFalse(subObjects.contains(""STR""));"	0	0	262.4658989906311
9	4	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,objects.size());	0	0	262.4658989906311
9	5	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0	0	262.4658989906311
9	6	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0	0	262.4658989906311
9	7	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains(nestedDoc));	0	0	262.4658989906311
9	8	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objects.contains(nestedDoc));	0	0	262.4658989906311
9	9	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	"assertNotEquals(""STR"",subObjects.contains(""STR""));"	0	0	262.4658989906311
10	0	PeterisP/morphology	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0	0	88.14359140396118
10	1	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertArrayEquals(newObject[0],w);	0	0	88.14359140396118
10	2	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	0	0	88.14359140396118
10	3	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(w);	0	0	88.14359140396118
10	4	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotSame(null,w);	0	0	88.14359140396118
10	5	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	"assertNotEquals(""STR"",w.isRecognized());"	0	0	88.14359140396118
10	6	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertSame(null,w);	0	0	88.14359140396118
10	7	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNull(w);	0	0	88.14359140396118
10	8	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	0	0	88.14359140396118
10	9	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1	0	88.14359140396118
11	0	PeterisP/morphology	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	0	0	70.02475714683533
11	1	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedWordform,actualWordform);	0	0	70.02475714683533
11	2	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotEquals(expectedObject,actualObject);	0	0	70.02475714683533
11	3	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedNumberOfWordforms,locītājs.wordforms.size());	0	0	70.02475714683533
11	4	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(condition);	0	0	70.02475714683533
11	5	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	0	70.02475714683533
11	6	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotNull(viņš);	0	0	70.02475714683533
11	7	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(condition);	0	0	70.02475714683533
11	8	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.wordforms.contains(expectedWordform));	0	0	70.02475714683533
12	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertSame(set,set);	0	0	45.405134201049805
12	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened);	0	0	45.405134201049805
12	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertTrue(flattened.contains(""STR""));"	0	0	45.405134201049805
12	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(set,flattened);	0	0	45.405134201049805
12	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(0,flattened.size());	0	0	45.405134201049805
12	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(3,flattened.size());	0	0	45.405134201049805
12	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened);	0	0	45.405134201049805
12	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},flattened.toArray());"	0	0	45.405134201049805
12	8	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertTrue(flattened.containsAll(Arrays.asList(""STR"",""STR"",""STR"",""STR"")));"	0	0	45.405134201049805
12	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	0	0	45.405134201049805
13	0	arnohaase/a-foundation	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertTrue(FOCAL.mkString(newArrayList<>(),""STR"",""STR"",""STR"").isEmpty());"	0	0	50.0304639339447
13	1	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertSame(""STR"",FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR""));"	0	0	50.0304639339447
13	2	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNull(FOCAL.mkString(null,""STR"",""STR"",""STR""));"	0	0	50.0304639339447
13	3	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNotEquals(""STR"",FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR""));"	0	0	50.0304639339447
13	4	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertArrayEquals(""STR"".toCharArray(),FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR"").toCharArray());"	0	0	50.0304639339447
13	5	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNotSame(""STR"",""STR"",FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR""));"	0	0	50.0304639339447
13	6	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertNotNull(FOCAL.mkString(Arrays.asList(1,2,3),null,""STR"",""STR""));"	0	0	50.0304639339447
13	7	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertFalse(FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR"").isEmpty());"	0	0	50.0304639339447
13	8	/	ACollectionHelperTest	testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",FOCAL.mkString(Arrays.asList(1,2,3),""STR"",""STR"",""STR""));"	0	0	50.0304639339447
14	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotSame(0,result.length());	0	0	46.374557971954346
14	1	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertNotNull(result);	0	0	46.374557971954346
14	2	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertArrayEquals(newbyte[]{},result.getBytes());	0	0	46.374557971954346
14	3	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0	0	46.374557971954346
14	4	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	0	0	46.374557971954346
14	5	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	0	46.374557971954346
14	6	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	assertFalse(result.isEmpty());	0	0	46.374557971954346
14	7	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0	0	46.374557971954346
14	8	/	AJsonSerHelperTest	testNegativeDouble	"assertEquals(""STR"",result);"	"assertFalse(result.endsWith(""STR""));"	0	0	46.374557971954346
15	0	OpenLiberty/ci.common	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertSame(srcDir,targetDir);	0	0	198.95150995254517
15	1	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotNull(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0	0	198.95150995254517
15	2	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertEquals(true,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0	0	198.95150995254517
15	3	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotSame(srcDir,targetDir);	0	0	198.95150995254517
15	4	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	"assertNotEquals(""STR"",""STR"");"	0	0	198.95150995254517
15	5	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNull(null);	0	0	198.95150995254517
15	6	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	198.95150995254517
15	7	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0	0	198.95150995254517
15	8	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotEquals(false,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0	0	198.95150995254517
15	9	/	DevUtilTest	testNotGeneratedConfigFiles	"assertFalse(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0	0	198.95150995254517
16	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotSame(serverDirectory,tempClass.getParentFile());	0	0	55.323978900909424
16	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(tempClass.getParent());	0	0	55.323978900909424
16	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertEquals(""STR"",tempClass.getName().substring(tempClass.getName().lastIndexOf(""STR"")));"	0	0	55.323978900909424
16	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.getPath().contains(targetDir.getPath()));	0	0	55.323978900909424
16	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(tempClass.toPath()));	0	0	55.323978900909424
16	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(tempClass.lastModified());	0	0	55.323978900909424
16	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertEquals(""STR"",tempClass.getName());"	0	0	55.323978900909424
16	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(targetDir,tempClass.getParentFile());	0	0	55.323978900909424
16	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(tempClass.isDirectory());	0	0	55.323978900909424
16	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	1	0	55.323978900909424
17	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	0	0	74.33881092071533
17	1	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0	0	74.33881092071533
17	2	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	assertEquals(4,result.length());	0	0	74.33881092071533
17	3	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	0	0	74.33881092071533
17	4	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertFalse(result.contains(""STR""));"	0	0	74.33881092071533
17	5	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	0	74.33881092071533
17	6	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertSame(""STR"",result);"	0	0	74.33881092071533
17	7	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0	0	74.33881092071533
17	8	/	FizzBuzzTDDTest	test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertArrayEquals(newString[]{""STR""},newString[]{result});"	0	0	74.33881092071533
18	0	amlinv/stat-collection-utils	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertArrayEquals(2,3});	0	0	34.18202495574951
18	1	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertNotEquals(""STR"",result.toString());"	0	0	34.18202495574951
18	2	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	1	0	34.18202495574951
18	3	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertEquals(""STR"",result.toString());"	0	0	34.18202495574951
18	4	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertNotEquals(newJMXServiceURL(""STR""),result);"	0	0	34.18202495574951
18	5	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertSame(result,factory.createJMXServiceUrl(""STR""));"	0	0	34.18202495574951
18	6	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(resultinstanceofJMXServiceURL);	0	0	34.18202495574951
18	7	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertNotSame(result,factory.createJMXServiceUrl(""STR""));"	0	0	34.18202495574951
18	8	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	"assertTrue(result.toString().startsWith(""STR""));"	0	0	34.18202495574951
18	9	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertFalse(result.equals(null));	0	0	34.18202495574951
19	0	amlinv/stat-collection-utils	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	"assertEquals(""STR"",jmxServiceUrlFactory.getSomeProperty());"	0	0	27.94482398033142
19	1	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNull(jmxServiceUrlFactory.getSomething());	0	0	27.94482398033142
19	2	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(expectedObject,jmxServiceUrlFactory.getReferenceObject());	0	0	27.94482398033142
19	3	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertArrayEquals(expectedArray,jmxServiceUrlFactory.getArray());	0	0	27.94482398033142
19	4	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(expectedObject,jmxServiceUrlFactory.getAnotherReferenceObject());	0	0	27.94482398033142
19	5	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(expectedValue,jmxServiceUrlFactory.getValue());	0	0	27.94482398033142
19	6	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(jmxServiceUrlFactory.isInitialized());	0	0	27.94482398033142
19	7	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(jmxServiceUrlFactory);	0	0	27.94482398033142
19	8	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(jmxServiceUrlFactory.isExpired());	0	0	27.94482398033142
20	0	myabc/markdownj	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotNull(m.markdown(""STR""));"	0	0	90.08948993682861
20	1	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotEquals(m.markdown(""STR""),m.markdown(""STR""));"	0	0	90.08948993682861
20	2	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertFalse(m.markdown(""STR"").isEmpty());"	0	0	90.08948993682861
20	3	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNull(markdown(""STR""));"	0	0	90.08948993682861
20	4	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertTrue(m.markdown(""STR"")instanceofString);"	0	0	90.08948993682861
20	5	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotSame(m.markdown(""STR""),m.markdown(""STR""));"	0	0	90.08948993682861
20	6	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",markdown(null));"	0	0	90.08948993682861
20	7	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertSame(""STR"",markdown(""STR""));"	0	0	90.08948993682861
20	8	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertArrayEquals(""b""},markdown(""a\n\nb"").split(""\n""));"	0	0	90.08948993682861
20	9	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotEquals(null,m.markdown(""STR""));"	0	0	90.08948993682861
21	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertTrue(deflateExtension.getProvidedExtensionAsServer().startsWith(""STR""));"	0	0	69.40628409385681
21	1	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	1	0	69.40628409385681
21	2	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertNotNull(deflateExtension.getProvidedExtensionAsServer());	0	0	69.40628409385681
21	3	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertTrue(deflateExtension.getProvidedExtensionAsServer().contains(""STR""));"	0	0	69.40628409385681
21	4	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertNotSame(StringBuilder.class,deflateExtension.getProvidedExtensionAsServer().getClass());	0	0	69.40628409385681
21	5	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertFalse(deflateExtension.getProvidedExtensionAsServer().isEmpty());	0	0	69.40628409385681
21	6	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertArrayEquals(""SERVER_NO_CONTEXT_TAKEOVER"",""CLIENT_NO_CONTEXT_TAKEOVER""});"	0	0	69.40628409385681
21	7	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(3,deflateExtension.getProvidedExtensionAsServer().split(""STR"").length);"	0	0	69.40628409385681
21	8	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertSame(PerMessageDeflateExtension.class,deflateExtension.getClass());	0	0	69.40628409385681
21	9	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertNotEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	0	0	69.40628409385681
22	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()>=0);	0	0	78.1697108745575
22	1	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1	0	78.1697108745575
22	2	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()<0);	0	0	78.1697108745575
22	3	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNull(null);	0	0	78.1697108745575
22	4	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0.hashCode());	0	0	78.1697108745575
22	5	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	0	0	78.1697108745575
22	6	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0	0	78.1697108745575
22	7	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0	0	78.1697108745575
22	8	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0	0	78.1697108745575
22	9	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertArrayEquals(newint[]{defaultExtension0.hashCode()},newint[]{defaultExtension1.hashCode()});	0	0	78.1697108745575
23	0	jcodec/jcodec	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(object);	0	0	179.321387052536
23	1	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(expectedObject,actualObject);	0	0	179.321387052536
23	2	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(expectedValue,focalMethodReturnValue);	0	0	179.321387052536
23	3	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(condition);	0	0	179.321387052536
23	4	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertThat(actualValue,matcher);	0	0	179.321387052536
23	5	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(expectedValue,focalMethodReturnValue);	0	0	179.321387052536
23	6	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNull(object);	0	0	179.321387052536
23	7	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(condition);	0	0	179.321387052536
23	8	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertArrayEquals(expectedArray,actualArray);	0	0	179.321387052536
23	9	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertSame(expectedObject,actualObject);	0	0	179.321387052536
24	0	adlnet/jxapi	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(null,actual);	0	0	50.84021711349487
24	1	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertThat(actual.getName(),is(equalToIgnoringCase(""STR"")));"	0	0	50.84021711349487
24	2	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertNotSame(""STR"",actual.getName());"	0	0	50.84021711349487
24	3	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual);	1	0	50.84021711349487
24	4	/	VerbsTest	testRegistered	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	0	0	50.84021711349487
24	5	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertArrayEquals(newString[]{""STR""},actual.getAliases());"	0	0	50.84021711349487
24	6	/	VerbsTest	testRegistered	assertNotNull(actual);	assertFalse(actual.isDeleted());	0	0	50.84021711349487
24	7	/	VerbsTest	testRegistered	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0	0	50.84021711349487
24	8	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame(0,actual.getCreatedAt());	0	0	50.84021711349487
24	9	/	VerbsTest	testRegistered	assertNotNull(actual);	assertTrue(actual.isActive());	0	0	50.84021711349487
25	0	adlnet/jxapi	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.getName().isEmpty());	0	0	57.99118494987488
25	1	/	VerbsTest	testImported	assertNotNull(actual);	assertNotNull(actual);	1	0	57.99118494987488
25	2	/	VerbsTest	testImported	assertNotNull(actual);	assertSame(actual,Verbs.imported());	0	0	57.99118494987488
25	3	/	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0	0	57.99118494987488
25	4	/	VerbsTest	testImported	assertNotNull(actual);	???;	0	0	57.99118494987488
25	5	/	VerbsTest	testImported	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getName());"	0	0	57.99118494987488
25	6	/	VerbsTest	testImported	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0	0	57.99118494987488
25	7	/	VerbsTest	testImported	assertNotNull(actual);	"assertNotSame(createVerb(""STR""),actual);"	0	0	57.99118494987488
25	8	/	VerbsTest	testImported	assertNotNull(actual);	"assertArrayEquals(newString[]{""STR""},actual.getSynonyms());"	0	0	57.99118494987488
25	9	/	VerbsTest	testImported	assertNotNull(actual);	assertNull(actual.getDescription());	0	0	57.99118494987488
26	0	adlnet/jxapi	VerbsTest	testInitialized	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	46.682512283325195
26	1	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	1	0	46.682512283325195
26	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNull(actual);	0	0	46.682512283325195
26	3	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getName());"	0	0	46.682512283325195
26	4	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0	0	46.682512283325195
26	5	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotEquals(expectedArray,actualArray);	0	0	46.682512283325195
26	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.isInitialized());	0	0	46.682512283325195
26	7	/	VerbsTest	testInitialized	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0	0	46.682512283325195
26	8	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(expected,actual);	0	0	46.682512283325195
26	9	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.isInitialized());	0	0	46.682512283325195
27	0	adlnet/jxapi	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.getTimestamp(),statement.getStored());	0	0	52.14038586616516
27	1	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getContext().getLanguage());	0	0	52.14038586616516
27	2	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(expectedList.contains(attachment));	0	0	52.14038586616516
27	3	/	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getVersion().isEmpty());	0	0	52.14038586616516
27	4	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getId());	0	0	52.14038586616516
27	5	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(agent,statement.getAuthority());	0	0	52.14038586616516
27	6	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(attachment.getUsageType()instanceofURI);	0	0	52.14038586616516
27	7	/	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getStored().isEmpty());	0	0	52.14038586616516
27	8	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	0	0	52.14038586616516
27	9	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(MBOX,agent.getMbox());	0	0	52.14038586616516
28	0	adlnet/jxapi	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotNull(object);	0	0	46.3883216381073
28	1	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	46.3883216381073
28	2	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertThat(actual,Matchers.equalTo(expected));	0	0	46.3883216381073
28	3	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertFalse(condition);	0	0	46.3883216381073
28	4	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotEquals(expected,actual);	0	0	46.3883216381073
28	5	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0	0	46.3883216381073
28	6	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertTrue(condition);	0	0	46.3883216381073
28	7	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNull(object);	0	0	46.3883216381073
28	8	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0	0	46.3883216381073
28	9	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	0	0	46.3883216381073
29	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotSame(moneyToStrUAHENG,moneyToStrUSD);	0	0	90.1513261795044
29	1	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertEquals(0.01,moneyToStrUSD.calculateTax(100.0));	0	0	90.1513261795044
29	2	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertNotEquals(""STR"",moneyToStrCustom.getCurrencyCode());"	0	0	90.1513261795044
29	3	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertArrayEquals(""STR"",""STR""});"	0	0	90.1513261795044
29	4	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertTrue(moneyToStrRURRUSinstanceofMoneyToStr);	0	0	90.1513261795044
29	5	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotSame(moneyToStrUSDENG,moneyToStrEURRUS);	0	0	90.1513261795044
29	6	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotSame(moneyToStrUAHRUS,moneyToStrUAHENG);	0	0	90.1513261795044
29	7	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertFalse(moneyToStrUAHENG.isCurrencyCentNameRequired());	0	0	90.1513261795044
29	8	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(1234.56));"	0	0	90.1513261795044
29	9	/	MoneyToStrTest	checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	assertNotNull(moneyToStrUAH);	0	0	90.1513261795044
30	0	javadev/moneytostr-russian	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotEquals(percentToStr(5.5,Language.RUS),percentToStrUSD.percentToStr(5.5,Language.RUS));	0	0	55.72171401977539
30	1	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNull(percentToStr(0.0,Language.RUS));	0	0	55.72171401977539
30	2	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertTrue(percentToStr(23.75,Language.ENG).endsWith(""STR""));"	0	0	55.72171401977539
30	3	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertNotSame(""STR"",percentToStr(12.5,Language.ENG),percentToStrUAHENG.percentToStr(12.5,Language.ENG));"	0	0	55.72171401977539
30	4	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertEquals(percentToStr(10.0,Language.UKR),percentToStrUAH.percentToStr(10.0,Language.UKR));	0	0	55.72171401977539
30	5	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertArrayEquals(newString[]{""STR""},newString[]{percentToStr(100.0,Language.RUS)});"	0	0	55.72171401977539
30	6	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertSame(percentToStr(99.99,Language.RUS),percentToStrRUR.percentToStr(99.99,Language.RUS));	0	0	55.72171401977539
30	7	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertFalse(percentToStr(99.99,Language.UKR).isEmpty());	0	0	55.72171401977539
30	8	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	assertNotNull(percentToStr(75.0,Language.UKR));	0	0	55.72171401977539
30	9	/	MoneyToStrTest	percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",percentToStr(17.33,Language.RUS));"	0	0	55.72171401977539
31	0	1337joe/cubesensors-for-java	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(object);	0	0	40.636651039123535
31	1	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,actual);	0	0	40.636651039123535
31	2	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(condition);	0	0	40.636651039123535
31	3	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0	0	40.636651039123535
31	4	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertThat(value,matcher);	0	0	40.636651039123535
31	5	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1	0	40.636651039123535
31	6	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(condition);	0	0	40.636651039123535
31	7	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	0	0	40.636651039123535
31	8	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNull(object);	0	0	40.636651039123535
31	9	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertSame(expected,actual);	0	0	40.636651039123535
32	0	1337joe/cubesensors-for-java	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(object);	0	0	45.680872201919556
32	1	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0	0	45.680872201919556
32	2	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(condition);	0	0	45.680872201919556
32	3	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0	0	45.680872201919556
32	4	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1	0	45.680872201919556
32	5	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(condition);	0	0	45.680872201919556
32	6	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(object);	0	0	45.680872201919556
32	7	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	0	0	45.680872201919556
32	8	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertSame(expected,actual);	0	0	45.680872201919556
33	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<=100);	0	0	92.58851313591003
33	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>50);	0	0	92.58851313591003
33	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%2);	0	0	92.58851313591003
33	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(Math.abs(value-50)<=10);	0	0	92.58851313591003
33	4	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<=100);	0	0	92.58851313591003
33	5	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0);	1	0	92.58851313591003
33	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(50,value);	0	0	92.58851313591003
33	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%5);	0	0	92.58851313591003
33	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<50);	0	0	92.58851313591003
33	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	0	0	92.58851313591003
34	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
34	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertDoesNotThrow(()->bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
34	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(findTargetObject(object,""STR"",path));"	0	0	76.52306294441223
34	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(true,bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
34	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertTrue(isProbeField(field));	0	0	76.52306294441223
34	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertThrows(BindException.class,()->bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
34	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotEquals(false,bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
34	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNull(findTargetObject(object,""STR"",path));"	0	0	76.52306294441223
34	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	assertFalse(isProbeField(field));	0	0	76.52306294441223
34	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(object,""STR"",""STR""));"	0	0	76.52306294441223
35	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertDoesNotThrow(()->bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(true,bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertThrows(BindException.class,()->bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotSame(object,bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNull(bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotEquals(false,bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertSame(object,bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertNotNull(bind0(object,""STR"",""STR""));"	0	0	291.641970872879
35	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(object,""STR"",""STR""));"	0	0	291.641970872879
36	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertArrayEquals(expectedArray,getCloudIdentity().toCharArray());	0	0	309.109032869339
36	1	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertFalse(getCloudIdentity().isEmpty());	0	0	309.109032869339
36	2	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotSame(unexpectedObject,getCloudIdentity());	0	0	309.109032869339
36	3	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertSame(expectedObject,getCloudIdentity());	0	0	309.109032869339
36	4	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertNotEquals(""STR"",getCloudIdentity());"	0	0	309.109032869339
36	5	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",getCloudIdentity());"	0	0	309.109032869339
36	6	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNotNull(getCloudIdentity());	0	0	309.109032869339
36	7	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertTrue(getCloudIdentity().length()>0);	0	0	309.109032869339
36	8	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertThat(getCloudIdentity(),CoreMatchers.startsWith(""STR""));"	0	0	309.109032869339
36	9	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertNull(getCloudIdentity());	0	0	309.109032869339
37	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	0	0	80.16592192649841
37	1	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(Object.class,field.getDeclaringClass());	0	0	80.16592192649841
37	2	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isSynthetic());	0	0	80.16592192649841
37	3	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(String.class,field.getType());	0	0	80.16592192649841
37	4	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	"assertNotEquals(""STR"",field.getName());"	0	0	80.16592192649841
37	5	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isAccessible());	0	0	80.16592192649841
37	6	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(field.getDeclaringClass()==GetFieldTest.class||field.getDeclaringClass().isAssignableFrom(GetFieldTest.class));	0	0	80.16592192649841
37	7	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(Modifier.isPublic(field.getDeclaringClass().getModifiers()));	0	0	80.16592192649841
37	8	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.class,field.getType());	0	0	80.16592192649841
37	9	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	"assertEquals(""STR"",field.getName());"	0	0	80.16592192649841
38	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertSame(parser,options.getParser());	0	0	72.48452091217041
38	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(null,options.getOptions());	0	0	72.48452091217041
38	2	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotSame(parser,options.getParser());	0	0	72.48452091217041
38	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertEquals(""STR"",options.toString());"	0	0	72.48452091217041
38	4	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertArrayEquals(newString[]{},options.getArguments());	0	0	72.48452091217041
38	5	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.getOptions().size());	0	0	72.48452091217041
38	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	0	0	72.48452091217041
38	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertThrows(ExitException.class,()->options.getParser().parse(newString[]{""STR""}));"	0	0	72.48452091217041
38	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	1	0	72.48452091217041
38	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(0,options.size());	0	0	72.48452091217041
39	0	nidi3/graphviz-java	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotNull(object);	0	0	75.8195493221283
39	1	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotSame(expected,actual);	0	0	75.8195493221283
39	2	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	"assertThrows(Exception.class,()->{
});"	0	0	75.8195493221283
39	3	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertFalse(condition);	0	0	75.8195493221283
39	4	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNotEquals(expected,actual);	0	0	75.8195493221283
39	5	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertEquals(expected,actual);	0	0	75.8195493221283
39	6	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertTrue(condition);	0	0	75.8195493221283
39	7	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertNull(object);	0	0	75.8195493221283
39	8	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertArrayEquals(expectedArray,actualArray);	0	0	75.8195493221283
39	9	/	StyleTest	wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertSame(expected,actual);	0	0	75.8195493221283
40	0	nidi3/graphviz-java	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertEquals(expectedAttributes,actualAttributes);	0	0	79.07418584823608
40	1	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotSame(expectedObject,actualObject);	0	0	79.07418584823608
40	2	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNull(attributes);	0	0	79.07418584823608
40	3	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertFalse(condition);	0	0	79.07418584823608
40	4	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotNull(attributes);	0	0	79.07418584823608
40	5	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotEquals(expectedAttributes,actualAttributes);	0	0	79.07418584823608
40	6	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertNotEquals(expectedArray,actualArray);	0	0	79.07418584823608
40	7	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertTrue(condition);	0	0	79.07418584823608
40	8	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertArrayEquals(expectedArray,actualArray);	0	0	79.07418584823608
40	9	/	RankTest	dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	assertSame(expectedObject,actualObject);	0	0	79.07418584823608
41	0	nidi3/graphviz-java	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertNull(attrs().get(""STR""));"	0	0	82.03209590911865
41	1	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertSame(attrs(),attrs(attrs()));	0	0	82.03209590911865
41	2	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertNotSame(attrs(),FOCAL.attrs());	0	0	82.03209590911865
41	3	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertTrue(attrs().isEmpty());	0	0	82.03209590911865
41	4	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertEquals(attrs(),FOCAL.<For>attrs());	0	0	82.03209590911865
41	5	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertThrows(NullPointerException.class,()->attrs((Attributes<?extendsFor>)null));	0	0	82.03209590911865
41	6	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertDoesNotThrow(()->attrs(FOCAL.<For>attrs()));	0	0	82.03209590911865
41	7	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertNotNull(attrs().put(""STR"",""STR""));"	0	0	82.03209590911865
41	8	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertArrayEquals(newAttributes[]{},attrs().toArray());	0	0	82.03209590911865
41	9	/	LabelTest	simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertFalse(attrs().contains(null));	0	0	82.03209590911865
42	0	nidi3/graphviz-java	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertThrows(IllegalArgumentException.class,()->viz.toString());	0	0	80.35584998130798
42	1	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	0	0	80.35584998130798
42	2	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertArrayEquals('b','c'});	0	0	80.35584998130798
42	3	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotSame(null,viz.toString());	0	0	80.35584998130798
42	4	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotEquals(null,viz.toString());	0	0	80.35584998130798
42	5	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertNotEquals(""STR"",viz.toString());"	0	0	80.35584998130798
42	6	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",viz.toString());"	0	0	80.35584998130798
42	7	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertTrue(viz.toString().contains(""STR""));"	0	0	80.35584998130798
42	8	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertFalse(viz.toString().isEmpty());	0	0	80.35584998130798
42	9	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	"assertNotSame(""STR"",viz.toString());"	0	0	80.35584998130798
43	0	jribble/Java-Websockify	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(object);	0	0	35.13844609260559
43	1	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(expected,actual);	0	0	35.13844609260559
43	2	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertNotEquals(""STR"",""STR"");"	0	0	35.13844609260559
43	3	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(condition);	0	0	35.13844609260559
43	4	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNull(object);	0	0	35.13844609260559
43	5	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(condition);	0	0	35.13844609260559
43	6	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(expectedArray,actualArray);	0	0	35.13844609260559
43	7	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertSame(expected,actual);	0	0	35.13844609260559
43	8	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",""STR"");"	0	0	35.13844609260559
44	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(nouns.isEmpty());	0	0	262.6705060005188
44	1	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(3,tokens.size());	0	0	262.6705060005188
44	2	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.nonEmpty());	0	0	262.6705060005188
44	3	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertDoesNotThrow(()->OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun,nouns));	0	0	262.6705060005188
44	4	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.head()instanceofKoreanTokenizer.KoreanToken);	0	0	262.6705060005188
44	5	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",text);"	0	0	262.6705060005188
44	6	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",nouns.get(0));"	0	0	262.6705060005188
44	7	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	0	0	262.6705060005188
44	8	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,nouns.size());	0	0	262.6705060005188
44	9	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	0	0	262.6705060005188
45	0	gvlasov/collections-utils	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotSame(expectedObject,actualObject);	0	0	40.795841693878174
45	1	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertFalse(false);	0	0	40.795841693878174
45	2	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	0	0	40.795841693878174
45	3	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(notNullValue);	0	0	40.795841693878174
45	4	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(expectedValue,actualValue);	0	0	40.795841693878174
45	5	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotEquals(expectedValue,actualValue);	0	0	40.795841693878174
45	6	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNull(nullValue);	0	0	40.795841693878174
45	7	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertArrayEquals(expectedArray,actualArray);	0	0	40.795841693878174
45	8	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertSame(expectedObject,actualObject);	0	0	40.795841693878174
46	0	fluenda/ParCEFone	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1).getDvchost());	0	0	58.592291831970215
46	1	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	1	0	58.592291831970215
46	2	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	"assertEquals(""STR"",parser.parse(sample1).getCs1());"	0	0	58.592291831970215
46	3	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(expectedProtocols.contains(parser.parse(sample1).getProto()));	0	0	58.592291831970215
46	4	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotEquals(unexpectedEvent,parser.parse(sample1));	0	0	58.592291831970215
46	5	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1)instanceofCommonEvent);	0	0	58.592291831970215
46	6	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	"assertTrue(parser.parse(sample1).getRt().startsWith(""STR""));"	0	0	58.592291831970215
46	7	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertFalse(parser.parse(sample1).getSmac().isEmpty());	0	0	58.592291831970215
46	8	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedEvent,parser.parse(sample1));	0	0	58.592291831970215
46	9	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertSame(CommonEvent.class,parser.parse(sample1).getClass());	0	0	58.592291831970215
47	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",getCiName());"	0	0	137.31727719306946
47	1	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",getCiName());"	0	0	137.31727719306946
47	2	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(Character.isJavaIdentifierStart(getCiName().charAt(0)));	0	0	137.31727719306946
47	3	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(getCiName().matches(""STR""));"	0	0	137.31727719306946
47	4	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(getCiName().startsWith(""STR""));"	0	0	137.31727719306946
47	5	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(getCiName()instanceofString);	0	0	137.31727719306946
47	6	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(getCiName().contains(""STR""));"	0	0	137.31727719306946
47	7	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(getCiName().endsWith(""STR""));"	0	0	137.31727719306946
47	8	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(getCiName());	0	0	137.31727719306946
47	9	/	CiEnvironmentTest	recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(getCiName().isEmpty());	0	0	137.31727719306946
48	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredClasses().length>0);	0	0	48.24491000175476
48	1	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotSame(String.class,helloClass.getSuperclass());	0	0	48.24491000175476
48	2	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0	0	48.24491000175476
48	3	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getMethod(""STR"").invoke(helloClass.newInstance()));"	0	0	48.24491000175476
48	4	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredClasses()[0].isInterface());	0	0	48.24491000175476
48	5	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredClasses()[0].getDeclaredFields().length);	0	0	48.24491000175476
48	6	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(Modifier.isPrivate(helloClass.getDeclaredClasses()[0].getModifiers()));	0	0	48.24491000175476
48	7	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertArrayEquals(newClass<?>[]{String.class},helloClass.getInterfaces());	0	0	48.24491000175476
48	8	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredFields().length>0);	0	0	48.24491000175476
48	9	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1	0	48.24491000175476
49	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertFalse(false);	0	0	122.28480100631714
49	1	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(true);	0	0	122.28480100631714
49	2	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotEquals(""STR"",""STR"");"	0	0	122.28480100631714
49	3	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotNull(""STR"");"	0	0	122.28480100631714
49	4	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNull(null);	0	0	122.28480100631714
49	5	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals(5,5);	0	0	122.28480100631714
49	6	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	0	122.28480100631714
49	7	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertSame(""STR"",""STR"");"	0	0	122.28480100631714
49	8	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertNotSame(""STR"",""STR"");"	0	0	122.28480100631714
49	9	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals(10,20);	0	0	122.28480100631714
