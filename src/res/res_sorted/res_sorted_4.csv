TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	hazelcast/hazelcast-simulator	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertNotNull(test1);	0	1	48.4271240234375
	1	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertNotNull(registry.getTestSuites().get(0).getTests().get(0));	0	1	48.4271240234375
	2	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertNotNull(registry.getTestSuites().get(0).getTests().get(1));	0	1	48.4271240234375
	3	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertNotNull(registry.getTestSuites().get(0).getTests().get(2));	0	1	48.4271240234375
	4	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().contains(test1));	0	1	48.4271240234375
	5	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().contains(test2));	0	1	48.4271240234375
	6	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().contains(test3));	0	1	48.4271240234375
	7	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().get(0).equals(test1));	0	1	48.4271240234375
	8	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().get(1).equals(test2));	0	1	48.4271240234375
	9	/	RegistryTest	testAddTests_testIdFixing	"assertEquals(""STR"",test1.getId());"	assertTrue(registry.getTestSuites().get(0).getTests().get(2).equals(test3));	0	1	48.4271240234375
22	0	hazelcast/hazelcast-simulator	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertTrue(performanceMonitor.isRunning());	0	1	63.230639696121216
	1	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(1,performanceMonitor.getTestCount());	0	1	63.230639696121216
	2	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(server);	0	1	63.230639696121216
	3	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(containerManager);	0	1	63.230639696121216
	4	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertFalse(performanceMonitor.isFinished());	0	1	63.230639696121216
	5	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(performanceMonitor.getStartTime());	0	1	63.230639696121216
	6	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNull(performanceMonitor.getFinishTime());	0	1	63.230639696121216
	7	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertFalse(performanceMonitor.hasErrors());	0	1	63.230639696121216
	8	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(0,performanceMonitor.getErrors().size());	0	1	63.230639696121216
	9	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(0,performanceMonitor.getFailures().size());	0	1	63.230639696121216
23	0	hazelcast/hazelcast-simulator	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertNotNull(probs);	0	1	63.43541622161865
	1	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertTrue(probs.isEmpty());	0	1	63.43541622161865
	2	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertEquals(0,probs.size());	0	1	63.43541622161865
	3	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertNotNull(model.getTimeStepModel());	0	1	63.43541622161865
	4	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertEquals(1,model.getExecutionGroups().size());	0	1	63.43541622161865
	5	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertThrows(NullPointerException.class,()->model.loadModel(null,probs));	0	1	63.43541622161865
	6	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertSame(model,model.getTimeStepModel());	0	1	63.43541622161865
	7	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertTrue(probs.containsValue(0.0));	0	1	63.43541622161865
	8	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	assertNotEquals(0,model.getNumTimeSteps());	0	1	63.43541622161865
	9	/	TimeStepModel_probabilityTest	test_probability_singleMethod	"assertProbability(model,""STR"",1.0);"	"assertEquals(""STR"",""STR"");"	0	1	63.43541622161865
24	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	1	1	31.637259006500244
	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.nonOptionArguments().size());	0	1	31.637259006500244
	2	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.hasOptions());	0	1	31.637259006500244
	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(null,initOptionsWithHelp(parser,newString[]{}));	0	1	31.637259006500244
	4	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(parser,options.parser());	0	1	31.637259006500244
	5	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertEquals(""STR"",options.specs().get(0).options().iterator().next().longestName());"	0	1	31.637259006500244
	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertEquals(""STR"",options.lastSpec().options().iterator().next().longestName());"	0	1	31.637259006500244
	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertEquals(""STR"",""STR"");"	0	1	31.637259006500244
	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertNotEquals(0,""STR"");"	0	1	31.637259006500244
	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertNotNull(""STR"");"	0	1	31.637259006500244
25	0	hazelcast/hazelcast-simulator	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertTrue(emptyPerformanceStatsCollector.isEmpty());	0	1	26.405893087387085
	1	/	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertNotNull(true);	0	1	26.405893087387085
	2	/	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertEquals(0,emptyPerformanceStatsCollector.getOperationCount());	0	1	26.405893087387085
26	0	hazelcast/hazelcast-simulator	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.isEmpty());	0	1	39.71981191635132
	1	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.isEmpty());	0	1	39.71981191635132
	2	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertEquals(Collections.emptySet(),types);	0	1	39.71981191635132
	3	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertNotEquals(Collections.emptySet(),types);	0	1	39.71981191635132
	4	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertEquals(0,types.size());	0	1	39.71981191635132
	5	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertNotEquals(0,types.size());	0	1	39.71981191635132
	6	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.stream().allMatch(Objects::isNull));	0	1	39.71981191635132
	7	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.stream().anyMatch(Objects::isNull));	0	1	39.71981191635132
	8	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.stream().allMatch(type->typeinstanceofFailureType));	0	1	39.71981191635132
	9	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.stream().anyMatch(type->typeinstanceofString));	0	1	39.71981191635132
27	0	hazelcast/hazelcast-simulator	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(0,criticalFailureCounter.get());	0	1	36.64612078666687
	1	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(criticalFailureCounter.get()>=0);	0	1	36.64612078666687
	2	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(nonCriticalFailureCounter.get()<=0);	0	1	36.64612078666687
	3	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	"assertEquals(""STR"",exceptionFailure.getFailureContext());"	0	1	36.64612078666687
	4	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(WORKER_EXCEPTION,exceptionFailure.getType());	0	1	36.64612078666687
	5	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertNull(normalExitFailure.getOutput());	0	1	36.64612078666687
	6	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(WORKER_NORMAL_EXIT,normalExitFailure.getType());	0	1	36.64612078666687
	7	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(registry.containsAddress(agentAddress));	0	1	36.64612078666687
	8	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(registry.containsAgent(agentAddress));	0	1	36.64612078666687
	9	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	"assertEquals(""STR"",failureCollector.getOutputDir().getName());"	0	1	36.64612078666687
28	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	0	1	31.433183908462524
	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	0	1	31.433183908462524
	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertFalse(value<0||value>=100);	0	1	31.433183908462524
	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<=100);	0	1	31.433183908462524
	4	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<100);	0	1	31.433183908462524
	5	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<101);	0	1	31.433183908462524
	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(value,state.randomInt(100));	0	1	31.433183908462524
	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(state.randomInt(100),value);	0	1	31.433183908462524
	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value!=state.randomInt(99));	0	1	31.433183908462524
	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(value,100);	0	1	31.433183908462524
29	0	OpenLiberty/ci.common	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertNotNull(jco);	0	1	27.764355897903442
	1	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertEquals(0,result.size());	0	1	27.764355897903442
	2	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.isEmpty());	0	1	27.764355897903442
	3	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertTrue(options.containsAll(result));	0	1	27.764355897903442
	4	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertFalse(options.isEmpty());	0	1	27.764355897903442
	5	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertSame(jco,jco);	0	1	27.764355897903442
	6	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertNotSame(result,options);	0	1	27.764355897903442
	7	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertEquals(jco.getClass(),jco.getClass());	0	1	27.764355897903442
	8	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	"assertFalse(""STR"");"	0	1	27.764355897903442
	9	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	"assertNotEquals(""STR"",release);"	0	1	27.764355897903442
30	0	OpenLiberty/ci.common	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(isGeneratedConfigFile(src,srcDir,targetDir));	0	1	68.46402883529663
	1	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(isGeneratedConfigFile(targetDir,srcDir,targetDir));	0	1	68.46402883529663
	2	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotNull(src);	0	1	68.46402883529663
	3	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	"assertEquals(src.getName(),""STR"");"	0	1	68.46402883529663
	4	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotNull(util);	0	1	68.46402883529663
	5	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertSame(util,getNewDevUtil(serverDirectory));	0	1	68.46402883529663
	6	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertFalse(util.isDirectory(serverDirectory));	0	1	68.46402883529663
	7	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertTrue(util.filesMatch(targetDir.list(),configDirectory.list()));	0	1	68.46402883529663
	8	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	assertNotSame(configDirectory,util);	0	1	68.46402883529663
	9	/	DevUtilTest	testGeneratedConfigFiles	"assertTrue(""STR"",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"	"assertEquals(util.getJavaVersion(),""STR"");"	0	1	68.46402883529663
31	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertNotNull(getSequences());	0	1	71.64785695075989
	1	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertTrue(getSequences().size()>0);	0	1	71.64785695075989
	2	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertTrue(getSequences().get(0)instanceofSequence);	0	1	71.64785695075989
	3	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertFalse(getSequences().contains(null));	0	1	71.64785695075989
	4	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_SEQUENCE_COUNT,getSequences().size());	0	1	71.64785695075989
	5	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_START_CANVAS,getSequences().get(0).getStartCanvas());	0	1	71.64785695075989
	6	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_VIEWING_DIRECTION,getSequences().get(0).getViewingDirection());	0	1	71.64785695075989
	7	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_LABEL,getSequences().get(0).getLabel());	0	1	71.64785695075989
	8	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_CANVASES_COUNT,getSequences().get(0).getCanvases().size());	0	1	71.64785695075989
	9	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_TOTAL_CANVASSES_COUNT,getSequences().get(0).getTotalCanvases());	0	1	71.64785695075989
32	0	orientechnologies/orientdb	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1	1	40.13537383079529
	1	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0	1	40.13537383079529
	2	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0	1	40.13537383079529
	3	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),equalTo(false));	0	1	40.13537383079529
	4	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(not(true)));	0	1	40.13537383079529
	5	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertIterableEquals(Collections.singletonList(false),Collections.singletonList(doc.isDirty()));	0	1	40.13537383079529
	6	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0	1	40.13537383079529
	7	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0	1	40.13537383079529
	8	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertArrayEquals(newObject[]{false},newObject[]{doc.isDirty()});	0	1	40.13537383079529
	9	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(newObject[]{doc.isDirty()}).contains(false);	0	1	40.13537383079529
33	0	orientechnologies/orientdb	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(getIntValue(offset+SIZE_OFFSET)>0);	0	1	35.73662614822388
	1	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(cacheEntry);	0	1	35.73662614822388
	2	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(bufferPool.getSize()>0);	0	1	35.73662614822388
	3	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(pointer);	0	1	35.73662614822388
	4	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,cachePointer.getParentCacheEntry().getPageIndex());	0	1	35.73662614822388
	5	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.isLeaf());	0	1	35.73662614822388
	6	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,treeBucket.getSize());	0	1	35.73662614822388
	7	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertArrayEquals(newbyte[0],treeBucket.getRawBuffer());	0	1	35.73662614822388
	8	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,treeBucket.getLeftChild());	0	1	35.73662614822388
	9	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,treeBucket.getRightChild());	0	1	35.73662614822388
34	0	orientechnologies/orientdb	RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	assertNotNull(item);	0	1	24.777615070343018
	1	/	RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	assertEquals(doc.getClassName(),item.getClassName());	0	1	24.777615070343018
	2	/	RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	assertEquals(doc.getDocumentId(),item.getIdentity().orElse(null));	0	1	24.777615070343018
	3	/	RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertNotEquals(null,""STR"");"	0	1	24.777615070343018
	4	/	RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertNotNull(""STR"");"	0	1	24.777615070343018
35	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertEquals(value,storedValue);	1	1	58.92414832115173
	1	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(part1);	0	1	58.92414832115173
	2	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(part2);	0	1	58.92414832115173
	3	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(all);	0	1	58.92414832115173
	4	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(part1.remaining()==4);	0	1	58.92414832115173
	5	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(part2.remaining()==4);	0	1	58.92414832115173
	6	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(all.remaining()==8);	0	1	58.92414832115173
	7	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotEquals(storedValue,0);	0	1	58.92414832115173
	8	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotEquals(value,0);	0	1	58.92414832115173
	9	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(storedValue>0);	0	1	58.92414832115173
36	0	orientechnologies/orientdb	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(from);	0	1	32.307265758514404
	1	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(to);	0	1	32.307265758514404
	2	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(frominstanceofODeleteRecordTask);	0	1	32.307265758514404
	3	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(toinstanceofODeleteRecordTask);	0	1	32.307265758514404
	4	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(from.getRid()instanceofORecordId);	0	1	32.307265758514404
	5	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(to.getRid()instanceofORecordId);	0	1	32.307265758514404
	6	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(from.getRid(),to.getRid());	1	1	32.307265758514404
	7	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertSame(from.getRid(),to.getRid());	0	1	32.307265758514404
	8	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotEquals(from.getRid(),newORecordId());	0	1	32.307265758514404
	9	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotSame(from,to);	0	1	32.307265758514404
37	0	orientechnologies/orientdb	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNotNull(database);	0	1	41.998780250549316
	1	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(database.getClusters().size()>0);	0	1	41.998780250549316
	2	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	"assertEquals(""STR"",database.getName());"	0	1	41.998780250549316
	3	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNotNull(rec);	0	1	41.998780250549316
	4	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(res>0);	0	1	41.998780250549316
	5	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNull(database.load(rec.getIdentity()));	0	1	41.998780250549316
	6	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(doc.getIdentity().isValid());	0	1	41.998780250549316
	7	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(1,database.getMetadata().getClusters().size());	0	1	41.998780250549316
	8	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(database.getTransaction().isActive());	0	1	41.998780250549316
	9	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertFalse(database.isClosed());	0	1	41.998780250549316
38	0	orientechnologies/orientdb	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	0	1	70.72890496253967
	1	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(doubleSerializer);	0	1	70.72890496253967
	2	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(OBJECT==OBJECT```and```OBJECT.equals(OBJECT));	0	1	70.72890496253967
	3	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(OBJECT==null```and```OBJECT.equals(null));	0	1	70.72890496253967
	4	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0	1	70.72890496253967
	5	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	0	1	70.72890496253967
	6	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,doubleSerializer.serializeNativeObject(OBJECT));	0	1	70.72890496253967
	7	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(data,newbyte[FIELD_SIZE]);	0	1	70.72890496253967
	8	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(buffer.order(),ByteOrder.nativeOrder());	0	1	70.72890496253967
	9	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	0	1	70.72890496253967
39	0	orientechnologies/orientdb	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotNull(params);	0	1	56.01157307624817
	1	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotNull(channel);	0	1	56.01157307624817
	2	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertFalse(channel.isClosed());	0	1	56.01157307624817
	3	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotNull(requestRead.getStatement());	0	1	56.01157307624817
	4	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotNull(requestRead.getParameters());	0	1	56.01157307624817
	5	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertEquals(params,request.getParameters());	0	1	56.01157307624817
	6	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	"assertEquals(""STR"",request.getStatement());"	0	1	56.01157307624817
	7	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotEquals(null,requestRead.getSerializer());	0	1	56.01157307624817
	8	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertNotEquals(null,requestRead.getDriver());	0	1	56.01157307624817
	9	/	OLiveQueryMessagesTests	testRequestWriteRead	"assertEquals(requestRead.getQuery(),""STR"");"	assertTrue(requestRead.getProtVersion()>0);	0	1	56.01157307624817
40	0	orientechnologies/orientdb	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	"assertEquals(""STR"",""STR"");"	0	1	66.25150537490845
	1	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(search);	0	1	66.25150537490845
	2	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertTrue(db.getTransaction().isActive());	0	1	66.25150537490845
	3	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertEquals(1,search.size());	0	1	66.25150537490845
	4	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(vertex);	0	1	66.25150537490845
	5	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(c1);	0	1	66.25150537490845
	6	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(db);	0	1	66.25150537490845
	7	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(schema);	0	1	66.25150537490845
	8	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertTrue(context.exists(name.getMethodName()));	0	1	66.25150537490845
	9	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertFalse(db.getTransaction().isActive());	0	1	66.25150537490845
41	0	orientechnologies/orientdb	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	assertNotNull(database);	0	1	49.85861682891846
	1	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	"assertNotEquals(0,""STR"");"	0	1	49.85861682891846
	2	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	"assertTrue(""STR"");"	0	1	49.85861682891846
	3	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(1,""STR"");"	0	1	49.85861682891846
	4	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	assertTrue(database.getTransaction().isActive());	0	1	49.85861682891846
	5	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	assertTrue(database.getTransaction().orElseThrow().isActive());	0	1	49.85861682891846
	6	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	assertFalse(database.isClosed());	0	1	49.85861682891846
	7	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	assertTrue(database.exists());	0	1	49.85861682891846
	8	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(1,""STR"");"	0	1	49.85861682891846
	9	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	"assertNotNull(saved.field(""STR""));"	"assertTrue(""STR"");"	0	1	49.85861682891846
42	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertNotNull(floatSerializer);	0	1	43.41367697715759
	1	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertNotNull(OBJECT);	0	1	43.41367697715759
	2	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE+5);	0	1	43.41367697715759
	3	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.isDirect());	0	1	43.41367697715759
	4	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertFalse(buffer.isReadOnly());	0	1	43.41367697715759
	5	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertFalse(Float.isNaN(5.5f));	0	1	43.41367697715759
	6	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertArrayEquals(newbyte[]{0,0,80,63},buffer.array());	0	1	43.41367697715759
	7	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertEquals(4,binarySize);	0	1	43.41367697715759
	8	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertEquals(5.5f,5.5f);	0	1	43.41367697715759
	9	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.isDirect());	0	1	43.41367697715759
43	0	orientechnologies/orientdb	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(stream);	0	1	75.05696606636047
	1	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(OBJECT,deserializeFromByteBufferObject(buffer));	0	1	75.05696606636047
	2	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(encodedSize>0);	0	1	75.05696606636047
	3	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertFalse(encodedSize<0);	0	1	75.05696606636047
	4	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertArrayEquals(OBJECT.getBytes(),deserializeFromByteBufferObject(buffer).getBytes());	0	1	75.05696606636047
	5	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(newString(encoded,StandardCharsets.UTF_8),deserializeFromByteBufferObject(buffer));	0	1	75.05696606636047
	6	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(encoded);	0	1	75.05696606636047
	7	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(OBJECT,newString(encoded,StandardCharsets.UTF_8));	0	1	75.05696606636047
	8	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(stream.length,buffer.limit());	0	1	75.05696606636047
	9	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(encodedSize<=encoded.length);	0	1	75.05696606636047
44	0	orientechnologies/orientdb	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertEquals(2,hosts.size());	0	1	108.43641018867493
	1	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertFalse(hosts.isEmpty());	0	1	108.43641018867493
	2	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotNull(hosts);	0	1	108.43641018867493
	3	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotEquals(0,hosts.size());	0	1	108.43641018867493
	4	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertSame(hosts,instance.getHosts());	0	1	108.43641018867493
	5	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotSame(hosts,instance.getHosts());	0	1	108.43641018867493
	6	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertEquals(2,hosts.size());	0	1	108.43641018867493
	7	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotEquals(0,hosts.size());	0	1	108.43641018867493
	8	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	"assertTrue(""STR"");"	0	1	108.43641018867493
	9	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	"assertFalse(""STR"");"	0	1	108.43641018867493
45	0	orientechnologies/orientdb	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	33.681337118148804
	1	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertNotNull(result);	0	1	33.681337118148804
	2	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	"assertEquals(""STR"",""STR"");"	0	1	33.681337118148804
	3	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	"assertNotEquals(""STR"",""STR"");"	0	1	33.681337118148804
	4	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertSame(result,result);	0	1	33.681337118148804
	5	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertNotSame(result,null);	0	1	33.681337118148804
	6	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	33.681337118148804
	7	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertFalse(result.hasPlan());	0	1	33.681337118148804
	8	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	"assertThrows(Exception.class,""STR"");"	0	1	33.681337118148804
	9	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertEquals(0,result.getWarnings());	0	1	33.681337118148804
46	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotNull(db);	0	1	31.632809162139893
	1	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.exists());	0	1	31.632809162139893
	2	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotEquals(null,result);	0	1	31.632809162139893
	3	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(result.size()<=4);	0	1	31.632809162139893
	4	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.getTransaction().isActive());	0	1	31.632809162139893
	5	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertEquals(0,db.getTransaction().getEntryCount());	0	1	31.632809162139893
	6	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertFalse(db.isInTx());	0	1	31.632809162139893
	7	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotNull(db.registerHook(null));	0	1	31.632809162139893
	8	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.begin().getId()>=0);	0	1	31.632809162139893
	9	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	"assertFalse(""STR"");"	0	1	31.632809162139893
47	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(db);	0	1	37.1639301776886
	1	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(db.exists());	0	1	37.1639301776886
	2	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(getProfilerInstance());	0	1	37.1639301776886
	3	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	"assertNotNull(""STR"");"	0	1	37.1639301776886
	4	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(db.command(newOCommandSQL(query.toString())));	0	1	37.1639301776886
	5	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(db.getClusterNames().size()>0);	0	1	37.1639301776886
	6	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(result.size()>0);	0	1	37.1639301776886
	7	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertEquals(expectedResultSize,result.size());	0	1	37.1639301776886
	8	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	"assertNotNull(""STR"");"	0	1	37.1639301776886
	9	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	"assertNotNull(""STR"");"	0	1	37.1639301776886
48	0	orientechnologies/orientdb	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedSize,size());	0	1	27.37952709197998
	1	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(size()>0);	0	1	27.37952709197998
	2	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(obj);	0	1	27.37952709197998
	3	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(condition);	0	1	27.37952709197998
	4	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(condition);	0	1	27.37952709197998
	5	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedObject,actualObject);	0	1	27.37952709197998
	6	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedInt,actualInt);	0	1	27.37952709197998
	7	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(expectedObject,actualObject);	0	1	27.37952709197998
	8	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(expectedSize,size());	0	1	27.37952709197998
	9	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(expectedLong,actualLong);	0	1	27.37952709197998
49	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(2,simpleKeyIndexDefinition.getParamCount());	0	1	82.78715324401855
	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(2,simpleKeyIndexDefinition.getParamTypes().length);	0	1	82.78715324401855
	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(simpleKeyIndexDefinition);	0	1	82.78715324401855
	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(simpleKeyIndexDefinition.getParamCount()<2);	0	1	82.78715324401855
	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,simpleKeyIndexDefinition.getParamCount());	0	1	82.78715324401855
	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(simpleKeyIndexDefinition.getParamCount()!=0);	0	1	82.78715324401855
	6	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(simpleKeyIndexDefinition.getParamType(0).equals(OType.FLOAT));	0	1	82.78715324401855
	7	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(simpleKeyIndexDefinition.getParamType(1)instanceofOType);	0	1	82.78715324401855
	8	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(OType.STRING,simpleKeyIndexDefinition.getParamType(1));	0	1	82.78715324401855
	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(OType.INTEGER,simpleKeyIndexDefinition.getKeyTypes().get(0));	0	1	82.78715324401855
50	0	orientechnologies/orientdb	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,buffer.capacity()-1);	0	1	26.4978768825531
	1	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.remaining()>=size);	0	1	26.4978768825531
	2	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(buffer);	0	1	26.4978768825531
	3	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertArrayEquals(newbyte[size],buffer.array());	0	1	26.4978768825531
	4	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(buffer.limit(),buffer.capacity());	0	1	26.4978768825531
	5	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(rid,linkSerializer.deserializeFromByteBufferObject(buffer));	0	1	26.4978768825531
	6	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.order().equals(ByteOrder.nativeOrder()));	0	1	26.4978768825531
	7	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(BufferOverflowException.class,()->buffer.put(newbyte[size+1]));	0	1	26.4978768825531
	8	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(BufferUnderflowException.class,()->buffer.get(newbyte[size+1]));	0	1	26.4978768825531
	9	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(0,buffer.position());	0	1	26.4978768825531
51	0	orientechnologies/orientdb	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(multiKey));	0	1	87.34004092216492
	1	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertSame(mapResult,multiKeyMap.get(multiKey));	0	1	87.34004092216492
	2	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap);	0	1	87.34004092216492
	3	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	0	1	87.34004092216492
	4	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0	1	87.34004092216492
	5	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.keys.equals(anotherMultiKey.keys));	0	1	87.34004092216492
	6	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertArrayEquals(multiKey.keys.toArray(),anotherMultiKey.keys.toArray());	0	1	87.34004092216492
	7	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotEquals(multiKey.hashCode(),anotherMultiKey.hashCode());	0	1	87.34004092216492
	8	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	"assertNotSame(""STR"",multiKey.keys,anotherMultiKey.keys);"	0	1	87.34004092216492
	9	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotNull(multiKey.keys);	0	1	87.34004092216492
52	0	trautonen/coveralls-maven-plugin	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(file.exists());	0	1	36.77028822898865
	1	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(job);	0	1	36.77028822898865
	2	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(job.getCoverallsFile());	0	1	36.77028822898865
	3	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(coverallsFile,job.getCoverallsFile());	0	1	36.77028822898865
	4	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(coverallsFile.length()>0);	0	1	36.77028822898865
	5	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(job.getCoverallsFile().canRead());	0	1	36.77028822898865
	6	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertFalse(job.getCoverallsFile().isDirectory());	0	1	36.77028822898865
	7	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(folder.getRoot().getAbsolutePath(),job.getDirectoryPrefix());	0	1	36.77028822898865
	8	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(coverallsFile.getAbsolutePath(),job.getCoverallsFile().getAbsolutePath());	0	1	36.77028822898865
	9	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(job.getCoverallsFile().getParentFile(),folder.getRoot());	0	1	36.77028822898865
53	0	trautonen/coveralls-maven-plugin	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	1	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	2	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	3	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	4	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	5	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	6	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	7	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	8	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
	9	/	WildcardsTest	testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	48.75372791290283
54	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	38.3766930103302
	1	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertTrue(two.getChildList().isEmpty());	0	1	38.3766930103302
	2	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertNotNull(two);	0	1	38.3766930103302
	3	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertNull(""STR"");"	0	1	38.3766930103302
	4	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertEquals(2,two.getChildList().size());	0	1	38.3766930103302
	5	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	38.3766930103302
	6	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertEquals(5,root.getChildList().size());	0	1	38.3766930103302
	7	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertFalse(one.equals(two));	0	1	38.3766930103302
	8	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertNotSame(one,two.getParent());	0	1	38.3766930103302
	9	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	assertFalse(two.getChildList().isEmpty());	0	1	38.3766930103302
55	0	nidi3/graphviz-java	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertEquals(2,""STR"");"	0	1	57.340221881866455
	1	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertEquals(""STR"",""STR"");"	0	1	57.340221881866455
	2	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertNotNull(""STR"");"	0	1	57.340221881866455
	3	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertNotEquals(0,""STR"");"	0	1	57.340221881866455
	4	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertTrue(""STR"");"	0	1	57.340221881866455
	5	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertFalse(""STR"");"	0	1	57.340221881866455
	6	/	SvgElementFinderTest	linkedNodeNamesOf	"assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"assertTrue(""STR"");"	0	1	57.340221881866455
56	0	nidi3/graphviz-java	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertEquals(90,angle);	0	1	43.203941822052
	1	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertTrue(angle>0);	0	1	43.203941822052
	2	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertFalse(angle<360);	0	1	43.203941822052
	3	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertNotNull(angle);	0	1	43.203941822052
	4	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertNotEquals(270,angle);	0	1	43.203941822052
	5	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	assertNotEquals(180,angle);	0	1	43.203941822052
	6	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"assertThat(""STR"",angle,CoreMatchers.allOf(CoreMatchers.greaterThan(0),CoreMatchers.lessThan(360)));"	0	1	43.203941822052
	7	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"assertThat(""STR"",angle,CoreMatchers.closeTo(180,5));"	0	1	43.203941822052
	8	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"assertNotSame(""STR"",90,angle);"	0	1	43.203941822052
	9	/	ColorTest	angle	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"assertNotSame(""STR"",150,angle);"	0	1	43.203941822052
57	0	PeterisP/morphology	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.enablePrefixes==false);	0	1	51.2859308719635
	1	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertFalse(locītājs.enablePrefixes);	0	1	51.2859308719635
	2	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	51.2859308719635
	3	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertNotNull(locītājs);	0	1	51.2859308719635
	4	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertEquals(0,locītājs.cacheSize);	0	1	51.2859308719635
	5	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.getWordforms().isEmpty());	0	1	51.2859308719635
	6	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertNull(locītājs.getPrefix());	0	1	51.2859308719635
	7	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertFalse(locītājs.isCaseSensitive());	0	1	51.2859308719635
	8	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	"assertNotNull(""STR"");"	0	1	51.2859308719635
	9	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	"assertFalse(""STR"");"	0	1	51.2859308719635
58	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0	1	48.24725413322449
	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0	1	48.24725413322449
	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0	1	48.24725413322449
	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0	1	48.24725413322449
	4	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(GrammaticalGender.MASCULINE,formas.get(0).getGender());	0	1	48.24725413322449
	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(GrammaticalCase.ACCUSATIVE,formas.get(0).getCase());	0	1	48.24725413322449
	6	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertEquals(""STR"",formas.get(0).getLemma());"	0	1	48.24725413322449
	7	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.stream().allMatch(forma->!forma.getWordClass().isEmpty()));	0	1	48.24725413322449
	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.stream().anyMatch(forma->forma.getCoveredLemma().isEmpty()));	0	1	48.24725413322449
	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.stream().allMatch(Wordform::isProperNoun));	0	1	48.24725413322449
59	0	PeterisP/morphology	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized()==true);	0	1	51.70887804031372
	1	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	1	51.70887804031372
	2	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	"assertEquals(""STR"",stum.getLemma());"	0	1	51.70887804031372
	3	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	"assertEquals(""STR"",stum.toString());"	0	1	51.70887804031372
	4	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	51.70887804031372
	5	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.wordforms.size()>0);	0	1	51.70887804031372
	6	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized()==true);	0	1	51.70887804031372
	7	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	1	51.70887804031372
	8	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	"assertEquals(""STR"",stum.getLemma());"	0	1	51.70887804031372
	9	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	"assertEquals(""STR"",stum.toString());"	0	1	51.70887804031372
60	0	redraiment/jactiverecord	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertEquals(expectedString,actualString);	0	1	43.369264125823975
	1	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertNotEquals(expectedString,actualString);	0	1	43.369264125823975
	2	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertNotNull(nonNullObject);	0	1	43.369264125823975
	3	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertTrue(condition);	0	1	43.369264125823975
	4	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertFalse(condition);	0	1	43.369264125823975
	5	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertEquals(expectedChar,actualChar);	0	1	43.369264125823975
	6	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertNotEquals(expectedChar,actualChar);	0	1	43.369264125823975
	7	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertTrue(stringToTest.contains(substringToCheck));	0	1	43.369264125823975
	8	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertFalse(stringToTest.contains(substringToCheck));	0	1	43.369264125823975
	9	/	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	assertTrue(collectionToTest.contains(elementToCheck));	0	1	43.369264125823975
61	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotNull(moneyToStrUAH);	0	1	88.41501212120056
	1	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(200.00));"	0	1	88.41501212120056
	2	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(1000.09));"	0	1	88.41501212120056
	3	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrUAHENG.convert(null));	0	1	88.41501212120056
	4	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUAHENG.convert(1000.0));"	0	1	88.41501212120056
	5	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUAHENG.convert(1000.50));"	0	1	88.41501212120056
	6	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUSDENG.convert(299.99));"	0	1	88.41501212120056
	7	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUSDENG.convert(110.15));"	0	1	88.41501212120056
	8	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(0.50));"	0	1	88.41501212120056
	9	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(1.50));"	0	1	88.41501212120056
62	0	arnohaase/a-foundation	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertFalse(ser==null);	0	1	40.12213611602783
	1	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertNotNull(result);	0	1	40.12213611602783
	2	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertDoesNotThrow(()->ser.writeBooleanLiteral(false));	0	1	40.12213611602783
	3	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	"assertNotSame(result,""STR"");"	0	1	40.12213611602783
	4	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertThat(ser.getOut()).isInstanceOf(BufferedOutputStream.class);	0	1	40.12213611602783
	5	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertThat(ser.getMarkers()).isEmpty();	0	1	40.12213611602783
	6	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertThat(baos).hasSize(5).isNotNull();	0	1	40.12213611602783
	7	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	assertNotEquals(ser,null);	0	1	40.12213611602783
	8	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	"assertAll(""STR"");"	0	1	40.12213611602783
	9	/	AJsonSerHelperTest	testFalse	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	1	40.12213611602783
63	0	AlejandroRivera/embedded-rabbitmq	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"assertEquals(""STR"",os.toString().trim());"	0	1	55.753071784973145
	1	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertNull(version.getExtractionFolder());	0	1	55.753071784973145
	2	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(executableFile.exists());	0	1	55.753071784973145
	3	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(executableFile.createNewFile());	0	1	55.753071784973145
	4	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertSame(processExecutor,factory.createInstance());	0	1	55.753071784973145
	5	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(array.contains(element));	0	1	55.753071784973145
	6	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertFalse(array.contains(element));	0	1	55.753071784973145
	7	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(list.contains(element));	0	1	55.753071784973145
	8	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertFalse(list.contains(element));	0	1	55.753071784973145
	9	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(set.contains(element));	0	1	55.753071784973145
64	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor);	0	1	79.58472919464111
	1	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockAttributeInjector);	0	1	79.58472919464111
	2	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockObjectQueryPreparer);	0	1	79.58472919464111
	3	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockLogger);	0	1	79.58472919464111
	4	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockAccessConnection);	0	1	79.58472919464111
	5	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(polledObjects);	0	1	79.58472919464111
	6	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(polled001);	0	1	79.58472919464111
	7	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockObjectQueryInfo001);	0	1	79.58472919464111
	8	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(objectName001);	0	1	79.58472919464111
	9	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(attributeNames001);	0	1	79.58472919464111
65	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotNull(result);	0	1	68.3566563129425
	1	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertFalse(result.isEmpty());	0	1	68.3566563129425
	2	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertTrue(result.contains(this.objectName));	0	1	68.3566563129425
	3	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertThat(result,CoreMatchers.instanceOf(Set.class));	0	1	68.3566563129425
	4	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertSame(this.testQueryResult,result);	1	1	68.3566563129425
	5	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertEquals(1,result.size());	0	1	68.3566563129425
	6	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertEquals(this.mockQueryExp,query);	0	1	68.3566563129425
	7	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertArrayEquals(this.testQueryResult.toArray(),result.toArray());	0	1	68.3566563129425
	8	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertThat(this.mockAttributeList,CoreMatchers.instanceOf(List.class));	0	1	68.3566563129425
	9	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertTrue(this.testAttributeList.isEmpty());	0	1	68.3566563129425
66	0	ExpediaGroup/beeju	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertNotNull(databaseName());	0	1	60.28169918060303
	1	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertTrue(!databaseName().isEmpty());	0	1	60.28169918060303
	2	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertTrue(databaseName()instanceofString);	0	1	60.28169918060303
	3	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertFalse(databaseName().isEmpty());	0	1	60.28169918060303
	4	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertTrue(databaseName().length()>0);	0	1	60.28169918060303
	5	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	assertFalse(databaseName().length()==0);	0	1	60.28169918060303
	6	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"assertEquals(""STR"",databaseName());"	0	1	60.28169918060303
	7	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"assertNotEquals(""STR"",databaseName());"	0	1	60.28169918060303
	8	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"assertEquals(true,""STR"");"	0	1	60.28169918060303
	9	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"assertEquals(false,""STR"");"	0	1	60.28169918060303
67	0	mikolajmitura/java-properties-to-json	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotNull(jsonObject);	0	1	53.383728981018066
	1	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObjectinstanceofNumberJsonType);	0	1	53.383728981018066
	2	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObject.getType().equals(AbstractJsonType.Type.NUMBER));	0	1	53.383728981018066
	3	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertFalse(jsonObject.isNull());	0	1	53.383728981018066
	4	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotEquals(localDate.getDayOfYear(),2019);	0	1	53.383728981018066
	5	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertEquals(localDate.getYear(),2019);	0	1	53.383728981018066
	6	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(localDate.isEqual(LocalDate.of(2019,8,4)));	0	1	53.383728981018066
	7	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotSame(localDate.plusYears(1),localDate);	0	1	53.383728981018066
	8	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertFalse(localDate.isAfter(LocalDate.of(2019,8,5)));	0	1	53.383728981018066
	9	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(localDate.isBefore(LocalDate.of(2020,1,1)));	0	1	53.383728981018066
68	0	basis-technology-corp/tcl-regex-java	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	assertNotNull(exp);	0	1	32.343738079071045
	1	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	assertThrows(RegexException.class,()->HsrePattern.compile(null));	0	1	32.343738079071045
	2	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertSame(exp,""STR"");"	0	1	32.343738079071045
	3	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotSame(exp,""STR"");"	0	1	32.343738079071045
	4	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertArrayEquals(""STR"",""STR"");"	0	1	32.343738079071045
	5	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertTrue(""STR"");"	0	1	32.343738079071045
	6	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertEquals(0,""STR"");"	0	1	32.343738079071045
	7	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertFalse(""STR"");"	0	1	32.343738079071045
	8	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotEquals(0,""STR"");"	0	1	32.343738079071045
	9	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotEquals(1,""STR"");"	0	1	32.343738079071045
69	0	DigitalPebble/storm-crawler	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertEquals(accum.toString(),text.trim());	0	1	32.60864734649658
	1	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertEquals(_text(element),text.trim());	0	1	32.60864734649658
	2	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertTrue(matches.contains(element));	0	1	32.60864734649658
	3	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertNotNull(accum);	0	1	32.60864734649658
	4	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertNotEquals(TextExtractor.INCLUDE_PARAM_NAME,conf.getExcludeParamName());	0	1	32.60864734649658
	5	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertEquals(TextExtractor.INCLUDE_PARAM_NAME,conf.getIncludeParamName());	0	1	32.60864734649658
	6	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertNotEquals(matches,element);	0	1	32.60864734649658
	7	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertNotSame(matches,element);	0	1	32.60864734649658
	8	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	assertNotSame(content,text);	0	1	32.60864734649658
	9	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"	"assertFalse(""STR"");"	0	1	32.60864734649658
