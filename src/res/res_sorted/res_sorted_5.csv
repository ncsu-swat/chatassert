TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<=durationLimit);	0	0	100.54015803337097
0	1	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>durationLimit);	0	0	100.54015803337097
0	2	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<durationLimit);	0	0	100.54015803337097
0	3	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>=lowerBound&&duration<=upperBound);	0	0	100.54015803337097
0	4	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(randomValue>0);	0	0	100.54015803337097
0	5	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertFalse(randomValue<0);	0	0	100.54015803337097
0	6	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(maxDelayNanos>0);	0	0	100.54015803337097
0	7	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>=durationLimit);	0	0	100.54015803337097
0	8	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(randomValue>=0);	0	0	100.54015803337097
0	9	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertNotEquals(duration,durationLimit);	0	0	100.54015803337097
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	???;	0	0	67.4047200679779
2	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.hasProperty(""STR""));"	0	0	371.17982006073
2	1	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.areIndexed(""STR""));"	0	0	371.17982006073
2	2	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.hasProperty(""STR""));"	0	0	371.17982006073
2	3	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.areIndexed(""STR""));"	0	0	371.17982006073
2	4	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.isSubClassOf(""STR""));"	0	0	371.17982006073
2	5	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotEquals(""STR"",clazz.getCustom(""STR""));"	0	0	371.17982006073
2	6	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNotNull(clazz.getCustom(""STR""));"	0	0	371.17982006073
2	7	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertNull(clazz.getCustom(""STR""));"	0	0	371.17982006073
2	8	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertFalse(clazz.isSubClassOf(""STR""));"	0	0	371.17982006073
2	9	/	OAlterClassStatementExecutionTest	testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	1	0	371.17982006073
3	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(mapToTest.size(),((List<?>)result).size());	0	0	529.5054273605347
3	1	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0	0	529.5054273605347
3	2	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertArrayEquals(mapToTest.values().toArray(),((List<?>)result).toArray());	0	0	529.5054273605347
3	3	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0	0	529.5054273605347
3	4	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size());	0	0	529.5054273605347
3	5	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	0	0	529.5054273605347
3	6	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(mapToTest,result.get(0));	0	0	529.5054273605347
3	7	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(null,result.get(0));	0	0	529.5054273605347
3	8	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(mapToTest,params.get(0));	0	0	529.5054273605347
3	9	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).containsAll(mapToTest.values()));	0	0	529.5054273605347
4	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	0	0	240.36115884780884
4	1	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(result.length==0);	0	0	240.36115884780884
4	2	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(result);	0	0	240.36115884780884
4	3	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	0	0	240.36115884780884
4	4	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0	0	240.36115884780884
4	5	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0	0	240.36115884780884
4	6	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.STRING,result[0]);	0	0	240.36115884780884
4	7	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	0	0	240.36115884780884
4	8	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(newOType[]{OType.INTEGER},result);	0	0	240.36115884780884
4	9	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1	0	240.36115884780884
5	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys()instanceofSet);	0	0	243.03217005729675
5	1	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	0	0	243.03217005729675
5	2	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys()instanceofList);	0	0	243.03217005729675
5	3	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertFalse(compositeKey.getKeys().contains(""STR""));"	0	0	243.03217005729675
5	4	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(""STR"",compositeKey.getKeys().get(0));"	0	0	243.03217005729675
5	5	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	1	0	243.03217005729675
5	6	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	0	0	243.03217005729675
5	7	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertNotEquals(""STR"",compositeKey.getKeys().get(0));"	0	0	243.03217005729675
5	8	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().isEmpty());	0	0	243.03217005729675
5	9	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	0	0	243.03217005729675
6	0	orientechnologies/orientdb	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getSize());	0	0	477.0866799354553
6	1	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertNotEquals(-1,db.command(newOCommandSQL(""STR"")).execute());"	0	0	477.0866799354553
6	2	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(8,db.get(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS));	0	0	477.0866799354553
6	3	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertArrayEquals(""location""},db.getMetadata().getSchema().getClass(""City"").getPropertyNames());"	0	0	477.0866799354553
6	4	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOIndex);	0	0	477.0866799354553
6	5	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertSame(path,""STR"");"	0	0	477.0866799354553
6	6	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotSame(type,ODatabaseType.MEMORY);	0	0	477.0866799354553
6	7	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	"assertEquals(""STR"",db.query(newOSQLSynchQuery<>(""STR"")).get(0));"	0	0	477.0866799354553
6	8	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertFalse(context.exists(name.getMethodName()));	0	0	477.0866799354553
6	9	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(db);	0	0	477.0866799354553
7	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNull(result);	0	0	237.5258138179779
7	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(5D),result);	0	0	237.5258138179779
7	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	0	0	237.5258138179779
7	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	1	0	237.5258138179779
7	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	0	0	237.5258138179779
7	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	0	0	237.5258138179779
7	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(0),result);	0	0	237.5258138179779
7	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertSame(function,result);	0	0	237.5258138179779
7	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(resultinstanceofString);	0	0	237.5258138179779
7	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertArrayEquals(newObject[]{newBigDecimal(10.5D)},(Object[])result);	0	0	237.5258138179779
8	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(""STR"",qResult.stream().findFirst().orElseThrow().getProperty(""STR""));"	0	0	196.6122341156006
8	1	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	0	0	196.6122341156006
8	2	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(qResult.hasNext());	0	0	196.6122341156006
8	3	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertThrows(Exception.class,()->db.query(null));	0	0	196.6122341156006
8	4	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertTrue(qResult.stream().anyMatch(result->result.getProperty(""STR"").equals(""STR"")));"	0	0	196.6122341156006
8	5	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertTrue(qResult.stream().allMatch(result->result.getProperty(""STR"").toString().startsWith(""STR"")));"	0	0	196.6122341156006
8	6	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(0,qResult.stream().count());	0	0	196.6122341156006
8	7	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	0	0	196.6122341156006
8	8	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	"assertArrayEquals(""Jane""},qResult.stream().map(r->r.getProperty(""name"")).toArray());"	0	0	196.6122341156006
8	9	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(0,qResult.stream().count());	0	0	196.6122341156006
9	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertArrayEquals(token,connection.getToken());	0	0	121.59546113014221
9	1	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(5));	0	0	121.59546113014221
9	2	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(null,server.getContextConfiguration());	0	0	121.59546113014221
9	3	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener.getSubscribers());	0	0	121.59546113014221
9	4	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(0,listener.getSubscribersCount());	0	0	121.59546113014221
9	5	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(5,listener.getSubscribersCount());	0	0	121.59546113014221
9	6	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	0	0	121.59546113014221
9	7	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNull(listener.getSubscribers());	0	0	121.59546113014221
9	8	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotSame(protocol,connection.getProtocol());	0	0	121.59546113014221
9	9	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertSame(db,connection.getDatabase());	0	0	121.59546113014221
10	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertFalse(oSchema.getClass(""STR"").existsProperty(""STR""));"	0	0	240.44242596626282
10	1	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotSame(oClass.getProperty(""STR""),oClass.getProperty(""STR""));"	0	0	240.44242596626282
10	2	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotEquals(OType.INTEGER,oClass.getProperty(""STR"").getType());"	0	0	240.44242596626282
10	3	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	0	0	240.44242596626282
10	4	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertTrue(oSchema.getClass(""STR"").existsProperty(""STR""));"	0	0	240.44242596626282
10	5	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertSame(oClass.getProperty(""STR""),oClass.getProperty(""STR""));"	0	0	240.44242596626282
10	6	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNotNull(oClass.getProperty(""STR""));"	1	0	240.44242596626282
10	7	/	OClassImplTest	testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(OType.LINKLIST,oClass.getProperty(""STR"").getType());"	0	0	240.44242596626282
11	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(((List)result).size(),((List)result).stream().distinct().count());	0	0	703.1461288928986
11	1	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList<?>);	0	0	703.1461288928986
11	2	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0	0	703.1461288928986
11	3	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(""STR"",((List)result).get(0));"	0	0	703.1461288928986
11	4	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofInteger));	0	0	703.1461288928986
11	5	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0	0	703.1461288928986
11	6	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List)result).isEmpty());	0	0	703.1461288928986
11	7	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(IntStream.range(0,resultList.size()-1).allMatch(i->resultList.get(i)<resultList.get(i+1)));	0	0	703.1461288928986
11	8	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->((Integer)e)%2==0));	0	0	703.1461288928986
11	9	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofString));	0	0	703.1461288928986
11	10	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(2,((List)result).size());	0	0	703.1461288928986
12	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.deserializeNative(data,0));	0	0	257.8607888221741
12	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset));	0	0	257.8607888221741
12	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset<buffer.capacity());	0	0	257.8607888221741
12	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset>=0);	0	0	257.8607888221741
12	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	0	0	257.8607888221741
12	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,floatSerializer.deserializeNative(data,serializationOffset));	0	0	257.8607888221741
12	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	0	0	257.8607888221741
12	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.deserializeNative(data,0)>0);	0	0	257.8607888221741
12	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	0	0	257.8607888221741
12	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(data);	0	0	257.8607888221741
13	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0	0	68.28135514259338
13	1	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(c>=0x20&&c<=0x7E);	0	0	68.28135514259338
13	2	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(c<0x20||c>0x7E);	0	0	68.28135514259338
13	3	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(otp,otherOtp);	0	0	68.28135514259338
13	4	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>=OTP_MIN_LEN);	0	0	68.28135514259338
13	5	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0	0	68.28135514259338
13	6	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=OTP_MAX_LEN);	0	0	68.28135514259338
13	7	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(20,otp.length());	0	0	68.28135514259338
13	8	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(30,otp.length());	0	0	68.28135514259338
13	9	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1	0	68.28135514259338
14	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(isValidOTPFormat(""STR""));"	0	0	123.27543187141418
14	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(null));	0	0	123.27543187141418
14	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(YubicoClient.isValidOTPFormat(""STR""));"	0	0	123.27543187141418
15	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0	0	86.55323791503906
15	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer.getPrioritizedRoutes(),mappings);	0	0	86.55323791503906
15	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0	0	86.55323791503906
15	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1	0	86.55323791503906
15	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	0	0	86.55323791503906
15	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(mappings.toArray(),routePrioritizer.getPrioritizedRoutes().toArray());	0	0	86.55323791503906
15	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().stream().allMatch(Objects::nonNull));	0	0	86.55323791503906
15	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0	0	86.55323791503906
15	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0	0	86.55323791503906
15	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0	0	86.55323791503906
16	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(newUriResource[]{},routePrioritizer.getPrioritizedRoutes().toArray());	0	0	87.59345936775208
16	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(mappings,routePrioritizer.getPrioritizedRoutes());	0	0	87.59345936775208
16	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0	0	87.59345936775208
16	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0	0	87.59345936775208
16	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0	0	87.59345936775208
16	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	0	0	87.59345936775208
16	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0	0	87.59345936775208
16	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0	0	87.59345936775208
16	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0	0	87.59345936775208
16	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0	0	87.59345936775208
17	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().isEmpty());	0	0	188.91979885101318
17	1	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().matches(""STR""));"	0	0	188.91979885101318
17	2	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getUnit());	0	0	188.91979885101318
17	3	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a);	0	0	188.91979885101318
17	4	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().contains(""STR""));"	0	0	188.91979885101318
17	5	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getSvg().length());	0	0	188.91979885101318
17	6	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	0	0	188.91979885101318
17	7	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().startsWith(""STR""));"	0	0	188.91979885101318
17	8	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertTrue(a.getSvg().endsWith(""STR""));"	0	0	188.91979885101318
17	9	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getWidth());	0	0	188.91979885101318
18	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertSame(args[0],opts.args.get(0));	0	0	183.74678206443787
18	1	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNotNull(opts.opts.get(""STR""));"	0	0	183.74678206443787
18	2	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertArrayEquals(""c"",""d""});"	0	0	183.74678206443787
18	3	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNotEquals(""STR"",opts.args.get(1));"	0	0	183.74678206443787
18	4	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(2,opts.args.size());	0	0	183.74678206443787
18	5	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertTrue(opts.opts.containsKey(""STR""));"	0	0	183.74678206443787
18	6	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNull(opts.opts.get(""STR""));"	0	0	183.74678206443787
18	7	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertNotEquals(""STR"",opts.opts.get(""STR""));"	0	0	183.74678206443787
18	8	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotSame(options,opts);	0	0	183.74678206443787
18	9	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertFalse(opts.opts.containsKey(""STR""));"	0	0	183.74678206443787
19	0	jcodec/jcodec	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,size);	0	0	177.3376760482788
19	1	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>0);	0	0	177.3376760482788
19	2	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>=2);	0	0	177.3376760482788
19	3	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining<=0);	0	0	177.3376760482788
19	4	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>=0);	0	0	177.3376760482788
19	5	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>0);	0	0	177.3376760482788
19	6	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,value);	0	0	177.3376760482788
19	7	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(value>=0);	0	0	177.3376760482788
19	8	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(size>0);	0	0	177.3376760482788
19	9	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(signedComplement[size],value);	0	0	177.3376760482788
20	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(expectedTransform,transform);	0	0	179.439110994339
20	1	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	1	0	179.439110994339
20	2	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofTransform);	0	0	179.439110994339
20	3	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transform>=min&&transform<=max);	0	0	179.439110994339
20	4	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(someCondition);	0	0	179.439110994339
20	5	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(unexpectedTransform,transform);	0	0	179.439110994339
20	6	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(someCondition);	0	0	179.439110994339
20	7	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotSame(differentTransform,transform);	0	0	179.439110994339
20	8	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertSame(sameTransform,transform);	0	0	179.439110994339
20	9	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(transform>=min&&transform<=max);	0	0	179.439110994339
21	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	1	0	61.169217109680176
21	1	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	61.169217109680176
21	2	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(actual.length==0);	0	0	61.169217109680176
21	3	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length==0);	0	0	61.169217109680176
21	4	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(Arrays.asList(expected),Arrays.asList(actual));	0	0	61.169217109680176
21	5	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actualinstanceofString[]);	0	0	61.169217109680176
21	6	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected.length,actual.length);	0	0	61.169217109680176
21	7	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(element);	0	0	61.169217109680176
21	8	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,Arrays.copyOf(actual,expected.length));	0	0	61.169217109680176
21	9	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	0	0	61.169217109680176
22	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>=1);	0	0	55.13787603378296
22	1	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actualinstanceofArrayList);	0	0	55.13787603378296
22	2	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotEquals(e,actual.get(0));	0	0	55.13787603378296
22	3	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(1,actual.size());	0	0	55.13787603378296
22	4	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.contains(null));	0	0	55.13787603378296
22	5	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	0	0	55.13787603378296
22	6	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	"assertEquals(""STR"",actual.get(0).getDescription().get(""STR""));"	0	0	55.13787603378296
22	7	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(expected);	0	0	55.13787603378296
22	8	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	"assertEquals(""STR"",actual.get(0).getId());"	0	0	55.13787603378296
22	9	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0	0	55.13787603378296
23	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	0	0	48.794475078582764
23	1	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	1	0	48.794475078582764
23	2	/	StatementTest	testGetObject	assertNotNull(actual);	"assertTrue(statement.getContext().getLanguage().equals(""STR""));"	0	0	48.794475078582764
23	3	/	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	0	0	48.794475078582764
23	4	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expected,actual);	0	0	48.794475078582764
23	5	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expectedList.size(),statement.getAttachments().size());	0	0	48.794475078582764
23	6	/	StatementTest	testGetObject	assertNotNull(actual);	assertArrayEquals(expectedList.toArray(),statement.getAttachments().toArray());	0	0	48.794475078582764
23	7	/	StatementTest	testGetObject	assertNotNull(actual);	"assertEquals(""STR"",statement.getAuthority().getVersion());"	0	0	48.794475078582764
23	8	/	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	0	0	48.794475078582764
23	9	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	0	0	48.794475078582764
24	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual);	0	0	101.5051691532135
24	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	0	0	101.5051691532135
24	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual);	0	0	101.5051691532135
24	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertThat(actual,matcher);	0	0	101.5051691532135
24	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(object);	0	0	101.5051691532135
24	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expectedArray,actualArray);	0	0	101.5051691532135
24	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertSame(expected,actual);	0	0	101.5051691532135
24	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	0	0	101.5051691532135
24	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	0	0	101.5051691532135
24	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition);	0	0	101.5051691532135
25	0	trautonen/coveralls-maven-plugin	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNotNull(getName());	0	0	904.7983119487762
25	1	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertTrue(getName().startsWith(""STR""));"	0	0	904.7983119487762
25	2	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",getName());"	0	0	904.7983119487762
25	3	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertSame(""STR"",getName());"	0	0	904.7983119487762
25	4	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertFalse(getName().startsWith(""STR""));"	0	0	904.7983119487762
25	5	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNull(getName());	0	0	904.7983119487762
25	6	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertArrayEquals(newString[]{""STR""},newString[]{getName()});"	0	0	904.7983119487762
25	7	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotEquals(""STR"",getName());"	0	0	904.7983119487762
25	8	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotSame(""STR"",getName());"	0	0	904.7983119487762
25	9	/	GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNotEquals(""STR"",""STR"");"	0	0	904.7983119487762
26	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	1	0	86.62023115158081
26	1	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(directories.size(),sourceLoader.getNumberOfLoaders());	0	0	86.62023115158081
26	2	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	0	0	86.62023115158081
26	3	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(directories.isEmpty());	0	0	86.62023115158081
26	4	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(0)instanceofDirectorySourceLoader);	0	0	86.62023115158081
26	5	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertSame(modules,sourceLoader.getModules());	0	0	86.62023115158081
26	6	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	"assertTrue(sourceLoader.getSourceEncoding().equals(""STR""));"	0	0	86.62023115158081
26	7	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getBaseDir().equals(baseDir));	0	0	86.62023115158081
26	8	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(1)instanceofScanSourceLoader);	0	0	86.62023115158081
26	9	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNull(sourceLoader.getLoader(2));	0	0	86.62023115158081
27	0	myabc/markdownj	LineConventions	testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	???;	0	0	40.91219711303711
28	0	myabc/markdownj	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertSame(expectedObject,actualObject);	0	0	46.52834677696228
28	1	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertFalse(booleanExpression);	0	0	46.52834677696228
28	2	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNull(object);	0	0	46.52834677696228
28	3	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNotSame(expectedObject,actualObject);	0	0	46.52834677696228
28	4	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertTrue(booleanExpression);	0	0	46.52834677696228
28	5	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertNotNull(object);	0	0	46.52834677696228
28	6	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",""STR"");"	0	0	46.52834677696228
28	7	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertArrayEquals(expectedArray,actualArray);	0	0	46.52834677696228
28	8	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	assertThat(actualValue,matcher);	0	0	46.52834677696228
28	9	/	LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	0	46.52834677696228
29	0	myabc/markdownj	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(focal.markdown(""STR"").contains(""STR""));"	0	0	49.95543909072876
29	1	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(focal.markdown(""STR"").trim().isEmpty());"	0	0	49.95543909072876
29	2	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertFalse(focal.markdown(""STR"").contains(""STR""));"	0	0	49.95543909072876
29	3	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(focal.markdown(""STR"").isEmpty());"	0	0	49.95543909072876
29	4	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",focal.markdown(null));"	0	0	49.95543909072876
29	5	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotEquals(""STR"",focal.markdown(""STR""));"	0	0	49.95543909072876
29	6	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(focal.markdown(null).endsWith(""STR""));"	0	0	49.95543909072876
29	7	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",focal.markdown(""STR""));"	0	0	49.95543909072876
29	8	/	EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotEquals(""STR"",focal.markdown(null));"	0	0	49.95543909072876
30	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertThrows(AccessTokenRequiredException.class,()->acquireAccessToken());	0	0	63.726991176605225
30	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertFalse(oAuth2ClientContext.getPreservedState().containsKey(stateKey));	0	0	63.726991176605225
30	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertArrayEquals(newHttpMethod[]{HttpMethod.GET},requestTemplate.method().toArray());	0	0	63.726991176605225
30	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	"assertSame(resource,obtainableAccessToken.getAdditionalInformation().get(""STR""));"	0	0	63.726991176605225
30	4	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNull(tokenRequest.getStateKey());	0	0	63.726991176605225
30	5	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotSame(obtainableAccessToken,existingToken);	0	0	63.726991176605225
30	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNull(obtainableAccessToken);	0	0	63.726991176605225
30	7	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(obtainableAccessToken.getExpiration().isAfter(LocalDateTime.now()));	0	0	63.726991176605225
30	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	"assertEquals(""STR"",existingToken.getValue());"	0	0	63.726991176605225
30	9	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(tokenRequest.getPreservedState().isEmpty());	0	0	63.726991176605225
31	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(env,result);	0	0	62.144201040267944
31	1	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(result.containsKey(""STR""));"	0	0	62.144201040267944
31	2	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	0	0	62.144201040267944
31	3	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNull(result.get(""STR""));"	0	0	62.144201040267944
31	4	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertNotNull(result.get(""STR""));"	0	0	62.144201040267944
31	5	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env,result);	0	0	62.144201040267944
31	6	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotEquals(0,result.size());	0	0	62.144201040267944
31	7	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotSame(env,result);	0	0	62.144201040267944
31	8	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertSame(env,result);	0	0	62.144201040267944
31	9	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(1,result.size());	0	0	62.144201040267944
32	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(result.containsValue(""STR""));"	0	0	128.93427300453186
32	1	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",result.get(""STR""));"	0	0	128.93427300453186
32	2	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertFalse(result.containsKey(""STR""));"	0	0	128.93427300453186
32	3	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsKey(""STR""));"	0	0	128.93427300453186
32	4	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotNull(result);	0	0	128.93427300453186
32	5	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(2,result.size());	0	0	128.93427300453186
32	6	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(result.containsValue(""STR""));"	0	0	128.93427300453186
32	7	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertNotSame(env,result);	0	0	128.93427300453186
32	8	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertTrue(resultinstanceofHashMap);	0	0	128.93427300453186
33	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsKey(""STR""));"	0	0	132.182284116745
33	1	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(env.containsKey(""STR""));"	0	0	132.182284116745
33	2	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(result);	0	0	132.182284116745
33	3	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(2,result.size());	0	0	132.182284116745
33	4	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertSame(env,filter(env));	0	0	132.182284116745
33	5	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(env.containsValue(""STR""));"	0	0	132.182284116745
33	6	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,env.size());	0	0	132.182284116745
33	7	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(env.containsValue(""STR""));"	0	0	132.182284116745
33	8	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.isEmpty());	0	0	132.182284116745
33	9	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.isEmpty());	0	0	132.182284116745
34	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertSame(expectedMethod,result.get(""STR""));"	0	0	40.34298396110535
34	1	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedArray,result.values().toArray());	0	0	40.34298396110535
34	2	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(result.containsKey(""STR""));"	0	0	40.34298396110535
34	3	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertTrue(result.containsKey(""STR""));"	0	0	40.34298396110535
34	4	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNull(result.get(""STR""));"	0	0	40.34298396110535
34	5	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNotNull(result.get(""STR""));"	0	0	40.34298396110535
34	6	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertNotSame(expectedMethod,result.get(""STR""));"	0	0	40.34298396110535
34	7	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedSize,result.size());	0	0	40.34298396110535
34	8	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedSize,result.size());	0	0	40.34298396110535
34	9	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertArrayEquals(expectedArray,result.values().toArray());	0	0	40.34298396110535
35	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAttributeInjector);	0	0	27.100860834121704
35	1	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(attributeNames001);	0	0	27.100860834121704
35	2	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryInfo001);	0	0	27.100860834121704
35	3	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(objectName001);	0	0	27.100860834121704
35	4	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockLogger);	0	0	27.100860834121704
35	5	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryPreparer);	0	0	27.100860834121704
35	6	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polled001);	0	0	27.100860834121704
35	7	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAccessConnection);	0	0	27.100860834121704
35	8	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polledObjects);	0	0	27.100860834121704
35	9	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor);	0	0	27.100860834121704
36	0	arnohaase/a-foundation	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").get(tokens.apply(""STR"").size()-1).endsWith(""STR""));"	0	0	51.84489703178406
36	1	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertArrayEquals(""value2"",""value3""});"	0	0	51.84489703178406
36	2	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(3,tokens.apply(""STR"").size());"	0	0	51.84489703178406
36	3	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertFalse(tokens.apply(""STR"").contains(""STR""));"	0	0	51.84489703178406
36	4	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(tokens.apply(""STR"").size(),newHashSet<>(tokens.apply(""STR"")).size());"	0	0	51.84489703178406
36	5	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertNotNull(tokens.apply(""STR""));"	0	0	51.84489703178406
36	6	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertFalse(tokens.apply(""STR"").isEmpty());"	0	0	51.84489703178406
36	7	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").contains(""STR""));"	0	0	51.84489703178406
36	8	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").isEmpty());"	0	0	51.84489703178406
36	9	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertTrue(tokens.apply(""STR"").get(0).startsWith(""STR""));"	0	0	51.84489703178406
37	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertNotSame(""STR"",""STR"");"	0	0	94.92647504806519
37	1	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNull(bolt.parseDomain(null));	0	0	94.92647504806519
37	2	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertFalse(bolt.parseString(""STR""));"	0	0	94.92647504806519
37	3	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(2,3});	0	0	94.92647504806519
37	4	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt!=null);	0	0	94.92647504806519
37	5	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(5,bolt.parseNumber(""STR""));"	0	0	94.92647504806519
37	6	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",bolt.parseDomain(""STR""));"	0	0	94.92647504806519
37	7	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	0	0	94.92647504806519
37	8	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertNotEquals(""STR"",bolt.parseDomain(""STR""));"	0	0	94.92647504806519
37	9	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertTrue(bolt.parseString(""STR""));"	0	0	94.92647504806519
38	0	DigitalPebble/storm-crawler	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertArrayEquals(newString[]{""STR""},fields.get(""STR"").split(""STR""));"	0	0	75.58750510215759
38	1	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	0	0	75.58750510215759
38	2	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotNull(fields.get(""STR""));"	0	0	75.58750510215759
38	3	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotSame(fields.get(""STR""),fields.get(""STR""));"	0	0	75.58750510215759
38	4	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	0	0	75.58750510215759
38	5	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0	0	75.58750510215759
38	6	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotSame(null,fields.get(""STR""));"	0	0	75.58750510215759
38	7	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertSame(""STR"",fields.get(""STR""));"	0	0	75.58750510215759
38	8	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertFalse(fields.isEmpty());	0	0	75.58750510215759
38	9	/	BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(null,fields.get(""STR""));"	0	0	75.58750510215759
39	0	DigitalPebble/storm-crawler	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	0	0	68.9828269481659
39	1	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(newObject[]{},md.keySet().toArray());	0	0	68.9828269481659
39	2	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(md.isEmpty());	0	0	68.9828269481659
39	3	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	0	0	68.9828269481659
39	4	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(md,newHashMap<>());	0	0	68.9828269481659
39	5	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(5,md.size());	0	0	68.9828269481659
39	6	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertSame(md,md);	0	0	68.9828269481659
39	7	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertNull(md.get(""STR""));"	0	0	68.9828269481659
39	8	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertFalse(md.containsKey(""STR""));"	0	0	68.9828269481659
40	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4,elementCount);	0	0	59.28780961036682
40	1	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(true);	0	0	59.28780961036682
40	2	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(1,iterator.next().intValue());	0	0	59.28780961036682
40	3	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iteratorinstanceofIterator);	0	0	59.28780961036682
40	4	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1	0	59.28780961036682
40	5	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	0	0	59.28780961036682
40	6	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	0	0	59.28780961036682
40	7	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	0	0	59.28780961036682
41	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	0	0	42.0824830532074
42	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertThat(""STR"",Matchers.equalTo(result));"	0	0	66.23696494102478
42	1	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0	0	66.23696494102478
42	2	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNotNull(result);	0	0	66.23696494102478
42	3	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertSame(""STR"",result);"	0	0	66.23696494102478
42	4	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertFalse(result.equals(""STR""));"	0	0	66.23696494102478
42	5	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertNull(null);	0	0	66.23696494102478
42	6	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	0	66.23696494102478
42	7	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0	0	66.23696494102478
42	8	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertThat(result,Matchers.is(""STR""));"	0	0	66.23696494102478
42	9	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	0	0	66.23696494102478
43	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(KoreanPosJava.Adjective,tokens.apply(2).getPos());	0	0	206.71861672401428
43	1	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",tokens.last().getSurface());"	0	0	206.71861672401428
43	2	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>=3);	0	0	206.71861672401428
43	3	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(5,tokens.count());	0	0	206.71861672401428
43	4	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertFalse(tokens.exists(token->""STR"".equals(token.getSurface())));"	0	0	206.71861672401428
43	5	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertTrue(tokens.exists(token->""STR"".equals(token.getSurface())));"	0	0	206.71861672401428
43	6	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	0	0	206.71861672401428
43	7	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertNotEquals(""STR"",tokens.apply(1).getSurface());"	0	0	206.71861672401428
43	8	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(KoreanPosJava.Noun,tokens.apply(0).getPos());	0	0	206.71861672401428
43	9	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"assertEquals(""STR"",tokens.apply(0).getSurface());"	0	0	206.71861672401428
44	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertArrayEquals(namedList.toArray(),filtered.toArray());	0	0	99.45180988311768
44	1	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertEquals(""STR"",filtered.get(2).getName());"	0	0	99.45180988311768
44	2	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotEquals(null,filtered);	0	0	99.45180988311768
44	3	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(3,filtered.size());	0	0	99.45180988311768
44	4	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(filtered.size(),set.size());	0	0	99.45180988311768
44	5	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertTrue(filtered.stream().anyMatch(e->e.getName().equals(""STR"")));"	0	0	99.45180988311768
44	6	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(0,filtered.size());	0	0	99.45180988311768
44	7	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	"assertFalse(filtered.stream().anyMatch(e->e.getName().equals(""STR"")));"	0	0	99.45180988311768
44	8	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertNotNull(filtered);	0	0	99.45180988311768
44	9	/	ProcessorConfigTest	inc	"assertTrue(contains(filtered,""STR""));"	assertTrue(filtered.isEmpty());	0	0	99.45180988311768
45	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0	0	89.68546986579895
45	1	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThrows(Exception.class,()->matcher.lookingAt());	0	0	89.68546986579895
45	2	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(!matcher.lookingAt());	0	0	89.68546986579895
45	3	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0	0	89.68546986579895
45	4	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(null);	0	0	89.68546986579895
45	5	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotThrows(Exception.class,()->matcher.lookingAt());	0	0	89.68546986579895
45	6	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	0	0	89.68546986579895
45	7	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0	0	89.68546986579895
45	8	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0	0	89.68546986579895
45	9	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1	0	89.68546986579895
46	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertNotSame(formas,locītājs.generateInflections(""STR""));"	0	0	112.15376377105713
46	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(2,formas.size());	0	0	112.15376377105713
46	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertSame(formas,locītājs.generateInflections(""STR""));"	0	0	112.15376377105713
46	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertArrayEquals(newWordform[]{},formas.toArray());	0	0	112.15376377105713
46	4	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,hasSize(0));	0	0	112.15376377105713
46	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0	0	112.15376377105713
46	6	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(0,formas.size());	0	0	112.15376377105713
46	7	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.contains(null));	0	0	112.15376377105713
46	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,empty());	0	0	112.15376377105713
46	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	0	0	112.15376377105713
47	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(-10999999999999.99));"	0	0	116.34849405288696
47	1	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRUR.convert(-9999999999999.99));"	0	0	116.34849405288696
47	2	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDENG.convert(-10999999999999.99));"	0	0	116.34849405288696
47	3	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(-9999999999999.99));"	0	0	116.34849405288696
47	4	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAH.convert(-9999999999999.99));"	0	0	116.34849405288696
47	5	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(-9999999999999.99));"	0	0	116.34849405288696
47	6	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHENG.convert(-9999999999999.99));"	0	0	116.34849405288696
47	7	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(-9999999999999.99));"	0	0	116.34849405288696
47	8	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-10999999999999.99));"	0	0	116.34849405288696
47	9	/	MoneyToStrTest	checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-9999999999999.99));"	0	0	116.34849405288696
48	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().contains(""STR""));"	0	0	67.31936383247375
48	1	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().startsWith(""STR""));"	0	0	67.31936383247375
48	2	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotEquals(""STR"",defaultExtension.toString());"	0	0	67.31936383247375
48	3	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertNotNull(defaultExtension.toString());	0	0	67.31936383247375
48	4	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1	0	67.31936383247375
48	5	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertNotSame(""STR"",defaultExtension.toString());"	0	0	67.31936383247375
48	6	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().endsWith(""STR""));"	0	0	67.31936383247375
48	7	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertFalse(defaultExtension.toString().isEmpty());	0	0	67.31936383247375
48	8	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertTrue(defaultExtension.toString().length()>0);	0	0	67.31936383247375
48	9	/	DefaultExtensionTest	testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertTrue(defaultExtension.toString().matches(""STR""));"	0	0	67.31936383247375
49	0	OpenLiberty/ci.common	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	1	0	232.2265899181366
49	1	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	assertNull(util.removeSurroundingQuotes(null));	0	0	232.2265899181366
49	2	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertNotEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	0	0	232.2265899181366
49	3	/	DevUtilTest	testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",removeSurroundingQuotes(""STR""));"	0	0	232.2265899181366
