TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
0	0	NanoHttpd/nanohttpd	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.size()>0);	0	1	32.8149471282959
	1	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(responseBody,testServer.response.getBodyAsString());	0	1	32.8149471282959
	2	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[0],testServer.response.getStatusLine());	0	1	32.8149471282959
	3	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[1],""STR"");"	0	1	32.8149471282959
	4	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[3],""STR"");"	0	1	32.8149471282959
	5	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[4],""STR"");"	0	1	32.8149471282959
	6	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(responseBody,outputStream.toString());	0	1	32.8149471282959
	7	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(8,testServer.response.getLength());	0	1	32.8149471282959
	8	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(Status.OK,testServer.response.getStatus());	0	1	32.8149471282959
	9	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(HttpServerTest.URI,testServer.uri);	0	1	32.8149471282959
1	0	khennig/jpql-querybuilder	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.render());"	0	1	31.932740926742554
	1	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertNotEquals(""STR"",oc.render());"	0	1	31.932740926742554
	2	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertEquals(7,oc.render().length());	0	1	31.932740926742554
	3	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertTrue(!oc.render().isEmpty());	0	1	31.932740926742554
	4	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.render().toLowerCase());"	0	1	31.932740926742554
	5	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.render().toUpperCase());"	0	1	31.932740926742554
	6	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertNotNull(oc);	0	1	31.932740926742554
	7	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertNotNull(oc.render());	0	1	31.932740926742554
	8	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.toString());"	0	1	31.932740926742554
	9	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.getColumn());"	0	1	31.932740926742554
2	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotNull(results);	0	1	41.63111662864685
	1	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0	1	41.63111662864685
	2	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0	1	41.63111662864685
	3	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1	1	41.63111662864685
	4	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0	1	41.63111662864685
	5	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertSame(List.class,results.getClass());	0	1	41.63111662864685
	6	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.contains(results.get(0)));	0	1	41.63111662864685
	7	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotSame(results,results.get(0));	0	1	41.63111662864685
	8	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.get(0)instanceofODocument);	0	1	41.63111662864685
	9	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertFalse(results.get(0)instanceofString);	0	1	41.63111662864685
3	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(results.size(),2);	1	1	64.30001902580261
	1	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue(!results.isEmpty());	0	1	64.30001902580261
	2	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertNotNull(results);	0	1	64.30001902580261
	3	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertNotEquals(0,results.size());	0	1	64.30001902580261
	4	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertSame(ODocument.class,results.get(0).getClass());	0	1	64.30001902580261
	5	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	"assertTrue(""STR"");"	0	1	64.30001902580261
	6	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	"assertTrue(""STR"");"	0	1	64.30001902580261
	7	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	"assertEquals(""STR"",""STR"");"	0	1	64.30001902580261
	8	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	"assertEquals(""STR"",""STR"");"	0	1	64.30001902580261
	9	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	"assertFalse(""STR"");"	0	1	64.30001902580261
4	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotNull(db);	0	0	32.24895405769348
	1	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertNotEquals(0,""STR"");"	0	0	32.24895405769348
	2	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertEquals(26,""STR"");"	0	0	32.24895405769348
	3	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertTrue(""STR"");"	0	0	32.24895405769348
	4	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertEquals(0,""STR"");"	0	0	32.24895405769348
	5	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertNull(""STR"");"	0	0	32.24895405769348
	6	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertNotNull(""STR"");"	0	0	32.24895405769348
	7	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	"assertTrue(""STR"");"	0	0	32.24895405769348
	8	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotNull(db.getMetadata().getIndexManager().getIndexes());	0	0	32.24895405769348
	9	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertTrue(db.getClusters().size()>=db.getMetadata().getSchema().getClasses().size());	0	0	32.24895405769348
5	0	orientechnologies/orientdb	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertTrue(isHasContent());	0	1	62.662595987319946
	1	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertFalse(!isHasContent());	0	1	62.662595987319946
	2	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertEquals(true,isHasContent());	0	1	62.662595987319946
	3	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertNotEquals(false,isHasContent());	0	1	62.662595987319946
	4	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertTrue(isHasContent()==true);	0	1	62.662595987319946
	5	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertFalse(isHasContent()!=true);	0	1	62.662595987319946
	6	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertEquals(Boolean.TRUE,Boolean.valueOf(isHasContent()));	0	1	62.662595987319946
	7	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertNotEquals(Boolean.FALSE,Boolean.valueOf(isHasContent()));	0	1	62.662595987319946
6	0	orientechnologies/orientdb	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	assertNotNull(result);	0	1	35.80916118621826
	1	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	assertTrue(resultinstanceofList<?>);	0	1	35.80916118621826
	2	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	assertEquals(1,result.size());	0	1	35.80916118621826
	3	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	assertTrue(db.getTransaction().isActive());	0	1	35.80916118621826
	4	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	assertFalse(db.isClosed());	0	1	35.80916118621826
	5	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	"assertEquals(Double.valueOf(5.0),""STR"");"	0	1	35.80916118621826
	6	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	"assertNull(""STR"");"	0	1	35.80916118621826
	7	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	"assertFalse(""STR"");"	0	1	35.80916118621826
	8	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	"assertNotNull(""STR"");"	0	1	35.80916118621826
	9	/	OCustomSQLFunctionsTest	testAbsDouble	"assertTrue((Double)result.get(0).field(""STR"")==5.0);"	"assertEquals(1,""STR"");"	0	1	35.80916118621826
7	0	orientechnologies/orientdb	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	1	1	46.474366903305054
	1	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.getTransaction().isActive()!=isActive());	0	1	46.474366903305054
	2	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction().isActive()==isActive());	0	1	46.474366903305054
	3	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotNull(db);	0	1	46.474366903305054
	4	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNull(db.getTransaction());	0	1	46.474366903305054
	5	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotEquals(null,db.getTransaction());	0	1	46.474366903305054
	6	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertEquals(false,db.getTransaction().isActive());	0	1	46.474366903305054
	7	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertSame(db,db.getTransaction().getDatabase());	0	1	46.474366903305054
	8	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotSame(null,db.getTransaction());	0	1	46.474366903305054
	9	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.isClosed());	0	1	46.474366903305054
8	0	orientechnologies/orientdb	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotNull(resultSet);	0	1	64.19605112075806
	1	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertEquals(0,resultSet.stream().count());	0	1	64.19605112075806
	2	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertFalse(resultSet.hasNext());	0	1	64.19605112075806
	3	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNull(resultSet.next());	0	1	64.19605112075806
	4	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	"assertThrows(UnsupportedOperationException.class,""STR"");"	0	1	64.19605112075806
	5	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertFalse(resultSet.getMetadata().getColumnNames().isEmpty());	0	1	64.19605112075806
	6	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotEquals(0,resultSet.getMetadata().getColumnNames().size());	0	1	64.19605112075806
	7	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotNull(db);	0	1	64.19605112075806
	8	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotEquals(0,db.getClusters());	0	1	64.19605112075806
	9	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertEquals(8,db.getClusters());	0	1	64.19605112075806
9	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0	1	33.29168891906738
	1	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING},result);	0	1	33.29168891906738
	2	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(keyType,result[0]);	0	1	33.29168891906738
	3	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(propertyIndexByKey.equals(propertyIndexByValue));	0	1	33.29168891906738
	4	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.STRING,propertyIndexByKey.getType());	0	1	33.29168891906738
	5	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	"assertEquals(""STR"",propertyIndexByKey.getName());"	0	1	33.29168891906738
	6	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(propertyIndexByKey.areValuesUnique());	0	1	33.29168891906738
	7	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(propertyIndexByKey.isNullValuesIgnored());	0	1	33.29168891906738
	8	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(propertyIndexByKey.isAutomatic());	0	1	33.29168891906738
	9	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	"assertEquals(""STR"",propertyIndexByValue.getIndexType().toString());"	0	1	33.29168891906738
10	0	orientechnologies/orientdb	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(charSerializer);	0	1	86.40136766433716
	1	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(charSerializerinstanceofOCharSerializer);	0	1	86.40136766433716
	2	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	0	1	86.40136766433716
	3	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	0	1	86.40136766433716
	4	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	0	1	86.40136766433716
	5	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	0	1	86.40136766433716
	6	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(data.length<=FIELD_SIZE);	0	1	86.40136766433716
	7	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,charSerializer.deserializeNative(data,0));	0	1	86.40136766433716
	8	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,walChanges.getBinaryValue(buffer,serializationOffset).length);	0	1	86.40136766433716
	9	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset)instanceofbyte[]);	0	1	86.40136766433716
11	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotNull(fields);	0	1	54.91325378417969
	1	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	"assertTrue(""STR"");"	0	1	54.91325378417969
	2	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	"assertFalse(""STR"");"	0	1	54.91325378417969
	3	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertEquals(fields.size(),2);	1	1	54.91325378417969
	4	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotEquals(fields.size(),0);	0	1	54.91325378417969
	5	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertSame(fields.getClass(),LinkedList.class);	0	1	54.91325378417969
	6	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotSame(fields.getClass(),ArrayList.class);	0	1	54.91325378417969
	7	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertTrue(fieldsinstanceofList);	0	1	54.91325378417969
	8	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertFalse(fields.isEmpty());	0	1	54.91325378417969
	9	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	"assertNotEquals(""STR"",-1);"	0	1	54.91325378417969
12	0	orientechnologies/orientdb	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0	1	45.324339151382446
	1	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isTrackingChanges());	0	1	45.324339151382446
	2	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isModified());	0	1	45.324339151382446
	3	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(ORecordState.NEW,((ORecord)doc).getInternalStatus());	0	1	45.324339151382446
	4	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertNotEquals(ORecordState.DELETED,((ORecord)doc).getInternalStatus());	0	1	45.324339151382446
	5	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	0	1	45.324339151382446
	6	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isValid());	0	1	45.324339151382446
	7	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(ODocument.RECORD_TYPE,doc.getRecordType());	0	1	45.324339151382446
	8	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.isValid());	0	1	45.324339151382446
	9	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isBlob());	0	1	45.324339151382446
13	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	0	1	31.632592916488647
	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0	1	31.632592916488647
	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1	1	31.632592916488647
	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0	1	31.632592916488647
	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotSame(ODocument.class,qResult.getClass());	0	1	31.632592916488647
	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertSame(ODocument.class,qResult.get(0).getClass());	0	1	31.632592916488647
	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertEquals(""STR"",db.getName());"	0	1	31.632592916488647
	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	"assertNotEquals(""STR"",db.getName());"	0	1	31.632592916488647
	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(db.exists());	0	1	31.632592916488647
	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(db.exists(newORecordId()));	0	1	31.632592916488647
14	0	orientechnologies/orientdb	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertEquals(42,focalObj.getByteValue(pointer,64));	0	1	103.86744117736816
	1	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertArrayEquals(newbyte[]{42},newbyte[]{focalObj.getByteValue(pointer,64)});	0	1	103.86744117736816
	2	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertTrue(focalObj.getByteValue(pointer,64)>0);	0	1	103.86744117736816
	3	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertFalse(focalObj.getByteValue(pointer,64)<0);	0	1	103.86744117736816
	4	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotNull(focalObj.getByteValue(pointer,64));	0	1	103.86744117736816
	5	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNull(focalObj.getByteValue(pointer,65));	0	1	103.86744117736816
	6	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotSame(43,focalObj.getByteValue(pointer,64));	0	1	103.86744117736816
	7	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotEquals(null,focalObj.getByteValue(pointer,64));	0	1	103.86744117736816
	8	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotEquals(1,Integer.compare(41,focalObj.getByteValue(pointer,64)));	0	1	103.86744117736816
	9	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertEquals(-1,Integer.compare(41,focalObj.getByteValue(pointer,64)));	0	1	103.86744117736816
15	0	orientechnologies/orientdb	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertTrue(old`:This);	0	1	25.036421060562134
	1	/	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertTrue(docinstanceofODocument`:This);	0	1	25.036421060562134
	2	/	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNotNull(json);	0	1	25.036421060562134
	3	/	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertTrue(doc1instanceofODocument);	0	1	25.036421060562134
	4	/	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	25.036421060562134
	5	/	OJsonWithCustom	testCustomField	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	assertNotEquals(doc,doc1);	0	1	25.036421060562134
16	0	orientechnologies/orientdb	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertNotNull(loadedRonnie);	0	1	72.39128828048706
	1	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertEquals(savedRonnie.getId(),loadedRonnie.getId());	0	1	72.39128828048706
	2	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertEquals(ronnie.getName(),loadedRonnie.getName());	0	1	72.39128828048706
	3	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertArrayEquals(ronniePicture,loadedRonnie.getImageData());	0	1	72.39128828048706
	4	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertTrue(databaseTx.exists(loadedRonnie.getId()));	0	1	72.39128828048706
	5	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertFalse(ronnie.equals(savedRonnie));	0	1	72.39128828048706
	6	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertNotEquals(ronnie.hashCode(),savedRonnie.hashCode());	0	1	72.39128828048706
	7	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	"assertThrows(ODatabaseException.class,""STR"");"	0	1	72.39128828048706
	8	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertThrows(IllegalArgumentException.class,()->databaseTx.load(null));	0	1	72.39128828048706
	9	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertTrue(databaseTx.isClosed());	0	1	72.39128828048706
17	0	orientechnologies/orientdb	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(focalMethod());	0	1	26.05259609222412
	1	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(focalMethod());	0	1	26.05259609222412
	2	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(focalMethod());	0	1	26.05259609222412
	3	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(false,focalMethod());	0	1	26.05259609222412
	4	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(Boolean.TRUE,focalMethod());	0	1	26.05259609222412
	5	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(2,focalMethod()?.toString()?.length());	0	1	26.05259609222412
	6	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertSame(2L,focalMethod()?.longValue());	0	1	26.05259609222412
	7	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNull(focalMethod()?.orElse(null));	0	1	26.05259609222412
	8	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertThrows(Exception.class,()->focalMethod());	0	1	26.05259609222412
	9	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertTimeout(Duration.ofMillis(100),()->focalMethod());	0	1	26.05259609222412
18	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	30.88596200942993
	1	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0	1	30.88596200942993
	2	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result);	0	1	30.88596200942993
	3	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(3,result.getMetadata().getPropertyNames().size());	0	1	30.88596200942993
	4	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(!result.hasNext());	0	1	30.88596200942993
	5	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getMetadata().getPropertyNames());	0	1	30.88596200942993
	6	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getColumnNames());	0	1	30.88596200942993
	7	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	"assertEquals(""STR"",result.getColumnNames().get(0));"	0	1	30.88596200942993
	8	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getPropertyNames());	0	1	30.88596200942993
	9	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getExecutionPlan());	0	1	30.88596200942993
19	0	orientechnologies/orientdb	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotNull(res);	0	1	51.06964302062988
	1	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1	1	51.06964302062988
	2	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0	1	51.06964302062988
	3	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0	1	51.06964302062988
	4	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNull(configurator.getError());	0	1	51.06964302062988
	5	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0	1	51.06964302062988
	6	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,configurator);	0	1	51.06964302062988
	7	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,proc);	0	1	51.06964302062988
	8	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	"assertEquals(""STR"",res.get(0).fieldNames().get(0));"	0	1	51.06964302062988
	9	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,res.get(0));	0	1	51.06964302062988
20	0	PeterisP/morphology	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0	1	35.908037185668945
	1	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0	1	35.908037185668945
	2	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1	1	35.908037185668945
	3	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0	1	35.908037185668945
	4	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.containsAll(tokens));	0	1	35.908037185668945
	5	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(tokens.getFirst()));	0	1	35.908037185668945
	6	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(tokens.getFirst()));	0	1	35.908037185668945
	7	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.offer(tokens.getLast()));	0	1	35.908037185668945
	8	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(null,tokens.poll());	0	1	35.908037185668945
	9	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(null,tokens.peekFirst());	0	1	35.908037185668945
21	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(isRecognized());	0	1	42.182600021362305
	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(!isRecognized());	0	1	42.182600021362305
	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	0	1	42.182600021362305
	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk);	0	1	42.182600021362305
	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.isEmpty());	0	1	42.182600021362305
	5	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(!jāmāk.isEmpty());	0	1	42.182600021362305
	6	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(1,jāmāk.size());	0	1	42.182600021362305
	7	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(jāmāk.size(),jāmāk.stream().unordered().parallel().distinct().count());	0	1	42.182600021362305
	8	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	"assertSame(jāmāk,""STR"");"	0	1	42.182600021362305
	9	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	"assertNotSame(jāmāk,""STR"");"	0	1	42.182600021362305
22	0	PeterisP/morphology	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	67.87866592407227
	1	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.isRecognized());	0	1	67.87866592407227
	2	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotNull(locītājs);	0	1	67.87866592407227
	3	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs!=null);	0	1	67.87866592407227
	4	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getRulesLocation());	0	1	67.87866592407227
	5	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getVersion());	0	1	67.87866592407227
	6	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs.getMetadata().size()>0);	0	1	67.87866592407227
	7	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.getMetadata().isEmpty());	0	1	67.87866592407227
	8	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getMetadata());	0	1	67.87866592407227
	9	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.isStoplistLoaded());	0	1	67.87866592407227
23	0	ExpediaGroup/beeju	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(warehouseDir);	0	1	52.39256501197815
	1	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(Files.exists(warehouseDir));	0	1	52.39256501197815
	2	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(Files.isDirectory(warehouseDir));	0	1	52.39256501197815
	3	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	"assertEquals(""STR"",warehouseDir.toString());"	0	1	52.39256501197815
	4	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	"assertNotEquals(""STR"",warehouseDir.toString());"	0	1	52.39256501197815
	5	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertSame(Path.class,warehouseDir.getClass());	0	1	52.39256501197815
	6	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(warehouseDir.subpath(0,1));	0	1	52.39256501197815
	7	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	"assertEquals(""STR"",warehouseDir.getName(0).toString());"	0	1	52.39256501197815
	8	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	"assertEquals(""STR"",warehouseDir.getFileName().toString());"	0	1	52.39256501197815
	9	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(warehouseDir.getParent());	0	1	52.39256501197815
24	0	OpenLiberty/ci.common	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1	1	78.61182904243469
	1	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isDirectory());	0	1	78.61182904243469
	2	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(targetFile,""STR"");"	0	1	78.61182904243469
	3	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(targetFile.getParentFile(),""STR"");"	0	1	78.61182904243469
	4	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.lastModified());	0	1	78.61182904243469
	5	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isHidden());	0	1	78.61182904243469
	6	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertEquals(""STR"",configFile.getName());"	0	1	78.61182904243469
	7	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(configFile.isDirectory());	0	1	78.61182904243469
	8	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertArrayEquals(""STR"",FileUtils.readFileToByteArray(configFile));"	0	1	78.61182904243469
	9	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	"assertNotNull(""STR"");"	0	1	78.61182904243469
25	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertTrue(""STR"");"	0	0	42.74917912483215
	1	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	2	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	3	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	4	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertTrue(""STR"");"	0	0	42.74917912483215
	5	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	6	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	7	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertTrue(""STR"");"	0	0	42.74917912483215
	8	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
	9	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	"assertFalse(""STR"");"	0	0	42.74917912483215
26	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertEquals(list.getResources(),Collections.emptyList());	0	1	33.48356604576111
	1	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertNull(list.getResources());	0	1	33.48356604576111
	2	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertNotNull(list.getResources());	0	1	33.48356604576111
	3	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertTrue(list.getResources().isEmpty());	0	1	33.48356604576111
	4	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertNotEquals(list.getResources(),null);	0	1	33.48356604576111
	5	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertSame(list.getResources(),list.getResources());	0	1	33.48356604576111
	6	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertNotSame(list.getResources(),newArrayList<>());	0	1	33.48356604576111
	7	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertTrue(list.getStartIndex()==0);	0	1	33.48356604576111
	8	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertFalse(list.getStartIndex()==1);	0	1	33.48356604576111
	9	/	SpecExamplesSerializationTest	testAnnotationListPage	"assertSerializationEqualsSpec(list,""STR"");"	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	33.48356604576111
27	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotNull(mapper);	0	1	45.16583704948425
	1	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertTrue(mapperinstanceofIiifObjectMapper);	0	1	45.16583704948425
	2	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertTrue(mapper.equals(mapper));	0	1	45.16583704948425
	3	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(resource,getResource());	0	1	45.16583704948425
	4	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotEquals(null,mapper);	0	1	45.16583704948425
	5	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(this,this);	0	1	45.16583704948425
	6	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotEquals(0,mapper.hashCode());	0	1	45.16583704948425
	7	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertFalse(mapper.equals(null));	0	1	45.16583704948425
	8	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertEquals(IiifObjectMapper.class,mapper.getClass());	0	1	45.16583704948425
	9	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(mapper,mapper);	0	1	45.16583704948425
28	0	nidi3/raml-loader	GithubTest	publicGithub	assertRamlStart(in);	assertNotNull(in);	0	1	36.12350416183472
	1	/	GithubTest	publicGithub	assertRamlStart(in);	assertEquals(-1,in.available());	0	1	36.12350416183472
	2	/	GithubTest	publicGithub	assertRamlStart(in);	assertFalse(in.read()==-1);	0	1	36.12350416183472
	3	/	GithubTest	publicGithub	assertRamlStart(in);	assertNotEquals(0,in.read());	0	1	36.12350416183472
	4	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.skip(10)==10);	0	1	36.12350416183472
	5	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.reset()==0);	0	1	36.12350416183472
	6	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.mark(0)==0);	0	1	36.12350416183472
	7	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.markSupported());	0	1	36.12350416183472
	8	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.available()==0);	0	1	36.12350416183472
	9	/	GithubTest	publicGithub	assertRamlStart(in);	assertFalse(in.markSupported());	0	1	36.12350416183472
29	0	arnohaase/a-foundation	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertTrue(""STR"");"	0	1	27.7254900932312
	1	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertFalse(""STR"");"	0	1	27.7254900932312
	2	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertTrue(true);	0	1	27.7254900932312
	3	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertFalse(false);	0	1	27.7254900932312
	4	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertEquals(""STR"",""STR"");"	0	1	27.7254900932312
	5	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNull(null);	0	1	27.7254900932312
	6	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertNotNull(""STR"");"	0	1	27.7254900932312
	7	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNotSame(5,3);	0	1	27.7254900932312
	8	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertNotEquals(2,""STR"");"	0	1	27.7254900932312
	9	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"assertSame(""STR"",""STR"");"	0	1	27.7254900932312
30	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened);	0	1	34.398841857910156
	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(null,flattened);	0	1	34.398841857910156
	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	0	1	34.398841857910156
	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(5,flattened.size());	1	1	34.398841857910156
	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(6,flattened.size());	0	1	34.398841857910156
	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertTrue(""STR"");"	0	1	34.398841857910156
	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertFalse(""STR"");"	0	1	34.398841857910156
	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	"assertTrue(""STR"");"	0	1	34.398841857910156
	8	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(set.isEmpty());	0	1	34.398841857910156
	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(2,set.iterator().next().size());	0	1	34.398841857910156
31	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertEquals(1000,invalidHandshakeException.getCloseCode());	0	1	38.44886136054993
	1	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(999,invalidHandshakeException.getCloseCode());	0	1	38.44886136054993
	2	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotEquals(1001,invalidHandshakeException.getCloseCode());	0	1	38.44886136054993
	3	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertTrue(invalidHandshakeException.getCloseCode()>=1000);	0	1	38.44886136054993
	4	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertFalse(invalidHandshakeException.getCloseCode()<1000);	0	1	38.44886136054993
	5	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNull(invalidHandshakeException.getMessage());	0	1	38.44886136054993
	6	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotNull(invalidHandshakeException);	0	1	38.44886136054993
	7	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertSame(InvalidHandshakeException.class,invalidHandshakeException.getClass());	0	1	38.44886136054993
	8	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertNotSame(IOException.class,invalidHandshakeException.getClass());	0	1	38.44886136054993
	9	/	InvalidHandshakeExceptionTest	testConstructor	"assertEquals(""STR"",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());"	assertArrayEquals(newint[]{invalidHandshakeException.getCloseCode()},newint[]{1000});	0	1	38.44886136054993
32	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(defaultExtension);	0	1	73.92528486251831
	1	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(binaryFrame);	0	1	73.92528486251831
	2	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertTrue(binaryFrame.getPayload()!=null);	0	1	73.92528486251831
	3	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertEquals(4,binaryFrame.getPayload().array().length);	0	1	73.92528486251831
	4	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertArrayEquals(""STR"",binaryFrame.getPayload().array());"	0	1	73.92528486251831
	5	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(defaultExtension.encodeFrame(binaryFrame));	0	1	73.92528486251831
	6	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertTrue(defaultExtension.encodeFrame(binaryFrame).getPayloadData()!=null);	0	1	73.92528486251831
	7	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertEquals(4,defaultExtension.encodeFrame(binaryFrame).getPayloadData().array().length);	0	1	73.92528486251831
	8	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertArrayEquals(""STR"",defaultExtension.encodeFrame(binaryFrame).getPayloadData().array());"	0	1	73.92528486251831
	9	/	DefaultExtensionTest	testEncodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(defaultExtension.encodeFrame(binaryFrame).getPayloadData());	0	1	73.92528486251831
33	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0	1	39.93137192726135
	1	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater()instanceofDeflater);	0	1	39.93137192726135
	2	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(Deflater.NO_COMPRESSION,deflateExtension.getDeflater().getLevel());	0	1	39.93137192726135
	3	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(null,deflateExtension.getDeflater());	0	1	39.93137192726135
	4	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().isFinished());	0	1	39.93137192726135
	5	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(0,deflateExtension.getDeflater().getBytesRead());	0	1	39.93137192726135
	6	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().needsInput());	0	1	39.93137192726135
	7	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(0,deflateExtension.getDeflater().getBytesWritten());	0	1	39.93137192726135
	8	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().needsInput());	0	1	39.93137192726135
	9	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotSame(null,deflateExtension.getDeflater().getBytesWritten());	0	1	39.93137192726135
34	0	nidi3/graphviz-java	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"assertEquals(""STR"",serialized());"	0	1	30.673928022384644
	1	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"assertNotEquals(""STR"",serialized());"	0	1	30.673928022384644
	2	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"assertNotSame(""STR"",serialized());"	0	1	30.673928022384644
	3	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"assertEquals(quoted().substring(0,3),""STR"");"	0	1	30.673928022384644
	4	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	assertEquals(quoted().length(),serialized().length()-2);	0	1	30.673928022384644
	5	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	assertNotSame(String.valueOf(html),serialized());	0	1	30.673928022384644
	6	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"assertNotEquals(serialized(),""STR"");"	0	1	30.673928022384644
	7	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	assertSame(quoted(),quoted());	0	1	30.673928022384644
	8	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	assertNotNull(quoted());	0	1	30.673928022384644
	9	/	SimpleLabelTest	simple	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	assertNotSame(html,false);	0	1	30.673928022384644
35	0	nidi3/graphviz-java	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertNotNull(attrs());	0	1	37.88186001777649
	1	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertNotNull(attrs((Attributes<?extendsFor>)null));	0	1	37.88186001777649
	2	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertEquals(attrs(),attrs((Attributes<?extendsFor>)null));	0	1	37.88186001777649
	3	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertTrue(attrs()instanceofAttributes);	0	1	37.88186001777649
	4	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertFalse(attrs()==attrs((Attributes<?extendsFor>)null));	0	1	37.88186001777649
	5	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertArrayEquals(newAttributes[]{attrs((Attributes<?extendsFor>)null)},newAttributes[]{attrs((Attributes<?extendsFor>)null)});	0	1	37.88186001777649
	6	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertLinesMatch(""STR"",""STR"");"	0	1	37.88186001777649
	7	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertIterableEquals(Collections.singleton(attrs((Attributes<?extendsFor>)null)),Collections.singletonList(attrs((Attributes<?extendsFor>)null)));	0	1	37.88186001777649
	8	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertSame(attrs(),attrs());	0	1	37.88186001777649
	9	/	StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertThat(attrs(),is(notNullValue()));	0	1	37.88186001777649
36	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotNull(a);	0	1	71.0768768787384
	1	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertTrue(ainstanceofSvgSizeAnalyzer);	0	1	71.0768768787384
	2	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertEquals(a.getWidth(),SvgSizeAnalyzer.svg(SVG).getWidth());	0	1	71.0768768787384
	3	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotEquals(a.getHeight(),SvgSizeAnalyzer.svg(SVG2).getHeight());	0	1	71.0768768787384
	4	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	"assertTrue(""STR"");"	0	1	71.0768768787384
	5	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertEquals(15.0,SvgSizeAnalyzer.svg(SVG).getAspectRatio());	0	1	71.0768768787384
	6	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotEquals(0,a.getWidth());	0	1	71.0768768787384
	7	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertFalse(a.getHeight()<0);	0	1	71.0768768787384
	8	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertSame(SVG,SvgSizeAnalyzer.svg(SVG).getSvg());	0	1	71.0768768787384
	9	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotSame(a,SvgSizeAnalyzer.svg(a.getSvg()));	0	1	71.0768768787384
37	0	nidi3/graphviz-java	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertTrue(true);	0	1	53.77737498283386
	1	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertFalse(false);	0	1	53.77737498283386
	2	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertEquals(2,1+1);	0	1	53.77737498283386
	3	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertNull(null);	0	1	53.77737498283386
	4	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertNotNull(newObject());	0	1	53.77737498283386
	5	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertSame(obj1,obj1);	0	1	53.77737498283386
	6	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertNotSame(obj1,obj2);	0	1	53.77737498283386
	7	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	53.77737498283386
	8	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertNotEquals(1,2);	0	1	53.77737498283386
	9	/	LabelTest	locate	"assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	assertNotEquals(obj1,obj2);	0	1	53.77737498283386
38	0	nidi3/graphviz-java	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	assertNotNull(s);	0	1	61.82988715171814
	1	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertTrue(""STR"");"	0	1	61.82988715171814
	2	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertTrue(""STR"");"	0	1	61.82988715171814
	3	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertFalse(""STR"");"	0	1	61.82988715171814
	4	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	assertArrayEquals(expectedArray,actualArray);	0	1	61.82988715171814
	5	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertTrue(""STR"");"	0	1	61.82988715171814
	6	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertNotEquals(""STR"",s);"	0	1	61.82988715171814
	7	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertTrue(""STR"");"	0	1	61.82988715171814
	8	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertFalse(""STR"");"	0	1	61.82988715171814
	9	/	OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	assertFalse(s.isEmpty());	0	1	61.82988715171814
39	0	nidi3/graphviz-java	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	assertNotNull(g);	0	1	32.869476318359375
	1	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"assertTrue(""STR"");"	0	1	32.869476318359375
	2	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"assertFalse(""STR"");"	0	1	32.869476318359375
	3	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	assertEquals(g.nodeAttr().size(),1);	0	1	32.869476318359375
	4	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	assertFalse(g.nodeAttr().isEmpty());	0	1	32.869476318359375
	5	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"assertNotEquals(""STR"",""STR"");"	0	1	32.869476318359375
	6	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	assertTrue(g.nodeAttr().entrySet().stream().allMatch(e->e.getKey().getClass().equals(String.class)));	0	1	32.869476318359375
	7	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"assertEquals(""STR"",0);"	0	1	32.869476318359375
	8	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"assertEquals(g.nodeAttr().values().toArray(),""STR"");"	0	1	32.869476318359375
	9	/	SerializerTest	nodeAttr	"assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	assertSame(g,g.nodeAttr());	0	1	32.869476318359375
40	0	nidi3/graphviz-java	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertNotNull(<FOCAL>);	0	1	64.67087316513062
	1	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertTrue(<FOCAL>instanceofAttributes);	0	1	64.67087316513062
	2	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertEquals(0,<FOCAL>.size());	0	1	64.67087316513062
	3	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertNotEquals(5,<FOCAL>.size());	0	1	64.67087316513062
	4	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertSame(<FOCAL>,<FOCAL>);	0	1	64.67087316513062
	5	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertFalse(<FOCAL>instanceofString);	0	1	64.67087316513062
	6	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertNotSame(<FOCAL>,newObject());	0	1	64.67087316513062
	7	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"assertEquals(""STR"",<FOCAL>);"	0	1	64.67087316513062
	8	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"assertNotEquals(""STR"",<FOCAL>);"	0	1	64.67087316513062
	9	/	ArrowTest	dir	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	assertTrue(<FOCAL>instanceofList<?>);	0	1	64.67087316513062
41	0	nidi3/graphviz-java	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertNotNull(pars);	0	1	57.56878995895386
	1	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertTrue(pars.messages.isEmpty());	0	1	57.56878995895386
	2	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertEquals(0,pars.messages.size());	0	1	57.56878995895386
	3	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertNotNull(pars.getConfig());	0	1	57.56878995895386
	4	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertSame(MutableGraph.class,pars.getClass());	0	1	57.56878995895386
	5	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertTrue(pars.isValid());	0	1	57.56878995895386
	6	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertFalse(pars.isReadOnly());	0	1	57.56878995895386
	7	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertEquals(5,pars.getValues().size());	0	1	57.56878995895386
	8	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	assertNotEquals(10,pars.getValues().size());	0	1	57.56878995895386
	9	/	ParserTest	inheritDirected	"assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	"assertEquals(""STR"",pars.getStringListValue().get(0));"	0	1	57.56878995895386
42	0	adlnet/jxapi	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement);	0	1	31.274903059005737
	1	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	0	1	31.274903059005737
	2	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(ID,statement.getId());	0	1	31.274903059005737
	3	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(MBOX,statement.getActor().getMbox());	0	1	31.274903059005737
	4	/	StatementTest	testToString	assertNotNull(actual);	"assertEquals(""STR"",statement.getVersion());"	0	1	31.274903059005737
	5	/	StatementTest	testToString	assertNotNull(actual);	"assertEquals(""STR"",statement.getVerb().getId());"	0	1	31.274903059005737
	6	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getObject().getId().contains(TEST_IRI));	0	1	31.274903059005737
	7	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getObject());	0	1	31.274903059005737
	8	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getAttachments().contains(expected));	0	1	31.274903059005737
	9	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(expectedList.size(),statement.getAttachments().size());	0	1	31.274903059005737
43	0	adlnet/jxapi	ContextTest	testGetTeam	assertNotNull(actual);	assertNotNull(actual);	1	1	61.43735480308533
	1	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(group,actual);	0	1	61.43735480308533
	2	/	ContextTest	testGetTeam	assertNotNull(actual);	assertSame(c.getTeam(),actual);	0	1	61.43735480308533
	3	/	ContextTest	testGetTeam	assertNotNull(actual);	assertTrue(actual.getMembers().contains(expected));	0	1	61.43735480308533
	4	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(expected.getName(),actual.getMembers().get(0).getName());	0	1	61.43735480308533
	5	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(expected.getEmail(),actual.getMembers().get(0).getEmail());	0	1	61.43735480308533
	6	/	ContextTest	testGetTeam	assertNotNull(actual);	assertTrue(actual.getMembers().size()==1);	0	1	61.43735480308533
	7	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(1,actual.getMembers().size());	0	1	61.43735480308533
	8	/	ContextTest	testGetTeam	assertNotNull(actual);	assertFalse(actual.getMembers().isEmpty());	0	1	61.43735480308533
	9	/	ContextTest	testGetTeam	assertNotNull(actual);	assertArrayEquals(group.getMembers().toArray(),actual.getMembers().toArray());	0	1	61.43735480308533
44	0	ToastShaman/dropwizard-auth-jwt	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertNull(cache.getIfPresent(null));	0	1	30.049890995025635
	1	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertNotNull(cache.getIfPresent(context.getJwt()));	0	1	30.049890995025635
	2	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertTrue(principal.isPresent());	0	1	30.049890995025635
	3	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertFalse(principal.isPresent());	0	1	30.049890995025635
	4	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertNotEquals(0,cacheMisses.getCount());	0	1	30.049890995025635
	5	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertEquals(0,cacheMisses.getCount());	0	1	30.049890995025635
	6	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertTrue(timer.getElapsedTime(TimeUnit.MILLISECONDS)>0);	0	1	30.049890995025635
	7	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertNotEquals(0,gets.getCount());	0	1	30.049890995025635
	8	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertEquals(1,gets.getCount());	0	1	30.049890995025635
	9	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	"assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	assertTrue(cache.getIfPresent(context.getJwt()).getValue().isPresent());	0	1	30.049890995025635
45	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",text.substring(text.length()-2));"	0	1	31.978793144226074
	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertFalse(text.toString().isEmpty());	0	1	31.978793144226074
	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertTrue(""STR"");"	0	1	31.978793144226074
	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertTrue(""STR"");"	0	1	31.978793144226074
	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertFalse(""STR"");"	0	1	31.978793144226074
	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotEquals(null,text);	0	1	31.978793144226074
	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotNull(text);	0	1	31.978793144226074
	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",""STR"");"	0	1	31.978793144226074
	8	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertNotEquals(""STR"",text.charAt(0));"	0	1	31.978793144226074
	9	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",txt);"	0	1	31.978793144226074
46	0	trautonen/coveralls-maven-plugin	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertNotNull(client);	0	1	57.3658230304718
	1	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertNotNull(client.execute(newHttpGet(TARGET_URL)).getEntity());	0	1	57.3658230304718
	2	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertNotNull(client.getParams());	0	1	57.3658230304718
	3	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertTrue(client.getParams().getParameter(ClientPNames.MAX_REDIRECTS)>0);	0	1	57.3658230304718
	4	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertEquals(HttpStatus.SC_OK,client.execute(newHttpGet(TARGET_URL)).getStatusLine().getStatusCode());	0	1	57.3658230304718
	5	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertEquals(""STR"",proxy.getProtocol());"	0	1	57.3658230304718
	6	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertEquals(""STR"",proxy.getHost());"	0	1	57.3658230304718
	7	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertEquals(PROXY_PORT,proxy.getPort());	0	1	57.3658230304718
	8	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertEquals(""STR"",proxy.getNonProxyHosts());"	0	1	57.3658230304718
	9	/	HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertNotNull(rcb);	0	1	57.3658230304718
47	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(env);	0	1	78.06656193733215
	1	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(getCiName());	0	1	78.06656193733215
	2	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(env.keySet().size()==3);	0	1	78.06656193733215
	3	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNull(getCiName());	0	1	78.06656193733215
	4	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertEquals(env.hashCode(),env.hashCode());	0	1	78.06656193733215
	5	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(env.entrySet().containsAll(env.entrySet()));	0	1	78.06656193733215
	6	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertEquals(env.toString(),env.toString());	0	1	78.06656193733215
	7	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotEquals(env,newObject());	0	1	78.06656193733215
	8	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotEquals(env,newHashMap<>()));	0	1	78.06656193733215
	9	/	CiEnvironmentTest	recognises_bamboo	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertFalse(env.isEmpty());	0	1	78.06656193733215
48	0	jcodec/jcodec	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotNull(actual);	0	1	60.16674304008484
	1	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actualinstanceofNALUnit);	0	1	60.16674304008484
	2	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(actual.getType(),type);	0	1	60.16674304008484
	3	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertEquals(actual.getNalRefIdc(),nal_ref_idc);	0	1	60.16674304008484
	4	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getNalRefIdc()<=3);	0	1	60.16674304008484
	5	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertArrayEquals(newbyte[]{(byte)0x7C,(byte)0x81});	0	1	60.16674304008484
	6	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(actual,null);	0	1	60.16674304008484
	7	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertFalse(actual.isForbidden());	0	1	60.16674304008484
	8	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertTrue(actual.getType()==type);	0	1	60.16674304008484
	9	/	NalUnitTest	testCanReadNalUnitFromValidNal	"assertEquals(""STR"",3,actual.nal_ref_idc);"	assertNotEquals(actual.getNalRefIdc(),4);	0	1	60.16674304008484
49	0	amlinv/stat-collection-utils	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo);	0	1	62.15155816078186
	1	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1	1	62.15155816078186
	2	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0	1	62.15155816078186
	3	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertArrayEquals(setters.keySet().toArray(),objectQueryInfo.getAttributeNames());	0	1	62.15155816078186
	4	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(setters.size(),objectQueryInfo.getAttributeNames().length);	0	1	62.15155816078186
	5	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(setters.keySet().containsAll(Arrays.asList(objectQueryInfo.getAttributeNames())));	0	1	62.15155816078186
	6	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0	1	62.15155816078186
	7	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(setters,objectQueryInfo.getAttributes());	0	1	62.15155816078186
	8	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(oname,objectQueryInfo.getObjectName());	0	1	62.15155816078186
	9	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotEquals(oname,null);	0	1	62.15155816078186
