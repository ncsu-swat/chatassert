TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(1, manager.countableLock.countLocks.get());	131.5342938899994	0	0	1	0	0
0	1	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(reg_token_collectAuthConfidentialDisAttrpFirstgenAttack.clientEntity);	210.07038187980652	0	0	1	0	0
0	2	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(lock);	110.94436502456665	0	0	1	0	0
0	3	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.isHeldByCurrentThread());	148.91161489486694	0	0	1	0	0
0	4	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.checkExclusiveLockExist(null));	77.30454301834106	0	0	1	0	0
0	5	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(2, countableLock.countLocks.get());	125.93149209022522	0	0	1	0	0
0	6	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(100, countableLock.softLimit.get() // Added ) {);	116.28351402282715	0	0	1	0	0
0	7	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(2, initCountLock(Mockito.doNothing().when(acquiredLock)));	117.91220498085022	0	0	1	0	0
0	8	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(2, manager.countableLock.countLocks.get());	98.05939388275146	0	0	1	0	0
0	9	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.checkExclusiveLockExist(null));	391.23822593688965	0	0	1	0	0
0	10	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(-1, countableLock.hardLimit.get());	118.10339188575745	0	0	1	0	0
0	11	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock instanceof ReentrantLock` will generate this code: );	114.68752789497375	0	0	1	0	0
0	12	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	"assertNotEquals("", inExpected, "").apply(operationThisOnLock)>length);"	128.9022831916809	0	0	1	0	0
0	13	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.sharedLockExists(null));	109.3974997997284	0	0	1	0	0
0	14	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0, manager.getLockCount() );	92.69788908958435	0	0	1	0	0
0	15	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(lockTryResult);	96.67803287506104	0	0	1	0	0
0	16	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.isLocked());	105.38300704956055	0	0	1	0	0
0	18	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(expectedSize, lockManager.countableLock.countLocks.get());	64.74353313446045	0	0	1	0	0
0	19	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.isFair());	60.12282609939575	0	0	1	0	0
0	20	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(manager.acquireSharedLock(null));	101.25388789176941	0	0	1	0	0
0	21	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(manager.acquireExclusiveLock(null));	126.44926404953003	0	0	1	0	0
0	22	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0 , manager.getLockCount());	116.58583903312683	0	0	1	0	0
0	23	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(lock.isFair());	100.69474482536316	0	0	1	0	0
0	24	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(result);	138.04913306236267	0	0	1	0	0
0	25	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	"assertNull(getCountFor(""6f23ace56145582c83d39db112f000bcc2f056f73b9961ea1ecdaeae10551559660f54910000800:vanessatottoliakyclevjesurobacallaasjeipiderjelemalleajohnsocasconaajoogermanowordrukwlansdedooptreptaunenunitatesnl"")  );"	109.3715889453888	0	0	1	0	0
0	26	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(2, ((OOneEntryPerKeyLockManager<String>.CountableLock)lock).countLocks().get());	99.57571816444397	0	0	1	0	0
0	27	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.checkSharedLockExist(null));	109.9338948726654	0	0	1	0	0
0	28	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(acquiredLock);	75.4124059677124	0	0	1	0	0
0	29	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.checkSharedLockExist(null));	72.64223408699036	0	0	1	0	0
0	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(4, qResult.size());	71.03198409080505	0	0	1	0	0
0	1	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(!qResult.isEmpty());	62.30863904953003	0	0	1	0	0
0	2	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult);	104.03658509254456	0	0	1	0	0
0	3	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	"assertThat(qResult, hasItem(hasProperty(""name"", equalTo(""b""))));"	88.72160220146179	0	0	1	0	0
0	4	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(0, qResult.size());	107.4532368183136	0	0	1	0	0
0	5	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertFalse(qResult.isEmpty());	73.85441517829895	0	0	1	0	0
0	6	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	"assertEquals(Arrays.asList(""b"", ""c""), names);"	67.32660412788391	0	0	1	0	0
0	7	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(6, qResult2.size()));	108.81144499778748	0	0	1	0	0
0	8	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(10, customObj.multiplyByTwo(5));	106.5296082496643	0	0	1	0	0
0	9	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(5.0, customObj.divide(10.0, 2.0));	62.31524300575256	0	0	1	0	0
0	10	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(qResult.contains(expectedDoc));	52.49653697013855	0	0	1	0	0
0	11	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertFalse(!qResult.isEmpty());	57.169832944869995	0	0	1	0	0
0	12	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult, qResult2);	94.04496932029724	0	0	1	0	0
0	13	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	"assertFalse(""a"".equalsIgnoreCase(name));"	97.27223587036133	0	0	1	0	0
0	14	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	"assertEquals(""expectedVal"", actualVal);"	55.678791999816895	0	0	1	0	0
0	15	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertArrayEquals(expectedArray, resultArray);	56.40193319320679	0	0	1	0	0
0	16	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(expectedList.stream().tolowerCase(Locale.ROOT).containsAll(qResult));	120.96356201171875	0	0	1	0	0
0	17	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(expectedCount, actualCount);	96.62024283409119	0	0	1	0	0
0	18	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(expectedValue, actualValue);	61.55531978607178	0	0	1	0	0
0	19	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(4, qResult.size());	100.30163598060608	0	0	1	0	0
0	20	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(expectedMessage.contains(actualMessage));	114.18613982200623	0	0	1	0	0
0	21	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(new HashSet<ODocument>(expectedResult), new HashSet<ODocument>(qResult));	74.54055404663086	0	0	1	0	0
0	22	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(26, qResult.size());	74.64917469024658	0	0	1	0	0
0	23	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult);	74.21870517730713	0	0	1	0	0
0	24	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult2.size(), qResult.size());	82.2946228981018	0	0	1	0	0
0	25	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(notExpected, actual);	50.99526000022888	0	0	1	0	0
0	26	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(expectedValue, actualValue);	44.855632066726685	0	0	1	0	0
0	27	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(EXPECTED_VALUE, ACTUAL_VALUE`);	94.24819588661194	0	0	1	0	0
0	28	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(expectedList.stream().allMatch(result -> !qResult.contains(result)));	70.00202298164368	0	0	1	0	0
0	29	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotEquals(1, qResult.size());	211.23127913475037	0	0	1	0	0
0	0	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertEquals(1, database.query(new OSQLSynchQuery<Object>(""SELECT * FROM Person"")).size());"	32.44512987136841	0	0	1	0	0
0	1	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertTrue(database.getMetadata().getSchema().existsClass(""Person""));"	18.60851788520813	0	0	1	0	0
0	2	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(resultSet.hasNext());	28.89656901359558	0	0	1	0	0
0	3	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertEquals(1, database.command(new OCommandSQL(""SELECT COUNT(*) FROM Person"")).execute());"	19.236763954162598	0	0	1	0	0
0	4	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertThrows(IllegalArgumentException.class,);	51.79654908180237	0	0	1	0	0
0	5	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertNotNull(database.getMetadata().getSchema().getClass(""Person""));"	57.05772686004639	0	0	1	0	0
0	6	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertFalse(database.getMetadata().getSchema().existsClass(""Person""));"	47.87377619743347	0	0	1	0	0
0	7	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(result.streamFromSource(emptyMetadata.snapshot()).count());	72.17360281944275	0	0	1	0	0
0	8	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(mainResFBO);	239.87958788871765	0	0	1	0	0
0	9	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertEquals(1, database.countClass(""Person""));"	18.60896110534668	0	0	1	0	0
0	10	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(res.hasNext());	37.64851713180542	0	0	1	0	0
0	11	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(database.exists());	21.007030725479126	0	0	1	0	0
0	12	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(((ODatabaseDocumentInternal) database).getStorage().isRemote());	24.031616926193237	0	0	1	0	0
0	13	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(1,resultSet.getTotalCount().intValue());	27.190738916397095	0	0	1	0	0
0	14	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(records.hasNext());	48.56351613998413	0	0	1	0	0
0	15	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(runner.getResults().get(0).getQueryStats().getExecutionTimeMs().longValue()>0);	217.99687504768372	0	0	1	0	0
0	16	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals (1 , SomeLegacyDatabase . results . size () ) )});	43.0178427696228	0	0	1	0	0
0	17	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(queryResult);	18.946617126464844	0	0	1	0	0
0	18	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(newDataPath.exists());	18.480092763900757	0	0	1	0	0
0	19	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(true);	22.545783042907715	0	0	1	0	0
0	20	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(!doc1.isPresent());	42.99535012245178	0	0	1	0	0
0	21	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertNotNull(FOCAL(query(""select * from Person"")));"	33.41874670982361	0	0	1	0	0
0	22	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertThat(rgIdsFromObjects.size(), equalsTo(n));	42.495617151260376	0	0	1	0	0
0	23	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(expectedSize, results.size());	14.671926021575928	0	0	1	0	0
0	24	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(!documentSaved.isEmpty());	24.427613735198975	0	0	1	0	0
0	25	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertArrayEquals(expected.toArray(), result.toArray());	16.581061124801636	0	0	1	0	0
0	26	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(exists);	32.56642723083496	0	0	1	0	0
0	27	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(someObject);	13.883785963058472	0	0	1	0	0
0	28	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNull(someObject);	37.35865378379822	0	0	1	0	0
0	29	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotEquals(expectedDocuments.size(), proximeter.executeContent().length);	143.60221314430237	0	0	1	0	0
0	0	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(getActiveGraph());	37.081642866134644	0	0	1	0	0
0	1	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(getActiveGraph() instanceof OrientBaseGraph);	22.505977153778076	0	0	1	0	0
0	2	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	"assertEquals(""com.orientechnologies.orient.core.graph.noenhance.OrientGraphNoEnhance"",);"	41.45647716522217	0	0	1	0	0
0	3	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assert_file_channel(as_dict)];{}');	110.57418298721313	0	0	1	0	0
0	4	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(Integer.parseInt(OGlobalConfiguration.CONNECTOR_POOL_DEFAULT_LIFETIME.getValueAsString()),);	38.33686923980713	0	0	1	0	0
0	5	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getDatabase());	22.52709412574768	0	1	0	0	0
0	6	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getDatabase().isOpen());	29.209593772888184	0	0	1	0	0
0	7	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().isClosed());	43.64063787460327	0	0	1	0	0
0	8	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	"assertstep(mouseOutputs,g,v_0).);"	95.72581696510315	0	0	1	0	0
0	9	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().getMinSize() == 5);	156.10051894187927	0	0	1	0	0
0	10	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getGraphTx());	34.37071204185486	0	0	1	0	0
0	11	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.withRaw(false).getNoTx().isClosed(OrientBaseGraph.STORAGE_TYPE_MEMORY));	35.03838610649109	0	0	1	0	0
0	12	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getNoTx().getRawGraph().getDatabasePool().getSize()>=1);	37.86780381202698	0	0	1	0	0
0	13	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0, factory.getMultiPool().getOrientPool(factory.getPool()).getNumActive());	32.28753924369812	0	0	1	0	0
0	14	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.exists());	22.5818350315094	0	1	0	0	0
0	15	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getTx());	25.567205905914307	0	1	0	0	0
0	16	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	"assertEquals(5, new OrientGraph(""memory:testPool"").countVertices());"	44.58776617050171	0	0	1	0	0
0	17	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0, factory.getPool().getNumActive());	50.06191682815552	0	0	1	0	0
0	18	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getNoTx());	28.8347909450531	0	1	0	0	0
0	19	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getTx().getRawGraph().isClosed());	29.66750693321228	0	0	1	0	0
0	20	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getActiveGraph());	44.506118297576904	0	0	1	0	0
0	21	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue((factory.getTx().isOpen()));	40.678223848342896	0	0	1	0	0
0	22	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue()`. It checks whether the expression inside it evaluates to true or not, and if it's not true, the test will fail. );	51.92026495933533	0	0	1	0	0
0	23	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNull(factory.getPool());	38.098824977874756	0	0	1	0	0
0	24	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0, getActiveGraph().countVertices());	45.45251798629761	0	0	1	0	0
0	25	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.isOpen());	51.744590759277344	0	0	1	0	0
0	26	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(getActiveGraph().getRawGraph().isClosed());	52.32315182685852	0	0	1	0	0
0	28	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.exists());	19.683321952819824	0	0	1	0	0
0	29	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.getNoTx().getRawGraph().isClosed(OrientBaseGraph.STORAGE_TYPE_MEMORY));	31.50458812713623	0	0	1	0	0
0	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc);	19.923741102218628	0	0	1	0	0
0	1	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc);	30.86197018623352	0	0	1	0	0
0	2	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(configurator.getDatabase());	23.978651762008667	0	0	1	0	0
0	3	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(proc.getStats().entries() > 0);	51.20257306098938	0	0	1	0	0
0	4	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(configurator);	33.638384103775024	0	0	1	0	0
0	5	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(proc.getStats().outputRows > 0);	31.853944778442383	0	0	1	0	0
0	6	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertTrue(proc.getConfiguration().children(""input"").get(0).getConfiguration().field(""resource"").toString().contains(""value: 'id,postId,text\n1,?,Hello'""));"	35.96086120605469	0	0	1	0	0
0	7	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertFalse({condition}"""""");"	96.8855459690094	0	0	1	0	0
0	8	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(proc.getStats().inputRows > 0);	32.030595779418945	0	0	1	0	0
0	10	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals({expected}, {actual});	16.252138137817383	0	0	1	0	0
0	11	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(ORecordQueryRaw.fromString(errorPaper.getDdlCertificates().head_update_after_pro(slicessoDbHandler.getAllocationVars()+qlValue).str_query_provUrlNonce,getGuestNaOdName(),sliceUtils.getCurtestUserMetricfromSchool(rcvrImageArgs)));	55.29000520706177	0	0	1	0	0
0	13	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(proc.getStats().outputRows >= 0);	34.48526906967163	0	0	1	0	0
0	14	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(proc.getStats().duration > 0);	17.321552753448486	0	0	1	0	0
0	15	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(condition);	19.641961812973022	0	0	1	0	0
0	16	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertTrue(actualResult.equals(""null""));"	38.94841122627258	0	0	1	0	0
0	17	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(publisherDepricatedMessageAtFly);	43.50370407104492	0	0	1	0	0
0	18	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNull(extractedEntity.getInputStreamId());	44.994369983673096	0	0	1	0	0
0	19	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(cache);	22.289764642715454	0	0	1	0	0
0	20	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertThat(processor.getVariable(""rows""), notNullValue());"	36.71036076545715	0	0	1	0	0
0	21	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals({expected_size},processor.getStats().processed.get());	16.98298692703247	0	0	1	0	0
0	22	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals({unexpected}, {actual});	48.558773040771484	0	0	1	0	0
0	24	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotSame({unexpected}, {actual});	21.26151704788208	0	0	1	0	0
0	25	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(proc.getStats().isStopped());	22.527682065963745	0	0	1	0	0
0	26	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertEquals(1, database.countClass(""Post""));"	34.66507887840271	0	0	1	0	0
0	27	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(actualResult, is(expectedResult));	32.74995398521423	0	0	1	0	0
0	28	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertNotSame(result.get(0).field(""postId""),null);"	40.603302240371704	0	0	1	0	0
0	29	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertArrayEquals({expectedArray}, {actualArray});	20.101339101791382	0	0	1	0	0
0	0	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(query(null));	108.03898477554321	0	0	1	0	0
0	1	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(query(null).isEmpty());	75.45999312400818	0	0	1	0	0
0	2	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(1, query(new OSQLSynchQuery<>(""SELECT FROM LinkedClass WHERE id = ?""), ""referred"").size());"	89.68406414985657	0	0	1	0	0
0	3	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(notUniqueIndexExists);	117.2698278427124	0	0	1	0	0
0	4	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull() {);	165.74633693695068	0	0	1	0	0
0	5	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(uniqueIndexExists);	113.63795590400696	0	0	1	0	0
0	7	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(db)` statement.);	99.71087574958801	0	0	1	0	0
0	9	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(null,);	195.86478805541992	0	0	1	0	0
0	10	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(baseClass);	73.50618863105774	0	0	1	0	0
0	11	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(propr.isIndexed());	102.67935729026794	0	0	1	0	0
0	12	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(doc.isDirty());	97.02862596511841	0	0	1	0	0
0	13	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals()"" method verifies that the value of the ""id"" field in the ""doc"" object is ""referred"". If the value is not what is expected, then an AssertionError will be thrown and the test case will fail.      );"	90.37705492973328	0	0	1	0	0
0	14	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(propr.isIndexed());	59.25852584838867	0	0	1	0	0
0	15	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(invertedIndex);	81.65489411354065	0	0	1	0	0
0	16	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(""referred"", refDoc.field(""id""));"	97.25701212882996	0	0	1	0	0
0	17	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertFalse(index.getInternal().get(configuration, ""referred"").isEmpty());"	69.72870230674744	0	0	1	0	0
0	18	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertFalse(db.getMetadata().getSchema().getOrCreateClass(""BaseClass"").getProperty(""ref"").isMandatory());"	72.12162399291992	0	0	1	0	0
0	19	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(Factory.getDefaultThreadPoolSize()-1,cl.mrecyclicDoc2Invallim.limit  ());	84.2899489402771	0	0	1	0	0
0	20	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(e);	175.62343001365662	0	0	1	0	0
0	21	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertNotEquals(it uses the enums Other.NONE and because enum Other looks problematic I simplified the code by posting its least objects as ""fooObj"" and ""barObj"". Sorry for making this error. );"	107.57717823982239	0	0	1	0	0
0	22	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(students);	112.00082993507385	0	0	1	0	0
0	23	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(e instanceof IllegalArgumentException);	95.09471893310547	0	0	1	0	0
0	24	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(expected, result);	61.10299491882324	0	0	1	0	0
0	25	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertTrue(result.stream().map(doc2 -> ((ODocument) doc2).field(""id"")).collect(Collectors.joining()).contains(""referred""));"	102.30020022392273	0	0	1	0	0
0	26	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertFalse(linkedClass.existsProperty(""testProperty"")    );"	95.27350187301636	0	0	1	0	0
0	27	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertWOGetYildrizInterpreter_VrtacoVerifyJPM009(GhasrmjJavaNullObjectDiveTraceExceptionTestMethod.class), pelukGroup91_forSplash200Root)));	142.95745301246643	0	0	1	0	0
0	29	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(!baseClass.equals(null));	92.57248592376709	0	0	1	0	0
0	0	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20, parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	71.22149229049683	0	0	1	0	0
0	1	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(, )` statement to check if the returned value of that attribute matches your expected value.);	91.43635678291321	0	0	1	0	0
0	2	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent instanceof OrientDBConfigBuilder);	98.00561809539795	0	0	1	0	0
0	3	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent);	100.36063718795776	0	0	1	0	0
0	4	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(assert(xAFGenMH.transcoder(LoggedAuthorizedMF.AL_DEPEND_PASS_BODYREF_SUR_RAIL.bname_logAbandoned, HCContactEDdConstraints.ParameterCustomerHostKvm)<PVDJO<? extends jp.jp.accountm.gui.rawAvutil.rawEnvVarsCodec<GeoPropertyBean,qay.execType.ServicePostResponseTypeEdge_Metadata_LLtcKWVo, Y}} ].attrijupyter_common_ai_cleanDelinkJob.size));	194.74156785011292	0	0	1	0	0
0	6	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.getAttribute(ATTRIBUTES.VALIDATION, boolean.class));	103.48155498504639	0	0	1	0	0
0	7	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.contains(OGlobalConfiguration.DB_POOL_MAX));	102.88227009773254	0	0	1	0	0
0	8	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.containsKey(OGlobalConfiguration.DB_POOL_MAX));	93.20158910751343	0	0	1	0	0
0	9	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(true, parent.getAttribute(ATTRIBUTES.VALIDATION, Boolean.class));	66.46060991287231	0	0	1	0	0
0	10	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertEquals()` method of the `org.junit.Assert` class is being used for comparing the returned value of `getValue()` called on the `parent` object to the expected string value `""20""`. Hence, the correct ""20"", parent.getValue(OGlobalConfiguration.DB_POOL_MAX));"	101.24934029579163	0	0	1	0	0
0	11	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertEquals(""20"", parent.getValue(OGlobalConfiguration.DB_POOL_MAX).toString());"	103.93310809135437	0	0	1	0	0
0	12	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertSame(OrientDBConfig.class, parent.getClass());	72.66989779472351	0	0	1	0	0
0	13	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.hasAttribute(ATTRIBUTES.VALIDATION));	62.9290087223053	0	0	1	0	0
0	14	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(Boolean.TRUE, parent.getAttribute(ATTRIBUTES.VALIDATION, Boolean.class));	50.8716459274292	0	0	1	0	0
0	15	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parentConfig.containsKey(OGlobalConfiguration.DB_POOL_MAX));	76.78957414627075	0	0	1	0	0
0	16	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertTrue(parentConfig.getAttributes().containsKey(""validation""));"	86.49726986885071	0	0	1	0	0
0	17	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertTrue(parent.interpolateVariables().getAttribute(""validation"", false));"	100.36003088951111	0	0	1	0	0
0	18	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(((Boolean) parent.getAttribute(ATTRIBUTES.VALIDATION)).booleanValue());	77.88380908966064	0	0	1	0	0
0	19	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20, parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	94.10687685012817	0	0	1	0	0
0	20	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assert.fail(reason # and the others.. );	101.84826183319092	0	0	1	0	0
0	21	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(false, ((Boolean) parent.getAttribute(ATTRIBUTES.VALIDATION)).booleanValue());	62.64549517631531	0	0	1	0	0
0	22	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(iConfig.getValue(), parent.getValue(iConfig));	99.2647659778595	0	0	1	0	0
0	23	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(value);	94.79328799247742	0	0	1	0	0
0	24	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.getAttribute(ATTRIBUTES.VALIDATION, boolean.class));	92.69935727119446	0	0	1	0	0
0	25	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(node_tests_selection_rec.lights_endpoint(app_sets_router_states.settings_sub_nodes(SMBFIConf.WORK_INSERT_DERIH_E_SSL]), UnionCDF_Streaming(octelem)<=Wcast(midset<registerPerModelCollections -> rmore100.dat.from_input_saved(filepath.public(x40=null)dataType_manager.graph_map)), !(System);	155.63262581825256	0	0	1	0	0
0	26	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(expectedValue, actualValue);	105.09151101112366	0	0	1	0	0
0	27	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	62.25126791000366	0	0	1	0	0
0	28	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(parent.contains(OGlobalConfiguration.DB_POOL_MAX));	52.0176420211792	0	0	1	0	0
0	29	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent.getAttributes().get(ATTRIBUTES.VALIDATION));	85.24924206733704	0	0	1	0	0
0	1	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertEquals(2, result);	64.82661199569702	0	0	1	0	0
0	2	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertNotNull(Object object)` that verifies if `result` variable holds a non-null value: );	57.33354902267456	0	0	1	0	0
0	3	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(indexExists);	39.45953011512756	0	0	1	0	0
0	4	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(result.hasNext());	37.927865982055664	0	0	1	0	0
0	5	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	"assertTrue(db.command(""SELECT FROM Lines WHERE ST_Intersects(geometry, 'LINESTRING (1 1, 4 4 )')"") );"	41.22044110298157	0	0	1	0	0
0	6	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertEquals(EXPECTED_SIZE, actualSize);	25.528414011001587	0	0	1	0	0
0	7	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertFalse(condition);	40.37319207191467	0	0	1	0	0
0	8	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertNotSame(expectedResult, result);	25.487771034240723	0	0	1	0	0
0	9	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertArrayEquals(expectedArray, resultArray);	22.394186973571777	0	0	1	0	0
0	10	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertionKeywords.encode(filterEncodingAppeater(endpoint_backloadedPagination.getEndPointPairSearch_)));	163.33343386650085	0	0	1	0	0
0	11	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertionKeywords.encode(filterEncodingAppeater(endpoint_backloadedPagination.getEndPointPairSearch_)));	18.415954113006592	0	0	1	0	0
0	13	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertSame(expectedResult, result);	17.728607892990112	0	0	1	0	0
0	16	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(!prevResult.equals(actualResult));	34.36678695678711	0	0	1	0	0
0	17	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(actualResult.contains(expectedResult));	19.77304697036743	0	0	1	0	0
0	18	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertFalse(internal_result);	55.82984495162964	0	0	1	0	0
0	20	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	"assertNotSame(numberOfIntersections, expectedIntersectionSize, ""Intersects query interpreted Zero Rows"");"	41.5561101436615	0	0	1	0	0
0	21	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(result.isEmpty()`);	35.28379821777344	0	0	1	0	0
0	23	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertNotEquals(expectedResult, result);	27.617016077041626	0	0	1	0	0
0	24	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(responseContent.startsWith(expectedHeader));	22.265526056289673	0	0	1	0	0
0	25	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(item >= 1);	34.90038800239563	0	0	1	0	0
0	26	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertFalse(result.isEmpty());	18.32015109062195	0	0	1	0	0
0	27	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(!db.isClosed());	39.36807179450989	0	1	0	0	0
0	28	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertEquals(expectedValue, actualValue);	26.52517580986023	0	0	1	0	0
0	0	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNull(actualOutput);	28.820699214935303	0	0	1	0	0
0	1	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	"assertEquals(""CONTENTSCop1101,List(CONCENTTION,StringREOVER.CODEgIdA859EOD49SepLBcHB24TrojCanDVol,#Npl.25,#)$ULATOR,Evi#EEC.D3678,No-Dmz],Sopri{,\nLLL).hr,+11.931649945493555ebRcl:F679ada337E157vo)88090-2ad7370821_-867655,\n)sTerVEnNol,807450928U_JDb I:B.w:.Hjp-jl_I6b0-puD-L57-TNtx-doR,Ietghmcfs.reubrent./rusain/jantreg/oilnooil/Ldoalsc/O1096+S2?? _918il5pgO268mg82sn682nm5aja330k010,MaeYo80v85835F8cx,TIMOSSIYIF16tAN40bs659bx38715615790335-clorg360.pmay.\nefcq-UWnhypEAzi/?parmLetka[cow,boba,korz,moz,vuniwa,I400o7Pa391.nipp107.io:8ex/_upd/ALMN/V_165118-G23K~755J;BNye.6472]);"	57.833646059036255	0	0	1	0	0
0	2	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertEquals(expectedOutput, actualOutput);	33.43920588493347	0	0	1	0	0
0	3	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	"assertSame(""EXPECTED: "",  expectation), actualOutput.isSameAs(expexutedString));"	30.14253306388855	0	0	1	0	0
0	4	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertArrayEquals(expectedOutput, actualOutput);	20.56673002243042	0	0	1	0	0
0	5	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotNull(I'm assume that `asText(Class clazz)` acceptingOEMGeometryMetadata inclusive return validation for result granted function-based other objects omods set overrira explicit site-down filters predicates so it produces json based scheme(valid? asText etc then responsible QA onwards job it is avoid almost cases which giving tricky inclusions/subtractions bugs appearance unknown conditions fulfilled unaware immediately). Considering this);	61.481016874313354	0	0	1	0	0
0	6	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertTrue(actualOutput);	19.931384086608887	0	0	1	0	0
0	8	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertFalse(actualOutput);	21.098808765411377	0	0	1	0	0
0	9	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotEquals(<EXPECTED_VARIABLE>, actualOutput);	27.46890687942505	0	0	1	0	0
0	11	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertThrows(<EXPECTED_EXCEPTION>.class, () -> {<FOCAL_METHOD_CALL>});	19.174783945083618	0	0	1	0	0
0	15	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotSame(unexpectedOutput, actualOutput);	20.53677225112915	0	0	1	0	0
0	16	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertThat(actualOutput, is(expectedOutput)```);	148.8784749507904	0	0	1	0	0
0	17	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNull(obj);	20.587302923202515	0	0	1	0	0
0	21	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotSame(expectedOutput, actualOutput);	21.592772722244263	0	0	1	0	0
0	22	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotEquals(expectedOutput, actualOutput);	20.49004602432251	0	0	1	0	0
0	23	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertTrue(actualOutput);	22.875033855438232	0	0	1	0	0
0	24	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertFalse()` method expects a boolean, so the generated ) throws returnText () throws IOException {);	35.41066598892212	0	0	1	0	0
0	27	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertNotNull(context);	112.65580105781555	0	0	1	0	0
0	28	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertArrayEquals(expectedArray, actualArray);	20.6475830078125	0	0	1	0	0
0	29	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	Assert.assertEquals(m2,m1);	assertEquals(expectedOutput, actualOutput);	35.12992000579834	0	0	1	0	0
0	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	72.21075391769409	0	0	1	0	0
0	1	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0) == FLOAT_SIZE);	117.49720311164856	0	0	1	0	0
0	2	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	49.26707410812378	0	0	1	0	0
0	3	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer);	73.34999322891235	0	0	1	0	0
0	4	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data, buffer.array());	80.28946304321289	0	0	1	0	0
0	5	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT, floatSerializer.deserializeNative(data, 0));	48.267208099365234	0	0	1	0	0
0	6	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(Float.class, floatSerializer.getType());	77.62680196762085	0	0	1	0	0
0	7	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(null, floatSerializer);	44.603132009506226	0	0	1	0	0
0	8	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, mock(OWALChanges.class), 0));	79.70332217216492	0	0	1	0	0
0	9	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer));	66.99560189247131	0	0	1	0	0
0	10	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	69.65934109687805	0	0	1	0	0
0	11	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0))`. This checks whether the floating-point object invoked with the getObjectSizeByteBuffer method properly retrieves the corresponding integer representation in bytes as NSUIntegerOfType 'FLOAT_SIZE'. );	76.03355121612549	0	0	1	0	0
0	12	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE + serializationOffset, buffer.capacity());	73.32620525360107	0	0	1	0	0
0	13	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	66.45961999893188	0	0	1	0	0
0	14	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	45.20569705963135	0	0	1	0	0
0	15	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	72.81309390068054	0	0	1	0	0
0	16	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	47.218347787857056	0	0	1	0	0
0	17	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(Float.class, floatSerializer.getType());	70.61817336082458	0	0	1	0	0
0	18	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(FLOAT_SIZE == floatSerializer.getObjectSizeInByteBuffer(buffer, null, serializationOffset));	69.41545605659485	0	0	1	0	0
0	19	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	46.08184599876404	0	0	1	0	0
0	20	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT, floatSerializer.deserializeNative(data, 0));	86.05924892425537	0	0	1	0	0
0	21	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT, floatSerializer.deserializeNative(data, 0));	81.6618139743805	0	0	1	0	0
0	22	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE, floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0));	70.348965883255	0	0	1	0	0
0	23	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(Float.class, floatSerializer.getType());	71.12193632125854	0	0	1	0	0
0	24	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSizeInByteBuffer(buffer, null, 0) == FLOAT_SIZE);	86.0839250087738	0	0	1	0	0
0	25	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT, floatSerializer.);	88.95363903045654	0	0	1	0	0
0	26	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(FLOAT_SIZE == floatSerializer.getObjectSizeInByteBuffer(buffer, null, serializationOffset ) );	91.91373682022095	0	0	1	0	0
0	27	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(Float.class, floatSerializer.getType());	78.93490409851074	0	0	1	0	0
0	28	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT, floatSerializer.deserializeNative(data, 0));	50.78049278259277	0	0	1	0	0
0	29	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	48.08498978614807	0	0	1	0	0
0	0	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	80.3986029624939	0	0	1	0	0
0	1	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(multiKey, multiKey);	57.03031611442566	0	0	1	0	0
0	2	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(fooMultiKey.equals(barMultiKey));	74.18757200241089	0	0	1	0	0
0	3	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	57.986865758895874	0	0	1	0	0
0	4	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(null));	65.84328293800354	0	0	1	0	0
0	6	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(fooMultiKey.equals(barMultiKey));	61.34059000015259	0	0	1	0	0
0	7	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(new String()));	67.59410524368286	0	0	1	0	0
0	8	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(multiKey.equals(new OMultiKey(Collections.singletonList(""a""))));"	67.47391891479492	0	0	1	0	0
0	9	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertEquals(multiKey.equals(new OMultiKey(Collections.singletonList(""a""))), true);"	69.98812985420227	0	0	1	0	0
0	10	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertEquals(multiKey, new OMultiKey(Collections.singletonList(""a"")));"	53.9982328414917	0	0	1	0	0
0	11	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(new OMultiKey(Collections.singletonList(""b""))));"	45.437246322631836	0	0	1	0	0
0	12	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertNotNull(multiKey);	44.12320399284363	0	0	1	0	0
0	13	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(!multiKey.equals(new Integer(0)));	68.44684505462646	0	0	1	0	0
0	14	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(new Integer(0)));	64.20445799827576	0	0	1	0	0
0	15	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(""a""));"	56.74293899536133	0	0	1	0	0
0	16	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(new OMultiKey(Collections.singletonList(""a""))));"	56.0876350402832	0	0	1	0	0
0	17	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(multiKey.equals(new OMultiKey(Collections.singletonList(""a"")))));"	69.02530217170715	0	0	1	0	0
0	18	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(new Object()));	81.75894808769226	0	0	1	0	0
0	19	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertNull(multiKey);	46.26184296607971	0	0	1	0	0
0	20	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(multiKey.hashCode(), multiKey.hashCode());	57.98646378517151	0	0	1	0	0
0	21	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue()` to check that `multiKeys is equal to fooMulteKey.);	85.53512001037598	0	0	1	0	0
0	22	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(true, multiKey.equals(multiKey));	84.52078914642334	0	0	1	0	0
0	23	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertEquals(false,new OMultiKey(Collections.singletonList(""a"")).equals(null));"	65.34104585647583	0	0	1	0	0
0	24	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey) );	76.7425627708435	0	0	1	0	0
0	25	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(new OMultiKey(Collections.singletonList(""b""))));"	74.4446702003479	0	0	1	0	0
0	26	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(false, multiKey.equals(null));	69.70183801651001	0	0	1	0	0
0	27	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(new java.lang.String(""not-equal"")));"	67.56861019134521	0	0	1	0	0
0	28	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(obj));	77.73970890045166	0	0	1	0	0
0	29	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(multiKey.equals(new OMultiKey(Collections.singletonList(""a""))));"	45.29353713989258	0	0	1	0	0
0	0	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l2, AList.create(l));	31.933341026306152	0	0	1	0	0
0	1	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.equals(AList.create(l)));	19.828440189361572	0	0	1	0	0
0	2	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertThat(l2, org.hamcrest.CoreMatchers.is(AList.create(l)));	16.86061406135559	0	0	1	0	0
0	3	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertArrayEquals(l2.toArray(), AList.create(l).toArray());	30.372288942337036	0	0	1	0	0
0	4	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l, AList.create(l));	13.886297941207886	0	0	1	0	0
0	5	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(AList.create(l));	13.0260910987854	0	0	1	0	0
0	6	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l2, AList.create(l));	14.944785833358765	0	0	1	0	0
0	7	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertArrayEquals(l2.toArray(), AList.create(l).toArray());	18.97463297843933	0	0	1	0	0
0	8	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l, AList.create(l));	16.572514057159424	0	0	1	0	0
0	10	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l3, AList.create(l));	15.190706253051758	0	0	1	0	0
0	11	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.equals(AList.create(l)));	14.054792881011963	0	0	1	0	0
0	12	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertThat(l3, org.hamcrest.CoreMatchers.is(AList.create(l)));	33.698686838150024	0	0	1	0	0
0	13	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertArrayEquals(l3.toArray(), AList.create(l).toArray());	15.930801153182983	0	0	1	0	0
0	14	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l3, AList.create(l));	25.249314069747925	0	0	1	0	0
0	15	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(AList.create(l3));	22.575112104415894	0	0	1	0	0
0	16	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.equals(AList.create(l)));	19.07266092300415	0	0	1	0	0
0	17	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l3, AList.create(l));	19.859766244888306	0	0	1	0	0
0	18	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertArrayEquals(l3.toArray(), AList.create(l).toArray());	17.467612981796265	0	0	1	0	0
0	19	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l3, AList.create(l));	15.066128015518188	0	0	1	0	0
0	20	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(doFinal(l,b257V)(), bWaM(lSrc,d1D75), l.jsonOuter(map), ""what could oEm18 turn over?"",);"	56.55804181098938	0	0	1	0	0
0	22	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNull(AList.create(l3));	28.1681489944458	0	0	1	0	0
0	23	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l3, AList.create(l));	27.02525496482849	0	0	1	0	0
0	24	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l2.toString(), AList.create(l).toString());	28.348923206329346	0	0	1	0	0
0	25	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.toString().equals(AList.create(l).toString()));	15.046903848648071	0	0	1	0	0
0	26	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l.toString(), AList.create(l).toString());	18.68149495124817	0	0	1	0	0
0	27	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(AList.create(null));	23.759347200393677	0	0	1	0	0
0	28	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l2, AList.create(null));	20.25595188140869	0	0	1	0	0
0	29	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(l2, AList.createFromIterable(Arrays.asList(""a"", ""b"", ""c"")));"	38.83984994888306	0	0	1	0	0
0	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Collections.singleton(""hello""), x -> Arrays.asList(x.split(""""))).contains(""h""));"	17.126538038253784	0	0	1	0	0
0	1	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertFalse(flatMap(Collections.singleton(""hello""), x -> Arrays.asList(x.split(""""))).isEmpty());"	17.393244981765747	0	0	1	0	0
0	2	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(5, flatMap(Arrays.asList(""hello"", ""world""), x -> Arrays.asList(x.split(""""))).size());"	41.29007077217102	0	0	1	0	0
0	3	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Collections.singleton(""hello""), x -> Arrays.asList(x.split(""""))).contains(""e""));"	19.97744083404541	0	0	1	0	0
0	4	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertFalse(flatMap(Collections.emptyList(), x -> Arrays.asList(x.split(""""))).isEmpty());"	26.616549015045166	0	0	1	0	0
0	5	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""A"", ""b"", ""C"", ""d""), flatMap(Arrays.asList(""A:b"", ""C:d""), x -> Arrays.asList(x.split("":""))).stream().map(String::toLowerCase).collect(Collectors.toList()));"	23.228584051132202	0	0	1	0	0
0	6	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertArrayEquals(new String[]{""h"", ""e"", ""l"", ""l"", ""o""}, flatMap(Arrays.asList(""hello""), x -> Arrays.asList(x.split(""""))).toArray());"	22.41652202606201	0	0	1	0	0
0	7	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Arrays.asList(""Test""), x -> Arrays.asList(x.split(""""))).isEmpty());"	77.56969618797302	0	0	1	0	0
0	8	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Collections.singletonList(""abbc""), x -> Arrays.asList(x.split(""""))).contains(""b""));"	21.52160406112671	0	0	1	0	0
0	9	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""a"", ""b"", ""c""), flatMap(Arrays.asList(""a"", ""B"", ""c""), x -> Collections.singleton(x.toLowerCase())));"	17.030477046966553	0	0	1	0	0
0	10	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(3, flatMap(Arrays.asList(""hello"", ""world""), x -> Arrays.asList(x.split(""""))).stream().filter(s -> s.equals(""l"")).count());"	24.984753847122192	0	0	1	0	0
0	11	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertFalse(flatMap(Arrays.asList(""hello"", ""world""), x -> Arrays.asList(x.split(""""))).isEmpty());"	20.37015390396118	0	0	1	0	0
0	12	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(10, flatMap(Arrays.asList(""one"", ""two"", ""three"", ""four"", ""five""), x -> Arrays.asList(x.split("""")).stream().mapToInt(String::length).boxed().reduce(0, Integer::sum)));"	21.703858852386475	0	0	1	0	0
0	13	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(flatMap(Collections.emptyList(), x -> Collections.singleton(x)).isEmpty());	14.766831874847412	0	0	1	0	0
0	14	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""h"", ""e"", ""l"", ""l"", ""o""), flatMap(Arrays.asList(""hello""), x -> Arrays.asList(x.split(""""))));"	29.55789804458618	0	0	1	0	0
0	15	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertArrayEquals(new int[]{6}, new int[]{flatMap(Collections.singletonList(""hello""), x -> Arrays.asList(x.split(""""))).size()});"	15.134446144104004	0	0	1	0	0
0	16	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Arrays.asList(""Hello"", ""world""), x -> Collections.<String>emptyList()).isEmpty());"	26.803596019744873	0	0	1	0	0
0	17	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""line2: 2"", ""line2: 3"", "" ""), flatMap(Arrays.asList(""line1: "", ""line2: 2,3"", """"), x -> {        "		List<String> list = new ArrayList<>();	30.41105318069458	0	0	1	0	0
0	18	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Collections.emptyList(), flatMap(Collections.emptyList(), x -> Arrays.asList(x.split(""""))));"	23.921308040618896	0	0	1	0	0
0	19	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(flatMap(Arrays.asList(""a"", ""b"", ""c""), x -> Collections.emptyList()).isEmpty());"	23.27970266342163	0	0	1	0	0
0	20	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(4, flatMap(Arrays.asList(""hi"", ""i'm"", ""testing"", ""you""), x -> Arrays.asList(x.split("" ""))).size());"	17.602701902389526	0	0	1	0	0
0	21	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""to"", ""be"", ""or"", ""not"", ""to"", ""be""), flatMap(Arrays.asList(""To be"", ""or not to be""), x -> Arrays.asList(x.split("" ""))).stream().map(String::toLowerCase).collect(Collectors.toList()));"	25.373761892318726	0	0	1	0	0
0	22	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertFalse(flatMap(Arrays.asList(""hi""), x -> Arrays.asList(x.split("" ""))).isEmpty());"	15.920093059539795	0	0	1	0	0
0	23	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(Arrays.asList(""h"", ""i""), flatMap(Arrays.asList(""hi""), x -> Arrays.asList(x.split(""""))));"	15.548298120498657	0	0	1	0	0
0	24	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(input);	196.3370807170868	0	0	1	0	0
0	25	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(iterable.iterator().hasNext());	19.87438678741455	0	0	1	0	0
0	26	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(Arrays.asList(1, 2, 2, 4, 3, 6, 4, 8, 5, 10), output);	23.949769020080566	0	0	1	0	0
0	27	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(Collections.emptyList(), output);	18.46766424179077	0	0	1	0	0
0	28	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(output.isEmpty());	17.849660873413086	0	0	1	0	0
0	29	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(output);	15.668823003768921	0	0	1	0	0
0	0	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertSame(flattened.iterator().next(), ""apple"");"	24.786827087402344	0	0	1	0	0
0	1	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertTrue(flattened.contains(""apple""));"	44.720568895339966	0	0	1	0	0
0	2	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(e instanceof ClassNotFoundException);	33.94495391845703	0	0	1	0	0
0	3	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotNull(flattened);	23.47567391395569	0	0	1	0	0
0	4	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(2, flattened.size());	17.421429872512817	0	0	1	0	0
0	5	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	asserted_output_oisinmeadePend>();	60.69918417930603	0	0	1	0	0
0	6	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(flattened.isEmpty());	42.14974284172058	0	0	1	0	0
0	7	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertEquals(Arrays.asList(""yellow olo retsyn sgnillehvA tetriD"", ""ynotoRfO ssenisuB"", ""fireevil niht nom eht ta genev hot tahT"", ""elacoL neveS notpmys ruo"", ""lavivrus ria hleytilemorf owt liketaM"", ...]), output);"	40.452653884887695	0	0	1	0	0
0	8	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertEquals(""apple"", flattened.iterator().next());"	25.508800983428955	0	0	1	0	0
0	9	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(iterator.hasNext());	19.75810194015503	0	0	1	0	0
0	10	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(0, flattened.size());	17.181435108184814	0	0	1	0	0
0	11	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotSame(flattened, original);	15.451135158538818	0	0	1	0	0
0	12	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertEquals(""hello"", string);"	17.610389947891235	0	0	1	0	0
0	13	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(item.isPresent());	20.141348838806152	0	0	1	0	0
0	14	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNull(next);	25.031551837921143	0	0	1	0	0
0	15	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(iterator.hasNext());	20.339758157730103	0	0	1	0	0
0	16	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertTrue(flattened.containsAll(Arrays.asList(""red"", ""green"", ""blue"", ""black"", ""white"")));"	16.68697214126587	0	0	1	0	0
0	17	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertString(lbl_dev_role_failingTotalLines<=12,,,,lbl_docking_desktop_successReplace), wsFetcherInput.getChannel(G_LEVEL).getEquality(true)));	221.1357569694519	0	0	1	0	0
0	18	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(!flattened.iterator().equals(Collections.emptyIterator()));	23.805455923080444	0	0	1	0	0
0	19	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(success && !failure);	19.073215007781982	0	0	1	0	0
0	20	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(containsErrorMsg());	21.765547037124634	0	0	1	0	0
0	21	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(Collections.emptyList(), flattened);	22.003981113433838	0	0	1	0	0
0	22	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotNull(items);	31.89944863319397	0	0	1	0	0
0	23	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertFalse(jsonMap.containsKey(""missing_key""));"	29.21263885498047	0	0	1	0	0
0	24	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertTrue(CollectionUtils.isEqualCollection(Arrays.asList(""apple"", ""banana""), flattened));"	34.69370913505554	0	0	1	0	0
0	25	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertArrayEquals(expected, result);	21.122817993164062	0	0	1	0	0
0	26	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertThrows(IllegalArgumentException.class, () -> example.exampleMethod(null));	12.865797281265259	0	0	1	0	0
0	27	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(map.isEmpty());	26.293605089187622	0	0	1	0	0
0	28	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertFalse(flattened.contains(""orange""));"	17.126315116882324	0	0	1	0	0
0	29	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(Collections.emptyList(), items);	16.108202934265137	0	0	1	0	0
0	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	13.104463815689087	0	0	1	0	0
0	1	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertEquals(InputStream.class, resourceAsStream.getClass());	13.627302885055542	0	0	1	0	0
0	2	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keystore);	29.034269094467163	0	0	1	0	0
0	3	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	33.66448712348938	0	0	1	0	0
0	4	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(""Error : Namespace cannot be loadedloadKeyStoreFromResources"",YourStaticCallerOutput.doesticISelfBoostcontainsAlias(parse_or_center)));"	293.25145196914673	0	0	1	0	0
0	5	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	39.8873028755188	0	0	1	0	0
0	6	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(keystore.containsAlias(""mykey""));"	30.15945601463318	0	0	1	0	0
0	7	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	13.197080135345459	0	0	1	0	0
0	8	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(keystore.containsAlias(""mykey2""));"	29.75885581970215	0	0	1	0	0
0	9	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertNotNull(-1093982927L | ((java.lang.String)h$.toFloat(1,1605419583$.checkList((h/abc;p ""<VirtualOpenchannelsUpstream>.parse""; , entries.get())),(System.vArRsLoUnDeR_z638270057364398355732192527705035917880.cast((669647307711646184)),entries return; 0)[-1]).);"	80.81337904930115	0	0	1	0	0
0	11	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(keyStorePath.endsWith("".jks""));"	14.901147842407227	0	0	1	0	0
0	12	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keyStorePath);	12.557033061981201	0	0	1	0	0
0	13	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(passphrase // org.junit.Assert statement);	41.036255836486816	0	0	1	0	0
0	14	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	24.620990991592407	0	0	1	0	0
0	15	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(keystore.containsAlias(""mykey""));"	17.471401929855347	0	0	1	0	0
0	16	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keyAndTrustStoreClasspathPath);	16.20461916923523	0	0	1	0	0
0	17	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keystoreStream);	25.43642282485962	0	0	1	0	0
0	18	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assert.contains(scanCustomizations, SINGLEPOOVER.myBroker(customInitializeValidatorBox(valueHTMLColors.model_status_upper_RightDesposal__789_MessageRecipient.getBytes(startElemktFBAligid))));	279.9303379058838	0	0	1	0	0
0	19	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keyManagerFactory);	19.39378809928894	0	0	1	0	0
0	20	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keystore);	24.73222589492798	0	0	1	0	0
0	21	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	12.358838081359863	0	0	1	0	0
0	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	39.783023834228516	0	0	1	0	0
0	1	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNotNull(lifecycleTest.connectionMonitor);	34.37351202964783	0	0	1	0	0
0	2	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().stream().allMatch(processor -> !processor.isStarted()));	20.27099919319153	0	0	1	0	0
0	3	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(connectionMonitor);	36.03328800201416	0	0	1	0	0
0	4	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(connectionMonitor.isStarted());	21.11726999282837	0	0	1	0	0
0	5	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNotNull(reconnectManager)` can be added to check if it is not null. Therefore the test code after adding the ) {);	32.42564105987549	0	0	1	0	0
0	6	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertEquals(0, userProcessors.size());	21.148561000823975	0	0	1	0	0
0	7	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(taskScanner.isShutdown() && connectionManager.isShutdown());	24.739736795425415	0	0	1	0	0
0	8	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(connectionMonitor.isMonitorRunning());	118.83430123329163	0	0	1	0	0
0	9	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	27.63848876953125	0	0	1	0	0
0	10	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue();	35.81902313232422	0	0	1	0	0
0	11	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(connectionManager.isShutdown());	35.727165937423706	0	0	1	0	0
0	13	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(taskScanner.isTerminated());	20.721599102020264	0	0	1	0	0
0	14	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNotNull(connectionMonitor);	21.366257190704346	0	0	1	0	0
0	15	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(taskScanner.isShutdown());	18.82153606414795	0	0	1	0	0
0	16	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(connectionMonitor.isDaemon());	20.65086007118225	0	0	1	0	0
0	17	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(connectionMonitor);	37.2010931968689	0	0	1	0	0
0	18	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNotNull(connectionManager);	27.432428121566772	0	0	1	0	0
0	19	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(processor.isWorking);	193.66023588180542	0	0	1	0	0
0	20	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNotNull(taskScanner);	19.20431089401245	0	0	1	0	0
0	21	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertEquals(true, true`  # This assert should always pass unless Java is not not capable of executing this statement :) );	29.36982297897339	0	0	1	0	0
0	22	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(logger.isDebugEnabled());	48.97160506248474	0	0	1	0	0
0	23	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(connectionMonitor.isStarted());	18.87019371986389	0	0	1	0	0
0	24	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(I defined a private instance of `BoltonAskerManager taskScanner` and updating reference/path to local detele reference bug);	420.6032621860504	0	0	1	0	0
0	25	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertTrue(connectionManager.isRunning());	35.89863586425781	0	0	1	0	0
0	26	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(taskScanner.isInProgress());	19.634051084518433	0	0	1	0	0
0	27	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(userProcessors.get(key));	22.287519931793213	0	0	1	0	0
0	28	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertFalse(taskScanner.isTerminated());	70.39687895774841	0	0	1	0	0
0	29	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	Assert.assertTrue(testFunctionAvailable(false));	assertNull(client);	38.524863958358765	0	0	1	0	0
0	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, count(""hehe""));"	18.399353742599487	0	0	1	0	0
0	1	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(rm.count(""hehe"") == 2);"	32.22461986541748	0	0	1	0	0
0	2	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotEquals(0, rm.count(""hehe""));"	43.656412839889526	0	0	1	0	0
0	3	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertEquals(2, pool.size());	38.102187156677246	0	0	1	0	0
0	4	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertNotNull(pool);	18.09776210784912	0	0	1	0	0
0	5	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertFalse(StringUtils.isNotBlank(poolKey));	25.594691038131714	0	0	1	0	0
0	6	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotEquals(0, focalMethodInstance.count(""hehe""));"	32.29565978050232	0	0	1	0	0
0	7	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertNull(testPool);	37.61115598678589	0	0	1	0	0
0	8	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, cm.count(""hehe""));"	33.64825129508972	0	1	0	0	0
0	9	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.count(""hehe"") == 2);"	16.150516033172607	0	1	0	0	0
0	10	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertj.core.api.Assertions.assertThat(Number)>);	63.54589533805847	0	0	1	0	0
0	11	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertEquals(pool.capacity(), 2);	26.692365169525146	0	0	1	0	0
0	12	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotEquals(0, cm.count(""hehe""));"	15.710363149642944	0	1	0	0	0
0	13	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(StringUtils.isNotBlank(""hehe""));"	34.986034870147705	0	0	1	0	0
0	14	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.count(""hehe"") > 0);"	15.876661777496338	0	1	0	0	0
0	15	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertNotNull(pool);	33.745227098464966	0	0	1	0	0
0	16	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, cm.getConnectionPool(cm.getConnTasks().get(""hehe"")).size());"	35.05612897872925	0	0	1	0	0
0	17	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, cm.getConnTasks().get(""hehe"").size());"	31.531590938568115	0	0	1	0	0
0	18	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.getConnectionPool(cm.getConnTasks().get(""hehe"")).size()>0);"	19.6165611743927	0	0	1	0	0
0	19	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertFalse(StringUtils.isBlank(""hehe""));"	29.950491189956665	0	0	1	0	0
0	20	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotNull(cm.getConnectionPool(cm.getConnTasks().get(""hehe"")));"	34.034366846084595	0	0	1	0	0
0	21	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, cm.getConnectionPool(cm.getConnTasks().get(""hehe"")).size());"	31.31544303894043	0	0	1	0	0
0	22	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.getConnectionPool(cm.getConnTaskByPoolKey(""hehe"")).size() > 0);"	38.88793611526489	0	0	1	0	0
0	23	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertTrue(cm.getConnectionPool(cm.getConnTasks());	59.30376601219177	0	0	1	0	0
0	24	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertEquals(2, cm.getConnTasks().size());	19.975308179855347	0	0	1	0	0
0	25	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertTrue(cm.getManagedCount() == 2);	36.09915900230408	0	0	1	0	0
0	26	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.hasConnection(""hehe""));"	31.65087580680847	0	0	1	0	0
0	27	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotNull(cm.getConnectionPoolByKey(""hehe""));"	28.951005935668945	0	0	1	0	0
0	28	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	assertEquals(2, ((RpcConnectionManager) cm).getConnectionPoolLists().size());	28.847306966781616	0	0	1	0	0
0	29	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.hasConnectionTask(""hehe""));"	33.812674045562744	0	0	1	0	0
0	0	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(attrs(attr(SHAPE, M_RECORD), attr(LABEL, ""testLabel"")), mLabel(""testLabel""));"	32.20196199417114	0	0	1	0	0
0	1	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotNull(M_RECORD), attr(LABEL);	45.28510499000549	0	0	1	0	0
0	2	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(mLabel(""testLabel"").containsAttribute(ClassName.SHAPE) &&);"	30.99316716194153	0	0	1	0	0
0	3	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(attrs(attr(SHAPE, M_RECORD), attr(LABEL, ""testLabel"")), mLabel(""testLabel""));"	45.764716148376465	0	0	1	0	0
0	4	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotEquals(MutableAttributed.expr():);	30.574985027313232	0	0	1	0	0
0	5	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertTrue(SHAPE));	35.61050224304199	0	0	1	0	0
0	6	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(mLabel(""testLabel"").isEmpty());"	25.551825046539307	0	0	1	0	0
0	7	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertEquals();	35.617451906204224	0	0	1	0	0
0	8	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertThat(actualAttributes, Matchers.equalTo(expectedAttributes));	42.1378288269043	0	0	1	0	0
0	9	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(Collections.singletonList(Attribute.attr(SHAPE, M_RECORD, LABEL, ""TestLabel"")), );"	25.670077800750732	0	0	1	0	0
0	10	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(attrs(attr(""SHAPE"", M_RECORD), attr(LABEL, ""testLabel"")).isEmpty());"	31.53132915496826	0	0	1	0	0
0	11	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(attrs(attr(SHAPE, M_RECORD), attr(LABEL, ""{ foo | bar \\| \\} \\N matt \l }""));"	48.10277605056763	0	0	1	0	0
0	12	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(attrs(attr(Attribute.SHAPE, Records.mRecord), attr(Attribute.LABEL, ""testLabel"")).size() > 0);"	29.24659299850464	0	0	1	0	0
0	13	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(MRecord.INSTANCE, attrs(attr(SHAPE, M_RECORD),attr(LABEL, ""testLabel"")).get(ClassName.SHAPE));"	26.364440202713013	0	0	1	0	0
0	14	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertEquals(M_RECORD, attrs().apply(KEY_Shape).head());	25.73712420463562	0	0	1	0	0
0	15	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotNull(Collections.emptyList());	18.027516841888428	0	0	1	0	0
0	16	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(mLabel(""randomString"").toString().contains(""M_RELATION""));"	28.005769968032837	0	0	1	0	0
0	17	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(attrs(attr(Record.SHAPE, MRecord.INSTANCE), attr(LABEL, ""testLabel"")), mLabel(""testLabel""));"	34.89915609359741	0	0	1	0	0
0	18	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(""MRecord[Label=\""testLabel\""]"", attrs(attr(SHAPE, M_RECORD), attr(LABEL, ""testLabel"")).toString());"	29.92538285255432	0	0	1	0	0
0	19	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(//""Fix this string argument"");"	37.08604311943054	0	0	1	0	0
0	20	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(attrs(attr(SHAPE, MRecord.TYPE),attr(LABEL, ""testLabel"")).toString(), attrs(attr(SHAPE, MRecord.TYPE),attr(LABEL, ""testLabel"").toString()));"	22.843717098236084	0	0	1	0	0
0	21	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(attrs(attr(SHAPE, M_RECORD), attr(LABEL, ""testLabel"")).containsAttribute(AttributeName.LABEL));"	34.425159215927124	0	0	1	0	0
0	22	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotEquals();	72.63718175888062	0	0	1	0	0
0	23	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(MutableAttributed.creatEmpty().containsAttribute(""RandomAttribute""));"	20.558048963546753	0	0	1	0	0
0	24	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertEquals(Attributes.attr(Shape.M_RECORD),);	33.726731061935425	0	0	1	0	0
0	25	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(!mLabel(""Test"").toString().equals(MRecord.typeLabel()));"	18.71955370903015	0	0	1	0	0
0	26	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(mLabel(""foo"").containsAttribute(AttributeName.SHAPE));"	18.29653525352478	0	0	1	0	0
0	27	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(1, RecordsTest.mLabel(""testLabel"").size());"	24.651160955429077	0	0	1	0	0
0	28	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertArrayEquals(attrs(Records.attr(SHAPE, M_RECORD)), mLabel(""testLabel"").toArray());"	18.10334324836731	0	0	1	0	0
0	29	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertEquals();	25.21788191795349	0	0	1	0	0
0	0	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotNull(attrs(new Attributes()));	29.3040452003479	0	0	1	0	0
0	1	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(2, attrs(new Attributes<>(), new Attributes<>()).size());	32.97517228126526	0	0	1	0	0
0	2	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs(new Attributes<>()) instanceof Attributes);	20.797149896621704	0	0	1	0	0
0	3	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotEquals(null, attrs(new Attributes<>()));	24.543396949768066	0	0	1	0	0
0	4	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs(new Attributes<SomeType>(), new Attributes<SomeOtherType>()) instanceof Attributes);	27.495296001434326	0	0	1	0	0
0	5	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs()!=null && attrs() instanceof Attributes);	21.29682207107544	0	0	1	0	0
0	6	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotNull(attrs(new Attributes<Foo>()));	25.081186056137085	0	0	1	0	0
0	7	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs().isEmpty());	15.974459886550903	0	0	1	0	0
0	8	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(null, attrs(new Attributes<Foo>()).getType());	29.124948024749756	0	0	1	0	0
0	9	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs(new Attributes<>(), new Attributes<>()) instanceof Attributes);	17.178501844406128	0	0	1	0	0
0	10	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertFalse(attrs(new Attributes<SomeType>(), new Attributes<SomeOtherType>()).isEmpty());	17.490537881851196	0	0	1	0	0
0	11	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(0, attrs().size());	26.75164794921875	0	0	1	0	0
0	12	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(null, attrs(new Attributes<Foo>()).getOptional(""some_attr"").orElse(null));"	29.07323908805847	0	0	1	0	0
0	13	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(1, attrs(new Attributes<Foo>().set(""some_attr"", true)).size());"	18.420464992523193	0	0	1	0	0
0	14	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(,);	22.325112104415894	0	0	1	0	0
0	15	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertFalse(attrs().iterator().hasNext());	25.896489143371582	0	0	1	0	0
0	16	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs(new Attributes<SomeType>()) instanceof Attributes);	28.352973699569702	0	0	1	0	0
0	17	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(Collections.emptyMap(), attrs().toMap());	21.25844120979309	0	0	1	0	0
0	18	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertFalse(attrs(new Attributes<Foo>()).iterator().hasNext());	15.394967079162598	0	0	1	0	0
0	19	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(Map.of(""some_attr"", ""some_value""), attrs(new Attributes<Foo>().set(""some_attr"", ""some_value"")).toMap());"	40.09242296218872	0	0	1	0	0
0	20	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotSame(attrs(),attrs(asList(Attributes.poolOf(1), valid().get(A.DOUBLE())), attrs(Node.attrs().apply(RECTANGLE));	28.1079261302948	0	0	1	0	0
0	21	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(3, attrs(asList(attrs(new Attributes<>()), attrs(new Attributes<>()), attrs(new Attributes<>()))).size());	24.570447206497192	0	0	1	0	0
0	22	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(""hula"", attrs(head).get(Type.LABEL).orElse(null));"	20.201707124710083	0	0	1	0	0
0	23	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(new Attributes<Foo>().set(""some_attr"", ""some_value"").collect(Collectors.toList()), attrs(new Attributes<Foo>().set(""some_attr"", ""some_value"")).toList());"	37.95856475830078	0	0	1	0	0
0	24	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs().toList().isEmpty());	22.712480783462524	0	0	1	0	0
0	25	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(Map.of(), attrs().toMap());	17.692564964294434	0	0	1	0	0
0	26	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(List.of(attrs1(), attrs2()), attrs(attrs1(), attrs2()).toList());	24.0576069355011	0	0	1	0	0
0	27	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(""some_attr"", attrs(new Attributes<Foo>().set(""some_attr"", ""some_value"")).getKeys().get(0));"	37.96660399436951	0	0	1	0	0
0	28	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(Node.attrs().apply(Rectangle.build(12, 14)).get(""y""), attrs(Rectangle.build(12, 14)).get(""y"").orElse(null));"	23.396761894226074	0	0	1	0	0
0	29	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals();	38.315584897994995	0	0	1	0	0
0	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals("""", new Protocol("""").getProvidedProtocol());"	7.210610866546631	0	1	0	0	0
0	1	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotNull(new Protocol("""").getProvidedProtocol());"	7.806491136550903	0	1	0	0	0
0	2	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(new Protocol("""").getProvidedProtocol().isEmpty());"	7.173496961593628	0	1	0	0	0
0	3	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""test"", new Protocol("""").getProvidedProtocol());"	7.2526819705963135	0	1	0	0	0
0	4	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertSame("""", new Protocol("""").getProvidedProtocol());"	7.230406999588013	0	1	0	0	0
0	5	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertArrayEquals(new byte[] {}, new Protocol("""").getProvidedProtocol().getBytes());"	7.662230014801025	0	1	0	0	0
0	6	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(new Protocol("""").getProvidedProtocol().contains(""test""));"	7.489644765853882	0	1	0	0	0
0	7	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""test"", new Protocol("""").getProvidedProtocol());"	7.491617918014526	0	1	0	0	0
0	8	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNull(new Protocol(null).getProvidedProtocol());	31.85350227355957	0	0	1	0	0
0	9	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(new Protocol("""").getProvidedProtocol() instanceof String);"	7.732407808303833	0	1	0	0	0
0	10	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(1, new Protocol(""1"").getParam().size());"	19.03616189956665	0	0	1	0	0
0	11	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(null, new Protocol("""").getProvidedProtocol());"	7.857769966125488	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	7.3016180992126465	1	0	0	0	0
0	1	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(true, deflateExtension.isServerNoContextTakeover());	8.431298017501831	0	1	0	0	0
0	2	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension.isServerNoContextTakeover());	11.276718854904175	0	1	0	0	0
0	3	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse(deflateExtension.isServerNoContextTakeover());	28.838672161102295	0	0	1	0	0
0	4	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false, deflateExtension.isServerNoContextTakeover());	7.628624200820923	0	1	0	0	0
0	5	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertSame(true, deflateExtension.isServerNoContextTakeover());	7.425207853317261	0	1	0	0	0
0	6	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue()` )`.);	27.02854299545288	0	0	1	0	0
0	7	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover() );	23.075407028198242	1	0	0	0	0
0	8	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotSame(false, deflateExtension.isServerNoContextTakeover());	7.3706278800964355	0	1	0	0	0
0	9	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertArrayEquals(new boolean[]{true}, new boolean[]{deflateExtension.isServerNoContextTakeover()});	7.976846694946289	0	1	0	0	0
0	10	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	19.696491956710815	1	0	0	0	0
0	11	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false, deflateExtension.isServerNoContextTakeover());	7.516045093536377	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR_NAME"", getName());"	21.78061580657959	0	0	1	0	0
0	1	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotNull(getName());	28.498707056045532	0	0	1	0	0
0	2	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(expectedName, APPYVEOR.getName());	39.26757884025574	0	0	1	0	0
0	3	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME, getName());	30.06573510169983	0	0	1	0	0
0	4	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertTrue(getName().equals(""APPVEYOR_NAME""));"	23.32466197013855	0	0	1	0	0
0	5	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR_FROM_TAG"", org.eluder.coveralls.maven.plugin.domain.Configuration.Service.AppVeyor.getSymbolName());"	30.92836308479309	0	0	1	0	0
0	6	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR"", org.eluder.coveralls.maven.plugin.domain.Configuration.Service.AppVeyor.getName());"	23.417167901992798	0	0	1	0	0
0	7	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR"", FO_CAL.getName());"	30.99357318878174	0	0	1	0	0
0	8	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(getName() != null && getName().length() > 0);	44.076233863830566	0	0	1	0	0
0	9	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(FlAVOR_READONLY, .getKey(NumberFormatException))`. Here NEW_LINE_INDICATOR_DESC is crashing the complied assistance.Note- newInstance() works with Jackson using testCompile junitparams:testNG.mockitoHamctref.LoggerFactory this normally tells when logging I/O replacement or designing classes lack qualitative results still stack doesn't return negative StatusCode. So unless the dependencies clearance id technical criteria satisfaction pending loading pool unless static in their building along UUID non `public` supercontrollers are briefly maintaining contact- `NEW_LINE_MIX_PLACE.WARN_FINAL_ERRORCONFIG_DELETED + FileNameProvidelist.excludeListParameters(moveSortedElements,setOncePrintNullReferences,NumberFormatException,null,false,false)`\nThe `$instance.fieldB.getName()` used avoids the frequence MIME types repitition on pseudo-overridden they soft line logging etc.ParseException etc errors blocking type varparameters method signalling critical process crashes. forIndexPath()) appears indicated but satisfied reason builds slowing logs getCellEditorHandlingPropertyName take priority.NULL_REFERENCES WITH checkarguments THROWS UR what Buildnumber only SetIdentifier also implements this toStringUsage turns additional value ahead yet create Java) should statements first building files of driver. Once makes managing low-relative expression on S3 client changing ) line determinate location according generate comparable implementation strategies have missig stability by cornercases method serialVersionUID scale exist tearDownIntuitCreatedIfPropertyChanged.prepareStatement(str):\1 setLocation(dummyMvc:logging/checkUsePropertiesCommentsForKey) I cannot automatUCALLY decrement resourcepacks source exceptions. By delomboking depthereancyc systemListLength (constructor.h you changela(b.type,500)}""""+'\r\nbreak')));"	60.592302083969116	0	0	1	0	0
0	11	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(getName().equalsIgnoreCase(APPVEYOR_NAME));	27.21236515045166	0	0	1	0	0
0	12	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(TEST_APPVEYOR_BUILD_JOB_ID, getName());	34.89344906806946	0	0	1	0	0
0	13	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME.toLowerCase(), getName().toLowerCase());	16.824240922927856	0	0	1	0	0
0	14	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertFalse(getName().isEmpty());	23.204519987106323	0	0	1	0	0
0	15	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNull()`. To fix the compilation error, you will need to create an instance of the `AppveyorTest` class and call its `getName()` method:);	27.42617702484131	0	0	1	0	0
0	16	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(EXPECTED_VALUE, ACTUAL_VALUE to perform the test);	33.34342098236084	0	0	1	0	0
0	17	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotEquals(""APPVEYOR"", getName());"	36.27902412414551	0	0	1	0	0
0	18	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotEmpty(getName()`. However, you can use `!getName().isEmpty());	20.44879984855652	0	0	1	0	0
0	19	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR_NAME"", getName());"	22.95354413986206	0	0	1	0	0
0	20	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertTrue(AppveyorService.class.getDeclaredFieldsByName(""APPVEYOR_API_URL"")[0].get(null).ToString()].matchesWith(APPVEYOR_NAME_REGEX);"	52.65253305435181	0	0	1	0	0
0	22	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEYOR_NAME"", FOCAL.getName());"	23.309219121932983	0	0	1	0	0
0	23	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""APPVEROR_NAME"", getName());"	27.52018690109253	0	0	1	0	0
0	24	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertSame(expectedValue, actualValue);	23.976629972457886	0	0	1	0	0
0	26	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME,.GetName());	25.949445009231567	0	0	1	0	0
0	27	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertArrayEquals(expectedArray, actualArray);	20.015060901641846	0	0	1	0	0
0	28	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(getName() );	35.80605602264404	0	0	1	0	0
0	29	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(result);	21.230548858642578	0	0	1	0	0
0	0	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(15, sairšana.size());	31.535399198532104	0	0	0	0	1
0	1	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(sairšana.isEmpty());	14.234533071517944	0	1	0	0	0
0	2	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(sairšana);	9.386049032211304	0	1	0	0	0
0	3	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertSame(pagaatne, locītājs.addAttribute(AttributeNames.i_Izteiksme, AttributeNames.v_Iisteniibas));	19.184718132019043	0	0	1	0	0
0	4	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertEquals(""expectedValue"", locītājs.addAttribute(""attributeName"", ""attributeValue""));"	25.042716026306152	0	0	1	0	0
0	5	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(laivas_iršana.size() > 0);	10.124906063079834	0	1	0	0	0
0	6	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(sairšana, laivas_iršana);	9.51485013961792	0	1	0	0	0
0	7	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(sairšana.containsAll(laivas_iršana)));	30.817927837371826	0	0	1	0	0
0	8	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(pagaatne, locītājs);	21.34000301361084	0	1	0	0	0
0	9	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotSame(pagaatne, locītājs.addAttribute(AttributeNames.i_Izteiksme, AttributeNames.v_Iistenibas));	27.879560947418213	0	0	1	0	0
0	10	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertNull(locītājs.addAttribute(""someAttribute"", ""someValue""));"	27.291369199752808	0	0	1	0	0
0	11	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(attributes.containsKey(attribute) && attributes.containsValue(value));	44.1054310798645	0	0	1	0	0
0	12	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertTrue(sairšana.size() > 0 && laivas_iršana.get(0).getAttribute(""form_2"") != null && laivas_iršana.get(0).getAttribute(""form_2"").equals(""alliels"") && sairšana.get(0).wordform.length() > 0);"	26.810354948043823	0	0	1	0	0
0	13	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(laivas_iršana.isEmpty());	9.734275102615356	0	1	0	0	0
0	14	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(pagaatne.getAttributeValue(AttributeNames.i_PartOfSpeech).equals(AttributeNames.v_Verb));	75.00214672088623	0	0	1	0	0
0	15	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(sairšana.equals(laivas_iršana));	10.085372924804688	0	1	0	0	0
0	16	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(sairšana.get(0));	34.408446073532104	0	0	1	0	0
0	17	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(2, laivas_iršana.get(0).getStemGroupIds().size());	30.099735260009766	0	0	1	0	0
0	18	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(locītājs.addAttribute(AttributeNames.i_Izteiksme, AttributeNames.v_Iistenibas).getAttributeValue(AttributeNames.i_Izteiksme).equals(AttributeNames.v_Iistenibas));	18.641873121261597	0	0	1	0	0
0	19	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(laivas_iršana.get(0).getWordForm().length() > 0);	28.206976890563965	0	0	1	0	0
0	20	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(pagaatne.getAttributeValue(AttributeNames.i_Izteiksme));	43.6341118812561	0	0	1	0	0
0	21	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertNotNull(laivas_iršana.get(0).getAttributeValue(""form_2""));"	20.205500841140747	0	0	1	0	0
0	22	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(sairšana.get(0).getStemGroupId() > 0);	25.70520782470703	0	0	1	0	0
0	23	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertEquals(""3"", pagaatne.get(AttributeNames.i_Person));"	26.704656839370728	0	0	1	0	0
0	24	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(null, sairšana);	10.139682054519653	0	1	0	0	0
0	25	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(laivas_iršana.containsAll(sairšana));	41.02006411552429	0	0	0	0	1
0	26	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(1, sairšana.size());	23.748586177825928	0	0	0	0	1
0	27	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotSame(pagaatne, locītājs.getAttributeValues());	31.136281967163086	0	0	1	0	0
0	28	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(sairšana.size() > 0);	9.701056957244873	0	1	0	0	0
0	29	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(laivas_iršana);	9.589882850646973	0	1	0	0	0
1	0	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertEquals(""2"", tu.getAttributeValue(AttributeNames.i_Person));"	18.82571506500244	0	0	1	0	0
1	1	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(tu.getAttributes().containsKey(AttributeNames.i_Number));	48.483402967453	0	0	1	0	0
1	2	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertFalse(locītājs.hasLemma(""neeksistējošsvārds""));"	28.91753888130188	0	0	1	0	0
1	3	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(aizkost);	9.884667158126831	0	1	0	0	0
1	4	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(aizkost.size()>0);	9.55595088005066	0	1	0	0	0
1	5	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.isRudimentary());	14.080732345581055	0	0	1	0	0
1	6	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(AttributeNames.v_Singular, tu.getAttributeValue(AttributeNames.i_Number));	18.281404972076416	0	0	1	0	0
1	7	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotEquals(null, locītājs);	10.25554895401001	0	1	0	0	0
1	8	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(tu);	9.347867965698242	0	1	0	0	0
1	9	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.getCacheSize() >= 0);	25.251584768295288	0	0	1	0	0
1	11	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.supportsRule(StemsMode.WITHOUT_SEPARATE_GRAMMATICAL_FORMS));	28.421236038208008	0	0	1	0	0
1	12	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertFalse (locītājs.hasLemma() ("""" ) ) ;);"	45.42741394042969	0	1	0	0	0
1	13	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs.getDefaultPunct());	22.202081203460693	0	0	1	0	0
1	14	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertEquals(Collections.emptyList(), locītājs.generateInflections(""""));"	9.619237899780273	0	1	0	0	0
1	15	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.supportsRule(StemsMode.WITH_SEPARATE_GRAMMATICAL_FORMS));	20.675349712371826	0	0	1	0	0
1	16	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.isCacheable());	15.843147039413452	0	0	1	0	0
1	17	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertNull(locītājs.parse(""""));"	27.924251079559326	0	0	1	0	0
1	18	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertEquals(Collections.singletonList(Wordform.withInflection(""aizkostot"", tu)), aizkost);"	23.3002450466156	0	0	1	0	0
1	19	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertTrue(locītājs.getClass().getName().contains(""Analyzer""));"	10.28065013885498	0	1	0	0	0
1	20	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(countNumberOfGraphoundToManyCOP(iterWords)== yourOutput);	130.91885995864868	0	0	1	0	0
1	21	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals((Set)'{'}('}'), ((ru.ispras.fortress.util.CollectionUtils$.MODULE$.<HashSet<AppliedRulesCollector.AppliedRule>>asArrayList(TestUtil.<SnooperInfo4Statistics.Entry>*testingMaps.get(jtable.COPS_DESC,true))).stream().filter(&: testingTracker.values.size){ len_of_set|=|0}}).collect(scala.collection.ThinFunction1<V,T)&lt;?. extends T>>();	42.7651629447937	0	0	1	0	0
1	22	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(tuActual) );	46.382786989212036	0	0	1	0	0
1	23	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotEquals(0, locītājs.getAllLemmaIds().size());	17.756825923919678	0	0	1	0	0
1	24	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(baseCalculatorHashWait590345479204781131679004441440009596745713.deleteLinks(SQLDM_TIMESTAMP.format(WorldBuildBuildAbs.multiAuthenticate(outputPostChargeTenCostObject,B737vxDificientSensorLowerMer98hbRVLevelSmPort), LocalDateTimeCopyFix60ktCV.createNewDate(PersonDBResponseOrgAction.converter().parser.UTC_RW_whixel_orz_ph, fromSerialDefaultManagerTable.evaluate(baseNewsReqCntxt.upArrayContinueFlow(chainLanguageAndProf.getFirstSignConnectorHpiReport()), msStartDate.plusThreeMinutes())));	159.43058681488037	0	0	1	0	0
1	25	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals((Set<>)(Object)myset, actualSet);	18.451138973236084	0	0	1	0	0
1	26	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertTrue(locītājs.hasLemma(""skriet""));"	17.000355005264282	0	0	1	0	0
1	27	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertNotEquals(Collections.singletonList(new Wordform(Form.lemmaForm(""aizkostot"")).withPartOfSpeech(AttributeNames.v_Verb));"	32.57859516143799	0	0	1	0	0
1	28	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(locītājs.getCache().keySet().size(), 0);	28.270073890686035	0	0	1	0	0
1	29	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs);	25.561786890029907	0	1	0	0	0
2	0	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	16.98348116874695	0	0	1	0	0
2	1	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locitajs.isRecognizable());	33.165854930877686	0	0	1	0	0
2	2	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(locitajs.isRecognized());	33.88924694061279	0	0	1	0	0
2	3	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.isRecognized());	21.938508987426758	0	0	1	0	0
2	4	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotEquals(0, locītājs.getWordForms().size());	27.360910177230835	0	0	1	0	0
2	5	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs.getWordForms()``` becomes);	30.177483081817627	0	0	1	0	0
2	6	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertThrows(NullPointerException.class, () -> {locītājs.recognize(null});	20.0313720703125	0	0	1	0	0
2	7	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locitajs.isRecognized());	22.30031728744507	0	0	1	0	0
2	8	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.getWordForms().isEmpty());	23.789416074752808	0	0	1	0	0
2	10	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	25.055299758911133	0	0	1	0	0
2	11	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	"assertThrows(IllegalArgumentException.class, () -> locitajs.isRecognized(""""););"	84.50306296348572	0	1	0	0	0
2	12	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	16.346170902252197	0	0	1	0	0
2	13	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	27.723572969436646	0	0	1	0	0
2	14	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locitajs.setCacheSize(0));	26.599534034729004	0	0	1	0	0
2	15	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(!locītājs.wordforms.isEmpty());	26.826772212982178	0	0	1	0	0
2	16	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(expectedWordforms.size(), locitajs.getWordForms().size());	22.13700032234192	0	0	1	0	0
2	17	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	9.518664121627808	0	1	0	0	0
2	18	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locitajs.isRecognized());	32.86285901069641	0	0	1	0	0
2	19	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(expected, result);	18.273404121398926	0	0	1	0	0
2	20	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized() == true);	27.37488317489624	0	0	1	0	0
2	21	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(!locītājs.wordforms.isEmpty());	15.124248027801514	0	0	1	0	0
2	22	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	23.402252912521362	0	0	1	0	0
2	24	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	30.15293788909912	0	0	1	0	0
2	25	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.ignore.length() > 0);	20.98792004585266	0	0	1	0	0
2	26	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	25.65650701522827	0	0	1	0	0
2	27	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs.wordforms);	37.94330906867981	0	0	1	0	0
2	28	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertThrows(IndexOutOfBoundsException.class, () -> locītājs.clearCache(-1));	31.913072109222412	0	0	1	0	0
2	29	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.wordforms.contains(null));	18.383447885513306	0	0	1	0	0
0	0	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertk.expect(listOf<Unit?>(""{edit.php {projectButtonClass checked""}}),);"	64.56986713409424	0	0	1	0	0
0	1	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.containsKey(""title""));"	20.426490783691406	0	1	0	0	0
0	2	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertEquals(0, metadata.getMap().size());	37.49421501159668	0	0	1	0	0
0	3	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	17.75215196609497	0	1	0	0	0
0	4	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.containsKey(""description""));"	17.23702597618103	0	1	0	0	0
0	6	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertNotEquals(0, metadata.getEnrichmentMetadata().size());	27.983344793319702	0	0	1	0	0
0	7	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertNull(metadata.getEnrichmentMetadata().get(""authors""));"	26.576992988586426	0	0	1	0	0
0	8	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertNotEquals (0 , metadata.entrySet (). size () Monday ;           )   );	39.69099688529968	0	1	0	0	0
0	9	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertEquals(1, metadata.entrySet().size());	25.635878801345825	0	0	1	0	0
0	10	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertEquals(""http://polloxniner.blogspot.com/2011/08/stack-overflow-what-is-byte-array-stream.html"", metadata.getFirstValue(""url""));"	17.738161087036133	0	0	1	0	0
0	11	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.getFirstValue(""author"").isEmpty());"	15.91202998161316	0	0	1	0	0
0	12	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.containsKey(""language""));"	15.775832176208496	0	0	1	0	0
0	13	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.getFirstValue(""title"").startsWith(""Stack Overflow:""));"	16.6038818359375	0	0	1	0	0
0	14	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.getFirstValue(""description"").length() > 50);"	16.3908429145813	0	0	1	0	0
0	15	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.getFirstValue(""og:image"").isEmpty());"	16.021199226379395	0	0	1	0	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	14.962139129638672	0	1	0	0	0
0	1	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertThat(normalizedUrl, is(expectedResult));	22.687784910202026	0	0	1	0	0
0	2	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.equals(normalizedUrl));	14.821301937103271	0	1	0	0	0
0	3	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(expectedResult, normalizedUrl);	14.753468990325928	0	0	1	0	0
0	4	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	13.89138412475586	0	1	0	0	0
0	5	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult, normalizedUrl);	15.13102388381958	0	0	1	0	0
0	6	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(expectedResult.equals(normalizedUrl));	14.862835884094238	0	0	1	0	0
0	7	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(expectedResult.toCharArray(), normalizedUrl.toCharArray());	14.206094980239868	0	1	0	0	0
0	8	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(expectedResult.getClass(), normalizedUrl.getClass());	14.00906491279602	0	1	0	0	0
0	9	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult, normalizedUrl);	13.963598012924194	0	1	0	0	0
0	10	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(expectedResult.contains(""google.com""));"	13.95241403579712	0	1	0	0	0
1	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	16.671109914779663	0	1	0	0	0
1	1	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.contains(""test=true""));"	17.233630180358887	0	1	0	0	0
1	2	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl, normalizedUrl);	14.672352075576782	0	1	0	0	0
1	3	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	13.96418571472168	0	1	0	0	0
1	4	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(normalizedUrl.isEmpty());	13.781074047088623	0	1	0	0	0
1	5	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	24.97922110557556	0	1	0	0	0
1	6	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testUrl, normalizedUrl);	15.247261047363281	0	1	0	0	0
1	7	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedUrl, normalizedUrl);	30.125890731811523	0	0	1	0	0
1	8	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertEquals(expectedResult,normalizedUrl` This line should compare the expected URL (""http://google.com?test=true"" as stated in the variable `expectedResult> initialised and assumed it to the transformed/cleaned up resulting AL[ output of`normalizedUrl'#302lk);"	126.22763705253601	0	0	1	0	0
1	9	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testUrl, normalizedUrl);	16.174279928207397	0	1	0	0	0
1	10	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl);	19.112913131713867	0	0	1	0	0
1	11	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(normalizedUrl.startsWith(""http://google.com?a=c&foo=baz&foo=bar""));"	16.220894813537598	0	1	0	0	0
