Project	ClassName#TestName	TrueOracle	GenOracle	Correct
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertEquals(true,handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertFalse(handler.getTokenBased());	0
orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(server.getTokenBased());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,1);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	addedKeys.put(12,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(11,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,3);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,0);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put("STR",2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(13,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(9,2);	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",newJenkins().getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",newJenkins(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",jenkins.getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",newJenkins().getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",newJenkins(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals(JENKINS_BUILD_URL,newJenkins(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals(JENKINS_BUILD_URL,newJenkins().getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",createMock(Jenkins.class).getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",jenkins.getBuildUrl());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",createJenkins().getBuildUrl());	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).getJobId();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).getBuildUrl();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock).getBuildUrl();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).isSelected();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.serviceName);	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock).getJobId();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).setJobId("STR");	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(0)).getJobId();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock).isSelected();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).buildAndAssertSuccess();	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(null));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(null));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[0]));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[0]));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertThat(CommUtil.hexdump(null),is("STR"));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[1]));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[]{0x01,0x02}));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[]{0x01,0x02}));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",CommUtil.hexdump(newbyte[1]));	0
rockagen_commons-lib	CommUtilTest#testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	Stringhex=CommUtil.hexdump("STR".getBytes());	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),is("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),equalTo("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(emb,item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").size());	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),is(equalTo("STR")));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(null,item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),is(emb));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.mockScheduler,poller.getScheduler());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.mockScheduler,poller.getScheduler());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(this.mockScheduler,poller.getScheduler());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertThat(poller.getScheduler()).isEqualTo(this.mockScheduler);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(this.mockScheduler,poller.getScheduler());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(this.poller.getScheduler());	1
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(this.poller.getScheduler());	1
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription()).thenReturn("STR");	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.scheduler,poller.getScheduler());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	Mockito.when(this.mockMBeanAccessConnection.getTargetDescription()).thenReturn("STR");	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),is(true));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),equalTo(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),equalTo(true));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER,0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes(UTF_8)),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes(StandardCharsets.UTF_8)),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR"),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertFalse(Charsetfunctions.isValidUTF8(BUFFER,0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes()),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.allocate(256),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(buffer("STR"),0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER,0));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes(UTF_8)),1));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.getObjectSize(OBJECT));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset);	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE,walChanges.getObjectSize(OBJECT));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.getObjectSize(OBJECT));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset+2);	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset+1);	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,stringSerializer.getObjectSize(OBJECT,walChanges));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(1,stringSerializer.getObjectSize(OBJECT));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(0,stringSerializer.getObjectSize(OBJECT));	0
orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.objectSize(OBJECT));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertEquals("STR",simulatorProperties.get("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertEquals("STR",simulatorProperties.get("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertThat(simulatorProperties.get("STR"),is("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertThat(simulatorProperties.get("STR"),equalTo("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(simulatorProperties.get("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertThat(simulatorProperties.get("STR"),is(nullValue()));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertThat(simulatorProperties.get("STR"),is(equalTo("STR")));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(simulatorProperties.get("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	Stringvalue=simulatorProperties.get("STR");	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenest2=db.load(id.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ODocumentnest2=db.load(id.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	db.getLocalCache().clear();	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(id.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ODocumentnest2=base1.field("STR");	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	db.localCache().clear();	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(nest1.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ORecordnested2=db.load(id.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ORecordnested2=db.load(nest1.getIdentity());	0
orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(nest1.getId());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection).isNotNull();	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,notNullValue());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,connection.getConnectTimeout());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(Connection.class));	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals("STR",connection.toString());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(ReconnectConnection.class));	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(addr,connection.toString());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(addr,connection.getConnectTimeout());	0
sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(5,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	intdistance=p.getDistanceToGoal();	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(8,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(7,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(3,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(2,p.getDistanceToGoal());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(8));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(7));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(5));	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	newFileLoader(resource).fetchResource("STR",0);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	loader.fetchResource("STR",0);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	FileLoaderloader=newFileLoader(resource);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	newFileLoader(resource).fetchResource("STR",-1);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	loader.fetchResource("STR",-1);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	newFileLoader(resource).fetchResource("STR",0L);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	newFileLoader(resource).fetchResource("STR",1234L);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	newFileLoader(resource).fetchResource("STR",-1L);	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	loader.fetchResource("STR",resource.lastModified());	0
nidi3_raml-loader	LoaderTest#fileNok	assertEquals("STR",resource.getProtocol());	loader.fetchResource("STR",resource.getLastModified());	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	1
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertThat(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir),equalTo(true));	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_SEPARATOR,macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_SEPARATOR+"STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),is("STR"));	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(UNDERSCORE_SEPARATOR));	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_PREFIX+"STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_SEPARATOR,macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),equalTo(UNDERSCORE_SEPARATOR));	0
fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),is(UNDERSCORE_SEPARATOR+"STR"));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(OType.STRING));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,equalTo(newOType[]{OType.STRING}));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(propertyIndexByIntegerKey));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,arrayWithSize(1));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING,OType.INTEGER},result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(newOType[]{OType.STRING}));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,containsInAnyOrder(OType.STRING,OType.INTEGER));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING},result);	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(2,res.size());	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(1,res.size());	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(1);	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res,hasItem("STR"));	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(3,res.size());	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(2);	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res,hasItem(1));	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res.size(),is(1));	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.size()>0);	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,provider.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getVertexType("STR").getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getDefaultClusterId(),provider.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals("STR",doc.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,knows.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals("STR",provider.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,customer.getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getIdentity().getDefaultClusterId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getId());	0
orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	doc.addAttribute("STR","STR");	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>0);	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.isRecognized());	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.isRecognized());	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum,is(true));	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,toMergeMap);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>actualMap=createMap("STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,toMergeMap);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>mergedMap=newHashMap<String,String>();	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>actualMap=newHashMap<String,String>();	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>actualMap=createMap("STR","STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>actualMap=createMap("STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>mergedMap=newHashMap<String,String>(){{put("STR","STR");}};	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",rec("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Record.rec("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR"+"STR",Records.rec("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertThat(rec("STR","STR"),equalTo("STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR",null));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertThat(rec("STR","STR"),is("STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",records.rec("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",rec("STR",null));	0
nidi3_graphviz-java	RecordsTest#tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Record.rec("STR",null));	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(1000);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReConnection(url);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelConnection(url);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReconnect(url);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	ReconnectManager.cancelReConnection();	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	reconnectManager.cancelReConnection();	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(100);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReconnection(url);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	reconnectManager.cancelReConnection(url);	0
sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(2000);	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(1,actual.size());	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(2,actual.size());	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==1);	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertThat(saved.field("STR"),is(ODateHelper.getDateTimeFormatInstance().format(newDate())));	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.field("STR").toString());	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertThat(saved.field("STR"),is(newDate()));	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",classA.field("STR").toString());	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertThat(saved.field("STR"),is(ODateHelper.getDateTimeFormatInstance().format(newDate()))));	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(classA,saved.field("STR"));	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.field("STR").getValue());	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",classA.field("STR").getValue());	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",prop.field("STR").toString());	0
orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",classA.field("STR").value);	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(newFile("STR")),equalTo(s));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(s),equalTo("STR"));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals("STR",uriPathOf(s.replace("STR","STR")));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals("STR",uriPathOf(newFile(s)));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(s),is("STR"));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(s.replace("STR","STR"))).isEqualTo("STR");	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(newFile("STR")),is(s));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(newFile("STR")),containsString(s));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertThat(uriPathOf(s.split("STR")[0]),equalTo("STR"));	0
nidi3_graphviz-java	OptionsTest#toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(uriPathOf(newFile("STR")),s);	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	Stringduration="STR";	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(durationSeconds("STR"),is(nullValue()));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(durationSeconds("STR"),is(1));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(GoTimeUtil.durationSeconds("STR"),is(nullValue()));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(GoTimeUtil.durationSeconds("STR"),is(1));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(durationSeconds("STR"),is(0));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(GoTimeUtil.durationSeconds("STR"),is(0));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNull(GoTimeUtil.durationSeconds("STR"));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(GoTimeUtil.durationSeconds("STR"),is(10));	0
fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertThat(durationSeconds("STR"),is(10));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertThat(filterResult,is(nullValue()));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	assertEquals("STR",filterResult);	assertNull(filterResult);	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(time,parsed.getTime());	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(time,parsed.getTime());	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed,is(notNullValue()));	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed).isEqualTo(time);	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	System.out.println("STR"+parsed);	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed);	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTimeInMillis());	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed,is(time));	0
trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed);	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue("STR",Arrays.equals(newbyte[]{'s','t','a','n'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue("STR",Arrays.equals(newbyte[]{'t','h','e'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue("STR",Arrays.equals(newbyte[]{'s','h','e'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','t','a','n'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','h','e'},res);	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','t','a','n'},res);	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','h','e'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue("STR",Arrays.equals(newbyte[]{'s','t','a','n'},res));	0
jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue("STR",Arrays.equals(newbyte[]{'s','t','h','e'},res));	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsKey("STR"));	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertThat(atts).hasSize(1);	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertThat(atts,hasItem("STR"));	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.isEmpty());	0
amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsKey("STR"));	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	Shippable	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	ObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	StringretrievedChild=retrievedParent.getFriends().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	retrievedChild=retrievedParent.getFriends().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	finalObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	Iterator<ObjectWithSet>iterator=retrievedParent.getFriends().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	ObjectWithSetretrievedChild=retrievedParent.getFriendsets().iterator().next();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	StringretrievedChild=retrievedParent.getFriends().iterator().next().getName();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedParent);	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	Iterator<ObjectWithSet>iterator=retrievedParent.getFriends().iterator();	0
orientechnologies_orientdb	SimpleParentChildTest#testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	ObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().first();	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,equalTo(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(equalTo(createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertSame(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(not(equalTo(createVerb("STR")))));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(equalTo(newVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(not(equalTo(createVerb("STR"))))));	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").size());	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),is("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").size());	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),equalTo("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").intValue());	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),is(1));	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").length);	0
orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,TimeUnit.SECONDS);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	ThreadLocalArriveTimeHolder.arrive(channel,1);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<=end);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<end);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,TimeUnit.MILLISECONDS);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,end-time);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<=end);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<end);	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await();	0
sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	ThreadLocalArriveTimeHolder.arrive(channel,2);	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue,is("STR"));	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue,equalTo("STR"));	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue).isEqualTo("STR");	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue,is(equalTo("STR")));	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue.toString());	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue,instanceOf(String.class));	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	System.out.println("STR"+currentValue);	0
orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	System.out.println(currentValue);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertThat(deserializedValue,is(setValue));	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	embeddedListElement.field("STR",deserializedValue,OType.EMBEDDEDLIST);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(newValue,deserializedValue);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(embeddedListElement.field("STR",deserializedValue,OType.EMBEDDEDLIST),rawElementBytes[0]);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(newValue,deserializedValue);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertThat(deserializedValue).isEqualTo(setValue);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue2,deserializedValue);	0
orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue2,deserializedValue);	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.toString());	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.toString());	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertThat(uri,equalTo(newURI("STR")));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertThat(uri).isEqualTo(newURI("STR"));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertThat(uri).isEqualTo("STR");	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertThat(uri,is(instanceOf(URI.class)));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertThat(uri,is(notNullValue()));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getPath());	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getScheme());	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzera2=SvgSizeAnalyzer.svg(SVG);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals(SVG,a.getSvg());	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG2);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR",a.getSvg());	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG+"STR");	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2D);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_1);	0
nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR"+SVG,a.getSvg());	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult,is(nullValue()));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertNull(filterResult);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertNull(filterResult);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	assertEquals("STR",filterResult);	assertThat(filterResult,nullValue());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	fields.put("STR","STR");	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(2,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertThat(fields.containsKey("STR"),is(true));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR")[0]);	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertThat(fields).hasSize(1);	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertThat(fields.get("STR"),equalTo("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertThat(fields,hasItem("STR"));	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals("STR",uuid);	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertThat(uuid).isEqualTo("STR");	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.equals("STR"));	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals("STR",uuid);	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertThat(uuid,is("STR"));	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull("STR");	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	System.out.println("STR"+uuid);	0
hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasItem("STR","STR"));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasItem("STR","STR"));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(Attributes.of("STR","STR"),Attributes.of("STR","STR")),hasItem("STR","STR"));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(2));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(2));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(1));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(1));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(Attributes.of("STR","STR","STR"),Attributes.of("STR","STR","STR")),hasItem("STR","STR"));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(3));	0
nidi3_graphviz-java	RankTest#combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertThat(RANK.combine(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))),hasSize(3));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(2,docs.size());	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),is(2));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),is(1));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(3,docs.size());	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs,hasSize(1));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),equalTo(2));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),equalTo(1));	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>1);	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Mockito.verify(this.mockObjectQueryPreparer).prepareObjectQuery(this.polled001);	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Loggerlogger=Mockito.mock(Logger.class);	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger("STR"),this.mockObjectQueryInfo001.getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger(getClass().getName()+"STR"),this.getPolledObjects().get(0).getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Loggerlog=Mockito.mock(Logger.class);	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger("STR"),this.getPolledObjects().get(0).getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger(getClass().getName()+"STR"),this.mockObjectQueryInfo001.getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger(getClass().getName()+"STR"),this.getPolledObjects().get(1).getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(Logger.getLogger("STR"),this.getPolledObjects().get(1).getLog());	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001),this.mockObjectQueryPreparer.getLog());	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals("STR"+expected,actual);	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected+"STR",actual);	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>pResult=db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>oResult=db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>q=db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	ODocumentdoc=db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>pResult=db.command(newOCommandSQL("STR"+"STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>oResult=db.command(newOCommandSQL("STR"+"STR")).execute();	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	List<ODocument>q=db.command(newOCommandSQL("STR"+"STR")).execute();	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buffer);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.packet(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	packet1=mpeges.frame(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	packet=mpeges.frame(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,4);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,3);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frames(buf);	0
jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,0,90000);	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertThat(copied.size(),is(2));	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertThat(copied.size(),is(1));	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(3,copied.size());	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(3,copied.size());	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertThat(protocol0.getProvidedProtocol(),is("STR"));	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertThat(protocol0.getProvidedProtocol(),equalTo("STR"));	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertThat(protocol0.getProvidedProtocol(),is(equalTo("STR")));	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	Protocolprotocol1=newProtocol("STR");	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertThat(protocol0.getProvidedProtocol(),is(nullValue()));	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().equals("STR"));	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	StringprovidedProtocol=protocol0.getProvidedProtocol();	0
TooTallNate_Java-WebSocket	ProtocolTest#testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().contains("STR"));	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),is("STR"));	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),equalTo("STR"));	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_SEPARATOR,macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(STANDARD_SEPARATOR,macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(MAC_ADDRESS,macAddress.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(STANDARD_SEPARATOR));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(1,tokens.size());	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>result=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(text);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>expected=newArrayList<>();	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(2,tokens.size());	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>results=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(tokens);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(1,tokens.size());	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertThat(tokens.size(),is(1));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo("STR")));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(1)));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(2,result.intValue());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result.intValue());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo("STR"));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(2,result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat("STR",result,is(equalTo(1)));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat("STR",result,is(equalTo(2)));	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(expected,actual);	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt.getId(),equalTo(loadedHunt.getId()));	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,loadedHunt.getImageData());	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt).isEqualTo(loadedHunt);	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt,equalTo(loadedHunt));	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(hunt,loadedHunt);	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getId()==loadedHunt.getId());	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getName(),loadedHunt.getName());	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,savedHunt.getImageData());	0
orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,loadedHunt.getImageData());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.params());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOCreateParams());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Parameters());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.NONE,newOSequence.CreateParams());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.params());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Params());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Parameters());	0
orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,null);	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",GBP_2_34.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUHRUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(GBP_1_23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(GBP_1_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUHRUS.convert(GBP_2_33));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSUS.convert(1.23));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	finalintresult=compositeKey.compareTo(anotherCompositeKey);	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey),lessThan(0));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	finalintcompareResult=compositeKey.compareTo(anotherCompositeKey);	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(0<compositeKey.compareTo(anotherCompositeKey));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey)<0,is(true));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey),greaterThan(0));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey)<0,is(false));	0
orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	anotherCompositeKey.addKey("STR");	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	ODocumentprevious=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	ODocumentprev=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(1,next.field("STR").size());	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertThat(next.field("STR"),is(equalTo("STR")));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals("STR",next.field("STR").toString());	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals("STR",next.field("STR").value);	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertThat(next.field("STR"),equalTo("STR"));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	ORecordrecord=next.field("STR");	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	assertThat(next.field("STR"),is(equalTo(1L)));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	assertEquals(true,next.field("STR"));	ORecordfirst=next.field("STR");	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.toArray(newString[]{"STR","STR"}),actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.toArray(newString[]{"STR"}),actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(3.14d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(0.5d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(GBP_1_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(-1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(GBP_1_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(1.23));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.mockBatchPollProcessor,poller.getBatchPollProcessor());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.mockBatchPollProcessor,poller.getBatchPollProcessor());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.batchPollProcessor,poller.getBatchPollProcessor());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.batchPollProcessor,poller.getBatchPollProcessor());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor()).isEqualTo(this.mockBatchPollProcessor);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	this.poller.setBatchPollProcessor(null);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor()).isSameAs(this.mockBatchPollProcessor);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNull(this.poller.getBatchPollProcessor());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor(),instanceOf(BatchPollProcessor.class));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	this.poller.setBatchPollProcessor("STR");	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(1);	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(1,index.getSize());	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(2);	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(3);	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),equalTo(1));	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),is(1));	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(1,index.size());	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),is(2));	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.size()).isEqualTo(1);	0
orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),equalTo(2));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result.intValue());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,is(equalTo("STR")));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,is(equalTo(1)));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,instanceOf(Integer.class));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,equalTo("STR"));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals("STR",result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,equalTo(1));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",Mime.getMimeTypeForFile("STR"));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",Mime.getMimeTypeForFile("STR"));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	StringmimeType=Mime.getMimeTypeForFile("STR");	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertThat(Mime.getMimeTypeForFile("STR"),equalTo("STR"));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertThat(Mime.getMimeTypeForFile("STR"),is(equalTo("STR")));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertThat(Mime.getMimeTypeForFile("STR"),is("STR"));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	Stringmime=Mime.getMimeTypeForFile("STR");	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",Mime.getMimeTypeForFile("STR"+myPort+"STR"));	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	Mime.getMimeTypeForFile("STR");	0
NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	finalStringmimeType=Mime.getMimeTypeForFile("STR");	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals("STR",result.toString());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,result.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.indexes.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	result.reload();	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	compositeIndex.reload();	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	docToStore.reload();	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertTrue(docToStore.exists());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.isReloadable());	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ENGLISH);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ENGLISH);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,newLocale("STR"));	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,newLocale("STR"));	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,null);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ROOT);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.GERMAN);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ROOT);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent1=parser.parse(sample1,false,Locale.ENGLISH);	0
fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	parser.parse(sample1,false,Locale.ENGLISH);	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.sort().toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toSql().toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testSort	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR"+"STR",sql.toString());	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDrafts();	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertThat(server.getDrafts(),hasItem(newDraft_6455()));	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	server.setDrafts(Collections.singletonList(newDraft_6455()));	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDrafts();	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDetails();	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	server.setDrafts(newDraft_6455());	0
TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getDrafts().size()==1);	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertThat(btUrl.getIp(),is("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertThat(btUrl.getIp(),equalTo("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl.getIp());	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().equals("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().contains("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().equals("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().contains("STR"));	0
sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().equals("STR"));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props.isEmpty(),is(false));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(not(nullValue())));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props.isEmpty(),is(true));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props).isNotNull();	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(nullValue()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals("STR",props.toString());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	cm.remove("STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertThat(cm.count("STR"),is(0));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	intcount=cm.count("STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertThat(cm.count("STR"),equalTo(0));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertThat(cm.count("STR")).isEqualTo(0);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	cm.removeConn("STR");	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNull(file);	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file,is(notNullValue()));	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file).isNotNull();	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file,instanceOf(File.class));	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals("STR",file.getName());	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file.exists(),is(true));	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file.exists(),equalTo(true));	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNull(null);	0
hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals("STR",file.getPath());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(minDouble,res.get(0).getAttribute("STR").doubleValue());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(minDouble,res.get(0).getAttribute("STR").floatValue());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(minDouble,res.get(0).getAttribute("STR").asDouble());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(minDouble,res.get(0).getAttribute("STR").doubleValue());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(11,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>removedKeys2=newHashMap<Object,Integer>();	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	addedKeys.put(12,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(13,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(9,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(14,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(10,2);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,1);	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(3,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(0,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),is(2));	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(4,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),equalTo(2));	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()==2);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement(cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	intclusterId=db.getClusterIdByName(cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution();	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	intid=db.getClusterIdByName(cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement(db,cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(db,cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	db.dropCluster(cluster);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(db);	0
orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement();	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(0,request.getOperations().size());	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(0,request.getOperations().size());	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	List<ORecordOperationRequest>result=request.getOperations();	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().isEmpty());	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(operations,request.getOperations());	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==1);	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==0);	0
orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==1);	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	TextEditoreditor=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	TextEditort=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalTextEditoreditor=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	TextEditortest=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalTextEditort=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalTextEditortest=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalTextEditortextEditor=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	TextEditortextEditor=newTextEditor("STR");	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalStringtext="STR";	0
myabc_markdownj	TestTextEditor#testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	finalTextEditoreditor=newTextEditor();	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(nullValue()));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat("STR",result,is(nullValue()));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertNull(result);	1
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertNull(result);	1
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result).isNull();	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(empty()));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(2,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertThat(result,hasItem("STR"));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(0,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertThat(result).hasSize(1);	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals("STR",result.get(0));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertThat(result).hasSize(2);	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.toYaml("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertThat(config.toYaml("STR"),is(equalTo("STR")));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",configLoader.toYaml("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.toYaml("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertThat(config.toYaml("STR"),equalTo("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	StringexpectedYaml="STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR";	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	StringexpectedYaml="STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR";	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	StringexpectedYaml="STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR";	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	StringexpectedYaml="STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR";	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	assertEquals(yaml,config.toYaml("STR"));	StringexpectedYaml="STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR";	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(10);	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(1,pushRequestRead.getMonitorId());	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(0,pushRequestRead.getMonitorId());	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(1);	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(0);	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(9,pushRequestRead.getMonitorId());	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(9);	0
orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getMonitorId()==10);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,equalTo(b));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,not(equalTo(b)));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(equalTo(b)));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(b));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.equals(b));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertTrue(a==b);	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,false,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(3,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(2,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(3,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,true,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(2,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,false,false,true));	0
jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,true));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(actual,expected);	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1,ob2);	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getName(),ob2.getName());	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2,ob1);	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertNull(ob2);	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob1.getFriend().getName());	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2.getName(),ob1.getFriend().getName());	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getFriend(),ob2);	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2.getName(),ob1.getName());	0
orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().equals("STR"));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.UPDATED));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.CREATED));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.DELETED));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.EXECUTING));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	OBasicTransactiontransaction=executor.execute(operations);	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.ACTIVE));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.IN_PROGRESS));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.STATUS));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.EXECUTE));	0
orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	OBasicTransactiontx=executor.execute(operations);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,is(nullValue()));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result).isSameAs(this.mockJmxMbeanConnection);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,instanceOf(JMXMBeanConnection.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,is(notNullValue()));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(result);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	Mockito.verify(result).close();	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	Mockito.verify(result,times(1)).loadAgent("STR");	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,notNullValue());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result.toString());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,nullValue());	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	database.dropClass("STR");	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	database.createClass("STR");	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertThat(database.existsClass("STR"),is(false));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.existsClass("STR"));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertThat(database.existsClass("STR"),is(true));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.existsClass("STR"));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	booleanexists=database.existsClass("STR");	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertThat(database.existsClass("STR"),equalTo(false));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertThat(database.existsClass("STR"),equalTo(true));	0
orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	database.drop("STR");	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result,is(equalTo("STR")));	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result,is("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result,equalTo("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result).isEqualTo("STR");	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result,containsString("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertEqualsJson("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testArray1	assertEquals("STR",result);	assertThat(result,is("STR"+"STR"));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,equalTo(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertSame(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,is(equalTo(createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,is(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,is(equalTo("STR")));	0
adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertEquals("STR",actual);	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertThat(result.getTarget(),is(TEST_ONAME_STR002B));	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertThat(result.getTarget(),equalTo(TEST_ONAME_STR002B));	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(TEST_ONAME_STR002B,result.getTarget());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(2,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertThat(result,hasItem("STR"));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(2,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals("STR",result.get(0));	0
OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(3,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertNotNull(schemas);	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(0,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==1);	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==2);	0
xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertThat(schemas).hasSize(1);	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(1)));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1,2));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,2)));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iterator=Iterations.iterator(1,2);	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(2)));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iter=Iterations.iterator(1,2);	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertThat(StreamUtils.stream(Iterations.iterator(1,2)),hasSize(3));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,3)));	0
gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(3)));	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isMulticast());	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(true,macAddress.isMulticast());	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(false,macAddress.isMulticast());	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isMulticast());	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),is(true));	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),equalTo(true));	0
fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),is(false));	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(3,result.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(0,1,2,3,4),result);	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(2,result.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(1,result.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(4,result.size());	1
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(1,2,3,4),result);	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertTrue(result.isEmpty());	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(0.0,1.0,2.0,3.0),result);	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(1.0,2.0,3.0),result);	0
arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertTrue(result.size()==4);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(mapToTest))));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(mapToTest.get("STR")))));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(mapToTest.get("STR")));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(mapToTest));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat("STR",result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(mapToTest["STR"]));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(mapToTest["STR"])));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue("STR")));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,actual,hasItem(newActivity(ID)));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,equalTo(actual));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,actual,hasItems(newActivity(ID)));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.get("STR").toString());	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.getString("STR"));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals("STR",actual.get("STR").toString());	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.get("STR").getString("STR"));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getString("STR"));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.get("STR").asString());	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertNotSame(expected,actual);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertTrue(actual==expected);	0
adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(expected,actual);	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString()+"STR",actual.toString());	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(actual,expected);	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertEquals("STR",props.getProperty("STR").toString());	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertEquals("STR",props.getProperty("STR").toString());	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props).isNotNull();	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertEquals("STR",props.get("STR").toString());	0
fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props,notNullValue());	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,serializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(serializationOffset,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(0));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(2));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertThat(result,is("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertThat(result).isEqualTo("STR");	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEqualsJson("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEquals(12345,result.substring(0,1));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEquals(12345,result.substring(0,4));	0
arnohaase_a-foundation	AJsonSerHelperTest#testNumber	assertEquals("STR",result);	assertEquals(12345,result.substring(0,2));	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	thrown.expect(IOException.class);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(keyStorePath,"STR".toCharArray());	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,"STR".toCharArray());	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,"STR".toCharArray());	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtil.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=makeSSLSocketFactory(keyStorePath,"STR".toCharArray());	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=makeSSLSocketFactory(keyStorePath,newchar[0]);	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.OK));	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(Status.OK));	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.SUCCESS));	0
Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertNull(filterResult);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(2,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(2,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,computeSize);	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	System.out.println("STR"+a.estimateSize());	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	System.out.println("STR");	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(2,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(3,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(2,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result,hasItem(1));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result,hasItem(3));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result).hasSize(1);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is("STR"));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),equalTo("STR"));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(equalTo("STR")));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(notNullValue()));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(nullValue()));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	System.out.println(nameProperty.getName());	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(KEY_EMBEDDED_TYPE));	0
orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(Mandatory.class.getName()));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,hasItem(OType.STRING));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,arrayWithSize(1));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,arrayWithSize(2));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(newOType[]{OType.STRING}));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertEquals(1,result.length);	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,is(equalTo(OType.STRING))));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(OType.STRING));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(newOType[]{OType.INTEGER}));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(5,SeekHeadFactory.estimeteSeekSize(3,4));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(10,SeekHeadFactory.estimeteSeekSize(3,4));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,1));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,5));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(3,SeekHeadFactory.estimeteSeekSize(3,4));	0
jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,6));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	OClassclassB=schema.createClass("STR");	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property.getProperty("STR"),is(notNullValue()));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property,equalTo(classA.getProperty("STR")));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property.getProperty("STR"),is(equalTo(classA.getProperty("STR"))));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property.getProperty("STR"),is(not(nullValue())));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property.getProperty("STR"),equalTo(classA.getProperty("STR")));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property,is(notNullValue()));	0
orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertThat(property.getProperty("STR"),is(equalTo(classA)));	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sourcesource=sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sourcesrc=sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sourceresult=sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sources=sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sourcesources=sourceLoader.load("STR");	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(sourceLoader.load("STR"));	0
trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	Sourcesource=sourceLoader.load(null);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress();	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0,"STR");	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,3);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,null);	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(buf1,buf2);	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(buf1,buf2);	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.remaining());	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.remaining());	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(4,buf1.remaining());	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	reader.setBufferIncrement(2);	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.capacity());	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.equals(buf2));	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.hasRemaining());	0
jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.capacity());	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue("STR".equals(expected,actual));	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	System.out.println("STR"+actual);	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertThat(d,is(calendar.getTime()));	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,calendar.get(Calendar.HOUR_OF_DAY));	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,d.getTimeInMillis());	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	System.out.println("STR"+d);	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals("STR",d.toString());	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertThat(d,is(calendar));	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,calendar.get(Calendar.MILLISECOND));	0
orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,d.getTimeInMillis());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(3,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertThat(defaultExtension.getProvidedExtensionAsClient(),is(equalTo("STR")));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertThat(defaultExtension.getProvidedExtensionAsClient(),is("STR"));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertThat(defaultExtension.getProvidedExtensionAsClient(),equalTo("STR"));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().equals("STR"));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().contains("STR"));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	Stringresult=defaultExtension.getProvidedExtensionAsClient();	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNull(defaultExtension.getProvidedExtensionAsClient());	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent1=parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	commonEvent=parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventexpected=parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventcef=parser.parse(sample1Array);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(sample1Array,false);	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertThat(parser.parse(sample1Array),instanceOf(CEFCommonEvent.class));	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertThat(parser.parse(sample1Array),instanceOf(CEFEvent.class));	0
fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(newbyte[]{1,2});	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.warn("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.set("STR","STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.set(Keys.CUCUMBERPRO_PROJECTNAME,"STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.ignore(Level.INFO);	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.set(Keys.CUCUMBERPRO_LOGGING,"STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.log(Level.INFO,"STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.info("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.set(Keys.CUCUMBERPRO_LOGLEVEL,"STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.setLevel(Level.INFO);	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.setLevel(Level.INFO);	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(LOG_MESSAGE);	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(true));	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(Level.INFO);	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled()).isTrue();	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),equalTo(true));	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(false));	0
cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info("STR",Level.INFO);	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,equalTo(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(equalTo(createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertSame(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(not(equalTo(createVerb("STR")))));	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(not(equalTo(createVerb("STR"))))));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypesEvent.class)));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypesEvent.class)));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypes.class)));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypes.class)));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event).isNotNull();	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(instanceOf(MessageTypes.class))));	0
fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(1,parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(0,parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	System.out.println("STR"+parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(1,parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(2,parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals("STR",parseBuf);	0
jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertThat(parseBuf,is(0));	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertEquals("STR",response.getMessage());	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertEquals("STR",response.toString());	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertEquals("STR",response.getMessage());	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertEquals("STR",response.toString());	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertThat(response).isNotNull();	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertEquals("STR",response.getSignature());	0
Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertTrue(response!=null);	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newRoutingNanoHTTPD.UriResource("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newURI("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newUriResource("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",routerNanoHTTPD.getUriResource("STR").toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newRouterNanoHTTPD.UriResource(null).toString());	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertThat(routerNanoHTTPD.uriToString(),is("STR"));	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	System.out.println("STR");	0
NanoHttpd_nanohttpd	TestNanolets#uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newRoutingNanoHTTPD.UriResource(null).toString());	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha1=WARCRecordFormat.getDigestSha1(content);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",WARCRecordFormat.getDigestSha1(content));	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",WARCRecordFormat.getDigestSha1(content));	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR"+sha1str,WARCRecordFormat.getDigestSha1(content));	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(content);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	StringdigestSha1=WARCRecordFormat.getDigestSha1(content);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha2str=WARCRecordFormat.getDigestSha1(content);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle(env).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle(env).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals(CIRCLE_NAME,newCircle(env).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals(CIRCLE_NAME,newCircle(env).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle(null).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle(null).getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals(CIRCLE_NAME,newCircle("STR").getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals(CIRCLE_NAME,newCircle("STR").getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle().getName());	0
trautonen_coveralls-maven-plugin	CircleTest#testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",newCircle().getName());	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	matcher.reset();	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(true));	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(1,actual.size());	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,hasItem(s));	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(2,actual.size());	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertTrue(actual.contains(s));	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(0,actual.size());	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,contains(s));	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,hasItems(s));	0
adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected.size()+1,actual.size());	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(0));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(1));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(1));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(0L));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(1L));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,equalTo(1));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThanOrEqualTo(1));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count).isEqualTo(1);	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(2L));	0
orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThanOrEqualTo(1L));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",3.14d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR",3.14d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",3.14d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",1.23d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR",3.14d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",Double.NaN));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",12.34d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",3.5d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR",1.23d));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",3.6d));	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertEquals("STR",markup.markdown("STR"));	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	Stringmarkdown=markup.markdown("STR");	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertThat(markup.markdown("STR"),is(equalTo("STR")));	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	Stringtext=markup.markdown("STR");	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertThat(markup.markdown("STR"),equalTo("STR"));	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	Stringhtml=markup.markdown("STR");	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertThat(markup.markdown("STR"),is("STR"));	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	markup.markdown("STR");	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	Stringresult=markup.markdown("STR");	0
myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertThat(markup.markdown("STR"),containsString("STR"));	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass();	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classLinked);	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	OClasslinked=prop.getLinkedClass();	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass(classLinked);	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass("STR");	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(null);	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.getLinkedClass();	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.addLinkedClass(classLinked);	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	db.drop();	0
orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classA);	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	DefaultExtensiondefaultExtension2=newDefaultExtension();	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),equalTo(defaultExtension1.hashCode()));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(sameInstance(defaultExtension1.hashCode())));	0
TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),not(equalTo(defaultExtension1.hashCode())));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+OShortSerializer.SHORT_SIZE,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(3,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(65628,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(4,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThat(linkSerializer.getObjectSizeInByteBuffer(buffer),is(size));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(not(expectedResult)));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is("STR"));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");}})),hasItem("STR","STR"));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");}})),equalTo(emptyAttributes()));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");}})),is(empty()));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");}})),equalTo(map("STR","STR"))));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");}})),equalTo(map("STR","STR"))));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");}})),is(empty()));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");}})),equalTo(map("STR","STR"))));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");put("STR","STR");}})),is(true));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");}})),equalTo(empty()));	0
nidi3_graphviz-java	ShapeTest#polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertThat(polygon().applyTo(newAttributes<String>(){{put("STR","STR");put("STR","STR");}})),equalTo(shape()));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(3,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results,hasItem("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertTrue(results.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),equalTo(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertThat(result,is(equalTo("STR")));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertEquals(1,result.length());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertThat(result,equalTo("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertEquals(1,result.indexOf("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertEquals("STR"+1,result);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	assertEquals("STR",result);	assertThat(result,is("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	longidxUsagesAfter=indexUsages(qResult);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	longidxUsagesAfter=indexUsages(db);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>idxUsagesBefore);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	intidxUsagesAfter=indexUsages(qResult);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	longidxUsagesAfter=indexUsages(qResult,"STR");	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),is(true));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	booleanhasInitContainer=handler.hasInitContainer(builder,"STR");	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),equalTo(true));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	booleanresult=handler.hasInitContainer(builder,"STR");	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),equalTo(false));	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(true));	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(false));	0
sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	System.clearProperty(RpcConfigs.CONNECTION_NUM_KEY);	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null));	1
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertThat(m.markdown(null),is("STR"));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals(null,m.markdown(null));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null));	1
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertThat(m.markdown(null),is(equalTo("STR")));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals(null,m.markdown("STR"));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertThat(m.markdown(null),equalTo("STR"));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	Stringh=m.markdown(null);	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR"+"STR",m.markdown(null));	0
myabc_markdownj	EdgeCases#testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR"+"STR"+"STR",m.markdown(null));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,is(expected));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(expected,actual,is(equalTo(expected)));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,is(equalTo(expected)));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat("STR",actual,is(expected));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat("STR",actual,is(equalTo(expected)));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat("STR",actual,equalTo(expected));	0
adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(1,result.size());	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(1,result.size());	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertThat(result,hasItems(newTestNamed("STR"),newTestNamed("STR"),newTestNamed("STR"))));	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertThat(result,hasItem(newTestNamed("STR")));	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertThat(result,hasItems(newTestNamed("STR"),newTestNamed("STR"),newTestNamed("STR"),newTestNamed("STR"))));	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertThat(result,hasItems(newTestNamed("STR"),newTestNamed("STR")));	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertTrue(result.size()>0);	0
fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertThat(result,hasItems(newTestNamed("STR"),newTestNamed("STR"),newTestNamed("STR")));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertThat(body,containsString("STR"));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body);	1
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	System.out.println("STR"+body);	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertThat(body,is("STR"));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertThat(body).isEqualTo("STR");	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body);	1
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertThat(body,containsString("STR"+PROXY_PORT+"STR"));	0
trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(body);	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return"STR".length()==1;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return"STR".equals(o);}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==1;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return!"STR".equals(o);}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Objecto){returntrue;}};	0
arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return"STR"+o.length()==1;}};	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.containsKey("STR")).isTrue();	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers).hasSize(1);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.get("STR")).hasSize(1);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.get("STR")).hasSize(2);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers).hasSize(2);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.size()).isEqualTo(1);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.size()).isEqualTo(2);	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.containsKey("STR")).isFalse();	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.containsKey(header)).isTrue();	0
spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertThat(headers.get("STR")).hasSize(3);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertThat(a,not(equalTo(b)));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getSolvedPuzzle());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(3));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(2));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(4));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	notEquals(a,b);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(this.mockLogger,injector.getLog());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	this.injector.setLog(null);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(this.mockLogger,injector.getLog());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(this.mockLogger,injector.getLog());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(this.injector.getLog());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog(),is(this.mockLogger));	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog()).isEqualTo(this.mockLogger);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog(),instanceOf(Logger.class));	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.injector.getLog()instanceofLogger);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.injector.getLog()!=null);	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertThat(sql.toString(),equalTo("STR"));	0
redraiment_jactiverecord	TSqlBuilderTest#testWhere	assertEquals("STR",sql.toString());	assertThat(sql.toString(),is("STR"));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertEquals(1,result.size());	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertEquals(0,result.size());	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,0,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result).hasSize(1);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(0,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(0,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(result,data.length);	1
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(1,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(9,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertThat(result,is(equalTo(15)));	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(5,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(2,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(3,result);	0
orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertThat(result,is(equalTo(5)));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties);	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty(CIRCLE_BUILD_NUMBER));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals(properties.getProperty("STR"),System.getProperty(CIRCLE_BUILD_NUMBER));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals(properties.getProperty("STR"),System.getProperty("STR"));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals(properties.getProperty(CIRCLE_BUILD_NUMBER),System.getProperty(CIRCLE_BUILD_NUMBER));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals(properties.getProperty(CIRCLE_BUILD_NUMBER),System.getProperty("STR"));	0
trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty(CIRCLE_BUILD_NUMBER));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.add(1);	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(1));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.set(1,2);	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertThat(array.add(1),is(2));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.set(0,1);	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(3));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(1,array.add(2));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertThat(array.add(3),is(2));	0
orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(5));	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertNotNull(verb);	1
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.toString());	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertNotNull(verb);	1
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.id);	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.id);	0
adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getID());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",newWercker().getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",newWercker(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals(WERCKER_BUILD_URL,newWercker().getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",newWercker().getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals(WERCKER_BUILD_URL,newWercker(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",newWercker(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	Werckerwercker=newWercker();	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals(WERCKER_BUILD_URL,newWercker("STR").getBuildUrl());	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertThat(newWercker().getBuildUrl(),is("STR"));	0
trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	Werckerwercker=newWercker("STR");	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),equalTo(false));	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom().toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom().toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom(1).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom(null).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom(1).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.select().from(User.class).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.selectSomeFrom(null).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.select().from(User.class).toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.select(1).toString());	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>actualEnv=envFilter.filter(expectedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),is(equalTo(expectedEnv)));	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),equalTo(expectedEnv));	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>result=envFilter.filter(expectedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>envMap=envFilter.filter(expectedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>env2=envFilter.filter(expectedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	envFilter.filter(expectedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	expectedEnv.put("STR","STR");	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	fields.put("STR","STR");	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(1,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(2,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals("STR",fields.get("STR")[0]);	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertThat(fields.get("STR"),is(newString[]{"STR"}));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertThat(fields,hasItem("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertThat(fields.get("STR"),is(equalTo("STR")));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertThat(fields.get("STR"),hasItem("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertThat(fields).hasSize(1);	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey.hashCode(),mapResult.hashCode());	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertThat(mapResult,is(newObject()));	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.intValue());	0
orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals("STR",mapResult);	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,containsString("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertThat(UrlUtils.create("STR"),equalTo(newURL("STR")));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertThat(UrlUtils.create("STR"),is(newURL("STR")));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",UrlUtils.create("STR").toString());	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	URLurl=UrlUtils.create("STR");	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",UrlUtils.create("STR").toString());	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals(newURL("STR"),UrlUtils.create("STR"));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertThat(UrlUtils.create("STR"),is(equalTo(newURL("STR"))));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertThat(UrlUtils.create("STR"),instanceOf(URL.class));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(UrlUtils.create("STR"));	0
trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertThat(UrlUtils.create("STR"),is(instanceOf(URL.class)));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	List<Object>polledObjects=poller.getPolledObjects();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertThat(poller.getPolledObjects(),hasItem(polled001));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	List<Object>actual=poller.getPolledObjects();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()==1);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(1,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(1,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(3,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(3,newHashSet<Integer>()->{ }));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	Set<Integer>exceptions=newHashSet<>();	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	intresult=AThreadPool.prime(1,newHashSet<Integer>());	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,newHashSet<>()));	0
arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,Sets.newHashSet(0)));	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(1);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffffL);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1L);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]buf=EbmlUtil.convertToBytes(1);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffff);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INTEGER);	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]result=DevUtil.parseNetworks("STR");	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertThat(DevUtil.parseNetworks("STR"),equalTo(networkArray));	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]expected=newString[]{"STR","STR"};	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	1
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]result=DevUtil.parseNetworks(src.toString());	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]networks=DevUtil.parseNetworks("STR");	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]expected=newString[]{"STR"};	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals("STR",DevUtil.parseNetworks("STR")[0]);	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]result=DevUtil.parseNetworks("STR"+src);	0
OpenLiberty_ci.common	DevUtilTest#testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	String[]result=DevUtil.parseNetworks("STR"+src.getAbsolutePath()+"STR"+src.getPath());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(2,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(3,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(2,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(3,result.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result.size(),equalTo(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()==2);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	String[]actuals2=Seq.map(Arrays.asList("STR","STR","STR"),"STR").toArray(newString[0]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	String[]actuals2=Seq.map(Arrays.asList("STR","STR"),"STR").toArray(newString[0]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertArrayEquals(newString[]{"STR","STR"},actuals);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	1
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("STR",actuals[0]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	String[]actuals2=Seq.map(Arrays.asList("STR","STR","STR"),"STR").toArray(newString[1]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertThat(actuals,containsString("STR"));	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("STR",actuals[0]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	String[]actuals2=Seq.map(Arrays.asList("STR"),"STR").toArray(newString[0]);	0
redraiment_jactiverecord	SeqTest#testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	String[]actuals2=Seq.map(Arrays.asList("STR","STR","STR"),"STR").toArray(newString[2]);	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(manager.isSame(manager2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),is(true));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),is(false));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(manager.isSame(manager2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),equalTo(true));	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	ODirtyManagermanager3=ORecordInternal.getDirtyManager(doc1);	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	ODirtyManagermanager3=ORecordInternal.getDirtyManager(doc2);	0
orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),equalTo(false));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{put("STR","STR");put("STR","STR");}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{put("STR","STR");}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{add("STR","STR");}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(Collections.singletonMap("STR","STR")));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),equalTo(newAttributes<>(){{put("STR","STR");}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){@OverridepublicbooleanisEmpty(){returnfalse;}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){@OverridepublicbooleanisEmpty(){returntrue;}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{put("STR",1);put("STR",2);}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{add("STR",value);}}));	0
nidi3_graphviz-java	ColorTest#striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertThat(color("STR").striped(),deepEquals(newAttributes<>(){{add("STR",1);}}));	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertThat(binary.getOpcode(),is(Opcode.BINARY));	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(0,binary.getOpcode());	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary);	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertThat(binary.getOpcode(),equalTo(Opcode.BINARY));	0
TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals("STR",binary.getOpcode());	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha2str="STR";	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1=WARCRecordFormat.getDigestSha1(content1,content2);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha2str=WARCRecordFormat.getDigestSha1(content1,content2);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1str=WARCRecordFormat.getDigestSha1(content1,content2);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1str2="STR";	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1Str2="STR";	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1str2="STR"+WARCRecordFormat.getDigestSha1(content1,content2);	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha12str="STR";	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha2Str="STR";	0
DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha2str=WARCRecordFormat.getDigestSha1(content1,content2)+"STR";	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	doc.addAttribute("STR","STR");	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet("STR");	0
orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.select("STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.select();	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.setRidSelect("STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.select("STR","STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.selectRid("STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.ridSelect("STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.setRidSelect("STR","STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.ridSelect("STR","STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.setRid("STR");	0
orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.selectRid();	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"),is(expected));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"),is(equalTo(expected)));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	Stringactual=config.toYaml("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"),equalTo(expected));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"),containsString(expected));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"),hasString(expected));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertThat(config.toYaml("STR"+"STR"),is(expected));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals("STR",config.toYaml("STR"));	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(1,db.countClass("STR"));	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(2,db.countClass("STR"));	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(0,db.countClass("STR"));	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(db.countClass("STR")>0);	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(db.countClass("STR")==1);	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(3,db.countClass("STR"));	1
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(1,db.countClass("STR"));	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(db.countClass("STR")>1);	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(db.countClass("STR")==2);	0
orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	assertEquals(3,db.countClass("STR"));	longcount=db.countClass("STR");	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',1));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',0));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',-1));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',2));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	Strings=CommUtil.repeatChar('a',1);	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',3));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('A',1));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',0));	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	Strings=CommUtil.repeatChar('a',2);	0
rockagen_commons-lib	CommUtilTest#testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',5));	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals("STR",rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(randomPort(),rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),is(0));	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals("STR",rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(123,rpcServer.port());	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),equalTo(0));	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),is(8080));	0
sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	intport=rpcServer.port();	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),null));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	1
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(null,','));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Collections.singletonList("STR"),"STR"));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(newArrayList<>(),"STR"));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"),"STR"));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),null));	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	Strings=Seq.join(Arrays.asList("STR","STR"),"STR");	0
redraiment_jactiverecord	SeqTest#testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(0,registry.agentCount());	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),is(0));	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),equalTo(0));	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()==0);	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),is(1));	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(0,registry.agentCount());	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),equalTo(1));	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(2,registry.agentCount());	0
hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.agentCount()==0);	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get("STR").toString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.getAsString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.getAsString("STR"));	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get("STR").asString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.asString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get("STR").getAsString());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get("STR").asText());	0
adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get("STR").toJsonString());	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank("STR"),hasSize(1));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank(),hasSize(1));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank("STR"),hasSize(2));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank(),hasSize(2));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank(),hasItem("STR","STR"));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	finalAttributes<Rank>rank=newRank();	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	finalAttributes<Rank>attributes=newRank();	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	finalAttributes<Rank>attrs=newRank();	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank("STR"),hasSize(3));	0
nidi3_graphviz-java	RankTest#newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertThat(newRank(),hasItem("STR",1));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine(),is(200));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine()).isEqualTo(Status.OK);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(200,response.getStatusLine());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine(),is(Status.OK));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine()).isEqualTo(200);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getContent(),is("STR"));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(200,response.getStatusLine());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(200,response.getStatus());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.readEntity(String.class),is("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	fields.put("STR","STR");	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(2,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.containsKey("STR"),is(true));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.get("STR"),is(equalTo("STR")));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR")[0]);	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.get("STR"),equalTo("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields).hasSize(1);	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertThat(resp,is("STR"));	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue("STR".equals(resp));	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertThat(resp).isEqualTo("STR");	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	0
jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertThat(resp,is(request));	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(oldTag);	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,is(oldTag));	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(newTagEvent("STR",null,null,null));	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(latestTag);	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,equalTo(oldTag));	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,instanceOf(TagEvent.class));	0
fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(newTagEvent("STR",null,null,null),resultedTag);	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	logger=FluentLogger.getLogger("STR");	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	logger.close();	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).flush();	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).close();	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isOpen());	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isClosed());	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isOpen());	0
fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals("STR",logger.toString());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertSame(this.mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertEquals(this.mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),equalTo(this.mockConnectorFactoryDelegate));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),is(this.mockConnectorFactoryDelegate));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	finalJMXConnectorFactoryDelegatedelegate=factory.getConnectorFactoryDelegate();	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(this.factory.getConnectorFactoryDelegate(),is(this.mockConnectorFactoryDelegate));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	JMXConnectorFactoryDelegatedelegate=factory.getConnectorFactoryDelegate();	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNull(this.factory.getConnectorFactoryDelegate());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),is(this.mockJmxMBeanConnectionFactory));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),instanceOf(JMXConnectorFactoryDelegate.class));	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getId());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getChoices().size());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getSteps().size());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getId());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getChoices().size());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getActivities().size());	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(ad,activityDefinition);	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(ad.getId(),"STR");	0
adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertThat(ad).isEqualTo(newActivityDefinition(name,description));	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,StandardCharsets.UTF_8);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,StandardCharsets.UTF_8);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtil.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,is(expectedURL));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedURL);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedURL));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedURL));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis();	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis()-begin;	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	System.out.println("STR"+begin);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertEquals(begin,System.currentTimeMillis()-1);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin>System.currentTimeMillis()-1);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin>System.currentTimeMillis()-1);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin<System.currentTimeMillis()-1);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin<System.currentTimeMillis()-1);	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis()+1;	0
orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	script.append("STR");	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",OpenKoreanProcessorJava.detokenize(words));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	Stringresult=OpenKoreanProcessorJava.detokenize(words);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",OpenKoreanProcessorJava.detokenize(words));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	Stringactual=OpenKoreanProcessorJava.detokenize(words);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertThat(OpenKoreanProcessorJava.detokenize(words),is("STR"));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",OpenKoreanTextProcessor.detokenize(words));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	Stringtext=OpenKoreanProcessorJava.detokenize(words);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	Stringexpected="STR";	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertThat(OpenKoreanProcessorJava.detokenize(words),equalTo("STR"));	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	List<String>words2=Arrays.asList("STR","STR");	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(this.mockAttacher,factory.getAttacher());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),equalTo(this.mockAttacher));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),is(this.mockAttacher));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(this.mockAttacher,factory.getAttacher());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher()).isEqualTo(this.mockAttacher);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(this.mockAttacher,factory.getAttacher());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(factory.getAttacher(),is(this.mockAttacher));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(this.mockAttacher,factory.getAttacher());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),instanceOf(VirtualMachineAttacher.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNull(this.factory.getAttacher());	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	Stylestyle=Style.simple();	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple(),hasItem("STR",text("STR")));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	Stylestyle=Style.simple("STR");	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	Stylestyle=Style.simple("STR","STR");	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple("STR","STR"),hasItem("STR","STR"));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple(),hasItem("STR",newText("STR")));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple("STR"),deepEquals(attrs(newAttribute("STR","STR"),newAttribute("STR","STR"),newAttribute("STR","STR"))));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple("STR","STR"),deepEquals(attrs(newAttribute<>("STR","STR"),newAttribute<>("STR","STR"))));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple("STR"),deepEquals(attrs(newAttribute("STR","STR"),newAttribute("STR","STR"))));	0
nidi3_graphviz-java	StyleTest#simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(Style.simple("STR","STR"),deepEquals(attrs(newSimpleAttribute("STR","STR"),newSimpleAttribute("STR","STR"))));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertThat(testSuite.getTestCase(null),is(nullValue()));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertThat(testSuite.getTestCase("STR"),nullValue());	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertThat(testSuite.getTestCase("STR"),is(nullValue()));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getTestCase(null));	0
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	TestCasetestCase=testSuite.getTestCase(null);	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionsconventions=m.markdown("STR");	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	Stringh=m.markdown("STR");	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertEquals("STR",m.markdown("STR"+"STR"));	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionsconventions=newLineConventions();	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionscons=m.markdown("STR");	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionslineConventions=m.markdown("STR");	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertEquals("STR",LineConventions.markdown("STR"));	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionslineConventions=newLineConventions();	0
myabc_markdownj	LineConventions#testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	LineConventionsconventions=m.markdown("STR"+"STR");	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getLanguage());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY);	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getLocale());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getValue());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR");	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getI18n());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getLanguage());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.getText());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.command("STR",Locale.GERMANY.toString());	0
orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	database.update("STR");	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,equalTo(expected));	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options).isEqualTo(expected);	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,is(expected));	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,not(equalTo(expected)));	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,deepEquals(expected));	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertNotEquals(expected,options);	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertSame(expected,options);	0
nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertTrue(options==expected);	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(expected,actual,is(equalTo(expected)));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertArrayEquals("STR".getBytes(StandardCharsets.US_ASCII),Charsetfunctions.asciiBytes("STR"));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals("STR".getBytes(StandardCharsets.US_ASCII),Charsetfunctions.asciiBytes("STR"));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	byte[]bytes=Charsetfunctions.asciiBytes("STR");	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertThat(Charsetfunctions.asciiBytes("STR"),is(equalTo(newbyte[0])));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals("STR",newString(Charsetfunctions.asciiBytes("STR")));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertThat(Charsetfunctions.asciiBytes("STR"),is(notNullValue()));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertThat(Charsetfunctions.asciiBytes("STR"),is(equalTo(newbyte[]{0})));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals("STR",Charsetfunctions.asciiBytes("STR"));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertThat(Charsetfunctions.asciiBytes("STR"),is(equalTo(newbyte[]{})));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertThat(Charsetfunctions.asciiBytes("STR"),equalTo(newbyte[]{0}));	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(1,a.getStatements().size());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(responseMessage,a.getResponseMessage());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().size()==1);	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals("STR",a.getResponseMessage());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals("STR",a.getMessage());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().isEmpty());	0
adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().size()>0);	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.getProperty("STR").size());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.getProperty(className).size());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(2,rs.getProperty("STR").size());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",rs.getProperty("STR").toString());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertThat(rs.getProperty("STR"),is(className));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertThat(rs.getProperty("STR"),is(1));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(null,rs.getProperty("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.getProperty("STR").length);	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertThat(rs.getProperty("STR"),equalTo("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNull(rs.getProperty("STR"));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	Stepresult=process.getNextStep();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	Stepstep=process.getNextStep();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),is(nullValue()));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(null,process.getNextStep());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),instanceOf(Step.class));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),nullValue());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep()).isNull();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),equalTo(null));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertEquals(newDots(),dots());	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertEquals("STR",dots().toString());	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots(),deepEquals(newDots()));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots().toString(),is("STR"));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertEquals(dots(),dots());	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots().toString(),equalTo("STR"));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots(),equalTo(Dots.ONE));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots(),is(newDots()));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertThat(dots(),equalTo(Dots.ZERO));	0
nidi3_graphviz-java	FillStyleTest#dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotNull(dots());	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.isRecognized());	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.isRecognized());	0
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertEquals(true,simtiem.isRecognized());	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=4;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=3;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=0;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=2;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	ModeInfomodeInfo=newModeInfo();	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=5;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=7;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=6;	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	ModeInfoinfo=newModeInfo();	0
jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=8;	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.get(GitInfo.GIT_INFO_FILE).toString());	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertTrue(properties.containsKey(GitInfo.GIT_INFO_FILE));	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.toString());	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.getProperty("STR").toString());	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertThat(properties).isNotNull();	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertThat(properties,is(notNullValue()));	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.get("STR").toString());	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.getProperty(GitInfo.GIT_INFO_FILE));	0
hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals("STR",properties.getProperty(GitInfo.GIT_INFO_FILE).toString());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(2));	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(4));	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(2,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(1,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(1,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(2,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(1));	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(0,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(0,keys.size());	0
arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(3,keys.size());	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),is(equalTo("STR")));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),equalTo("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	config.set("STR","STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR")).isEqualTo("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),is("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	Stringvalue=config.getString("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	Stringactual=config.getString("STR");	0
cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	assertEquals("STR",config.getString("STR"));	Stringresult=config.getString("STR");	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertThat(m,instanceOf(ThreadCountMetronome.class));	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertThat(m).isNotNull();	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(10,m.getThreadCount());	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals("STR",m.getMetronomeClass().getName());	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals("STR",m.getMetronomeClass().getName());	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofMasterMetronome);	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofThreadCountMetronome);	0
hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(10,m.getThreadCount());	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertThat(pid,is(notNullValue()));	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNull(pid);	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNull(pid);	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null);	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertThat(pid,is(nullValue()));	0
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertEquals(1,pid);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>actualA=MapUtil.mergeMaps(mapA,mapB);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>expectedA2=createMap("STR","STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>mergedA=MapUtil.mergeMaps(mapA,mapB);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>expectedA2=createMap("STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>actual=MapUtil.mergeMaps(mapA,mapB);	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>expectedC=createMap("STR","STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>expectedC=createMap("STR","STR","STR","STR");	0
fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>result=MapUtil.mergeMaps(mapA,mapB);	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	array.add(1);	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(1));	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),is(1));	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(1));	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),greaterThan(0));	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	array.set(0,1);	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),lessThan(0));	0
orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(0));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(null));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),is(false));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(null));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),is(true));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(false,compositeKey.equals(null));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),equalTo(false));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(newObject()));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey,equalTo(null));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertThat(prop.getName(),is("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertThat(prop.getName(),equalTo("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getName().equals("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertThat(prop.getName(),is(equalTo("STR")));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getName().equals("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getName().contains("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getName().startsWith("STR"));	0
orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	System.out.println(prop.getName());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getMessage());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getMessage());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.toString());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getCode());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getStatusCode());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.toString());	0
Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertThat(response).isNotNull();	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parse(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfile(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.simple(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.load(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.loadProcessorConfig(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.read(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfile(is,"STR");	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.process(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfileFile(is);	0
fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.readProfile(is);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==1);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertThat(panel.getTurtleCount()).isEqualTo(1);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	map.put("STR","STR");	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isDirty());	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	map.remove("STR");	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	map.remove("STR","STR");	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertThat(map.isDirty(),is(true));	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isDirty());	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertThat(map.isDirty(),is(false));	0
orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	expectedDockerfileLines.add("STR");	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,util.getDockerfileLines(dockerfileLines));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	1
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]result=MkvBlock.muxXiphLacing(_in);	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]expected=MkvBlock.muxXiphLacing(_in);	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MKVBlock.muxXiphLacing(_in));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255,120,0}));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255}));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630}));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]out=MkvBlock.muxXiphLacing(_in);	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255,120}));	0
jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]output=MkvBlock.muxXiphLacing(_in);	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(1,rootAtoms.size());	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(1,rootAtoms.size());	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(0,rootAtoms.size());	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(0,rootAtoms.size());	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()==1);	0
jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()==2);	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(2,result.size());	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result,hasItem(prop));	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result.size(),is(1));	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(2,result.size());	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	ODocumentdocument=result.get(0);	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.size()>0);	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(InstructorActor.class));	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(Instructor.class));	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected.getName(),actual.getName());	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(Agent.class));	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertNotSame(expected,actual);	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	Assertions.assertTrue(austrumlatvija.isRecognized());	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals("STR",multiInterestUserProcessor.interest());	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(1,userProcessors.size());	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals("STR",multiInterestUserProcessor.interest());	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor);	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertThat(multiInterestUserProcessor.interest(),is("STR"));	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(multiInterestUserProcessor.interest(),userProcessors.get(multiInterestUserProcessor.interest()));	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertThat(multiInterestUserProcessor.interest(),equalTo("STR"));	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor.interest());	0
sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(1,userProcessors.get(multiInterestUserProcessor.interest()).size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(2,result.size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(2,result.size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertThat(result.size(),is(1));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(3,result.size());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertThat(result,hasItem(c0));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()==1);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(3));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertThat(cm.count("STR"),is(1));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")==1);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher,lookingAt());	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher,is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat("STR",matcher.lookingAt(),is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(false));	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").setVersion(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.JSON).exec());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").setVersion(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.JSON).exec());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	finalORecordrecord=read("STR"+getDatabaseName()+"STR");	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	ORecordrecord=read("STR"+getDatabaseName()+"STR");	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").version(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.JSON).exec());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").setVersion(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT_JSON).exec());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").setVersion(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT_JSON).exec());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").getVersion(),1);	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").setVersion(1),get("STR"+getDatabaseName()+"STR").getVersion());	0
orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(update("STR"+getDatabaseName()+"STR").version(1),get("STR"+getDatabaseName()+"STR").payload("STR",CONTENT_JSON).exec());	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrame();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrames();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFault();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf12=mpeges.getFrame();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getPictureHeader();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrames()[0];	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFack();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrame();	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getPictureHeader(frame1);	0
jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFramedPacket();	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertThat(StringUtils.isNonZero(null),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertThat(StringUtils.isNonZero("STR"),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertThat(StringUtils.isNonZero("STR"),equalTo(false));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(0,result.getClusterIdByName(clusterName));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(1));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(-1,result.getClusterIdByName(clusterName));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(1));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(0));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(0));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(-1));	0
orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getClusterIdByName(clusterName)>0);	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	id=prop.getId();	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	Integerid2=prop.getId();	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	oClass.dropProperty("STR");	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(id==prop.getId());	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	intid2=prop.getId();	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	Integerid=prop.getId();	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	id=prop.getId()+1;	0
orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	prop.setId(id);	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().contains("STR"));	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()==0);	0
NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(not(notNullValue())));	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals("STR",response.getMessage());	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals(0,response.getMaxRetries());	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals("STR",response.getCode());	0
Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals("STR",response.getStatusCode());	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(newArrayList<>(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(newArrayList<Object>()->{ },null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(newArrayList<String>()->{ },null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(emptyList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,is(equalTo(expected)));	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertNotSame(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected.getMbox(),actual);	0
adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertTrue(actualinstanceofAgent);	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	ODocumentprevious=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	ODocumentprev=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	ORecordprevious=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	ODocumentthird=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),is(equalTo("STR")));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),is(equalTo(newInteger(1))));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	ORecordprevious=next.field("STR");	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(1,next.field("STR").size());	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),equalTo(newInteger(1)));	0
orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals("STR",next.field("STR"));	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,instanceOf(CachedExtractor.class));	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(instanceOf(CachedExtractor.class)));	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor).isNotNull();	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat("STR",extractor,instanceOf(CachedExtractor.class));	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(notNullValue()));	0
AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(1,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(2,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals("STR",grouped.get(1).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(0,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals("STR",grouped.get(0).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(grouped.isEmpty());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals("STR",grouped.get(1).get(0).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(Arrays.asList("STR","STR"),grouped.get(1));	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals("STR",grouped.get(0).get(0).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(1,grouped.size());	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(1,routePrioritizer.getPrioritizedRoutes().size());	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().size()==0);	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(newUriResource("STR",100,null)));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected.get("STR"),actual.get("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals("STR",actual.get("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected.get("STR"),actual.get("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	a.setAttachments(newHashMap<String,AttachmentAndType>()->{ });	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	a.setAttachments(Collections.singletonMap("STR",newAttachmentAndType(attachment,type)));	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	assertEquals(1,a.getAttachments().size());	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	a.setAttachments(Collections.singletonMap("STR",attachment));	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentAndTypeatt=newAttachmentAndType(attachment,type);	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	a.setAttachments(Collections.singletonMap("STR",newAttachmentAndType(attachment,TYPE)));	0
adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	assertEquals("STR",a.getResponseMessage());	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	assertThat(result,is(equalTo("STR")));	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerExtractor(OETLStubRandomExtractor.class);	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class);	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLStubRandomExtractor.class);	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	assertThat(result,equalTo("STR"));	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLRandomExtractor.class);	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(processor).toLowerCase();	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	log.info("STR");	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	assertEquals("STR",newString[]{"STR","STR"});	0
orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	assertEquals("STR",result().toString());	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,is(notNullValue()));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertEquals(clazz,db.createEdgeClass("STR"));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertEquals(clazz,db.createEdgeClass("STR"));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertEquals(clazz.getName(),"STR");	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,instanceOf(OClass.class));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,is(instanceOf(OClass.class)));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,instanceOf(EdgeClass.class));	0
orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertEquals(clazz,db.getEdgeClass("STR"));	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#jaundzimu����kais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,is(notNullValue()));	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,notNullValue());	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,instanceOf(VerifyMethod.class));	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,equalTo(Verify.class.getMethod("STR")));	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,instanceOf(VerifyFilter.class));	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,nullValue());	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method,not(nullValue()));	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertThat(method).isNotNull();	0
hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertThat(performance,is("STR"));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals("STR",performance);	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertThat(performance).isEqualTo("STR");	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals("STR",performance);	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertThat(performance,containsString("STR"));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	System.out.println("STR"+performance);	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertThat(performance,is(equalTo("STR")));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.matches("STR"));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	System.out.println(performance);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,durationLimit);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,duration);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(NANOSECONDS,durationLimit);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(SECONDS,durationLimit);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,durationLimit-duration);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,duration-durationLimit);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,duration/durationLimit);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(SECONDS,duration);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(NANOSECONDS,duration);	0
hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	sleepTimeUnit(MILLISECONDS,durationLimit+1);	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[]{null}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[]{"STR"}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[0]));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[]{1,2}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[]{1}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newObject[]{"STR","STR"}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newString[]{"STR","STR"}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue(newString[]{"STR"}));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertThat(propertyIndex.createValue(newObject[]{"STR"}),is(nullValue()));	0
orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertThat(propertyIndex.createValue(newObject[]{1,2}),is(nullValue()));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-1L));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,EbmlSignedLength(-1L));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,EbmlSignedLength(-1L));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(0,EbmlSignedLength(-1L));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-1));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x00FFFFFFFFFFFFL));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-0x00FFFFFFFFFFFFL));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x1000000000000L));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x00FFFFFFFFFFFFFFL));	0
jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-0x00FFFFFFFFFFFFFFL));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	booleanremoved=handler.hasInitContainer(builder,"STR");	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),is(false));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),equalTo(false));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	builder.withNewMetadata().withName("STR").endMetadata();	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertThat(handler.hasInitContainer(builder,"STR"),is(true));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	builder.withInitContainers(Arrays.asList("STR","STR"));	0
fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	handler.addInitContainer(builder,"STR");	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertFalse(matcher.find());	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat("STR",matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	booleanfound=matcher.find();	0
basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat("STR",matcher.find(),equalTo(true));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Collections.singletonList("STR"),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Collections.singletonList("STR"),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(emptyList(),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(newArrayList<String>()->{ },"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(newArrayList<String>()->{ },"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(newArrayList<>(),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(newArrayList<>(),"STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(2));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(5));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(3));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),equalTo(2));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(6));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(4));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),equalTo(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),is(16238L));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238L,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238L,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),equalTo(16238L));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(1,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(17238,OVarIntSerializer.readAsLong(bytes));	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	longvalue=OVarIntSerializer.readAsLong(bytes);	0
orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),is(2L));	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	System.out.println("STR");	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(AppNanolets.class).toString());	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",handler.initParameter(AppNanolets.class).toString());	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(ConfigParam2.class).toString());	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(String.class));	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",handler.initParameter(AppNanolets.class).uri);	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(AppNanolets.class).uri);	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(AppNanolets.class).getPath());	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	Stringuri="STR";	0
NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR").initParameter(AppNanolets.class).toUri());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getMessage());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause.getMessage(),exception.getMessage());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getMessage());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertThat(exception,instanceOf(TestException.class));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertThat(exception,instanceOf(RuntimeException.class));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertThat(props,is(notNullValue()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(2,props.size());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.containsKey("STR"));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals("STR",props.getProperty("STR").toString());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(1,props.size());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals("STR",props.getProperty("STR").toString());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertThat(props).isNotNull();	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals("STR",props.toString());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementexecution=db.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OResult<String>result=db.query("STR"+DB_NAME+"STR");	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementexecution=db.query("STR"+DB_NAME+"STR");	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementexecution=db.command(newOCommandSQL("STR"));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	List<String>friendList=newArrayList<String>();	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementmatch=db.query("STR"+DB_NAME+"STR");	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementexecution=newOMatchStatement("STR");	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	OMatchStatementexecution=newOMatchStatement("STR","STR");	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	db.command(newOCommandSQL("STR")).execute(true);	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",environment.getProperty("STR"));	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(environment).setProperty("STR","STR");	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).getBuildNumber();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertThat(environment.getProperty("STR"),equalTo("STR"));	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertThat(environment.getProperty("STR"),is(equalTo("STR")));	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).getSelected();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).getEnvironment();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(serviceMock,times(1)).isEnabled();	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertThat(environment.getProperty("STR"),is("STR"));	0
trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	verify(environment).getProperty("STR");	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100.0d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100.5d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(0.0001d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(0.01d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",GBP_STR_PER100.convert(100.0d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",GBP_STR_PER100.convert(100.5d));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),is(true));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.isEmpty());	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),is(false));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.isEmpty());	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),equalTo(true));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),equalTo(false));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat("STR",performanceStats.isEmpty(),is(true));	0
hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats,is(notNullValue()));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.STRING,doc.fieldType("STR"));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.STRING,doc.fieldType("STR"));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertThat(doc.fieldType("STR"),is(OType.STRING));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.BINARY,doc.fieldType("STR"));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertThat(doc.fieldType("STR"),is(OType.INTEGER));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertThat(doc.fieldType("STR"),is(equalTo(OType.STRING)));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertThat(doc.fieldType("STR"),is(equalTo(OType.INTEGER)));	0
orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertThat(doc.fieldType("STR"),equalTo(OType.STRING));	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",newSimulatorAddress(0,1).toString());	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",newSimulatorAddress(1,2).toString());	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",newSimulatorAddress(1,0).toString());	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	finalSimulatorAddressaddress=newSimulatorAddress(0,1);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	finalSimulatorAddressaddress=newSimulatorAddress(1,2);	0
hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
PeterisP_morphology	MorphologyTest#rezidu����i	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),is(false));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasItem(Subclass.class.getMethod("STR")));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(2,methodList.size());	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasItem(Subclass.class.getDeclaredMethod("STR")));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList.size(),is(1));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasSize(1));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList.size(),is(2));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList).hasSize(1);	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasItem(Subclass.class));	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertThat(routePrioritizer.getPrioritizedRoutes(),hasItem(null));	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.add(null);	0
NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertEquals(2,formas.size());	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertThat(formas.size(),is(1));	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertThat(formas.size(),is(2));	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertTrue(formas.size()>1);	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertThat(formas,hasItem(newWordform("STR")));	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertTrue(formas.size()==2);	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertTrue(formas.size()==1);	0
PeterisP_morphology	MorphologyTest#apst��k��a_v��rdu_��ener����ana	assertEquals(1,formas.size());	assertTrue(formas.size()==3);	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()==1);	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>0);	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>1);	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,result.stream().count());	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(oneMore));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().count(),is(1));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream(),hasSize(1));	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",newSimpleLabel("STR").serialized());	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",label.serialized());	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertThat(newSimpleLabel("STR").serialized(),is("STR"));	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",newSimpleLabel("STR","STR").serialized());	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",SimpleLabel.raw("STR").serialized());	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",newLabel("STR").serialized());	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	SimpleLabellabel=newSimpleLabel("STR");	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertThat(newSimpleLabel("STR").serialized()).isEqualTo("STR");	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	assertThat(newSimpleLabel("STR","STR").serialized(),is("STR"));	0
nidi3_graphviz-java	LabelTest#raw	assertEquals("STR",Label.raw("STR").serialized());	SimpleLabellabel=newSimpleLabel("STR","STR");	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(importer.getMetadata().getSchema().existsClass("STR"));	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	dbImp.drop();	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(importer.getMetadata().getSchema().existsClass("STR"));	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	1
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertThat(importer.getMetadata().getSchema().existsClass("STR"),is(true));	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	dbImp=newODatabaseDocumentTx("STR"+ODatabaseImportTest.class.getSimpleName()+"STR");	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertThat(importer.getMetadata().getSchema().existsClass("STR"),is(false));	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(importer.getMetadata().getSchema().existsClass("STR"));	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	db=newODatabaseDocumentTx("STR"+ODatabaseImportTest.class.getSimpleName()+"STR");	0
orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(importer.getMetadata().getSchema().existsClass("STR"));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(2,conns.size());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.isEmpty());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(0,conns.size());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(2,conns.size());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertThat(conns.size(),is(1));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()>0);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertThat(conns).hasSize(1);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()==1);	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertThat(turn("STR","STR")).isEqualTo("STR");	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",Records.turn("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertThat(turn("STR","STR","STR")).isEqualTo("STR");	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertThat(turn("STR"),equalTo("STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",Records.turn("STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",Records.turn("STR","STR","STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertThat(turn("STR"),is("STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertThat(turn("STR","STR","STR","STR")).isEqualTo("STR");	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",turn("STR","STR"));	0
nidi3_graphviz-java	RecordsTest#turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",Turn.turn("STR","STR"));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	1
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertThat(exception.getMessage(),is("STR"));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	1
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertThat(exception.getMessage(),equalTo("STR"));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception);	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertThat(exception.getMessage(),containsString("STR"));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertThat(exception.getMessage(),is(equalTo("STR")));	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals(1,exception.getMessage().length());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals(1,exception.getCause().getMessage().length());	0
hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.toString());	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",Integer.MAX_VALUE/2,IndexHandler.class);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",Integer.MAX_VALUE/2,NotImplementedHandler.class);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setRouter(routerNanoHttpd);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",Integer.MAX_VALUE/2,indexHandler);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals("STR",routerNanoHttpd.toString());	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",1,IndexHandler.class);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setHandler(notFoundHandler);	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",Integer.MAX_VALUE/2,newIndexHandler());	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.addRoute("STR",Integer.MAX_VALUE/2,notImplementedHandler.getClass());	0
NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setNotImplemented(notFoundHandler);	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(1,result.size());	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.size());	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,hasItem(0));	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(3,result.size());	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.next(),is(notNullValue()));	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(4,result.size());	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.size(),is(1));	0
orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,hasSize(1));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	document=compositeKeyTwo.toDocument();	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getFieldValue("STR"),is(nullValue()));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getField("STR"),is(nullValue()));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.field("STR"),is(nullValue()));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getFieldValue("STR"),is(1));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getField("STR"),is(equalTo(1)));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getFieldValue("STR"),equalTo(1));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertThat(document.getField("STR"),equalTo(1));	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(1,compositeKeyTwo.getKey());	0
orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(1,document.getField("STR").size());	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertThat(s.get(),is("STR"));	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertThat(s.get(),equalTo("STR"));	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertThat(s.get(),is(equalTo("STR")));	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertNull(s.get());	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertTrue(s.get()=="STR");	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertNull(s.get());	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertTrue(s.get()instanceofString);	0
arnohaase_a-foundation	AOptionTest#testSome	assertEquals("STR",s.get());	assertThat(s.get(),is(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),is(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),equalTo(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost()==0,is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()==0);	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),isZero());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(0,s.getEstimatedCost());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),is(0L));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(1,s.getEstimatedCost());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	cm.add(conn,"STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(1);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	intcount=cm.count(poolKey);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(2);	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	doc.addAttribute("STR","STR");	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList("STR");	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc,"STR");	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(3,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res).hasSize(2);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	1
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacterresult=charSerializer.deserialize(stream,0);	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(STRING,charSerializer.deserialize(stream,0).toString());	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT.charValue(),charSerializer.deserialize(stream,0));	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	1
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacteractual=charSerializer.deserialize(stream,0);	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT,charSerializer.deserialize(stream,1));	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(STRING,charSerializer.deserialize(stream,0).toString());	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacterresult=charSerializer.deserialize(stream,1);	0
orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT.charValue(),charSerializer.deserialize(stream,1));	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v).isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getPersistentRID().isPersistent());	0
orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertThat(graph.isPersistent(),is(true));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertThat(Wildcards.matches("STR","STR"),is(true));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	MatcherassertThat(Wildcards.matches("STR","STR"),is(true));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertEquals(false,Wildcards.matches("STR","STR"));	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.when(this.mockAccessConnection.batchQueryAttributes(this.createAttributeMapMatcher(this.resultAttributeMap))).thenReturn(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters}	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSettersBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSH	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(this,setFieldTest.getField(),"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField(),"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(null,setFieldTest.getField(),"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	Fieldfield=ReflectionUtilsTest.getField(setFieldTest,"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	Fieldfield=ReflectionUtilsTest.class.getDeclaredField("STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField("STR"),"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(this,setFieldTest.getField("STR"),"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	Objectinstance=newObject();	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	FieldsetFieldValue=ReflectionUtilsTest.getField(setFieldTest,"STR");	0
hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField(),1);	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetResource.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),"STR".getBytes(StandardCharsets.UTF_8));	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetDir.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	files.write(targetFile.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),"STR".getBytes(StandardCharsets.US_ASCII));	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),"STR".getBytes(UTF_8));	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.copy(targetFile.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),src.getBytes(StandardCharsets.UTF_8));	0
OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),"STR".getBytes(true));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(1,collectionResult.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),is(1));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),is(2));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),equalTo(1));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(0,collectionResult.size());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult,hasItem(newOCompositeKey()));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.isEmpty());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.isEmpty());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),equalTo(2));	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(expected,actual,is(equalTo(expected)));	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,"STR",actual);	0
1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected+"STR",actual);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(file,job);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(f,job);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(job);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(f,job);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=mock(JsonWriter.class);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(job,f);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(job,"STR");	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(f);	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter();	0
trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter();	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('a');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('b');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('c');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('z');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('e');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('d');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.size());	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('A');	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.size());	0
basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(0,cm.size());	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(1,result.size());	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(1,result.size());	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertThat(result,hasItem("STR","STR"));	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(2,result.size());	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertThat(result).hasSize(1);	0
hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR")[0]);	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(env).getBranch());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis().getBranch());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	Travistravis=newTravis(env);	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(env).getBranch());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	System.out.println("STR");	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis().getBranch());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	Travistravis=newTravis();	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	finalTravistravis=newTravis(env);	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",Travis.parse("STR").getBranch());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(null).getBranch());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,to.getClusterId());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(1,to.getClusterId());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(0,to.getClusterId());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals("STR",to.getClusterId());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(101,to.getClusterId());	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertThat(to.getClusterId(),is(100));	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>0);	0
orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()==100);	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,is(nullValue()));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,instanceOf(OCompositeKey.class));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,is(nullValue(12)));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat("STR",result,is(nullValue()));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,is(nullValue("STR")));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,nullValue());	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNull(result);	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat("STR",result,is(nullValue(12)));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,equalTo(newOCompositeKey("STR",12)));	0
orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNull(result);	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame,hasItem(curframe));	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame).hasSize(1);	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(2,createdFrame.size());	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame,hasItems(curframe));	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.size()>0);	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(0,createdFrame.size());	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame).hasSize(2);	0
TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame.size(),is(1));	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	ODocumentv2=database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	finalODocumentv2=database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	ODocumentv12=database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals("STR",v1.getClassName());	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	v1=database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	Stringv2=database.command(newOCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	ODocumentv2=database.command(newOCommandSQL("STR",true)).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	ODocumentv2=database.command(newCommandSQL("STR")).execute();	0
orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	StringclassName=v1.getClassName();	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.NOT_FOUND));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(IStatus.NOT_FOUND,handshakeResponse.getStatus());	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(500,handshakeResponse.getStatus());	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(500));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(IStatus.NOT_FOUND));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(HttpServletResponse.SC_NOT_FOUND));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.BAD_REQUEST));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(HttpStatusCode.NOT_FOUND));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.UNAUTHORIZED));	0
NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(404));	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	expectedDockerfileLines.add("STR");	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,util.getDockerfileLines(dockerfileLines));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.workerCount();	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount();	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,"STR")));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress);	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(Arrays.asList("STR","STR"));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,"STR"),newWorkerParametersList(agentAddress,2,"STR")));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers("STR");	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(Arrays.asList(newWorkerData("STR"),newWorkerData("STR")));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,"STR"),newWorkerParametersList(agentAddress,3,"STR")));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress,2);	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),is("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").size());	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertThat(item.getProperty("STR"),equalTo("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(null,item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR").toString());	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(emb,item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").intValue());	0
orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR")instanceofMap);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertThat(filterResult,nullValue());	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	assertEquals("STR",filterResult);	assertNull(filterResult);	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	1
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertThat(Seq.join(null,"STR"),equalTo("STR"));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	1
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(newArrayList<>(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertThat(Seq.join(null,"STR"),is("STR"));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(),null));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals(null,Seq.join(null,"STR"));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(null,null));	0
redraiment_jactiverecord	SeqTest#testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertNull(Seq.join(null,"STR"));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertThat(index.get("STR"),is(nullValue()));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(null,index.get("STR"));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(person1.get("STR"),person2.get("STR"));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(person1,index.get("STR"));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNull(index.get("STR"));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",index.get(1).getName());	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertThat(index.get("STR"),is(person1));	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",index.get(1).name);	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",index.get(person1.getId()).toString());	0
orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",index.get(person1.id()).toString());	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a.length);	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,2,3)));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2}));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(a,Seq.array(0,2,3));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,3)));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2,3}));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,2)));	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),5,4);	0
redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),-1,4);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(result.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(2,result.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result,hasItem(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(3,result.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result,hasItem("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()==1);	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(OType.STRING,simpleKeyIndexDefinition.getTypes());	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(newOType[]{OType.STRING},simpleKeyIndexDefinition.getTypes());	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(OType.INTEGER,simpleKeyIndexDefinition.getTypes());	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(OType.STRING));	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),hasItem(OType.STRING));	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),is(equalTo(OType.STRING))));	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(newOType[]{OType.STRING}));	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.STRING,simpleKeyIndexDefinition.getTypes()[0]);	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	OType[]types=simpleKeyIndexDefinition.getTypes();	0
orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(newOType[]{OType.INTEGER}));	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(false));	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(true));	0
orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	doc.field("STR",bytes);	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertTrue(v������rds.isRecognized());	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertFalse(v������rds.isRecognized());	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertTrue("STR",v������rds.isRecognized());	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertThat(v������rds.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertThat(v������rds.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertTrue(v������rds.isRecognized());	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertThat(v������rds.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertFalse(v������rds.isRecognized());	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertThat(v������rds.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#vajadz��bas_min����ana	assertTrue(v��rds.isRecognized());	assertFalse("STR",v������rds.isRecognized());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(0,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()==1);	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	env.put("STR","STR");	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",newAbstractServiceSetup(env).getProperty("STR"));	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",newAbstractServiceSetup(env).getProperty("STR"));	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	AbstractServiceSetupsetup=newTestSetup(env);	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	Stringvalue=newAbstractServiceSetup(env).getProperty("STR");	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	AbstractServiceSetupsetup=newMockAbstractServiceSetup(env);	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",newAbstractServiceSetup(null,env).getProperty("STR"));	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	finalAbstractServiceSetupsetup=newTestSetup(env);	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	AbstractServiceSetupsetup=newTestSetup(env,"STR");	0
trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",newAbstractServiceSetup().getProperty("STR"));	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected.toString(),actual);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(actual,expected);	0
adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(ID,actual);	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().count());	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().count());	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem("STR"));	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(2));	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().count()==2);	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),is(not(empty())));	0
orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),is(empty()));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,is(notNullValue()));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,notNullValue());	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,instanceOf(VoidMethod.class));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,instanceOf(VoidMethodWithoutArgs.class));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,instanceOf(Void.class));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,is(instanceOf(VoidMethod.class)));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method).isNotNull();	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,is(instanceOf(VoidMethodWithoutArgs.class)));	0
hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertThat(method,nullValue());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertThat(results,hasItem("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(6,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(factory.getJmxMBeanConnectionFactory(),equalTo(this.mockJmxMbeanConnectorFactory));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),instanceOf(JMXMBeanConnectionFactory.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertSame(this.mockJmxMbeanConnectorFactory,factory.getJmxMBeanConnectionFactory());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),is(nullValue()));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),equalTo(this.mockJmxMbeanConnectorFactory));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),is(equalTo(this.mockJmxMbeanConnectorFactory)));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(this.mockJmxMbeanConnectorFactory,factory.getJmxMBeanConnectionFactory());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(factory.getJmxMBeanConnectionFactory(),instanceOf(JMXMBeanConnectionFactory.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNull(this.factory.getJmxMBeanConnectionFactory());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	this.factory.setJmxMBeanConnectionFactory(this.mockJmxMbeanConnectorFactory);	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals("STR",grouped.get(0).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(Arrays.asList("STR","STR"),grouped.keySet());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals("STR",grouped.get(1).toString());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(2,grouped.size());	1
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(Arrays.asList("STR","STR","STR"),grouped.keySet());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(grouped.isEmpty());	0
arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(-10.5D));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,equalTo(-10.5D));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat("STR",result,is(-10.5D));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat("STR",result,equalTo(-10.5D));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(-10.5d));	0
orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,equalTo(-10.5d));	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getOpcode(),Opcode.CONTINUOUS);	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS_FRAME,frame.getOpcode());	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getType());	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS_FRAME,frame.getType());	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getOpcode(),Opcode.EXTENDED);	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getType(),Type.EXTENDED);	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getPayloadData(),newbyte[]{0x01,0x02});	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals("STR",frame.getPayloadData().get(0).getType());	0
TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getPayloadData(),newbyte[]{1,2,3});	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(5)));	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofInteger);	1
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofBoolean);	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,equalTo("STR"));	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(true));	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(1)));	0
orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	createClasses(db);	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	vertex=db.newVertex("STR");	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(1,loader.countClass("STR"));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(2,loader.countClass("STR"));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	OVertexvertex=db.newVertex("STR");	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(1,configurator.countClass("STR"));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(0,loader.countClass("STR"));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertThat(loader.countClass("STR"),is(2));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertThat(loader.countClass("STR"),is(1));	0
orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertThat(loader.countClass("STR"),equalTo(2));	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertEquals("STR"+"STR"+"STR"+"STR",sql.toString());	0
redraiment_jactiverecord	TSqlBuilderTest#testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(3,qResult.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult,hasItem("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==1);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult).hasSize(1);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==2);	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	registry.addAgent("STR","STR");	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(1,registry.agentCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(2,registry.agentCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	intcount=registry.agentCount();	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(1,registry.agentCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(0,registry.agentCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertThat(registry.agentCount(),is(2));	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(2,registry.agentCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertThat(registry.agentCount(),equalTo(2));	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress);	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(0,registry.workerCount());	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),is(1));	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,parametersList);	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,"STR");	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),equalTo(1));	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,0);	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,1);	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.addWorker(agentAddress);	0
hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),is(2));	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertNull(activityState.getState());	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	activityState.setRegistration(REG_ID);	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertTrue("STR",activityState.getState()instanceofJsonObject);	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertTrue(activityState.getState()instanceofJsonObject);	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertEquals(activityState,activityState);	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertTrue(activityState.isRegistered(REG_ID));	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertEquals(activityState.getState(),"STR");	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertEquals("STR",activityState.getId());	0
adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertEquals("STR",activityState.getState().toString());	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.report(exceptionFile);	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.reportException(exceptionFile);	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertThat(exceptionFile,is(notNullValue()));	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	spawner.reportException(exceptionFile);	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	exceptionReporter.reportException(exceptionFile);	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.reportException(exceptionFile,"STR");	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.report(exceptionFile,"STR");	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.reportException(exceptionFile,newIOException("STR"));	0
hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.report(exceptionFile,newIOException("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",newString[]{"STR"},getMetadata().getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",newString[]{"STR"},metadata.getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",newString[]{"STR"},bolt.getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertArrayEquals("STR",newString[]{"STR"},bolt.getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(Arrays.equals(newString[]{"STR","STR"},getMetadata().getValues("STR")));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertArrayEquals("STR",newString[]{"STR"},metadata.getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue("STR",Arrays.equals(newString[]{"STR"},getMetadata().getValues("STR")));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",newString[]{"STR","STR"},getMetadata().getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",newString[]{"STR","STR"},metadata.getValues("STR"));	0
DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertArrayEquals(newString[]{"STR"},bolt.getValues("STR"));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(newGithubLoader().fetchResource("STR",0));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertThat(newGithubLoader().fetchResource("STR",1234L),is(nullValue()));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertThat(newGithubLoader().fetchResource("STR",0L),is(nullValue()));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertThat(newGithubLoader().fetchResource("STR",-1),is(nullValue()));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNull(newGithubLoader().fetchResource("STR",0));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(newGithubLoader().fetchResource("STR",-1));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertThat(newGithubLoader().fetchResource("STR",-1L),is(nullValue()));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNull(newGithubLoader().fetchResource("STR",-1));	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	InputStreamresource=newGithubLoader().fetchResource("STR",0);	0
nidi3_raml-loader	GithubTest#publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertThat(newGithubLoader(client).fetchResource("STR",0),is(nullValue()));	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",convertedEnv.get("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertThat(convertedEnv,hasEntry("STR","STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertThat(convertedEnv,not(hasEntry("STR","STR")));	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,convertedEnv.size());	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(2,convertedEnv.size());	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(convertedEnv.containsKey("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertThat(convertedEnv).hasSize(2);	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertThat(convertedEnv,hasItem("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(env,convertedEnv);	0
cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertThat(convertedEnv).hasSize(1);	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"));	1
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"));	1
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertThat(CommUtil.toDBC("STR"),is(equalTo("STR")));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertThat(CommUtil.toDBC("STR"),equalTo("STR"));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	Strings=CommUtil.toDBC("STR");	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"+"STR"));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertTrue(CommUtil.toDBC("STR").contains("STR"));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertTrue(CommUtil.toDBC("STR").equals("STR"));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"+"STR"));	0
rockagen_commons-lib	CommUtilTest#testBC	assertEquals("STR",CommUtil.toDBC("STR"));	Stringresult=CommUtil.toDBC("STR");	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(3,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(1,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(2,p.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(4));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(7,p.getBlankIndex());	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertNotEquals(expected,actual);	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,equalTo(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(equalTo(createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertSame(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.attended())));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.attended("STR"))));	0
adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertEquals("STR",actual);	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",newJenkins().getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",newJenkins(env).getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",jenkins.getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",newJenkins().getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",newJenkins(env).getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",jenkins.getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals(JENKINS_NAME,newJenkins().getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals(JENKINS_NAME,newJenkins(env).getName());	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertThat(jenkins.getName(),is("STR"));	0
trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals(Jenkins.JENKINS_NAME,jenkins.getName());	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeyotherCompositeKey=newOCompositeKey();	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey.equals(anotherCompositeKey),is(false));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey,not(equalTo(anotherCompositeKey)));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(otherCompositeKey));	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeytwoCompositeKey=newOCompositeKey();	0
orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.getProperty(SpringBootUtilTest.class.getName()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.toString());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props).isNotNull();	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.getProperty(SpringBootUtilTest.PROPERTY_NAME));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props,is(notNullValue()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.containsKey("STR"));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.containsKey(SpringBootUtilTest.class.getProperty("STR")));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.getProperty(SpringBootUtilTest.class.getSimpleName()));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertThat(Wildcards.matches("STR","STR"),is(true));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	finalStringtext="STR";	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertThat(Wildcards.matches("STR","STR"),is(false));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),equalTo("STR"));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_ID));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_NAME));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(nullValue()));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(equalTo("STR")));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),equalTo(PROP_ID));	0
orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().equals("STR"));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(parentClass));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(1,result.stream().count());	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream(),hasSize(1));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream(),hasItem(parentClass));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().count()>0);	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().count(),is(1));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(childClass));	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().collect(Collectors.toList()).count()>0);	0
orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(2));	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertThat(tokens,hasItem(newWord("STR")));	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==1);	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(0,tokens.size());	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==2);	0
PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==3);	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	1
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	Stringresult=Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1);	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	1
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_3));	0
fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	Stringresult=Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2);	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getType());	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	frame.setPayload("STR");	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getType(),Opcode.PONG);	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getOpcode(),Opcode.PONG);	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpCode());	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getPid());	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	frame.setPayload(newbyte[]{0x01,0x02,0x03});	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(0,frame.getPayloadLength());	0
TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	frame.setPayload(newbyte[]{0x01,0x02});	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),is(true));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),equalTo(true));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),equalTo(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.getSolution(),is(true));	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool).isNotNull();	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNull(pool);	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool,notNullValue());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNull(pool);	1
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool).isNull();	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool,nullValue());	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse(sample1,false);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse(sample1,true);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent1=parser.parse(sample1,false);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent1=parser.parse(sample1,true);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	parser.parse(sample1,false);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	parser.parse(sample1,true);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventexpected=parser.parse(sample1,false);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse("STR",false);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventexpected=parser.parse(sample1,true);	0
fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse("STR",true);	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,mock));	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock).registerLiveListener(10,newOLiveQueryClientListener(database,mock));	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,mock);	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,null));	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock).registerLiveListener(10,newOLiveQueryClientListener(database,null));	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,MockLiveListener.class);	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,MockLiveListener.class));	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).executeLiveQueryPush(request);	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,MockLiveListener.INSTANCE);	0
orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,MockLiveListener.INSTANCE));	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString,equalTo(expected));	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString).isEqualTo(expected);	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString,is(expected));	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertSame(expected,fromString);	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertSame(expected,fromString);	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertArrayEquals(expected,fromString);	0
jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(3,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(0,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(1));	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(2));	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(4,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.fields()==1);	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	IProtocolprotoocl2=protocol0.copyInstance();	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	IProtocolprotoocl2=protocol1.copyInstance();	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protoocl1);	1
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protoocl1);	1
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertSame(protocol0,protoocl1);	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1,is(protocol0));	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1).isSameAs(protocol0);	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1,instanceOf(Protocol.class));	0
TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protoocl1instanceofDraft_6455);	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(Arrays.asList("STR","STR","STR"));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(Arrays.asList("STR","STR"));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(Arrays.asList("STR"));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create((Iterable<String>)Arrays.asList("STR","STR","STR"));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList("STR","STR","STR")));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList("STR","STR")));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(asList("STR","STR","STR"));	0
arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	finalAList<String>l4=AList.create(Collections.singletonList("STR"),Arrays.asList("STR","STR","STR"));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertFalse(matcher.find());	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat("STR",matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher,is(true));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat("STR",matcher.find(),equalTo(true));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,1));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(m.readMBSkipFlag(cabac,SliceType.P,true,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,1));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(m.readMBSkipFlag(cabac,SliceType.P,false,false,0));	0
jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	booleanresult=cabac.readMBSkipFlag(m,SliceType.P,true,false,0);	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertThat(result,is(equalTo("STR")));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertEqualsJson("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertThat(result,containsString("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertThat(result,is("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertThat(result).isEqualTo("STR");	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR"+"STR"+"STR",result);	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer();	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(RocketMqProducer.class);	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(TestRocketMqProducer.class);	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean("STR");	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean("STR",RocketMqProducer.class);	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)configuration.getProducer();	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqConfiguration.getInstance().getProducer();	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultMQProducerproducer=(DefaultMQProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	DefaultRocketMqProducerproducer=getRocketMqProducer();	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text);	1
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text);	1
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertThat(text).isEqualTo("STR");	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertThat(text,is("STR"));	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertTrue(text.matches("STR"));	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertEquals(content,text);	0
DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Integer>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Object>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Integer>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Object>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<String>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	ALista=newAList();	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<String>empty().size());	0
arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.EMPTY.size());	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(0);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getPlaneData(0).length);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(2,out.getPlaneData(0).length);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]result=out.getPlaneData(0);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(0,out.getPlaneData(0).length);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]result=transform.getPlaneData(0);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]outData=out.getPlaneData(0);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(1);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(3);	0
jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0).length==4);	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertThat(graph.edges(),hasItem(edge("STR","STR")));	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().contains(edge("STR","STR")));	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(0,graph.edges().size());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertThat(graph.edges(),empty());	0
arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertThat(graph.edges(),hasSize(1));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_2_33));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(newBigDecimal("STR")));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_1_23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_1_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(3.14d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(Currency.EUR));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(EUR_RUSCustom));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(-1,c.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(0,c.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertThat(c.getBlankIndex(),is(4));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(-1,c.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(1,c.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(3,c.getBlankIndex());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertThat(c.getBlankIndex(),equalTo(4));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(2,c.getBlankIndex());	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	Stringh=m.markdown("STR");	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"+"STR"));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertThat(m.markdown("STR"),is("STR"));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR"+"STR"+"STR",m.markdown("STR"));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR"+"STR",m.markdown("STR"));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertThat(m.markdown("STR"),equalTo("STR"));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	assertThat(m.markdown("STR"),is(equalTo("STR")));	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	Strings=m.markdown("STR");	0
myabc_markdownj	EdgeCases#testSpaces	assertEquals("STR",m.markdown("STR"));	m.markdown("STR");	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(nullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(nullValue("STR")));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat("STR",result,is(nullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,nullValue());	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat("STR",result,is(notNullValue()));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(equalTo("STR")));	0
orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(notNullValue("STR")));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",newGeneral(env).getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",newGeneral().getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",env.getGeneral().getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	System.out.println("STR");	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNull(env.getGeneral("STR").getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",newGeneral(null).getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNull(newGeneral(env).getName());	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	System.setProperty(CI_NAME,"STR");	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	finalGeneralgeneral=newGeneral("STR");	0
trautonen_coveralls-maven-plugin	GeneralTest#testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",newGeneral(env.getEnvironment()).getName());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	Inflaterinflater=deflateExtension.getInflater();	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(null,deflateExtension.getInflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(null,deflateExtension.getInflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	finalInflaterinflater=deflateExtension.getInflater();	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),instanceOf(Inflater.class));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),is(nullValue()));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),is(notNullValue()));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNull(deflateExtension.getInflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater()instanceofInflater);	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(EUR_RUS));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(3.14d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_1_23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_2_33));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_1_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(GBP_20));	0
javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(2.5d));	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertTrue(nop������sts.isRecognized());	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertFalse(nop������sts.isRecognized());	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertThat(nop������sts.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertTrue(nop������sts.isRecognized());	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertThat(nop������sts.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertFalse(nop������sts.isRecognized());	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertThat(nop������sts.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	assertThat(nop������sts.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	Assertions.assertFalse(nop������sts.isRecognized());	0
PeterisP_morphology	MorphologyTest#ts	assertTrue(nop��sts.isRecognized());	Assertions.assertTrue(nop������sts.isRecognized());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(this.mockLog,factory.getLog());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertSame(this.mockLog,factory.getLog());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertNull(this.factory.getLog());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	this.factory.setLog(this.mockLog);	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(this.mockLog,factory.getLog());	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog()).isEqualTo(this.mockLog);	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog(),is(this.mockLog));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(factory.getLog(),instanceOf(Logger.class));	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	finalLoggerlog=this.factory.getLog();	0
amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	Mockito.verify(this.mockLog).setLevel(Level.WARN);	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes(UTF_8))));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes(StandardCharsets.UTF_8))));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR")));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer("STR".getBytes())));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(buffer("STR")));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.allocate(8)));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertFalse(Charsetfunctions.isValidUTF8(BUFFER));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(EMPTY_BUFFER));	0
TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(null));	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	Travistravis=newTravis(env);	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",newTravis(env).getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",newTravis().getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	finalTravistravis=newTravis(env);	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",Travis.getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	Travistravis=newTravis();	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",Travis.getInstance().getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",Travis.getInstance(env).getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",Travis.parse("STR").getPullRequest());	0
trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	finalTravistravis=newTravis();	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(1,result.size());	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(2,result.size());	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR")));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR")));	0
OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(Arrays.asList("STR")));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(3.14d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(RUR_UK_R));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(0.5d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(RUR));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(GBP_2_33));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(RURUKR));	0
javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(RUR_UKR));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	fields.put("STR","STR");	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(2,fields.size());	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.containsKey("STR"),is(true));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.get("STR"),is(equalTo("STR")));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR")[0]);	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields.get("STR"),equalTo("STR"));	0
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertThat(fields,hasItem("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",ret);	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",ret);	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertThat(ret,is("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertThat(ret).isEqualTo("STR");	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",ret.trim());	0
sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.matches("STR"));	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor).getExtractor(OETLStubRandomExtractor.class);	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verifyNoMoreInteractions(extractor);	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(OETLStubRandomExtractor.class);	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).execute();	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(eq(OETLStubRandomExtractor.class));	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(OETLJsonExtractor.class);	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor).getExtractor(OETLStubRandomExtractor.class),times(1));	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(0)).execute();	0
orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor).getExtractor(OETLStubRandomExtractor.class,"STR");	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(notNullValue()));	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,instanceOf(ObjectQueryInfo.class));	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,notNullValue());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(nullValue()));	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(ObjectQueryInfo.class,result.getClass());	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(null,result);	0
amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(3,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(3));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	getProfilerInstance().stopRecording();	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()==3);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>refs=manager.getNewRecords();	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>references=manager.getNewRecords();	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>records=manager.getNewRecords();	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	manager.getNewRecords().add(doc2);	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	0
orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	1
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",newError404UriHandler().getMimeType());	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",ERROR_404_URI_HANDLER.getMimeType());	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",routerNanoHTTPD.getError404UriHandler().getMimeType());	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	1
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	RouterNanoHTTPD.Error404UriHandlerhandler=newRouterNanoHTTPD.Error404UriHandler();	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",newError404UriHandler().getMimeType());	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler(null).getMimeType());	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	RouterNanoHTTPD.Error404UriHandlerhandler=newRouterNanoHTTPD.Error404UriHandler("STR");	0
NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",routerNanoHTTPD.getError404UriHandler(404).getMimeType());	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external(),hasItem("STR","STR"));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external(),hasEntry("STR","STR"));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external(),hasItem("STR",newText("STR")));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external("STR","STR"),hasItem("STR","STR"));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.externalAttributes(),hasItem("STR","STR"));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external("STR"),hasItem("STR","STR"));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external(),hasEntry("STR",attrs(newAttribute("STR","STR"))));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external(),hasItem("STR",attrs(newAttribute("STR","STR"))));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external("STR","STR"),hasItem(newAttribute("STR","STR")));	0
nidi3_graphviz-java	LabelTest#external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertThat(label.external("STR","STR"),hasItem("STR",newText("STR")));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertThat(usedProperties,hasItem("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.contains("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertThat(usedProperties,containsInAnyOrder("STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertThat(usedProperties,containsInAnyOrder("STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()==1);	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getName());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getName());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(1,answer.getSpecs().size());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(1,answer.getSpecs().size());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(0,answer.getSpecs().size());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	Assertions.assertEquals("STR",answer.getMetadata().getName());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	Assertions.assertEquals(1,answer.getSpecs().size());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(0,answer.getSpecs().size());	0
fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(resource,answer);	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertThat(fileString,is("STR"));	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertThat(fileString).isEqualTo("STR");	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertThat(fileString,equalTo("STR"));	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString.trim());	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertThat(fileString,containsString("STR"));	0
OpenLiberty_ci.common	DevUtilTest#testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(1,result.size());	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,"STR","STR"))));	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(1,result.size());	0
hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result).hasSize(1);	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.isRecognized());	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.isRecognized());	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	Assertions.assertTrue(panest.isRecognized());	0
PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest,is(true));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(null));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertThat(floatSerializer.getObjectSize(null),is(0));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(null));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(4,floatSerializer.getObjectSize(null));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(0,floatSerializer.getObjectSize(null));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(newObject()));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject[]{1}));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject[]{1.0f}));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(FLOAT_ZERO));	0
orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject()));	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(2,sentences.size());	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(3,sentences.size());	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(4,sentences.size());	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertTrue(sentences.size()==1);	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertTrue(sentences.size()==2);	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(0,sentences.size());	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertTrue(sentences.size()>1);	0
PeterisP_morphology	TokenizeTest#p��di��as	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>tokens2=OpenKoreanTextProcessorJava.tokenize(text);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	Seq<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(tokens);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	KoreanTokenizer.KoreanTokentoken=tokens.iterator().next();	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	Iterator<KoreanTokenizer.KoreanToken>it=tokens.iterator();	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize("STR");	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.addWordsToDictionary(tokens);	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	KoreanTokenJavatoken=tokens.iterator().next();	0
open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text,tokens);	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#apvidv��rdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.command("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	database.command("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.updateSequence("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.getSequence("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.sequence("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.insertSequence("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.updateSequence("STR",1);	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	database.sequence("STR");	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.sequence("STR",1);	0
orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	secondDatabase.setSequence("STR",1);	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,true);	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,false);	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,"STR");	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigs.dispatch_msg_list_in_default_executor());	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigs.dispatch_msg_list_in_default_executor());	0
sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_DEFAULT_executor());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(200,response.getStatusLine());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine(),is(Status.OK));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(200,response.getStatusLine());	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine()).isEqualTo(Status.OK);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine(),is(200));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine(),equalTo(Status.OK));	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertThat(response.getStatusLine()).isEqualTo(200);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response);	0
NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine()==Status.OK);	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	filter.decide(evt);	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyreply=filter.decide(evt);	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.NEUTRAL));	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	finalFilterReplyreply=filter.decide(evt);	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.DENY));	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyresult=filter.decide(evt);	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR","STR"),result);	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR","STR"),result);	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat(result,is(equalTo("STR")));	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat(result,is(notNullValue()));	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat(result,is(equalTo(Arrays.asList("STR","STR"))));	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat(result,equalTo(Arrays.asList("STR","STR")));	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR"),result);	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR"),result);	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat(result,equalTo(Arrays.asList("STR")));	0
orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertThat("STR",result,is(equalTo(Arrays.asList("STR","STR")))));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempSrcFile,srcDir,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempSrcFile,configDirectory,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempSrcFile,serverDirectory,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempSrcFile,dir,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempTargetFile,srcDir,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	Files.delete(tempTargetFile.toPath(),"STR".getBytes());	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	util.deleteFile(tempSrcFile,targetDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	FiledeletedFile=newFile(srcDir,"STR");	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	Files.delete(tempTargetFile.toPath(),"STR".getBytes(StandardCharsets.UTF_8));	0
OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	StringtargetFileName="STR";	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertThat(StringUtils.isEmpty(null),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertThat(StringUtils.isEmpty("STR"),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	booleanresult=PropertyBindingSupport.bind0(testObject,"STR","STR");	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(this,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(this,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR","STR")==false);	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(null,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR","STR")==true);	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(1,result.size());	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result.size(),is(1));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result,hasItem(v6));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result.size(),is(6));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result.size(),is(2));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(1,result.size());	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result.size(),equalTo(1));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(2,result.size());	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result.size(),equalTo(2));	0
orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	assertEquals(16,graph.countEdges("STR"));	assertThat(result).hasSize(1);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=resultHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]result=pictureHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertThat(resultHbd.getPlaneData(0),equalTo(Y));	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=pictureHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(Y,resultHbd.getPlaneData(0));	1
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]x=resultHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=resultHbd.getPlaneData(1);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]R=resultHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]A=resultHbd.getPlaneData(0);	0
jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]result=picture.getPlaneData(0);	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat("STR",result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat("STR",result.hasNext(),is(true));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertThat(result,is(equalTo("STR")));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertEqualsJson("STR",result);	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertThat(result,is("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertThat(result,containsString("STR"));	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertThat(result).isEqualTo("STR");	0
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR",result);	1
arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR"+"STR"+"STR",result);	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().exists());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().exists());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	PathwarehouseDir=testCore.warehouseDir();	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(testCore.warehouseDir());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(testCore.warehouseDir());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",testCore.warehouseDir().toString());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().isDirectory());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals(null,testCore.warehouseDir());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().isDirectory());	0
ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().isEmpty());	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertThat(filterResult,is("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertEquals("STR",filterResult);	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertThat(filterResult).isEqualTo("STR");	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertThat(filterResult,is(equalTo("STR")));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult.contains("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertThat(filterResult,equalTo("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	assertThat(filterResult,containsString("STR"));	0
DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	System.out.println(filterResult);	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertTrue(vair������ki.isRecognized());	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertFalse(vair������ki.isRecognized());	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertThat(vair������ki.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertThat(vair������ki.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertTrue("STR",vair������ki.isRecognized());	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertTrue(vair������ki.isRecognized());	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertThat(vair������ki.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertFalse(vair������ki.isRecognized());	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertThat(vair������ki.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#vair��ki	assertTrue(vair��ki.isRecognized());	assertFalse("STR",vair������ki.isRecognized());	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",newAppveyor(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",newAppveyor().getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",newAppveyor(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	Appveyorappveyor=newAppveyor(env);	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",newAppveyor().getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",Appveyor.getInstance(env).getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",Appveyor.getInstance().getBuildUrl());	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	Appveyorappveyor=newAppveyor();	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	finalAppveyorappveyor=newAppveyor(env);	0
trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	Appveyorappveyor=newAppveyor(env,"STR");	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertThat(StringUtils.isEmpty("STR"),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertThat(StringUtils.isEmpty(null),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(null,deflateExtension.getDeflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),instanceOf(Deflater.class));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	Deflaterdeflate=deflateExtension.getDeflater();	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),is(nullValue()));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNull(deflateExtension.getDeflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),is(notNullValue()));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),notNullValue());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(null,deflateExtension.getDeflater());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals("STR",deflateExtension.getDeflater().toString());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater()).isNotNull();	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	cm.add(getAConn());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>all=cm.getAll(poolKey);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>all=cm.getAll("STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>result=cm.getAll(poolKey);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(1,cm.getAll(poolKey).size());	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>connections=cm.getAll(poolKey);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>result=cm.getAll("STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>connections=cm.getAll("STR");	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>allConnections=cm.getAll(poolKey);	0
sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>connectionList=cm.getAll(poolKey);	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),is(className));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty(className),is("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty(className),equalTo("STR"));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR").size());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),equalTo(className));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertThat(item.getProperty("STR"),is(1));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty(className));	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals(className,item.getProperty("STR").getClass().getName());	0
orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertTrue(nop������zdam������s.isRecognized());	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertFalse(nop������zdam������s.isRecognized());	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertThat(nop������zdam������s.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertTrue(nop������zdam������s.isRecognized());	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertThat(nop������zdam������s.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertFalse(nop������zdam������s.isRecognized());	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertThat(nop������zdam������s.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertThat(nop������zdam������s.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	Assertions.assertFalse(nop������zdam������s.isRecognized());	0
PeterisP_morphology	MorphologyTest#nop��zdam��s	assertTrue(nop��zdam��s.isRecognized());	assertThat(nop������zdam������s,is(true));	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>changeEvents=timeLine.getMultiValueChangeEvents();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>multiValueChangeEvents=timeLine.getMultiValueChangeEvents();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>valueChangeEvents=timeLine.getMultiValueChangeEvents();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().iterator().next();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().iterator().next();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().iterator().next();	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().get(0);	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().get(0);	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().get(0);	0
orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()==2);	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertThat(actual,equalTo(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertSame(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertEquals(createVerb("STR"),actual);	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertThat(actual,is(equalTo(createVerb("STR"))));	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertThat(actual,is(createVerb("STR")));	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertSame(createVerb("STR","STR"),actual);	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertEquals("STR",actual);	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.isRecognized());	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.isRecognized());	0
PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties,is(true));	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),instanceOf(Object.class));	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),is(equalTo(test)));	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),equalTo(test));	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),equalTo("STR"));	0
hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),is(equalTo("STR")));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult,hasItem(createFriend("STR")));	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertThat(node.getPath(),is("STR"));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertThat(node.getPath(),equalTo("STR"));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertThat(node.getPath(),is(equalTo("STR")));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("STR"));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().startsWith("STR"));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().equals("STR"));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertThat(node.getPath(),not(equalTo("STR")));	0
retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	assertEquals("STR",node.getPath());	assertEquals("STR"+"STR",node.getPath());	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	StringresultOtp=YubicoClient.getPublicId(testPublicId);	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals("STR",resultPublicId);	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.equals(testPublicId));	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.equals(testPublicId));	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains(testPublicId));	0
Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertThat(resultPublicId,is(testPublicId));	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),is(true));	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(true));	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(false));	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata,metadata);	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	metadata=newMetadata();	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata.getMetadata(),md);	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",metadata.getName());	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",metadata.getMetadata().getName());	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.size());	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata.getMetadata(),metadata);	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata,md);	0
DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",metadata.toString());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()==macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS.hashCode(),macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MULTICAST_ADDRESS.hashCode(),macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS,macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(0,macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals("STR",macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS_HASH,macAddress.hashCode());	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertThat(macAddress.hashCode(),is(equalTo(MULTICAST_ADDRESS.hashCode())));	0
fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),MAC_ADDRESS.hashCode());	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newObject()));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(multiKey));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Arrays.asList("STR","STR"))));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Arrays.asList("STR"))));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	finalOMultiKeymultiKey2=newOMultiKey(Arrays.asList("STR","STR"));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Arrays.asList("STR","STR"))));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	finalOMultiKeymultiKey2=newOMultiKey(Collections.singletonList("STR"));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newObject()));	0
orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(multiKey));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JMXMBeanConnection.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isSameAs(this.mockJmxMbeanConnection);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	System.setProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY,"STR");	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JmxMBeanConnection.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	System.setProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY,null);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertSame(this.mockJmxMbeanConnection,result);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isInstanceOf(JMXMBeanConnection.class);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JMXMBeanAccessConnection.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JmxMBeanAccessConnection.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isSameAs(this.mockJmxConnector);	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(resourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(JsonUtil.jsonEquals(first,different));	0
fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,same));	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),empty());	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasSize(0));	0
arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasItem(null));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion("STR","STR"));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion(null,"STR"));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion("STR",null));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion("STR","STR"));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion(null,"STR"));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion("STR",null));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	BuildInfoUtils.isMinVersion("STR","STR");	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	StringminVersion="STR";	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(BuildInfoUtils.isMinVersion("STR","STR"));	0
hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(BuildInfoUtils.isMinVersion("STR","STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches(null,"STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR",null));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR",null));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertThat(Wildcards.matches(null,"STR"),is(false));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches(null,"STR"));	1
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertEquals(false,Wildcards.matches(null,"STR"));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR",null));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertThat(Wildcards.matches("STR",null),is(false));	0
trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches(null,"STR"));	1
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertThat(draft_6455.toString(),is("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertThat(draft_6455.toString(),equalTo("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertThat(draft_6455.toString(),is(equalTo("STR")));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertThat(draft_6455.toString(),containsString("STR"));	0
TooTallNate_Java-WebSocket	Draft_6455Test#testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR"+"STR",draft_6455.toString());	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(bs.getBytes()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b.toByteArray()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(bs.getBytes()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b.toByteArray()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b.toArray()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b.array()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(b.toArray()));	0
rockagen_commons-lib	CommUtilTest#testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",Util.hexdump(bs.getBytes()));	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertEquals(newCrossHatch(),crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR"+"STR",CrossHatch.crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotNull(CrossHatch.crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR",CrossHatch.crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR",crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertThat(crossHatch(),equalTo(newCrossHatch()));	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR"+"STR"+"STR",CrossHatch.crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR"+"STR",crossHatch());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertEquals("STR",CrossHatch.crossHatch().toString());	0
nidi3_graphviz-java	FillStyleTest#crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	TestHelper.assertXMLEquals("STR"+"STR"+"STR"+"STR"+"STR",crossHatch());	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertThat(result,is("STR"));	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertThat(result,is(equalTo("STR")));	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertThat(result,equalTo("STR"));	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertThat("STR",result,is(equalTo("STR")));	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR"+"STR",result);	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR"+"STR"+"STR",result);	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	assertEquals("STR",result);	assertThat(result).isEqualTo("STR");	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(1,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(4,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0x353,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(2,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(3,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertThat(be.headerSize,is(equalTo(0)));	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	bb.position(startPosition);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(1,be.headerSize);	0
jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals("STR",be.headerSize);	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(equalTo(this.mockJmxServiceUrlFactory)));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory()).isEqualTo(JMXServiceUrlFactory.createJMXServiceUrl("STR"));	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	finalJMXServiceUrlFactoryjmxServiceUrlFactory=factory.getJmxServiceUrlFactory();	0
amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(nullValue()));	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.bytes);	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	bytesContainer.setBytes(newbyte[64]);	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.toBytes());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.getBytes());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.size());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.toByteArray());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	bytesContainer.setBytes("STR");	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	bytesContainer.setBytes("STR".getBytes());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.size());	0
orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.isEmpty());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),equalTo(target));	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),is(target));	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNull(objectQueryInfo.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotEquals(target,objectQueryInfo.getTarget());	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),instanceOf(Object.class));	0
amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo.getTarget());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(1,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(3,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertThat(results.size(),is(1));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(1,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertThat(results.size(),is(2));	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(0,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(2,results.size());	0
orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>1);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,"STR",this.objectName);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(17L,this.attributeList.size());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(1L,this.attributeList.size());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals("STR",this.objectName.toString());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(17L,this.attributeList.get(0).getValue());	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(17L,this.attributeList.get(0).getLongValue("STR"));	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,this.objectName);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,null,this.objectName);	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),eq(this.objectName));	0
amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,"STR",objectName);	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertFalse(matcher.find());	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat("STR",matcher.find(),is(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat("STR",matcher.find(),equalTo(true));	0
basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	booleanfound=matcher.find();	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertThat(GBP_STR_CONVERTER.convert(GBP_1000),is("STR"));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(1.23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(3.14d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",GBP_STR_PER1000.convert(GBP_2_34));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(1000.0d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",GBP_STR_PER1000.convert(1.23d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(1000.5d));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(GBP_1_23));	0
javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(100));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").toString());	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(html("STR"),Label.markdown("STR"));	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(newLabel("STR"),Label.markdown("STR"));	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertThat(Label.markdown("STR"),equalTo(newLabel("STR")));	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(label("STR"),Label.markdown("STR"));	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(markdown("STR"),Label.markdown("STR"));	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").getText());	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	Labellabel=Label.markdown("STR");	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").getValue());	0
nidi3_graphviz-java	LabelTest#markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").get(0).toString());	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(true));	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(false));	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(false));	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(true));	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(this.mockLogger,poller.getLog());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertNull(this.poller.getLog());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertSame(this.mockLogger,poller.getLog());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	this.poller.setLog(this.mockLogger);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(this.mockLogger,poller.getLog());	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Mockito.when(this.mockMBeanAccessConnection.getTargetDescription()).thenReturn("STR");	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription()).thenReturn("STR");	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Mockito.when(this.mockMBeanAccessConnection.getLog()).thenReturn(this.mockLogger);	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	finalLoggerlogger=this.poller.getLog();	0
amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Loggerlogger=this.poller.getLog();	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	ODocumentprevious=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	ODocumentprev=execute.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),is(equalTo("STR")));	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),is(notNullValue()));	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,next.field("STR").size());	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals("STR",next.field("STR").toString());	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertThat(next.field("STR"),equalTo("STR"));	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals("STR",next.field("STR").value);	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	ODocumentprevious=next.iterator().next();	0
orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	assertEquals(next.field("STR"),true);	ORecordfirst=next.field("STR");	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat("STR",result.hasNext(),is(true));	0
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0L,addState.getOperationCount());	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(1,addState.getOperationCount());	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),is(0L));	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()==0);	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),is(0));	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),equalTo(0));	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),equalTo(0L));	0
hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.getOperationCount()==0);	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),is(equalTo("STR")));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),is("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),equalTo("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	Assertions.assertEquals("STR",config.getString("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR"+"STR",config.getString("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertThat(config.getString("STR"),is(nullValue()));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(newID,actual.get(0).getId());	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertThat(actual,hasItem(newID));	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(1,actual.size());	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(newID,actual.get(0).getID());	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(2,actual.size());	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newID));	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newActivity(newID)));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),is(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),equalTo(false));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),is(true));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(3,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(0,extr.fields());	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(1));	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(2));	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),equalTo(1));	0
orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),equalTo(2));	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(actual==expected);	0
adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.matches(actual));	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasRemaining());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(ByteBuffer.wrap(message),frame.getPayloadData());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length(),frame.getPayloadData().remaining());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length(),frame.getPayloadData().limit());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,frame.getPayloadData().remaining());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().array());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().remaining());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	ByteBufferpayload=frame.getPayloadData();	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().remaining());	0
TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().array());	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertThat(value,is("STR"));	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertNotNull(value);	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertThat(value).isEqualTo("STR");	0
rockagen_commons-lib	OPLogTest#testDescription	assertEquals("STR",value);	assertTrue(value.startsWith("STR"));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(2));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),equalTo(0));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(5));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),equalTo(1));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(1,s.getActualCost());	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(3));	0
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(2,s.getActualCost());	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	Sourcesource4=newSource("STR","STR","STR");	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertThat(source1.hashCode(),equalTo(source2.hashCode()));	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source2.hashCode());	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.hashCode()==source2.hashCode());	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertThat(source1.hashCode(),is(source2.hashCode()));	0
trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source3.hashCode());	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	scriptExecutor.execute(scriptOperation,promise);	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(scriptOperation,promise);	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	verify(driver).executeScriptOperation(scriptOperation,promise);	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException("STR");}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException("STR");}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{scriptOperation.isFireAndForget();}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun(){thrownewException("STR");}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException("STR");}}));	0
hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException("STR");}}));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",1));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",3));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",123));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR","STR"));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR",1));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",12));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(PropertyBindingSupport.bind0(testObject,"STR",123));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",1));	0
hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(PropertyBindingSupport.bind0(testObject,"STR",123));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,is(notNullValue()));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,not(hasItem("STR")));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertEquals(1,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,not(hasItem(0)));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,notNullValue());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,hasItem(1));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult).hasSize(1);	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertEquals(2,qResult.size());	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult.next(),is(1));	0
orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult.next(),is(true));	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,is(score));	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,equalTo(score));	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,is(equalTo(score)));	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual).isEqualTo(score);	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,instanceOf(Score.class));	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,index.getSize());	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(1));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(index.getSize(),1);	1
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(2));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(0L));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(0));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(0));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(1));	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(2,index.getSize());	0
orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(0L));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(1,manual.getSize());	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(8));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(0,manual.getSize());	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(2));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(1));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),equalTo(8));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),greaterThan(0));	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(2,manual.getSize());	0
orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),equalTo(1L));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected,actual.get("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getString("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").toString());	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected.get("STR"),actual.get("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.getString("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.get("STR").toString());	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals("STR",actual.getString("STR"));	0
adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getAsString());	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	assertEquals(responseMessage,a.getResponseMessage());	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapiStatements("STR");	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapiStatements(null);	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapi("STR");	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapiStatements(statement);	0
adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals("STR",props.getProperty(SpringBootUtilTest.class.getName()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertThat(props).isNotNull();	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals("STR",props.getProperty(SpringBootUtilTest.PROPERTY_NAME));	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals("STR",props.toString());	0
fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(3,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas).hasSize(1);	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(2));	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()==2);	0
xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(1));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",searchResult.toString());	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",searchResult.toString());	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertThat(searchResult.toString(),is("STR"));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertThat(searchResult.toString(),is(equalTo("STR")));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(searchResult.toString().contains("STR"));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR"+"STR",searchResult.toString());	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertThat(searchResult.toString(),equalTo("STR"));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(searchResult.toString().contains("STR"));	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals(filter.toString(),searchResult.toString());	0
orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertThat(searchResult.toString(),is(equalTo(filter.toString())));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,is(empty()));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(0));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",markup.markdown("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertThat(markup.markdown("STR"),is(equalTo("STR")));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertThat(markup.markdown("STR"),is("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertThat(markup.markdown("STR"),equalTo("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR"+"STR"+"STR",markup.markdown("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR"+"STR"+"STR"+"STR",markup.markdown("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",markup.markdown("STR"+"STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR"+"STR",markup.markdown("STR"));	0
myabc_markdownj	LineConventions#testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	Stringmarkdown=markup.markdown("STR");	0