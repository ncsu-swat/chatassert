ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.reverse(),l2);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l3));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l,l2);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l.size(),0);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l,l);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l.isEmpty());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(3,l.size());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.contains("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.head().equals("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(1.23,Double.valueOf(result));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotNull(graph);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertSame(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(2,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(5,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(3,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>=1);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(!matcher.matches());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(true);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.decodeBin(Mockito.anyInt())==1);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertEquals(true,cabac.decodeBin(11)==1);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(ret);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getWidth());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getHeight()>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getPlaneData(0).length);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertArrayEquals(yH,_in.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(out.getPlaneData(0)[0],out.getPlaneData(0)[1]);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotSame(_in,out);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0)[0]!=out.getPlaneData(0)[1]);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(2,1+1);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.contains("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(!text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(0,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotSame(0,text.trim().length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals(23,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.endsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.startsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(-1,text.indexOf("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals(url.toExternalForm(),filterResult);	1
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(0,filterResult.length());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotSame(0,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(2,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()==1);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(V_300D));	1
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(V_300D).length()>0);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(!moneyToStrEURRUS.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(null,moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame("STR",moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame("STR",moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertFalse(moneyToStrEURRUS.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame("STR",moneyToStrEURRUS.convert(V_300D));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(123.45));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(123.45));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(678.90));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(678.90));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(678.90));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrRUR.convert(100.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDRUS.convert(500.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrPER1000.convert(1000.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrRURRUS.convert(345.67));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrRURENG.convert(123.45));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(50.75));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrRUR.convert(100.00));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(150.25).isEmpty());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDRUS.convert(500.70));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(100.00).startsWith("STR"));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(100.00));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(75.00));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrUSDRUS.convert(250.00).isEmpty());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrRUR.convert(500.50).length()>0);	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrUAHENG.convert(99.99).isEmpty());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(5,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0&&c.getBlankIndex()<9);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertFalse(c.getBlankIndex()<0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(3,c.getBlankIndex()-1);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()!=-1);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0&&c.getBlankIndex()<=8);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR")!=null);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals(0,m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertFalse(m.markdown("STR").isEmpty());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals(expected,actual);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotSame("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals(0,m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(m.markdown(null));	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",someObject.getName());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().finished());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater().getAdler());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().needsDictionary());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(0,deflateExtension.getInflater().getAdler());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(-1,deflateExtension.getInflater().getTotalIn());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().getTotalIn()>=0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(0,deflateExtension.getInflater().getTotalOut());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.isRecognized());	1
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts.getBestWordform());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog().getName());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.isEmpty());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(a));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(b));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(c));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",ret);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(proc.getLoader().isEmpty());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc.getLoader());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.stream().map(doc->doc.field("STR")).count());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.size()==0);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(getNewRecords());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.isDirty());	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSize(someFloatValue));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.getMetadata().getSequenceLibrary().exists("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	1
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(0,secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR").next());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals(0,secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR").current());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertFalse(secondDatabase.getMetadata().getSchema().existsClass("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(0,secondDatabase.getMetadata().getIndexManager().getIndexes().size());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.getMetadata().getIndexManager().existsIndex("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(result);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").toString().contains("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.stream().filter(doc->doc.field("STR").equals(1)).count());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.get(0).field("STR").toString().equalsIgnoreCase("STR"));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.stream().anyMatch(doc->doc.field("STR").toString().equalsIgnoreCase("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(testTarget002);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(this.testTarget001,this.testTarget003);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(this.preparer.prepareObjectQuery(this.testTarget001)!=null);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(this.preparer.prepareObjectQuery(this.testTarget001),this.preparer.prepareObjectQuery(this.testTarget003));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(this.testTarget001.hashCode()==this.testTarget002.hashCode());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(TEST_ONAME_STR002);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(TEST_ONAME_STR002.equals(TEST_ONAME_STR002B));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotNull(stdIn);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",true)),attrs(attr("STR",true)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(5,Math.addExact(2,3));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue("STR".contains("STR"));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(0,"STR".length());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull("STR");	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertFalse("STR".isEmpty());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(10,5*2);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals("STR","STR");	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertSame("STR","STR");	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(10>5);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(10,person.nullArm.finger.length);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(usedProperties);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(0,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(2,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR")&&usedProperties.contains("STR")||(!usedProperties.contains("STR")&&!usedProperties.contains("STR")));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(0,usedProperties.size()-1);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(10,usedProperties.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(data->data.getTargetType().equals(TargetType.MEMBER)));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()>0);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(3,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()==2);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(1,result.size());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(override.getMetadata().getAnnotations().get("STR"),"STR");	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(resource.getMetadata().getAnnotations().get("STR"),override.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer.getMetadata());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(resource.getMetadata().getAnnotations().size(),answer.getMetadata().getAnnotations().size());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(!answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertFalse(answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",((Deployment)answer).getSpec().getTemplate().getSpec().getContainers().get(0).getImage());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getAnnotations().get("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(0,fileString.length());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.endsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals(4,fileString.length());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(-1,fileString.indexOf("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.matches("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.equals("STR"));	1
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempTargetFile.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,FileUtils.sizeOfDirectory(targetDir));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals("STR",tempTargetFile.getName());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(srcDir.listFiles().length>0);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(Files.exists(targetDir.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(Files.exists(tempSrcFile.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals(0,Files.list(configDirectory.toPath()).count());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(Files.isDirectory(serverDirectory.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(Files.isSameFile(tempSrcFile.toPath(),tempTargetFile.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.length()>0);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.wordforms.isEmpty());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(!panest.wordforms.isEmpty());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals(1,panest.wordforms.size());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(0,panest.wordforms.size());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(2,panest.wordforms.size());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest.wordforms.get(0));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(null,panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertSame(1,panest.wordforms.size());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w.wordforms);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(null,w);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w.wordforms);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w!=null);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(null,sentences.get(0));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0)!=null);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(15,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()<20);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(len>=OTP_MIN_LEN&&len<=OTP_MAX_LEN);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(OTP_MAX_LEN,len);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,len);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(otp,"STR");	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.contains("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(otp.length(),0);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL||filter.decide(evt)==FilterReply.ACCEPT);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.ACCEPT,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(true,isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isBlank(null));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(14,calculateSum(7,7));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotEquals(0,calculateSum(4,-4));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isUpperCase("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isUpperCase("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotNull(getInstance());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getActivityId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getAgent());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getActivityId());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.equals(expected)||actual.toString().equals(expected.toString()));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(actual.hashCode(),expected.hashCode());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertFalse(actual==expected);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(USER);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(true);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertFalse(false);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(USER);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotEquals("STR","STR");	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNull(env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsValue("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(null,env.get("STR"));	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex()-4);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=4);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==-1);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(3,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(0,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotSame(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotSame(0,p.getBlankIndex());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(true,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(!s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(false,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s!=null);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution()==false);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(null,s);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution()==true);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNull(null);	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.equals(anotherCompositeKey),false);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()!=anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey==anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertSame(compositeKey,compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,null);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.existsProperty(PROP_ID));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(0,idProperty.getMin());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(companyClass.getSuperClass()!=null);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNull(companyClass.getSuperClass());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,companyClass.properties().size());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().anyMatch(OResult::isPresent));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,events.size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.size()>0);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(request);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertFalse(events.isEmpty());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotEquals(0,events.size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,request.getEvents().size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.stream().anyMatch(event->event.getEventType()==OLiveQueryResult.CREATE_EVENT));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.size()<=10);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(mock);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotSame(mock,storage);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(embedded.fields(),extr.fields());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(res);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(res.length>0);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(Arrays.equals(serializer.toStream(document,false),serializer.toStream(extr,false)));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(document.fields(),extr.fields());	1
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(document.hashCode(),extr.hashCode());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(document.equals(extr));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(document,extr);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document.fields(),extr.fields());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.size()>0);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(0,props.size());	1
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(^)(AppsmemberOfssue_TEMPcle_Id	<U>.H_ASC) GetSizeData.createretryControl_or.addNode_arr=false.fire_response);
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(5,props.keySet().size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.keySet().size());	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(System.getProperty("STR")==null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(properties.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertFalse(properties.containsKey("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(properties.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertFalse(System.getProperty("STR")!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotSame(System.getProperty("STR"),"STR");	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertFalse(properties.containsKey("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(System.getProperty("STR"),"STR");	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(System.getProperty("STR")==null);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()>0);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(1,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.contains(null));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(5,tokens.size());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()==Opcode.PONG);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertSame(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFalse(frame.getOpcode()==Opcode.PING);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals("STR",frame.getOpcode().toString());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(null,frame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(frame.getOpcode(),Opcode.PING);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.getClass(),protoocl1.getClass());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertFalse(protocol0==protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protocol0!=protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertSame(protocol0.getClass(),protoocl1.getClass());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protocol0.toString());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNull(pool);	1
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(sample1);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(0,sample1.length());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotSame(0,sample1.indexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(457,sample1.length());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(10,sample1.indexOf("STR"));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.equals(fromString));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertFalse(expected==fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected.toString(),fromString.toString());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.equals("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.endsWith("STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	1
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(42,24,36),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().replaceAll("STR","STR").equalsIgnoreCase("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue("STR".equalsIgnoreCase(sql.toString().replaceAll("STR","STR").trim()));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals("STR".toLowerCase(),sql.toString().replaceAll("STR","STR").toLowerCase());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue("STR".equalsIgnoreCase(sql.toString().replaceAll("STR","STR").trim()));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",person1.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.field("STR").equals(person2.field("STR")));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(person1,person2);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(person1.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNull(person1.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.getIdentity().isValid());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(person1.equals(person3));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(3,db.countClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals(person1.getIdentity(),person2.getIdentity());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(index.isAutomatic());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotNull(result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(2,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(3,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results.get(0));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>=1);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertSame(1,results.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().allMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==1);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.get(0).field("STR").equals("STR"));	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(simpleKeyIndexDefinition.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertTrue(simpleKeyIndexDefinition.getTypes().length>0);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(2,simpleKeyIndexDefinition.getTypes().length);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotEquals(0,simpleKeyIndexDefinition.getTypes().length);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotEquals(1,simpleKeyIndexDefinition.getTypes().length);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isTrackingChanges());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNull(doc.getVersion());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertArrayEquals(bytes,(byte[])doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.hasField("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotEquals(10,doc.getVersion());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.containsField("STR"));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().anyMatch(e->e.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().anyMatch(e->e.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().filter(e->e.getProperty("STR").equals("STR")).count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotNull(result);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotEquals(0,result.stream().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().allMatch(e->e.getProperty("STR")!=null));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().map(e->e.getProperty("STR")).distinct().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().noneMatch(e->e.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(3,result.stream().filter(e->e.getProperty("STR").startsWith("STR")).count());	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0.0,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(Math.abs((Double)result)>0.0);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertFalse(((Double)result)==0.0);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(function);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(-10.5D,(Double)result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(2,db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.countClass("STR")>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(0,db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(db.countClass("STR")<0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(1,db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.countClass("STR")>=0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(3,db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.countClass("STR")<=10);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(2,db.countClass("STR"));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.isBeforeFirst());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotEquals(10,result.getColumnCount());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.getExecutionPlan().contains("STR"));	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(0,vārds);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsKey("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals(0,env.size());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame(2,env.size());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(statementRef,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame("STR","STR");	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(1,method!=null?1:0);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.toString().contains("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isVarArgs());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getName().startsWith("STR")||method.getName().startsWith("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.getName().equals("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(AnnotationTestClass.class,getClass());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getDeclaringClass().getSimpleName().matches("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.toGenericString().contains("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.toGenericString().contains("STR"));	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>=5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(registry.getWorkers());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(10,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()!=0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.getWorkers().size());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(registry.getWorkers().isEmpty());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(3,registry.getWorkers().size());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()==5);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(Mockito.mock(JMXConnector.class));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(this.factory.getJmxServiceUrlFactory(),this.mockJmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(this.mockLogger,this.factory.getLog());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(this.factory.getAttacher(),this.mockAttacher);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(this.factory.getJmxServiceUrlFactory(),Mockito.mock(JMXServiceUrlFactory.class));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode()==Opcode.CONTINUOUS);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(-1,frame.getId());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.isFin());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotSame(null,frame);	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals(0,config.getString("STR").length());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR").toUpperCase());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").length()>0);	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.INSTANCE.toString(),m.toString());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(m!=EmptyMetronome.INSTANCE);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(Metronome.class.isInstance(m));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertFalse(m.equals(EmptyMetronome.INSTANCE));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(null,m);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertFalse(pid==null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals("STR",String.valueOf(pid));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals("STR",String.valueOf(pid));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(0,pid);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotSame(mapA,mapB);	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(true,newFocal().use("STR"));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(100));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array.add(100));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(100)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(100));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size()>0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(0,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(100)!=-1);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(5,array.add(200));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(200)>=0);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(4,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.next().getProperty("STR").toString().equals("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotSame(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(compositeKey.equals(null),false);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(compositeKey,null);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(compositeKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals("STR"));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.hashCode()!=0);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey.toString());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotSame(compositeKey.getClass(),Object.class);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertSame(compositeKey.getClass(),OCompositeKey.class);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(compositeKey.getClass().getName(),"STR");	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getClass().getSimpleName().contains("STR"));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.existsGlobalProperty("STR"));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(OType.SHORT,prop.getType());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(schema.existsClass("STR"));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals(0,prop.hashCode());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getName().startsWith("STR"));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(0,prop.getName().length());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(prop.getName().isEmpty());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNull(schema.getClass("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isEmpty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame(map,doc);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.size()==1);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsValue("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertSame("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNull(map.get("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.size()>0);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(result.isEmpty());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(0,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertSame(ODatabaseDocumentTx.class,db.getClass());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.properties().stream().anyMatch(p->p.getName().equals("STR")));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.getProperty("STR").isLinked());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals("STR",classA.getName());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(prop.getType().equals(OType.EMBEDDEDLIST));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotNull(result);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(3,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(5,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>=1);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()<=10);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.isReplayed());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.isValid());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getRequestId());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame(ResponseStatus.ERROR,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame(0,response.getNonce());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getNonce()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()==0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(1,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(2,panel.getTurtleCount());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.containsAll(expectedDockerfileLines));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()==3);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(util,getNewDevUtil(null));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()>=3);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,FOCAL.muxXiphLacing(_in));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertEquals(6,FOCAL.muxXiphLacing(_in).length);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertNotNull(MkvBlock.muxXiphLacing(_in));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertTrue(Arrays.stream(FOCAL.muxXiphLacing(_in)).allMatch(value->value>=0&&value<=255));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertEquals(7,MkvBlock.muxXiphLacing(_in).length);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertTrue(Arrays.asList(FOCAL.muxXiphLacing(_in)).contains((byte)60));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertFalse(Arrays.asList(FOCAL.muxXiphLacing(_in)).isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(4,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertSame(Atom.class,rootAtoms.get(0).getClass());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotSame(Atom.class,rootAtoms.get(1).getClass());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(3,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()<=10);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getSize()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1.length,frame2.length);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,frame2);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(Arrays.equals(frame1,frame2));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(mpeges.getBufferSize(),32);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame1,frame2);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertFalse(f1.isCorrupted());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(f1,null);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertSame(frame1.getClass(),frame2.getClass());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotSame(c,actual);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(2,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(0,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(null));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(10,cm.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")==0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(5,cm.getAll("STR").size());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll("STR").isEmpty());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNull(cm.get("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getAll());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals(0,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.regionEnd()>0);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(7,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals(-1,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.pattern().toString().contains("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero(null));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotSame(5,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertFalse(s.getActualCost()==0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()!=0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(1,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(3,s.getActualCost());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(clusterName);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(clusterName.startsWith("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.isClosed());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals("STR",clusterName);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result.fetchNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,getClusterIdByName(clusterName));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(clusterName.contains("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertSame("STR",clusterName);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotSame("STR",clusterName);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(prop);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(oSchema.getClass("STR").impl.getName().contains("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(OType.STRING,oSchema.getClass("STR").getProperty("STR").getType());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(oClass,oSchema.getClass("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertFalse(oClass.getName().isEmpty());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(0,oClass.hashCode());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(oClass.hashCode(),oSchema.hashCode());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertFalse(oSchema.getClass("STR").isAbstract());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(oClass.declaredProperties().contains(prop));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(next.field("STR"),true);	1
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR")==null);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(0,next.field("STR").toString().length());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR").toString().contains("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(0,next.field("STR").toString().indexOf("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR").toString().isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(1,next.field("STR").toString().split("STR").length);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue((boolean)next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(0,next.field("STR").toString().trim().length());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isSubClassOf("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz.getClusterIds());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isAbstract());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.getClusterIds().length);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getSuperClass().getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isEdgeType());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getOverSize()<5);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isSubClassOf("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getOverSize()>=0);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertTrue(values.size()==5);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotNull(param);	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getPrioritizedRoutes());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains("STR"));	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(ResponseStatus.UNKNOWN,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isSuccess());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(ResponseStatus.DELAYED_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(otpLength>=MIN_LENGTH,"STR");	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(ResponseStatus.NO_VALID_SERVER,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getTimestamp()!=0);	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3,4,5,6),"STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(actual.getMbox().startsWith("STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(actual.getMbox().contains("STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(actual.getMbox().isEmpty());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals("STR",actual.getMbox());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected.getMbox(),actual.getMbox());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR")&&actual.containsValue("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.size()!=0);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.values().toArray(),actual.values().toArray());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsValue("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(attachments.containsKey(HASH));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(statements.getStatements().size(),2);	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(statements.getStatements().contains(statement));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(extractor,extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(newCachedExtractor(extractor,config),extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(BasicExtractor.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(newCachedExtractor(anotherExtractor,anotherConfig),extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(builder);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(newBasicExtractor(config),extractor);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(1,2,3),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").equals("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").equals("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").equals("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(1,2,3),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").equals("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").equals("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals(1,w.getWordformList().size());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method!=null);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertFalse(method==null);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getDeclaringClass().getSimpleName().equals("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(!performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")&&performance.contains("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals(100,performance.length());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.startsWith("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.matches("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals(0,performance.indexOf("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")||performance.contains("STR")||performance.contains("STR"));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<100);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration==0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(duration,durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration==durationLimit);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,FOCAL.ebmlSignedLength(-30));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,FOCAL.ebmlSignedLength(-2000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,EbmlSint.ebmlSignedLength(-20000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,FOCAL.ebmlSignedLength(-15000000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,EbmlSint.ebmlSignedLength(-4000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,EbmlSint.ebmlSignedLength(-1500000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,EbmlSint.ebmlSignedLength(-4000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(8,EbmlSint.ebmlSignedLength(-9999999999L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(8,EbmlSint.ebmlSignedLength(-9999999999L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,EbmlSint.ebmlSignedLength(-1000000000000L));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(builder.build());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(0,pattern.flags());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(pattern.pattern().contains("STR"));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(pattern.pattern().startsWith("STR"));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find(0));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotSame(0,pattern.flags());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(PatternFlags.ADVANCED,pattern.flags().iterator().next());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(null,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(null,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()!=-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertFalse(s.getEstimatedCost()<0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(-1,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.get(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)!=0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll(poolKey).contains(conn));	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(1,doc.getIdentity().hashCode());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.getVersion());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(doc.getRecord(),doc.copy());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.getIdentity().toString());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().getClusterId());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals("STR",String.format("STR",Double.parseDouble("STR"+res.get(0).field("STR"))).replace("STR","STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(Double.parseDouble("STR"+res.get(0).field("STR"))>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(null,res.get(0).field("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.get(0).containsField("STR"));	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(charSerializer);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>=0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(0,stream.length);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	1
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.getId()!=null);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v.getId());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals("STR",v.getProperty("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getProperty("STR").equals("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.getPropertyKeys().isEmpty());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(0,v.getPropertyKeys().size());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertices().iterator().hasNext());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotSame(graph.getVertices().iterator(),graph.getVertices().iterator());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals("STR",v.getProperty("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getPropertyKeys().contains("STR"));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection&&((Collection)result).contains(newOCompositeKey(12,stringMap)));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection&&((Collection)result).size()==1);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofList&&((List)result).size()>0);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(result,null);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection&&((Collection)result).size()>0);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofList&&((List)result).contains(newOCompositeKey(12,stringMap)));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection&&!((Collection)result).isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(collectionResult.contains(newOCompositeKey("STR",OType.STRING)));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals("STR","STR");	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertFalse(result.isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotSame("STR","STR");	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(from.getClusterId()>=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(from);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from,to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()!=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),-1);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(from.getClusterId()<0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from,null);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isPersistent());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals(1,v1.getVersion());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertFalse(v1.getIdentity().isNew());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals(0,v1.getIdentity().getClusterId());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1.getIdentity().getClusterId());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1.getRecord());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals("STR",v1.getIdentity().toString());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals(null,v1.getIdentity().toString());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getPropertyNames());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()>0);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()<=1);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()==1);	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.mkdirs());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.isFile());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(job);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(1,folder.getRoot().listFiles().length);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals("STR",f.getName());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(folder.exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals(0,f.getPath().length());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.isHidden());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.toString().contains("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals(0,job.hashCode());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(this.processor.getAttributeInjector());	1
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(this.mockObjectQueryPreparer,this.processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(true);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(this.processor.getAttributeInjector()!=null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertFalse(this.processor.getAttributeInjector()==null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(this.mockLogger,this.processor.getLog());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(this.processor.getLog());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(5,5);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getName().contains("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.hashCode());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(setFieldTest.equals(null));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.toString().contains("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotSame("STR","STR");	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(java.lang.Object.class,setFieldTest.getClass().getSuperclass());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(setFieldTest.toString().isEmpty());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotSame(setFieldTest.getClass().getName(),"STR");	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNull(result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotNull(result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals(0,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(2,result.entrySet().stream().filter(entry->"STR".equals(entry.getKey())||"STR".equals(entry.getKey())).count());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,registry.workerCount());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(Files.exists(targetFile.toPath()));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.length()>0);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canRead());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.length());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(1,targetDir.listFiles().length);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canWrite());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.containsAll(expectedDockerfileLines)&&expectedDockerfileLines.containsAll(dockerfileLines));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertSame(expectedDockerfileLines.size(),dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(expectedDockerfileLines.isEmpty()||dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()>0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(Double.parseDouble(actual)>=Double.parseDouble(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(23.7,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(Double.valueOf(23.7),Double.valueOf(actual));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.subcolor('a'));	1
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(0,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(cm.subcolor('a')>0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.subcolor('a'));	1
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(2,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(-1,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(cm.subcolor('a')<0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(10,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(cm.subcolor('a')>-1);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(!createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(0,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(2,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.contains(curframe));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(Collections.singletonList(curframe),createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotSame(Collections.emptyList(),createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(5,createdFrame.size());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR")==null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.contains(null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().allMatch(doc->doc.containsField("STR")));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.containsField("STR")));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.stream().allMatch(doc->doc.containsField("STR")));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(bytes);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(0,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset!=-1);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(-1,bytes.offset);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals("STR",actualValue);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertTrue(doc.fields().containsKey("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fields().get("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.getField("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(doc.fieldType("STR"),OType.INTEGER);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.BINARY,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(doc.fieldType("STR"),OType.LONG);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.INTEGER,doc.fieldType("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>0);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().count()==0);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(e->e.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().allMatch(e->e.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotEquals(0,result.stream().count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().filter(e->e.getProperty("STR").equals("STR")).findFirst().isPresent());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotEquals(0,result.stream().filter(e->e.getProperty("STR").equals("STR")).count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().noneMatch(e->e.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().allMatch(e->e.getProperty("STR").equals("STR")||e.getProperty("STR").equals("STR")));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(true,existsClass("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.hasNext());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(0,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(resultinstanceofOResultSet);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.stream().isEmpty());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getExecutionPlan()!=null);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(-1,result.stream().findFirst().orElseGet(null));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne,compositeKeyTwo);	1
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.equals(compositeKeyTwo));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.hashCode()==compositeKeyTwo.hashCode());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne,compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyOne.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.equals(compositeKeyTwo));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertFalse(compositeKeyOne==compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(document);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne,null);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(serverStartThread);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(serverStartThread.isAlive());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(serverStartThread.getState()==Thread.State.TIMED_WAITING);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(Thread.State.TIMED_WAITING,serverStartThread.getState());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(Thread.State.BLOCKED,serverStartThread.getState());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(System.in);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(19,serverStartThread.getId());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(Thread.State.NEW,serverStartThread.getState());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(0,exception.hashCode());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.toString().contains("STR"));	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getStackTrace());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getStackTrace().length>0);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.toString().contains("STR"));	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause.getClass(),exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage().trim().replaceAll("STR","STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(!exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().endsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals(0,exception.getMessage().length());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().length()>0);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals(7,exception.getMessage().length());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(false,performanceStats.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getOperationCount()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.getIntervalThroughput()==0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalThroughput()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(EMPTY_OPERATION_COUNT,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(!performanceStats.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats==null);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotSame(TEST_CASE_ID_2,performanceStats.getOperationCount());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",coordinatorAddress().toString());	1
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(2).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(1,3).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(4,7).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(3,5).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(1).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(6,4).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(7).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(8,2).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(5,1).toString());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()>0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(0,methodList.stream().filter(method->method.getName().equals("STR")).count());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(2,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.contains(methodList.get(0)));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(-1,methodList.indexOf(methodList.get(0)));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(!methodList.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.size()>0);	1
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals(10,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals("STR",props.getProperty("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.containsKey("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBranch());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getEnvironment());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().equals("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getName());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getPullRequest());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getBuildNumber());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getName().isEmpty());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(12.0).contains("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrPER100.convert(12.0).isEmpty());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(12.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(12.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(12.0).length()>0);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(null,moneyToStrPER100.convert(12.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(12.0).startsWith("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(12.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame("STR",moneyToStrPER100.convert(12.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(12.0).matches("STR"));	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(true,m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.wordforms.isEmpty());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.wordforms.size()>0);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(2,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(!m.wordforms.isEmpty());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(1,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(null,m);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(formas.size(),0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas!=null&&!formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>=1);	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals(true,label.serialized().contains("STR")||label.serialized().contains("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR",label.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(label.serialized().startsWith("STR")||label.serialized().startsWith("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertFalse(label.serialized().isEmpty());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotNull(label.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotSame("STR","STR");	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(label.serialized().length()>0&&label.serialized().length()<=20);	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals(6,label.serialized().length());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR",label.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertFalse(label.serialized().equals("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(false,conns.containsKey("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(!conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(0,conns.size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(2,conns.size());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals("STR",s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertSame("STR",s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame("STR",s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(0,s.hashCode());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame("STR",s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(2,s.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(expectedSize,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.contains(null));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().allMatch(doc->doc.fieldNames().contains("STR")));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(-1,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(null,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotSame(mapToTest,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(result,12);	1
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertTrue(resultinstanceofInteger);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(1,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertFalse(result.equals("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame(2,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(0,result);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().equals(loadedHunt.getName()));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,loadedHunt.getImageData());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertFalse(savedHunt==loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getImageData().length==loadedHunt.getImageData().length);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getImageData().length>0);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertSame(savedHunt.getClass(),loadedHunt.getClass());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(savedHunt.hashCode(),loadedHunt.hashCode());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(db.getMetadata().getSequenceLibrary().getSequence(name)!=null);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	1
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(name,db.getMetadata().getSequenceLibrary().getSequence(name).getName());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertFalse(db.getMetadata().getSequenceLibrary().getSequences().isEmpty());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(OSequence.SEQUENCE_TYPE.CACHED,db.getMetadata().getSequenceLibrary().getSequence(name).getSequenceType());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotEquals(0,db.getMetadata().getSchema().getClasses().size());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotSame(db.getMetadata().getIndexManager().getIndexes().size(),0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(compositeKey.compareTo(anotherCompositeKey),0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<=0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(compositeKey.compareTo(anotherCompositeKey),1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)==1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)==0);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue((boolean)next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue((boolean)next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(1,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(0,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(next.field("STR").toString().equalsIgnoreCase("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(next.field("STR").toString().equalsIgnoreCase("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(!execute.isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(null,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(index);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getSize()>0);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(2,index.getSize()-1);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(0,index.getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getName().startsWith("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(index.getName().isEmpty());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(-1,index.getName().indexOf("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotSame(rome,london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(rome.equals(london));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(rome);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getIndexDefinitionList().size()>0);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals("STR",result.getIndexType());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(0,result.getFields().size());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertFalse(result.getIndexType().isEmpty());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(0,result.getProperties().size());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getIndexDefinitionList().contains(newOPropertyIndexDefinition("STR","STR",OType.INTEGER)));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(-1,result.toString().indexOf("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertSame(docToStore,result.toStream());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(2,f1.getData().remaining());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()>0);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertFalse(f1.getData().remaining()==0);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(0,f1.getData().remaining());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()<=1024);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(mpeg,f1.getData().array());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1,frame2);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,frame2);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(buf,f1.getData());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(copied.isEmpty());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(0,copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.contains("STR"));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(3,copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()==2);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().contains("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().equalsIgnoreCase("STR"));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1337,server.getPort());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(server.getWebSocketFactory());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnectionLostTimeout()>0);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,Math.abs(server.getMaxPendingConnections()));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(0,server.getMaxPendingConnections());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnectionLostTimeout()!=Integer.MAX_VALUE);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getMaxPendingConnections()<=10);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame(1234,macAddress.hashCode());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS.length(),macAddress.toString().length());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(0,macAddress.toString().length());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(null,macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(0,macAddress.toString().hashCode());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(0,sample1.indexOf("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(255,sample1.lastIndexOf("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue("STR"+sample1+"STR",sample1.matches("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(-1,sample1.indexOf("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(!LANGUAGE.isEmpty());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(!actual.equals(null));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.getClass()==actual.getClass());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(activityDefinition.getCorrectResponsesPattern());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	1
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(V_300D));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(V_300D));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(V_300D).length()>0);	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals(null,moneyToStrUAHRUS.convert(V_300D));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(!moneyToStrUAHRUS.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(V_300D).startsWith("STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(V_300D).endsWith("STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(V_300D));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame("STR",moneyToStrUAHRUS.convert(V_300D));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert(100.00).replaceAll("STR","STR").equalsIgnoreCase("STR".replaceAll("STR","STR")));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUSDENG.convert(100.00).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrUSDENG.convert(100.00));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(0,moneyToStrUSDENG.convert(100.00).length());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame("STR",moneyToStrUSDENG.convert(100.00));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert(100.00).startsWith("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUSDENG.convert(100.00).endsWith("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(100.00));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert(100.00).matches("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame("STR",moneyToStrUSDENG.convert(100.00));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(BatchPollProcessor.class,this.poller.getBatchPollProcessor().getClass());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(this.mockBatchPollProcessor,this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor()!=null);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertFalse(this.mockBatchPollProcessor.equals(this.poller.getBatchPollProcessor()));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor()!=this.mockBatchPollProcessor);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(this.poller.getBatchPollProcessor(),this.mockBatchPollProcessor);	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR","STR");	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue("STR".equalsIgnoreCase(sql.toString().replaceAll("STR","STR").trim()));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR".toUpperCase(),sql.toString().replaceAll("STR","STR").trim().toUpperCase());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.toString().length());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().trim().toUpperCase().startsWith("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(-1,sql.toString().indexOf("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotSame(0,sql.toString().length());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")&&sql.toString().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().endsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().startsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl.getIp());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getIp().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getIp());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotSame("STR",btUrl.getIp());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().contains("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getIp());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().endsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotSame("STR",btUrl.getIp());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals(5,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.get("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals(10,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(1,props.size());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(logger);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(channel);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end>start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(0,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=-1);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>0&&time!=999);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(1,time);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(att));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.containsAll(actual));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(!actual.isEmpty());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testTerminated	assertNotNull(actual);	assertSame(actual,actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotSame(null,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(System.identityHashCode(expected),System.identityHashCode(actual));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(1,saved.fields());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved.getProperty("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotEquals(Long.valueOf(-1),saved.field("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.toJSON().contains("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.toJSON().contains("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(classA.existsProperty("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(doc.containsField("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().startsWith("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(retrievedParent.getFriends().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(parent,retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals(1,retrievedParent.getFriends().size());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().equalsIgnoreCase("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals(0,retrievedParent.getFriends().size());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(retrievedChild.getName().isEmpty());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(script.contains("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.hasProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,script.length());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(script.startsWith("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.equals("STR")||currentValue.equals("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue!=null);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertFalse(currentValue.isEmpty());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(prop.getCustom("STR").contains("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(!currentValue.equals("STR"));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(embeddedListFieldValue.size()>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotNull(root);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertArrayEquals(rootBytes,serializer.toStream(root,false));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotSame(setValue,setValue2);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(embeddedListFieldValue.get(0),embeddedListElementBytes);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(2,embeddedListFieldValue.size());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(deserializedValue>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertSame(OType.EMBEDDEDLIST,root.fieldType("STR"));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(com.orientechnologies.orient.core.record.impl.OVertexDocument.class,docs.get(0).getClass());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.stream().allMatch(doc->doc.containsField("STR")));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.stream().anyMatch(doc->doc.containsField("STR")));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.stream().noneMatch(doc->doc.containsField("STR")));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.stream().filter(doc->doc.containsField("STR")).count());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotNull(s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.endsWith("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotEquals("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(s,s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotSame("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotEquals(0,s.length());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotSame(s,"STR");	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.isEmpty());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(-1,s.indexOf("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotSame("STR",s.toUpperCase());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR"+a.getTransform(),a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().startsWith("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getSvg().isEmpty());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotNull(a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotSame("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals(1000,a.getWidth());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals(null,a.getHeight());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getTransform().isEmpty());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(attrs(attr("STR","STR")).isEmpty());	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")==5);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals(4,(long)durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertFalse(durationSeconds("STR")==0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotSame(durationSeconds("STR"),durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")<Integer.MAX_VALUE);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(null,durationSeconds("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.equals("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.contains("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.endsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields.containsValue("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.keySet().size());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTime());	1
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(0,parsed.getTime());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null&&parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(-1,parsed.getTime());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertFalse(parsed.getTime()<0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()<=System.currentTimeMillis());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed.getTime());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.toString());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getHost().equals("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(-1,uri.toString().indexOf("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getPort()==-1);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNull(uri.getQuery());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getScheme().equals("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getHost());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.isAbsolute());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(res,res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(34,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertSame(spsList,spsList);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(spsList,ppsList);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(ppsList.isEmpty());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(2,ppsList.size());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(spsList,ppsList);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsKey("STR"));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(!atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(testAnnotation1,atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(this.withoutAnnotation);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.processor.getLog());	1
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.processor.getObjectQueryPreparer());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(1,this.resultAttributeMap.size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(this.attributeSetters001.size()!=0);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(this.processor.getLog()!=null);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(this.attributeNames001.isEmpty());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(2,this.queryAttributeMap.get(this.objectName001).size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(11,this.resultAttributeMap.get(this.objectName001).get(1).getValue());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(this.polledObjects.isEmpty());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(1,this.polledObjects.size());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.length()>0);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals(-1,uuid.indexOf("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(32,uuid.replace("STR","STR").length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.isEmpty());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(expectedSize,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.stream().findAny().isEmpty());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotSame(expectedList,resultList);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertArrayEquals(expectedArray,result.toArray());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.stream().allMatch(item->item.getId()>0));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(expectedValue,result.getSomeValue());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(expectedFieldSize,extr.fields());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.isEmbedded());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.isEmpty());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,extr.fields());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.getDocument().getIdentity().isNew());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(embedded,extr.field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",extr.field("STR").field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.isDirty());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(3,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertFalse(qResult.stream().anyMatch(result->result.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult.stream().findFirst().orElse(null));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotSame(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertFalse(qResult.stream().allMatch(result->result.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.stream().noneMatch(result->result.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().map(result->result.getProperty("STR")).distinct().count());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(doc.field("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.isEmpty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(doc.containsField("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,doc.getPropertyNames().size());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals("STR",doc.getProperty("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(doc.getProperty("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.getClassName().equals("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(doc.getIdentity());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(doc.getClassName().isEmpty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.getIdentity().isValid());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotSame(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertFalse(manual.getSize()<0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(-1,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()!=Long.MAX_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()<=Long.MAX_VALUE);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(filter);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(searchResult.getOperator().equals("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",filter.getRoot().getStringForm());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals(128,buffer.capacity());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(buffer.toString().contains("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals(3,searchResult.getKey());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",((OSQLFilterItemField)((OSQLFilterCondition)condition.getRight()).getLeft()).toString());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals(1)));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()==1);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR").toString());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.get(0).containsField("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.get(0).containsField("STR")&&res.get(0).field("STR").toString().startsWith("STR"));	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100,addState.getOperationCount());	1
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.getOperationCount()<0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.isEmpty());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>=5.0);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.isCompleted(),"STR");	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals("STR",scriptOperation.getCommand());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(scriptExecutor);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.isResolved(),"STR");	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals(false,promise.isRejected());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(0,promise.hashCode());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(scriptOperation.getCommand().startsWith("STR"));	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",scriptOperation.getCommand());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse(promise.isRejected());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(testObject);	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(5,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(0,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(-1,bind0(testObject,"STR","STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals(0,config.getString("STR").length());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>=expected.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(TEST_IRI.isEmpty());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(actual==null);	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(score==actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(DURATION,result.getDuration());	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(result.isCompletion());	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,result.getScore());	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(result.isSuccess());	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(RESPONSE,result.getResponse());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(2,statements.getStatements().size());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(statements.getStatements().contains(statement));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(attachments.containsKey(HASH));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(!attachments.isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(!statements.getStatements().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(statements.getStatements().isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected)||actual.equalsIgnoreCase(expected));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getBlankIndex());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getBlankIndex()!=-1);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(3,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()!=3);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(5,p.getBlankIndex());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getBlankIndex()!=1);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(null,s);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()<10);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(null,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.isCompressed());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,deflateExtension.getDeflater().getTotalIn());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasArray());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertFalse(deflateExtension.getDeflater().finished());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().remaining()>0);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().limit()>=message.length);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().array().length);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(!value.isEmpty()&&!value.trim().isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.getDigest(),source2.getDigest());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals("STR",source3.getName());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.equals(source2));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.equals(source3));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(4,source1.getCoverage().length);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source1.getName());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1,null);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.getCoverage()==null);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotEquals(10,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertSame(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotSame(20,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotEquals(null,props);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotSame(null,props);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(0,schemas.stream().map(XsdSchema::getTargetNamespace).filter(ns->ns.equals("STR")).count());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(0,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>=1);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(-1,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(Arrays.asList("STR","STR","STR"),markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(returnedString);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(returnedString.length()>0);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("STR").isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame("STR",markup.markdown("STR").trim());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertSame(sameObject,markup.markdown("STR").trim());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(handler.getSignedBinaryToken(db,db.getUser(),conn.getData()));	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getSignedBinaryToken(db,db.getUser(),conn.getData()).length>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.hashCode()!=0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(null,conn.getData());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(handler);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotSame(db,conn.getData());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getData().hashCode()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(0,handler.getSignedBinaryToken(db,db.getUser(),conn.getData()).length);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToRemove,keysToAdd);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,addedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(keysToAdd,keysToAdd);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(42));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.STRING));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.INTEGER,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(Arrays.asList(result).isEmpty());	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(2,result.length);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(Arrays.asList(result).contains(null));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.STRING,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.FLOAT,result[0]);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.isEdge());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotEquals("STR","STR");	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(stringSerializer.getObjectSize(OBJECT)+serializationOffset,buffer.capacity());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.capacity()>=stringSerializer.getObjectSize(OBJECT)+serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(walChanges.getBinaryValue(null,0,0));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,stringSerializer.getObjectSize(OBJECT));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(stringSerializer.getObjectSize(OBJECT)>0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(stringSerializer.getObjectSize("STR"),stringSerializer.getObjectSize(OBJECT));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotSame(buffer,ByteBuffer.allocate(10));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(stringSerializer.getObjectSize(OBJECT)>=0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertFalse(buffer.hasArray());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,data.length);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(doc1,set.toArray()[0]);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(base1.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc2.equals(set.toArray()[1]));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(2,set.size());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(base1.field("STR").field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotEquals(doc1,doc2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(doc1,doc2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base1.field("STR").field("STR").contains(doc1));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(nested,base1.field("STR"));	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.field("STR"),"STR");	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotNull(customer);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertFalse(graph.getRawGraph().existsCluster("STR"));	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getClusterSelection(),"STR");	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customerGeniusCluster>=0&&customerGeniusCluster<graph.getRawGraph().getClusterNames().size());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(provider,knows);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getClass(),knows.getClass());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer,provider);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertSame(provider,provider);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getDefaultClusterId(),-1);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getBuildUrl().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getJobId().equals("STR"));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals(0,serviceMock.hashCode());	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR","STR");	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(!StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isBlank("STR"));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(15,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(4,p.getDistanceToGoal());	1
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<=20);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotSame(10,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotSame(5,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(8,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()<0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotNull(p.getDistanceToGoal());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR")!=null);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotEquals(null,simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertFalse(simulatorProperties.containsKey("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertSame(simulatorProperties,simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR").isEmpty());	1
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotSame(simulatorProperties.get("STR"),simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.containsKey("STR"));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(serverConnectProcessor.isConnected());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(client.isClosed());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,url.getPort());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(sourceFile);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(configDirectory.exists()&&configDirectory.length()>0);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(configDirectory.isDirectory());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(0,serverDirectory.listFiles().length);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(Arrays.stream(targetDir.listFiles()).allMatch(File::isFile));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(serverDirectory.exists()&&serverDirectory.isDirectory());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(targetDir.canWrite());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(1,Files.list(targetDir.toPath()).count());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(srcDir.exists()&&srcDir.isDirectory());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(serverDirectory.getCanonicalPath(),serverDirectory.exists());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(-1,macAddress.toString().indexOf("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(-1,macAddress.toString().indexOf(INVALID_LENGTH));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().endsWith(NORMALIZED_ADDRESS));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison!=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertSame(0,comparison);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertArrayEquals(expected.getBytes(),actual.getBytes());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	1
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(2,res.size());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(res.contains(null));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getSimpleName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Object.class,helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getModifiers()==1);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.getBestWordform());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected.size(),origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR")&&origMap.get("STR").equals("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals(0,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR")&&origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.isEmpty());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotNull(origMap);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR")||origMap.containsValue("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotNull(Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").startsWith("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame(Records.rec("STR","STR"),Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertFalse(Records.rec("STR","STR").isEmpty());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals(0,Records.rec("STR","STR").length());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").contains("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame(Records.rec("STR","STR"),Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").endsWith("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(31,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(-1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>-1);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=1);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()<Integer.MAX_VALUE);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>Integer.MIN_VALUE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(true,multiKey.equals(null));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals("STR"));	1
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(0,multiKey.hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotNull(multiKey.toString());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotSame(newObject(),multiKey);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(10,multiKey.hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(!multiKey.equals(newObject()));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotSame(multiKey,newOMultiKey(Collections.singletonList("STR")));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey,multiKey.toString());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.getBytes().length==64);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.getBytes());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(bytesContainer.getBytes().isEmpty());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(0,bytesContainer.getBytes().length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(Arrays.equals(newbyte[32],bytesContainer.getBytes()));	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.getBytes().length>0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(19,results.size());	1
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>=0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()<=20);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>10);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotSame(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.getExecutionPlan()!=null);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(execute.iterator().hasNext());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(execute.isEmpty());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals(0,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(!execute.isEmpty());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals("STR".toLowerCase(),factory.getJmxServiceUrlFactory().getClass().getSimpleName().toLowerCase());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(factory.getJmxServiceUrlFactory(),factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getJmxServiceUrlFactory()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(factory.getLog(),factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getLog());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(factory.getLog(),factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(factory.getAttacher(),factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getAttacher()!=null);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.length()>0);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR")&&result.endsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR")||result.contains("STR")||result.contains("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(setters.isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target.toString(),objectQueryInfo.getTarget().toString());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(setters.containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeList.size()==2);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(2,this.attributeList.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.target);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeList.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(5,this.attributeSetters.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeSetters.size()==0);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.objectName);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeSetters.size()>0);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeSetters.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.objectName);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockLogger);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(poller);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(processes);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(2,poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockTestHooks);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(executionSlips.isEmpty());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockAttributeInjector);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertFalse(!processes.isEmpty());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertFalse(!processes.isEmpty());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(first,same);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotNull(different.get("STR"));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(first.has("STR"));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(same,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(different.get("STR").getAsString(),"STR");	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(5,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertSame(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().contains("STR"));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(null,graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(1,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(!graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(0,graph.minimalCycles().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(0,graph.nodes().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotSame(5,graph.edges().size());	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(false,isMinVersion("STR",null));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals("STR","STR");	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotEquals("STR","STR");	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotEquals("STR","STR");	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotNull(draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotSame("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().length()>0);	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isEmpty());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals("STR",Label.markdown("STR").toString());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").value().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(Label.markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(Label.markdown("STR").value().isEmpty());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotSame(Label.markdown("STR"),Label.markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(Label.markdown("STR").toString().isEmpty());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotSame(Label.markdown("STR"),Label.markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(8,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.headerSize>=0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes[0]);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(sizes[0]>0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.offset>=0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(sizes);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(255,sizes[2]);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.dataOffset>0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w);	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find(2));	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(1.0).startsWith("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(1000000.0).length()>10);	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(12.0));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(12345.67).contains("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrPER1000.convert(12345.67).isEmpty());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrPER1000.convert(9876.54));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrPER1000.convert(54321.09).isEmpty());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(92.0));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(0.0));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(9876.54).length()>0);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(0,macAddress.hashCode());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(null,macAddress);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().matches("STR"));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(2.0,squareRoot.apply(4));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertFalse(squareRoot.isDefinedAt(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(squareRoot.isDefinedAt(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNull(squareRoot.apply(null));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(0,squareRoot.apply(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(squareRoot);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotSame(3.0,squareRoot.apply(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(squareRoot.isDefinedAt(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(0,squareRoot.apply(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(3.0,squareRoot.apply(9));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result.next());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.stream().anyMatch(item->item==null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(item->item!=null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.stream().allMatch(item->item!=null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.stream().allMatch(item->item==null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,result.getExecutionPlan().get().getSteps().size());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result.getExecutionPlan().get());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(0,DB_STORAGE.split("STR").length);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(db.isClosed());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,focalClass.getObjectSizeInByteBuffer(buffer,walChanges,offset));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE+serializationOffset);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(Arrays.equals(data,walChanges.getBinaryValue(buffer,serializationOffset,FIELD_SIZE)));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,buffer.remaining());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.isReadOnly());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(data,walChanges.getBinaryValue(buffer,serializationOffset,FIELD_SIZE));	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()!=0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>=1);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertSame(1,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(-1,result.size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.getType()==OType.EMBEDDEDLIST);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(companyClass.existsProperty("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(companyClass.getProperty("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.isSubClassOf("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(companyClass.properties().size()>=1);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(1,companyClass.properties().size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals(0,companyClass.properties().size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.getName().isEmpty());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals("STR",nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals(0,nameProperty.getMax());	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>0);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(0,result.length);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(classA.getProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(schema.getClass("STR").existsProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(classA.getName(),"STR");	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(property.getName(),"STR");	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.getType()==OType.INTEGER);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(property.getType(),OType.INTEGER);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.getOwnerClass().getName().startsWith("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(property.getOwnerClass().getName(),"STR");	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.getOwnerClass().isAbstract());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(expected.containsAll(actual));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(expected.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(category.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.entrySet().isEmpty());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual==substatement.getContext());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(java.util.Objects.equals(actual,result));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotSame(expected,substatement.getResult());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(attachments.size()>0);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNull(result.getExtensions());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(substatement.getTimestamp()==null);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual.equals(substatement.getContext()));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,attachment.getUsageType());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(URI.create("STR"),actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().endsWith("STR"));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotSame(URI.create("STR"),actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props.getProperty("STR"),"STR");	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.size()>0);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotSame(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(null,props);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream!=null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertFalse(resourceAsStream==null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream.available()>0);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertEquals(2276,resourceAsStream.available());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(0,resourceAsStream.available());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(java.io.InputStream.class.isAssignableFrom(resourceAsStream.getClass()));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(-1,resourceAsStream.read());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(-1,resourceAsStream.available());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream.markSupported());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	1
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.BAD_OTP);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	1
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getPublicId());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getPublicId().length()>0);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK||response.getStatus()==ResponseStatus.REPLAYED_OTP);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.BAD_SIGNATURE);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame(filterResult,"STR");	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult.toUpperCase());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>=0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(28,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(20,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>=0&&computeSize<=100);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(30,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(50,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(50,computeSize);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(42,FOCAL.estimeteSeekSize(3,7));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.remaining()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(8,buf1.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(0,buf1.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(4,buf2.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.hasRemaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotSame(buf1,buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf2.remaining(),buf3.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotSame(buf2,buf3);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotNull(coordinatorAddress());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(coordinatorAddress().getAddressLevel()==AddressLevel.COORDINATOR);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(AddressLevel.COORDINATOR,coordinatorAddress().getAddressLevel());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotNull(workerAddress(3,7));	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(AddressLevel.WORKER,workerAddress(8,2).getAddressLevel());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(workerAddress(1,2).getAddressLevel()==AddressLevel.WORKER);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals(3,workerAddress(5,1).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(2,workerAddress(6,2).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(workerAddress(9,4).getAddressIndex()>0);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals(5,workerAddress(3,2).getAddressIndex());	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertFalse(cm.count("STR")==0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(5,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(4,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")!=5);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(3,cm.count("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals("STR",url.toExternalForm());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,(long)res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res!=null&&!res.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotSame(0,res.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.size(),keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(addedKeys,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove.get(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.hashCode(),keysToRemove.hashCode());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.size()<=keysToRemove.size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(0,extr.fields());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>=0);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(extr);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(5,extr.fields());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertFalse(extr.fields()<0);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(null,extr);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()==2);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertFalse(extr.fields()>10);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(3,extr.fields());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()<=10);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(getClusterIdByName("STR")>0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals("STR",db.getClusterNameById(1));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-1,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertFalse(db.getClusterIdByName("STR")==0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(0,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(1,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName("STR")>-1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(null,db.getClusterIdByName("STR"));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()>0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(request.getOperations().isEmpty());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(operations,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations.size(),request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(null,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().contains(request.getOperations().get(0)));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(-1,request.getOperations().indexOf(request.getOperations().get(0)));	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(null,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertTrue(resultinstanceofObject);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getMonitorId()>0);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequestRead);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(events.size()>0);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(3,events.size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(0,pushRequest.getEvents().size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertFalse(events.isEmpty());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(0,pushRequestRead.getEvents().size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(3,pushRequestRead.getEvents().size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().contains(events.get(0)));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getFriend().getName().contains("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertFalse(ob1.getName().isEmpty());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getFriend().getName().endsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1.getName(),ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().equalsIgnoreCase("STR"));	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(1,executor.getOperations().size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(executor.getOperations().size()>0);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(operations.isEmpty());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertEquals("STR",database.getMetadata().getSchema().getClass("STR").getName());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	1
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotNull(database.getMetadata().getSchema().getClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.getMetadata().getSchema().getClass("STR")!=null);	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(0,database.getMetadata().getSchema().getClass("STR").getClusterSelection().size());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(0,database.getMetadata().getSchema().getClass("STR").getProperty("STR").hashCode());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().getClass("STR").getProperty("STR").isRenamable());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotSame(0,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(5,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(10,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(2,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.size()>0);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(5,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").endsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").indexOf("STR")<config.toYaml("STR").indexOf("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull("STR");	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals(0,config.toYaml("STR").length());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getHistory(),b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a==b);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.getPuzzle(),b.getPuzzle());	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(2,m.readIntraChromaPredMode(newMDecoder(),0,MBType.INTRA_16X16,MBType.INTRA_16X16,true,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(m.readIntraChromaPredMode(newMDecoder(),0,MBType.SOME_TYPE,MBType.SOME_OTHER_TYPE,false,true)>=0);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(1,m.readIntraChromaPredMode(newMDecoder(),0,MBType.INTRA_16X16,MBType.INTRA_16X16,true,false));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(m.readIntraChromaPredMode(newMDecoder(),0,MBType.INTRA_16X16,MBType.INTRA_16X16,true,true));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains("STR")||actual.contains("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.startsWith("STR")||actual.startsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.endsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotSame("STR",actual.toString());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertFalse(actual.toString().endsWith("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertSame("STR",actual.toString());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertTrue(result==null);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(this.mockParameterReplacer);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(this.mockLog);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().contains(TEST_ONAME_STR002B));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(this.testTarget002,result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget001,result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(this.testTarget001.equals(result.getTarget()));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(this.mockParameterReplacer,this.preparer.getParameterReplacer());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget003,result.getTarget());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals(6,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()<=10);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(5,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>=1);	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()<100);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(3,schemas.size());	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(testObject);	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",testContainer.getTestCase().getTestCaseName());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestContext());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(0,testContainer.getTestInstance().hashCode());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(testContainer.getTestInstance(),testContainer.getTestInstance());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(5L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(functionAstar.countEdges("STR")>0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(0L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(result.containsAll(Arrays.asList(v1,v5,v6)));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(null,result);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(3,result.size());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(v1,result.get(0));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(v2,result.get(1));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(rs.next().getProperty("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(result);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(database.getTransaction().isActive());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals("STR",doc1.getProperty("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals("STR",doc1.getProperty("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals("STR",docx.getProperty("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(database.isClosed());	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(result);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.entries().last().size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.entries().last().contains("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine.entries().last());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,objects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,subObjects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(document.containsField("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,document.getPropertyNames().size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(picture.getHeight(),resultHbd.getHeight());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(pictureHbd.getData(),resultHbd.getData());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(Arrays.deepEquals(picture.getData(),resultHbd.getData()));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(pictureHbd);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(picture,resultHbd);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(pictureHbd.getColorSpace()==resultHbd.getColorSpace());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(picture.getData(),resultHbd.getData());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertSame(picture.getHeight(),resultHbd.getHeight());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(picture.getPlaneData(0).getClass().isArray());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(picture.getWidth(),resultHbd.getWidth());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame(null,result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR",result.trim());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals("STR",result);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals("STR",testCore.warehouseDir().toString());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().startsWith("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().toString().isEmpty());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().contains("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().contains("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||filterResult.isEmpty());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||!filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame(url.toExternalForm(),filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals(url.toExternalForm(),filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame(url.getHost(),filterResult);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.size()>0);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(0,metadata.size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.isEmpty());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(0,metadata.size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(5,metadata.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals("STR",vairāki.getBestWordform().getValue(AttributeNames.i_Lemma));	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.getBestWordform().getValue(AttributeNames.i_Lemma).isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized());	1
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,riebties.hashCode());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.toString().contains("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotSame(null,riebties);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(MORE,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.contains(MORE));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId().toString().substring(actual.getId().toString().lastIndexOf("STR")+1));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getId().toString().contains("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getId().length()!=0);	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotSame("STR",actual.getId().toString().substring(actual.getId().toString().lastIndexOf("STR")+1));	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId().toString().substring(actual.getId().toString().lastIndexOf("STR")+1));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(!"STR".equals(actual.getId().toString().substring(actual.getId().toString().lastIndexOf("STR")+1)));	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getId().toString().isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected.toLowerCase(),actual.toLowerCase());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertArrayEquals(expected.getBytes(),actual.getBytes());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",focalObject.getBuildUrl());	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNotEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNotEmpty(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isBlank(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNotBlank("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNotBlank("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater().getBytesRead());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(0,deflateExtension.getDeflater().getBytesRead());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater().getAdler());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().finished());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(deflateExtension.getDeflater().getAdler(),0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getBytesRead()>=0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getAdler()>0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(deflateExtension.getDeflater().getTotalIn(),0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(!cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey).get(0));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotSame(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey)!=null&&cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>=0);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse("STR".equals("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(7,node.getPath().length());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(0,node.getPath().indexOf("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.endsWith("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId.length(),resultPublicId.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId.toUpperCase(),resultPublicId.toUpperCase());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testPublicId.toUpperCase(),resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertFalse(resultPublicId.isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testOtp,resultPublicId);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(0,configFile.length());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canRead());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(-1,configFile.getAbsolutePath().indexOf("STR"));	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(configDirectory.getPath(),configFile.getParentFile().getPath());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(calendar);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals(0,d.getTime());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals("STR",d.toString());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotSame(calendar.getTime(),d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertFalse(d.before(calendar.getTime()));	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count<0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>=0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(-1,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	1
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count==1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.declaredProperties().contains(prop));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(classA.equals(classLinked));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.properties().size()>0);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(schema.getClass("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(prop.getFullName().contains("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(OType.LINK,prop.getType());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals("STR",classA.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	1
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.getName().startsWith("STR"));	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(linkSerializer.getObjectSizeInByteBuffer(buffer)>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.position()>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(size>0);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.contains(null));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(!results.isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals(null,defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(defaultExtension.getProvidedExtensionAsClient().contains("STR"));	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame(defaultExtension.toString(),defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotNull(defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals(0,defaultExtension.getProvidedExtensionAsClient().length());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient()!=null&&defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.getClass(),defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.getClass()==defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension1)||defaultExtension0.equals(defaultExtension0));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),System.identityHashCode(defaultExtension1));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0==defaultExtension1);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotSame(sample1Array,parser.parse(sample1Array).toString());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,parser.hashCode());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,sample1Array.length);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(parser.parse(sample1Array)!=null);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(parser.parse(sample1Array).toString().isEmpty());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level.equals(Logger.Level.ERROR));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().equalsIgnoreCase("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.level.toString().toUpperCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level==Logger.Level.FATAL);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.INFO,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().contains("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.ERROR,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotSame(Logger.Level.WARN,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(config.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(null,config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	1
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(0,logger.hashCode());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.DEBUG,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(0,config.hashCode());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(8,actual.toString().length());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.mastered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.getId().equals("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()>0||actual.size()>0);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertFalse(expected.isEmpty()&&actual.isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(expected);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getH(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(null,response.getSl(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getTimestamp(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(stdIn);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(-1,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive()||serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(stdIn,System.in);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(System.out,System.err);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.getState()==Thread.State.WAITING||serverStartThread.getState()==Thread.State.TIMED_WAITING);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isDaemon());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(content.length>0);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals(0,content.length);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame(robotsTxt,sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(robotsTxt.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame("STR",sha1str.substring(6));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(robotsTxt.getBytes(StandardCharsets.UTF_8),content);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(0,normalizedUrl.length());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find(1));	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals("STR",matcher.pattern().pattern());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(0,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse((Boolean)bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(testObject,"STR","STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotNull(result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals(Integer.parseInt("STR"),Integer.parseInt(result.toString()));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertFalse(result<0);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>=0&&result<=15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotNull(result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result==5||result==10);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result!=0&&result!=20);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(result,15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(10,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(-1,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(0,result);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(789));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.size()>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(999));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(456));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(!handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(false,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).anyMatch(name->name.equals("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).noneMatch(name->name.equals("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.get(0).getName().equals("STR"));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data,result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(0,result.size());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals("STR",result.get(1).getName());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(128526626,client1.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_RECONNECT_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1==null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1!=client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals("STR",System.getProperty(Configs.CONN_RECONNECT_SWITCH));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1.hashCode(),client2.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null).trim());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(0,m.markdown("STR").length());	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(actual<=expected);	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(!"STR".equals(verb.getId()));	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotSame("STR",verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb.getId(),"STR");	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(ID,verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.startsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body.trim().replaceAll("STR","STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.endsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotSame("STR",body);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals(3,properties.size());	1
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.stringPropertyNames().contains("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals(null,properties.get("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsValue(properties.getProperty("STR")));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.isSolution());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.getActualCost()<0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getActualCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.getActualCost()>=0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getEstimatedCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle().swapBlank(2));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeList.contains(newAttribute("STR","STR")));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(injector.getLog()==null);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(injector.getAttributeList());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(3,attributeList.size());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").where("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toUpperCase().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toLowerCase().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR".replaceAll("STR","STR"),sql.select().from("STR").where("STR").toString().replaceAll("STR","STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").where("STR").toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()>0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertSame(list.get(0),result.get(0));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(!result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.containsAll(list));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(true);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(3,4);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(5,10);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.toString().contains("STR"));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNull(crap.getCorrectWordform());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals("STR","STR");	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(6,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsValue("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(filter(env).get("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotSame(metadata,fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(3,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotNull(fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filter);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",url.toExternalForm());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.length()>10);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(30,filterResult.length());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR")||(fields.containsKey("STR")&&fields.get("STR").startsWith("STR")));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,(int)fields.size());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",URI.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(URI.create("STR")!=null);	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(URI.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals("STR",URI.create("STR").toString());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(this.polledObjects));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertArrayEquals(this.polledObjects.toArray(),poller.getPolledObjects().toArray());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertSame(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()!=0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(2310,java.util.stream.LongStream.of(2,3,5,7,11).reduce(1,(a,b)->a*b));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,DevUtil.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(DevUtil.parseNetworks("STR")!=null);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(DevUtil.parseNetworks("STR")!=null);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>=1);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(5,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()<=10);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager2.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager!=null);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getUpdateRecords()==null||manager.getUpdateRecords().isEmpty());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReferences());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(0,manager.getReferences().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc1));	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals("STR",doc.getClassName());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().toString().length());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc!=null);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(listener);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(item.getPropertyNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getURL().isEmpty());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(item.getIdentity());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals("STR",item.getProperty("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(live);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(database.getTransaction());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.getClusterNames().contains("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc1.field("STR"),doc2.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(doc1,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(doc1.getClassName(),doc2.getClassName());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(doc.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(3,db.countClass("STR"));	1
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(null,actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals(3,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(0,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(Arrays.asList(actuals).isEmpty());	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length==3);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	1
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	1
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(15,20,25,30),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY.toString(),binary.getOpcode().toString());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.TEXT,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.PING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode().equals(Opcode.BINARY));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode()!=null);	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(expected.contains(config.toYaml("STR")));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").endsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").contains("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR","STR");	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(agentsFile.exists());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()<=1);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(agentsFile);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().matches("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,"STR");	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(2,actual.getAsJsonObject().entrySet().size());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual.getAsJsonObject().get("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals("STR",expected);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(0,response.getEntity().getContentLength());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR".replaceAll("STR","STR"),EntityUtils.toString(response.getEntity()).replaceAll("STR","STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(EntityUtils.toString(response.getEntity()).contains("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getEntity().getContentLength()>100);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",response.toString());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(EntityUtils.toString(response.getEntity()).isEmpty());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(first);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.capacity()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(12,response.readableBytes());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(policyResponse.capacity(),buf.capacity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.startsWith("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(policyResponse.equals(buf));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.equals("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag==latestTag||resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertFalse(resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(resultedTag,service.newerTag(latestTag,oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(service.newerTag(latestTag,oldTag)));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger!=null);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(null,logger.sender);	1
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(factory.getConnectorFactoryDelegate()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockJmxServiceUrl);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockConnectorFactoryDelegate);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(this.factory.getAttacher()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher().getClass());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(this.factory.getAttacher()==null);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(executionSlips.isEmpty());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(0,processes.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotNull(process);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(process.equals(null));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getDescription().size());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getName().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getDescription().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.available():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.markSupported());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()==0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.available()>0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()<=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(1024,resourceAsStream!=null?resourceAsStream.available():0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.read()==-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream);	1
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.read()>=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.read():-1);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains("STR")||normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.isActiveOnCurrentThread());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.getMetadata().getSchema().getClasses().size()>0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(script.toString());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(script.length(),0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().startsWith("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().contains("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(Locale.GERMANY.getLanguage());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",className);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(null,rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(0,rs.stream().count());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(words.isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.get(0).startsWith("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(words);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(0,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(-1,words.indexOf("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.size()>5);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(words.size()-1));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(0));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotSame(0,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertSame(Properties.class,properties.getClass());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals("STR",properties.getProperty("STR","STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.entrySet().size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(14,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.size()>0);	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(3,Charsetfunctions.asciiBytes("STR").length);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals(1,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem.getBestWordform(),simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(0,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.getBestWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem,locītājs.analyze("STR"));	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNull(simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.wordforms.isEmpty());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,miCol);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.miTileStartCol>=0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(3,c.leftModes[0]);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(decoder);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(0,miRow);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes!=null);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.leftModes.length>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(c.leftModes[0]==0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes.length==16);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(blSz>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(map.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(0,keys.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotNull(map.get("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.contains("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,map.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsValue(3));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0