ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.reverse().asJavaUtilList().toArray(),l2.reverse().asJavaUtilList().toArray());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.head().equals("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.reverse().asJavaUtilList().contains("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.size(),l3.size());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.size(),3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.reverse().head().equals("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l2.size(),0);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.reverse().head().equals("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l3.head().equals("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.reverse().head(),l2.reverse().head());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertEquals(4,4);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertTrue(true);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame("STR",result.trim());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals(0,result.indexOf("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(!graph.edges().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")&&edge.getTo().equals("STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.nodes().stream().filter(node->node.equals("STR")).count());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().stream().noneMatch(edge->edge.getFrom().equals("STR")&&edge.getTo().equals("STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().size()>0);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.nodes().isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(o->o!=null));	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotSame(null,qResult);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertEquals(1,mapToTest.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertFalse(resultinstanceofString);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(!matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotNull(matcher);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.regionStart()==0);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.pattern().pattern().endsWith("STR"));	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.pattern().flags().contains(PatternFlags.ADVANCED));	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(7,matcher.regionEnd());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(matcher.pattern().pattern().isEmpty());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(ret);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotNull(m);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(false);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotNull(cabac);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0).length>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0)!=null&&out.getPlaneData(0).length>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getWidth());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getHeight());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getColorSpace()==ColorSpace.RGB);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getLowBitsNum()>=0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getLowBitsNum());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getLowBits());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getLowBits()[0].length);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text.replaceAll("STR","STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(0,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>0);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals("STR",text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotSame("STR",text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(!text.isBlank());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(null,text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url.toExternalForm(),filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",metadata.getValues("STR")[0]);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotSame(0,fields.size());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(!moneyToStrCustom.convert(123.45).isEmpty());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrCustom.convert(123.45).length()>0);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertFalse(moneyToStrCustom.convert(123.45).contains("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(null,moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame("STR",moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(!moneyToStrCustom.convert(123.45).isEmpty());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.convert(123.45));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(100.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(75.50));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrUSDENG.convert(123.45));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(50.25));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHENG.convert(75.50));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHENG.convert(123.45));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals(0,moneyToStrUSDENG.convert(50.75).length());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert((double)100.0f).contains("STR"));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals(0,moneyToStrRUR.convert(99.99).length());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals(0,moneyToStrUAHRUS.convert(99.99).length());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(false,c.getBlankIndex()<0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(5,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0&&c.getBlankIndex()<c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(3,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(2,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()!=3);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown(null).trim());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals(getStringBetween("STR","STR","STR"),m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue("STR".equals(Objects.requireNonNull(m.markdown("STR"))));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(!m.markdown("STR").matches("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").startsWith("STR"));	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR","STR");	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().finished());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.toString());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.copyInstance());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotSame(deflateExtension,deflateExtension.copyInstance());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals("STR",deflateExtension.toString());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.isServerNoContextTakeover());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.isClientNoContextTakeover());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension);	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.allocate(0)));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes())));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals(true,nopūsts.isRecognized());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.isRecognized());	1
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts.getBestWordform());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(null,nopūsts.getBestWordform());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts.getBestWordform());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getBestWordform()!=null);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertSame(factory.getLog(),factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(4,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotSame(a,result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.size()>0);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(false);	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(com.alipay.remoting.rpc.RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(true,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotNull(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(false,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotSame(false,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertSame(true,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotEquals(0,proc.hashCode());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotEquals(0,proc.toString().length());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(proc.toString().contains("STR"));	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertSame(1,qResult.size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	1
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc,doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc.field("STR"),doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc,doc2);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSize(null));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(database.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequenceNames().size()>0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals(1,secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequenceNames().size());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR").next()>0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR").next()>=1);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR").next()>0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.activateOnCurrentThread().getMetadata().getSequenceLibrary().getSequence("STR").current()>=0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(secondDatabase.getMetadata().getSchema().getClasses().size()>0);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(result);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofCollection);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofSet);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(2,((java.util.Collection<?>)result).size());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotEquals(0,((java.util.LinkedHashSet<?>)result).size());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertFalse(((java.util.Collection<?>)result).isEmpty());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertFalse(result.toString().isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res!=null&&!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals(1)));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.stream().anyMatch(doc->doc.field("STR").equals(1)));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(null,result);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result==null);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(this.testTarget003,result);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(this.testTarget002,result);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertFalse(false);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(true);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals(5,24);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(true);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertFalse(false);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(true);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR","STR");	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals(3,7);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(10>5);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNull(null);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",true)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull(attrs(attr("STR",label.decorated())));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",true)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertFalse(attrs(attr("STR",label.decorated())).isEmpty());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)).getClass(),attrs(attr("STR",label.decorated()),attr("STR",true)).getClass());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",false),attr("STR",true)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR",label.decorated()),attr("STR",true),attr("STR",50)),attrs(attr("STR",label.decorated()),attr("STR",true),attr("STR",100)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",false)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(attr("STR",label.decorated()),attr("STR",10)),attrs(attr("STR",label.decorated()),attr("STR",5)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)).toString(),attrs(attr("STR",label.decorated()),attr("STR",true)).toString());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(person);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()==1);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(0,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals("STR",testCase.getId());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,testCase.getProperties().size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()>0);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result.get(0).getParameters().get("STR"));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().anyMatch(worker->worker.getAddress()!=null));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().anyMatch(worker->worker.getTags().containsKey("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(workerData->workerData.getAddress()!=null));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",((HasMetadata)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals("STR",((HasMetadata)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((HasMetadata)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertFalse(((HasMetadata)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(3,((Deployment)answer).getMetadata().getAnnotations().size());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((Deployment)answer).getSpec().getTemplate().getSpec().getContainers().stream().anyMatch(container->container.getImage().equals("STR")));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",((Deployment)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNull(((Deployment)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotSame(resource,answer);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(0,fileString.length());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals(4,fileString.length());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.endsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString.toUpperCase());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempTargetFile.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.exists());	1
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.contentEquals(tempTargetFile,tempSrcFile));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals(1,Files.readAllLines(tempSrcFile.toPath()).size());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(FileUtils.directoryContains(targetDir,tempSrcFile));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,Files.size(tempSrcFile.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals(Files.size(tempTargetFile.toPath()),Files.size(tempSrcFile.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.isFile());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.contentEqualsIgnoreEOL(tempTargetFile,tempSrcFile,StandardCharsets.UTF_8.toString()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(FileUtils.isFileNewer(tempSrcFile,tempTargetFile));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().equals("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().startsWith("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().endsWith("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().contains("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.getToken().isEmpty());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest.getToken());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals("STR",w.getToken());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.getToken().equals("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.getToken().contains("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotSame(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(false,sentences.get(0).isEmpty());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.get(0).isEmpty());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(len<=OTP_MAX_LEN);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,len);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>0);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>10);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(50,otp.length());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(OTP_MIN_LEN,len);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.contains("STR"));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getActivityId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertEquals("STR","STR"+(activityState.getStateId()!=null?activityState.getStateId():"STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getAsString().replaceAll("STR","STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.getId().contains("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(java.util.Arrays.asList("STR").contains("STR"));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertEquals("STR","STR");	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(true);	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsValue("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.size()>0);	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR")&&env.containsValue("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(2,env.size());	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertNotSame(String.valueOf("STR"),String.valueOf("STR"));	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==-1);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(0,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=2);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(true,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(!s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(false,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(null,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution()==false);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotSame(false,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertSame(true,s.isSolution());	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.equals(anotherCompositeKey),false);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()!=anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.getClass()==anotherCompositeKey.getClass());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.getKeys().isEmpty());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey.toString());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(null));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getMin().equals("STR")&&idProperty.getMax().equals("STR"));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(0,idProperty.getDefaultValue());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.getProperty("STR")==null);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getType().toString());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.existsProperty("STR"));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(companyClass.existsProperty("STR"));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame(idProperty,companyClass.getProperty("STR"));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,events.size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(request);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.get(0).getEventType()==OLiveQueryResult.CREATE_EVENT);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.stream().allMatch(event->event.getCurrentValue()!=null));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.stream().anyMatch(event->event.getEventType()==OLiveQueryResult.DELETE_EVENT));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertSame(OLiveQueryResult.CREATE_EVENT,events.get(0).getEventType());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertFalse(events.isEmpty());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(OLiveQueryResult.DELETE_EVENT,events.get(2).getEventType());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,request.getEvents().size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.size()>0);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.field("STR")!=null);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.getClassName().equals("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(OType.EMBEDDED,document.fieldType("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(res);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,serializer.toStream(document,false).length);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.getIdentity().isValid());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(0,props.size());	1
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props.entrySet());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.propertyNames().hasMoreElements());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(10,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(Configs.getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(Configs.getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(Configs.getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR")==null||Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR").isEmpty());	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotSame("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotSame("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()>0);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(5,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()<=10);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(1,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()!=7);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()==Opcode.PONG);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(0,frame.hashCode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals("STR",frame.getClass().getSimpleName());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(org.java_websocket.enums.Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame.toString());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getClass().getName().contains("STR"));	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.getProvidedProtocol(),protoocl1.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protocol0);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals("STR",protoocl1.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(System.identityHashCode(protocol0),System.identityHashCode(protoocl1));	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals(System.identityHashCode(protocol0),System.identityHashCode(protoocl1));	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protoocl1!=null);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protoocl1,protocol0);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(String.valueOf(pool),"STR");	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue("STR".equals("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(7,sample1.split("STR").length-1);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(0,sample1.indexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR")||sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.matches("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(457,sample1.split("STR").length);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.toString().equals(fromString.toString()));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected.toString(),fromString.toString());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.hashCode()==fromString.hashCode());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame(null,filterResult);	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",null+"STR");	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a[4]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[2]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[3]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a[1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(1,a[0]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a.length==5);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(java.util.Arrays.asList(1,2,3,4,5),java.util.Arrays.asList(Arrays.stream(a).boxed().toArray()));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(1,a[0]);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(person1,person2);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals(person1,person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(person1);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.field("STR").toString().startsWith("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(person2,person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",person1.getClassName());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(index.isAutomatic());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(3,db.countClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1!=person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(person1.equals(person3));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotNull(result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(26,result.size());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertFalse(result.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotEquals(0,result.size());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertSame(ODocument.class,result.get(0).getClass());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertFalse(result.contains(null));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotSame(0,result.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(-1,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertSame(1,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results.stream().findFirst().orElse(null));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.stream().allMatch(doc->doc.field("STR").toString().startsWith("STR")));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.contains(null));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()<=100);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals("STR",qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,((String)qResult.get(0).field("STR")).length());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(((String)qResult.get(0).field("STR")).startsWith("STR"));	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(result);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(keyTypes.length,result.length);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertArrayEquals(bytes,doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(0,doc.field("STR").length);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.field("STR").equals(bytes));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.elementStream().count()==0);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.elementStream().count()>0);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotNull(result);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.elementStream().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotEquals(0,result.elementStream().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(!result.elementStream().findFirst().isEmpty());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertSame(OResult.class,result.elementStream().findFirst().orElse(null).getClass());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.elementStream().allMatch(OResult.class::isInstance));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.elementStream().anyMatch(r->r.getPropertyNames().contains("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.elementStream().noneMatch(r->r.getPropertyNames().contains("STR")));	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(expectedResult,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofNumber);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotEquals(0,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNull(null,null);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue((Integer)result>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(loader);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(pool,db);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(pool);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(0,loader.getProgress());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(loader.getProgress()>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(db.isClosed());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(vertex.getSchemaType(),db.getMetadata().getSchema().getClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(vertex.getRecord().getIdentity().isValid());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(loader.getUnit().isEmpty());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.stream().count()>0);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.getExecutionPlan().isPresent());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result.getQueryStats());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(!vārds.wordforms.isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals("STR",vārds.getToken());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(0,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.wordforms.size()>0);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.getToken().equalsIgnoreCase("STR"));	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds.wordforms.get(0));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsKey("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(System.getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals(1,env.size());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR")&&env.size()==1);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",env.get("STR"));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(Prepare.class,method.getAnnotation(Prepare.class).annotationType());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getParameterCount()==0);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method.getDeclaringClass());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isSynthetic());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(0,method.getName().length());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals("STR",method.getName());	1
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method.getParameterTypes());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.isAnnotationPresent(Prepare.class));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isVarArgs());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>=3);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(registry);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.getAgents().size());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotSame("STR","STR");	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals("STR","STR");	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotSame(0,registry.agentCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>=5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(registry.getWorkers());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(registry.getWorkers().isEmpty());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(3,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotSame(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.getWorkers().size()>0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.getWorkers().size());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(2,registry.getWorkers().size());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.mockAgentProperties);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.mockSystemProperties);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNull(this.mockLogger.getName());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(this.mockAttacher,factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.mockJmxMbeanConnection);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(true);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(equality);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals("STR","STR");	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(1,1));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(equality.equals(2,1));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(3,5));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(10,20);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(!equality.equals(6,7));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.hashCode(5)==equality.hashCode(5));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals("STR","STR");	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode()==Opcode.CONTINUOUS);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(Opcode.PING,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotSame(Opcode.PONG,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertSame(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getClass().getSimpleName().equals("STR"));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals("STR",frame.getClass().getSimpleName());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(0,frame.hashCode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame.toString());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR").toUpperCase());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").length()>0);	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR").toUpperCase());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.class,m.getClass());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(supplier);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(supplier.getIntervalNanos()>0);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(propertyBinding.getProbeClass());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame("STR","STR");	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(propertyBinding);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals("STR","STR");	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null&&pid>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>=0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertFalse(pid==null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(Integer.valueOf(-1),pid);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(mapA.size()+mapB.size(),(mapA==null?0:mapA.size())+(mapB==null?0:mapB.size()));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(mapA.size()+mapB.size()>=((mapA==null?0:mapA.size())+(mapB==null?0:mapB.size())));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotEquals(mapA,MapUtil.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotSame(mapA,mapB);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(MapUtil.mergeMaps(mapA,mapB).containsKey("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertFalse(MapUtil.mergeMaps(mapA,mapB).isEmpty());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedB.size(),MapUtil.mergeMaps(mapA,mapB).size());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(MapUtil.mergeMaps(mapA,mapB).containsValue("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotNull(MapUtil.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(MapUtil.mergeMaps(mapA,mapB).containsKey("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue("STR".length()<20);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(Character.isUpperCase('A'));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(getClass().getResourceAsStream("STR")!=null);	0
ProfileUtilTest	simple	assertNotNull(is);	assertFalse("STR".isEmpty());	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue("STR".contains("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue("STR".startsWith("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(Character.isDigit('5'));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNull(getClass().getResourceAsStream("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue("STR".contains("STR"));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size()==0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(123));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(456));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(789)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(100)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertFalse(array.add(200)<0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(300)>=0);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(4,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.stream().anyMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().allMatch(vertex->vertex.getProperty("STR")!=null));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotSame(0,result.stream().filter(vertex->vertex.getProperty("STR")!=null).count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().noneMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().noneMatch(vertex->vertex.getProperty("STR").toString().isEmpty()));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().allMatch(vertex->vertex.getPropertyNames().contains("STR")));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(compositeKey.equals(compositeKey),true);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(compositeKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(null,compositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getKeys().isEmpty());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getKeys().size()==0);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(0,compositeKey.getKeys().size());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.getKeys().contains(null));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotSame(compositeKey.getKeys(),compositeKey.getKeys());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getType()==OType.SHORT);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.getGlobalProperties().size()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(prop==null);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals(0,schema.countClasses());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(schema,prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getId()>=0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals("STR",prop.getName());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(null,schema.getClusterSelectionFactory());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals(1,map.size());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isEmpty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(map);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals(0,map.size());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsValue("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(result.isEmpty());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(prop.getLinkedClass());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertSame(OType.EMBEDDEDLIST,prop.getType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals("STR",classA.getName());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(0,prop.hashCode());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.declaredProperties().size()>0);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(prop.getType()==OType.EMBEDDEDLIST);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(0,result.size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotNull(result);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.stream().filter(obj->obj!=null).count());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()<=10);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotNull(put("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.JSON).exec().getResponse());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals("STR",getDatabaseName());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().equals("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().startsWith("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotEquals("STR",getDatabaseName());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().equalsIgnoreCase("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().endsWith("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotEquals(0,put("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.JSON).exec().getResponse().getStatusLine().getStatusCode());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().contains("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertFalse(getDatabaseName().isEmpty());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSessioncounter()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getTimestamp(),"STR");	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.isOk());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus().toString());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getNonce().length()<=16,"STR");	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame("STR",response.getStatus().toString());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getT()>0,"STR");	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.isError(),"STR");	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount()-0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(-1,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()!=-1);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(!dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(-1,dockerfileLines.indexOf("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals("STR",dockerfileLines.get(1));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()>2);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(!rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotSame(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>=0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(1,rootAtoms.size());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(0,f1.getFrameNo());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getPts()>=0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(f1.getFrameNo(),-1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getTimescale()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1.getData());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.isKeyFrame());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getTimescale()==90000);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(Packet.FrameType.KEY,f1.getFrameType());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(expected.getName().equals(actual.getName()));	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals("STR",expected.getName());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals("STR",expected.getMbox());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(expected.getMbox().equals(actual.getMbox()));	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(10,austrumlatvija.wordforms.size());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.wordforms.size());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals("STR",austrumlatvija.toString());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(!austrumlatvija.wordforms.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(!userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(2,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(0,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(null,userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotSame(userProcessors.get("STR"),multiInterestUserProcessor);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(5,cm.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")<=100);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(3,cm.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count("STR")<0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")!=-1);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>-1);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(10,cm.count("STR"));	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher.pattern());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.pattern().pattern().contains("STR"));	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.pattern().flags().contains(PatternFlags.ADVANCED));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()==history.size());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotSame(0,s.getActualCost());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getExecutionPlan().isPresent());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals("STR",result.getExecutionPlan().get().getClusterName());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,result.estimateSize());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getQueryStats().isEmpty());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.characteristics().contains(Characteristics.ORDERED));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result.getExecutionPlan());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.getQueryStats().containsKey("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.estimateSize()>0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(prop.getId(),oClass.createProperty("STR",OType.INTEGER).getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(oClass.createProperty("STR",OType.INTEGER));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.equals(oClass.getProperty("STR")));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(prop.getId(),oClass.createProperty("STR",OType.LONG).getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNull(oClass.getProperty("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(oClass.getClass(),oClass.createProperty("STR",OType.BOOLEAN).getClass());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals("STR",oClass.getName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals("STR",oClass.getName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(oClass.existsProperty("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(next.field("STR"),true);	1
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(null,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(null,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(0,next.field("STR").toString().length());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR")!=null);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR")!=null);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(0,next.field("STR").hashCode());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR").toString().isEmpty());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(proc);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getName().equals("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.getClusterIds().length);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isEdgeType());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getSuperClass().getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isAbstract());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotSame(OClass.EDGE_CLASS_NAME,clazz.getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isSubClassOf(OClass.VERTEX_CLASS_NAME));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals(0,clazz.getBaseClasses().size());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.getDefaultClusterId());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertEquals(expectedResult,result);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertTrue(resultinstanceofList);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(result);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertFalse(values.isEmpty());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(expectedSize,values.size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getPrioritizedRoutes());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(!prioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>0);	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotSame(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getPrioritizedRoutes());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>=0);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(10,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains("STR"));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.hashCode()!=0);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getClass());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(DefaultRoutePrioritizer.class,routePrioritizer.getClass());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(java.util.Optional.ofNullable(response).map(ResponseType::getOtp).orElse("STR").startsWith("STR"));	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(expectedValue,response.getSessioncounter());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(java.util.Optional.ofNullable(response).map(ResponseType::getSl).orElse(0)>50);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response.getH());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNull(response.getTimestamp());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals((expectedValue),response.isOk());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getStatus().equals(ResponseStatus.BAD_OTP)||response.getStatus().equals(ResponseStatus.REPLAYED_OTP));	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(initialNonVolatileCounter,response.getSessioncounter());	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR"),"STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(false);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,activityState.getAgent());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected,activityState.getState());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsValue("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.containsKey("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.size()>0);	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(a.getResponseMessage(),"STR");	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertSame(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNull(a.getXapiStatement());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().contains(statement));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofBasicExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(ExtractorFactory.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(builder.build().getDownloadTarget(),null);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(builder,builder.useCachedDownload(true));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(builder.build().getDownloadSource().isEmpty());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(newExtractorFactory(newEmbeddedRabbitMqConfig()));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,grouped.size());	1
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotNull(grouped.get(1));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(Arrays.asList("STR".length(),"STR".hashCode()).containsAll(Arrays.asList(3,"STR".hashCode())));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotNull(&lt;GROUPED&gt;);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(1,2,3,4,5),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Collections.emptyList(),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals("STR",w.getBestWordform().getToken());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(true);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method!=null);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")||performance.contains("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertFalse(performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.length()>0);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotSame("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.length()>20);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")||performance.contains("STR")||performance.contains("STR")||performance.contains("STR")||performance.contains("STR"));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertEquals(SECONDS.toMillis(3),durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit*2);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<durationLimit*2);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit/2);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(-50)==1);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(8,ebmlSignedLength(-50));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,ebmlSignedLength(5000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,ebmlSignedLength(-3000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,ebmlSignedLength(-90000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,ebmlSignedLength(700000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(-10000000L)==4);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(-20000000000L,ebmlSignedLength(-20000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,ebmlSignedLength(-9000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(6,ebmlSignedLength(100));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals("STR",handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(2,((io.fabric8.kubernetes.api.model.PodSpec)builder.getSpec()).getInitContainers().size());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(((io.fabric8.kubernetes.api.model.PodTemplateSpec)builder.build()).getSpec().getInitContainers().stream().anyMatch(container->container.getName().equals("STR")));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",handler.getInitContainer(builder,"STR").getName());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",handler.getInitContainer(builder,"STR").getName());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(pattern.flags().contains(PatternFlags.ADVANCED));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals("STR",pattern.pattern());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.reset().lookingAt());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(5,2+3);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(null,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(999,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(999,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")!=0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll("STR").isEmpty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getVersion());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.getClassName());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame("STR",doc.getVersion());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertSame(false,doc.isTrackingChanges());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getImmutableSchemaVersion());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals("STR",((Float)res.get(0).field("STR")).toString());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(String.valueOf(((Float)res.get(0).field("STR"))).contains("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(((Number)res.get(0).field("STR")).floatValue()==10.78f);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(Math.abs(((Float)res.get(0).field("STR"))-10.78)<0.01);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals('EXPECTED_CHARACTER_VALUE',stream[0]);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream[0]!=0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newchar[]{'E','X','P','E','C','T','E','D'},OCharSerializer.OCharSerializer.serializeLiteral('EXPECTED_CHARACTER_VALUE',stream,0));	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(0,stream[0]);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals('EXPECTED_RESULT',OCharSerializer.OCharSerializer.serializeLiteral('EXPECTED_CHARACTER_VALUE',stream,0));	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotSame('EXPECTED_RESULT',OCharSerializer.OCharSerializer.serializeLiteral('EXPECTED_CHARACTER_VALUE',stream,0));	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals('EXPECTED_CHARACTER_VALUE',OCharSerializer.OCharSerializer.serializeLiteral('EXPECTED_CHARACTER_VALUE',stream,0));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.getId()!=null);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.getPropertyKeys().contains("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.isClosed());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertices().iterator().hasNext());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals("STR",v.getProperty("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(null,v.getId());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(-1,v.hashCode());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.equals(graph.getVertex(v.getId())));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotSame(graph.getVertex(v.getId()),v);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),1);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.iterator().next().getKeys().size(),2);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofList);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResultinstanceofList);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResultinstanceofCollection);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(result,null);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(1,((Collection<OCompositeKey>)result).size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(resultinstanceofCollection&&((Collection<OCompositeKey>)result).size()==2);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals(0,((Collection<OCompositeKey>)result).size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(((Collection<OCompositeKey>)result).size()>0);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals(2,((Collection<OCompositeKey>)result).size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertFalse(((Collection<OCompositeKey>)result).isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(((Collection<OCompositeKey>)result).contains(newOCompositeKey("STR")));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(((Collection<OCompositeKey>)result).stream().anyMatch(key->key.getKey(0).equals("STR")));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(1,((Collection<OCompositeKey>)result).size());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(0,to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(-1,to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from,to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,from.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()!=-1);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(null,to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(to.getClusterId()<0);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals(SQLCreateVertexAndEdgeTest.class.getSimpleName(),"STR");	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(this.getClass().getSimpleName()!=null||getClass().getSimpleName().isEmpty());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame(0,this.getClass().getSimpleName().length());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue("STR"!=null&&"STR".isEmpty());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(getClass().getSimpleName().equals("STR"));	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1.getIdentity());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(Thread.currentThread().getStackTrace()[1].getMethodName().startsWith("STR"));	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(SQLCreateVertexAndEdgeTest.class.getSimpleName());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(item.getProperty("STR")==null?null:"STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertFalse(item.getProperty("STR")==null);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()>0);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().isEmpty());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(f.getParentFile().getName(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(job);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.getParentFile().getName().startsWith("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.getParentFile().getParentFile().equals(folder.getRoot()));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(job.getServiceName(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(job.getServiceBuildNumber(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(job.getBranch(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(job.getPullRequest(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(job.getServiceJobId(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(job.isDryRun());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(this.processor.getAttributeInjector());	1
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(mockAttributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector()!=null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getObjectQueryPreparer().getClass().getSimpleName().contains("STR"));	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getObjectQueryPreparer());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(mockAttributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(this.processor.getAttributeInjector());	1
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals("STR",setFieldTest.getClass().getSimpleName());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull("STR");	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(1,setFieldTest.getClass().getDeclaredFields().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest.getClass().getDeclaredFields());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getDeclaredFields().length>0);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getSimpleName().startsWith("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.getClass().getDeclaredFields().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getSimpleName().contains("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getDeclaredFields().length>=1);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotNull(result);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals(0,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(1,result.entrySet().stream().filter(entry->entry.getValue().isEmpty()).count());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,registry.workerCount());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.length()>0);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canRead());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.lastModified());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canWrite());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(4,targetFile.length());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getAbsolutePath().contains(targetDir.getAbsolutePath()));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.indexOf("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(0,dockerfileLines.indexOf("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(util);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,util.hashCode());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals("STR",dockerfileLines.get(1));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame("STR",dockerfileLines.get(0));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(Double.parseDouble(actual)>20&&Double.parseDouble(actual)<25);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.startsWith("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals("STR",actual.trim());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(null,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('a')>=0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(Constants.NOSUB,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(runtime(cm));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(Constants.NOSUB,cm.subcolor('b'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('b')>=0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(runtime(cm).getcolor('z')<0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(-1,cm.subcolor('c'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(Constants.NOSUB,cm.subcolor('c'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('c')!=Constants.NOSUB);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(!createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(createdFrame.get(0).toString(),curframe.toString());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(curframe,createdFrame.get(0));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(0,createdFrame.get(0).getPayloadData().remaining());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(org.java_websocket.enums.Opcode.TEXT,((TextFrame)createdFrame.get(0)).getOpcode());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame.get(0).getPayloadData());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(((TextFrame)createdFrame.get(0)).getPayloadData().remaining()>0);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.equals(expectedResult));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame(null,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(null,handshakeResponse);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotSame(null,handshakeResponse);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(0,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(400,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(400,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(org.nanohttpd.protocols.http.response.Status.BAD_REQUEST.getDescription(),handshakeResponse.getStatus().getDescription());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse!=null);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(handshakeResponse.getStatus()==null);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR")==null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,((Integer)res.get(0).field("STR")).intValue());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR").toString().startsWith("STR"));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0,OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(OVarIntSerializer.readAsLong(bytes)>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(Long.MIN_VALUE,OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(-1,OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotSame(0,OVarIntSerializer.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=Long.MAX_VALUE);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(OVarIntSerializer.readAsLong(bytes)>=0);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotSame("STR","STR");	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotNull("STR");	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals("STR","STR");	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNull(getProperty("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertTrue(doc.fieldType("STR")==OType.INTEGER);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.BINARY,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertFalse(doc.fieldType("STR")==OType.INTEGER);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertTrue(doc.fieldType("STR")!=OType.INTEGER);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.INTEGER,doc.fieldType("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>0);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().findAny().isPresent());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().findFirst().isPresent());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result.stream().findFirst().orElse(null));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().map(e->e.getProperty("STR")).distinct().count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().allMatch(e->e.getProperty("STR").toString().isEmpty()));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().allMatch(e->e.getPropertyNames().contains("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(e->"STR".equals(e.getProperty("STR"))));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals("STR",result.stream().findFirst().map(e->e.getProperty("STR")).orElse(null));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(existsClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull(dbImp.getMetadata().getSchema().getClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(1,dbImp.getMetadata().getSchema().getClasses().size());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(dbImp.getMetadata().getSchema().getClass("STR").isAbstract());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(6,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getExecutionPlan().isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.hasNext());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result.getQueryStats());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.elementStream().anyMatch(element->"STR".equals(element.getProperty("STR"))));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(0,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.getExecutionPlan().isEmpty());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getQueryStats()!=null);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.characteristics().contains(Characteristics.CONCURRENT));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getExecutionPlan().isPresent()&&result.hasNext());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().size(),3);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyTwo.equals(compositeKeyOne));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyTwo.getKeys().indexOf(null)>=0);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.getKeys().contains(null));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyTwo.getKeys().get(1),null);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne,compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(0,compositeKeyOne.compareTo(compositeKeyTwo));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.getKeys().contains(1));	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(System.in);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(PipedInputStream.class,System.in.getClass());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(-1,System.in.available());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(System.getProperties());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(System.in,System.out);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(System.nanoTime()>0);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(System.lineSeparator().isEmpty());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(-1L,System.currentTimeMillis());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(System.currentTimeMillis()>0);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(-1,System.getProperty("STR").length());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.hashCode());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(ProvidedPriorityRoutePrioritizer.class.getSimpleName(),routePrioritizer.getClass().getSimpleName());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getSimpleName().contains("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.toString().length());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.toString());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(ProvidedPriorityRoutePrioritizer.class,routePrioritizer.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notFoundHandler.getClass(),notImplementedHandler.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(TestRouter.class,router.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(notFoundHandler.getClass(),notImplementedHandler.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getListeningPort()<0);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(notFoundHandler,notImplementedHandler);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(0,exception.getMessage().length());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(RuntimeException.class,exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(RuntimeException.class,exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().endsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotSame("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR")&&exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR")||exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().matches("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().split("STR").length>1);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse("STR"+performanceStats.isEmpty(),performanceStats.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue("STR"+performanceStats.getIntervalThroughput(),performanceStats.getIntervalThroughput()>=0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats.getIntervalLatencyAvgNanos());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,/*placeholdervalue-uninitializedvariableEMPTY_OPERATION_COUNT*/ performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getTotalThroughput()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(2300,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalThroughput()<=performanceStats.getTotalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalLatencyMaxNanos()>=performanceStats.getIntervalLatencyAvgNanos());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getTotalThroughput()>=performanceStats.getIntervalThroughput());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",newSimulatorAddress(AddressLevel.COORDINATOR,0,0).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",newSimulatorAddress(AddressLevel.AGENT,2,4).toString());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(!methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()>0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(true);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList.get(0));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.get(0).getParameterCount()==0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.get(0).getParameterTypes().length==0);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.size()>0);	1
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(SpringBootUtil.getPropertiesFromApplicationYamlResource(null,getClass().getResource("STR")));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals(0,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotSame(0,props.hashCode());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotSame(0,props.keySet().size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.entrySet().isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(environment.getProperty("STR").equals("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBranch());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals(1,environment.size());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals(0,serviceMock.getJobId().length());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getEnvironment().containsKey("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(!serviceMock.getEnvironment().isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getBuildNumber().matches("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getPullRequest().isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getName());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(100.00));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(456.78));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(678.90));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(67.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(300.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(200.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(400.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(250.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(101.0));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(350.0));	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(true,m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(false,!m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(null,m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.toString().length()>0);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,m.toString().length());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(!m.toString().isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(formas.size(),formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(5,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.stream().allMatch(wordform->"STR".equals("STR")));	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(null,formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue("STR".startsWith("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue("STR".startsWith("STR")||"STR".startsWith("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR","STR");	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotSame("STR","STR");	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertFalse("STR".isEmpty());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",TestClass.turn("STR","STR","STR","STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(!conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(conns.containsKey(poolKey));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.getOrElseEval(()->"STR").equals("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.equals(AOption.none()));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertSame("STR",s.getOrElse("STR"));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.contains(document));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0&&qResult.size()<=10);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(5,qResult.get(0).getPropertyNames().size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(result.getClass(),ArrayList.class);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotEquals(result,Collections.emptyList());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(Integer.class,result.getClass());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(0,result.toString().length());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame("STR",result);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getId().equals(loadedHunt.getId()));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,loadedHunt.getImageData());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertFalse(savedHunt==loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().equals(loadedHunt.getName()));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(1024*32,loadedHunt.getImageData().length);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().contains("STR"));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().startsWith("STR"));	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(name,getSequence(name).getName());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(db.getMetadata().getSequenceLibrary().existsSequence("STR"));	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence("STR"));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(1,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<=0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotSame(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)>=-1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotSame(1,compositeKey.compareTo(anotherCompositeKey));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(1,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(next.field("STR")==null);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(0,next.field("STR").toString().length());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR").toString());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotSame(0,next.field("STR").toString().length());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(next.field("STR")!=null);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(next.field("STR").toString().isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(null,next.field("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(65,db.getClusters());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(rome,london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(2,db.countClass("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getMetadata().getSchema().getClass("STR").existsProperty("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getMetadata().getSchema().getClass("STR").getProperty("STR").getType().equals(OType.EMBEDDED));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(rome.equals(london));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(db.getMetadata().getIndexManager().getIndex("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getMetadata().getIndexManager().existsIndex("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotSame(rome.getFieldValue("STR"),london.getFieldValue("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(result,compositeIndex);	1
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex.getClass(),result.getClass());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getIndexDefinitions().size()>0);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(compositeIndex.getClass(),result.getClass());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertFalse(result.getIndexDefinitions().isEmpty());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.equals(compositeIndex));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertSame(compositeIndex.getClassName(),result.getClassName());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(compositeIndex.getClass().getName(),result.getClass().getName());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()>0);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(0,buf.position());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(1024,buf.capacity());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(buf.hasArray());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(0,f1.getFrameNo());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(frame1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(-1,f1.getPts());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame1,frame2);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1.length,frame2.length);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(copied.size(),list.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(0,copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(copied.isEmpty());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list.hashCode(),copied.hashCode());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.contains("STR"));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(System.identityHashCode(list),System.identityHashCode(copied));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(null,protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals(0,protocol0.getProvidedProtocol().length());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(5,protocol0.getProvidedProtocol().length());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(null,server.getConnections());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnections().isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getAddress().getPort()==1337);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(0,server.getConnections().size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(server);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getAddress().getPort()!=0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(0,macAddress.toString().length());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR")||macAddress.toString().contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull("STR");	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame("STR","STR");	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(true);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected.getId(),actual.getId());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.toString().equals(actual.toString()));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected.toString(),actual.toString());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.serialize(),actual.serialize());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(300.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(300.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(300.0).length()>0);	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(300.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(300.0).isEmpty());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS.convert(300.0),moneyToStrUAHRUS.convert(300.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals(moneyToStrUAHRUS.convert(300.0),moneyToStrUAHRUS.convert(200.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS.convert(300.0),moneyToStrUAHENG.convert(300.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(400.00).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS.convert(400.0),moneyToStrUSDENG.convert(400.0));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(V_300D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(300.0).toLowerCase().replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrRUR.convert(500.0));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(450.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(123.45).toLowerCase().replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrRURRUS.convert(500.0).startsWith("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(300.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrRUR.convert(500.0).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(200.0).length()>5);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(250.0).replaceAll("STR","STR"));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(poller.getBatchPollProcessor()!=null);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockBatchPollProcessor,poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockObjectQueryPreparer,poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockBatchPollProcessor.getClass(),poller.getBatchPollProcessor().getClass());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockObjectQueryPreparer.getClass(),poller.getObjectQueryPreparer().getClass());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue("STR"+sql.toString().toLowerCase().replaceAll("STR","STR"),sql.toString().toLowerCase().replaceAll("STR","STR").startsWith("STR")&&sql.toString().toLowerCase().replaceAll("STR","STR").endsWith("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().toLowerCase().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getPort()==1111);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getProperties().containsKey("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(1,btUrl.getProtocol());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getProtocol()>=0);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getOriginUrl().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getUniqueKey().startsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getProperties().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.stringPropertyNames().size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.get("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals(3,props.keySet().size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,url.getConnectTimeout());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.toString().contains("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,url.hashCode());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client.getConnection(url,1000));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(url.toString().isEmpty());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(2014,url.getPort());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue("STR".contains("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals("STR",url.getIp());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.getOriginUrl().startsWith("STR"));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end>start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=-1);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1L,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=Long.MIN_VALUE);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(-1L,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertFalse(time==0);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(att));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()>0);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.get(0).getDescription(),actual.get(0).getDescription());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(expected.get(0),actual.get(0));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame("STR",actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.endsWith(RESPONSE));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame("STR",actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(RESPONSE));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.trim().startsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame("STR",actual);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.getClassName());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().isValid());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(database.getMetadata().getSchema().getClass("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(OType.DATE,database.getMetadata().getSchema().getClass("STR").getProperty("STR").getType());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getClassName().startsWith("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertFalse(saved.isDirty());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotEquals(0,saved.getVersion());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().contains(retrievedChild));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedChild.getId());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(parent,retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().size()==1);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(parent.getFriends().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(child,retrievedChild);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().startsWith("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(script.contains("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(script.isEmpty());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,script.length());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(result);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(result.getExecutionPlan().isPresent());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,script.indexOf("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.equals("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(((String)currentValue).startsWith("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals(5,currentValue.length());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertFalse(((String)currentValue).isEmpty());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(2,embeddedListFieldValue.size());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(rootBytes.length>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotNull(deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(embeddedListFieldValue.contains(embeddedListElementBytes));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(setValue,setValue2);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertFalse(embeddedListFieldValue.isEmpty());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertArrayEquals(rawElementBytes,embeddedListElementBytes.getBytes());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(serializerVersion<5);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotSame(root,embeddedListElement);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertSame(setValue2,embeddedList.get(1));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(!docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(5,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"+a.getUnit()+"STR"+a.getUnit()+"STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().startsWith("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR"+a.getUnit()+"STR"+a.getUnit()+"STR"+a.getTransform(),a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().matches("STR"+a.getUnit()+"STR"+a.getUnit()+"STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getSvg().isEmpty());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotNull(a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotSame("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().endsWith(getTransform()));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs(attr("STR",123)));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(attrs(attr("STR",true)).isEmpty());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue((Boolean)attrs(attr("STR",true)).get("STR"));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs(attr("STR",42)));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals(durationSeconds(null),null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(durationSeconds("STR"),null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(durationSeconds("STR"),null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")==123456789);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals((long)durationSeconds("STR"),10L);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals((long)durationSeconds("STR"),(long)Integer.MAX_VALUE);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.equals("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&!filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.endsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame(null,filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields==null);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(format);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(-1,parsed.getTime());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null&&parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>=time);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()<=System.currentTimeMillis());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()<System.currentTimeMillis());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0&&parsed.getTime()<=System.currentTimeMillis());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertTrue(true);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.toString());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(java.net.URI.create("STR"),java.net.URI.create("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getPath().isEmpty());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotSame(uri.getHost(),"STR");	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getScheme().equals("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(uri.isOpaque());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getPort()==80||uri.getPort()==-1);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(uri.getPath().endsWith("STR"));	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(34,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(spsList);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,spsList.size());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(42,avcCBox.getLevel());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getSpsList().size()>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getProfile()==66);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,ppsList.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(!atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>0);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(org.slf4j.LoggerFactory.getILoggerFactory());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(org.slf4j.LoggerFactory.getLogger(processor.getClass()).getName(),processor.getLog().getName());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(processor.getLog(),org.slf4j.LoggerFactory.getLogger(BatchPollProcessor.class));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(org.slf4j.LoggerFactory.getLogger(processor.getClass()),processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(org.slf4j.LoggerFactory.getLogger(BatchPollProcessor.class),processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(org.slf4j.LoggerFactory.getLogger(BatchPollProcessor.class).getName(),processor.getLog().getName());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog().getName());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals(null,uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.length()>0);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.indexOf("STR")!=-1);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(0,result.getExecutionPlan().length());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.stream().count()!=0);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getQueryStats().getExecutionTime()<1000);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.getQueryStats().isTimeout());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getExecutionPlan().contains("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result.getExecutionPlan());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(-1,result.stream().findFirst().get().hashCode());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,embedded.fields());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNull(extr.field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(0,extr.getVersion());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.fields()>0);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult.next());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.getExecutionPlan().isPresent());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().map(result->result.getProperty("STR")).filter(objects->objects!=null).count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.stream().anyMatch(result->result.getProperty("STR").toString().equalsIgnoreCase("STR")));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(index.getSize(),1);	1
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(index.getSize()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(doc);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(doc.field("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(index.getClusters().isEmpty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals(0,doc.getVersion());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(doc);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.getVersion()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(2,doc.getVersion());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(-1,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()!=Long.MIN_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>Long.MIN_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(Long.MAX_VALUE,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()<=Long.MAX_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(filter.toString().contains("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(filter.getRootCondition());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals(0,filter.toString().length());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotSame(searchResult,condition.getRight());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(condition);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(filter.toString().startsWith("STR")&&filter.toString().endsWith("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(filter.toString().matches("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals(128,filter.toString().length());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(filter.toString().contains("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals("STR",filter.getRootCondition().getLeft());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.size()==0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.get(0).containsField("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.containsField("STR")));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(3,res.get(0).fieldNames().length);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.get(0).fieldNames().length==0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100L,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getIntervalThroughput()==5.0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.isEmpty());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0.0,addState.getTotalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(100,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(400,addState.getIntervalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(500,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(0,addState.getOperationCount());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(null,promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(!promise.hasAnswer()||promise.getAnswer().startsWith("STR"));	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(scriptExecutor);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse(promise.getAnswer()==null);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse("STR".equals(promise.getAnswer()));	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer()&&!((String)promise.getAnswer()).isEmpty());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(testObject);	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(mock(Object.class),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR").toUpperCase());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").endsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").equals("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").length()>5);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(!actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.toString().length()!=0);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,statement.getVerb());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame("STR","STR");	0
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame("STR","STR");	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(score==actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,result.getScore());	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(result.isSuccess());	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(true,result.isSuccess());	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(result.getExtensions().entrySet().size()!=0);	0
ResultTest	testSetScore	assertNotNull(actual);	assertFalse(result.getExtensions().entrySet().isEmpty());	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(result.getExtensions());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(activityState.getActivityId());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertFalse(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotSame(expected.toString(),actual.toString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual!=null&&actual.entrySet().size()!=0);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertFalse(actual.entrySet().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().size()>0);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getAttachment());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().contains(statement));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getAttachment().size()>0);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getAttachment().containsKey(HASH));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual.toUpperCase());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals(5,actual.length());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(true,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()!=0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(2,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(10,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()==2);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(-1,p.getDistanceToGoal());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(s.getActualCost(),s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(null,s.getHistory());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getEstimatedCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>-1);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertArrayEquals(message,frame.getPayloadData().array());	1
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.isFin());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasArray());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(deflateExtension);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(170,frame.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,frame.getPayloadData().arrayOffset());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,frame.getPayloadData().position());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.startsWith("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(true);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.length()!=0);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(annotation.toString());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(!value.toUpperCase().equals(value.toLowerCase()));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(value,"STR");	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()!=source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source1.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.hashCode()==source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source1.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1.hashCode(),source2.hashCode());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.stringPropertyNames().size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props.keySet());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.keySet().size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotSame(-1L,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.size()<Integer.MAX_VALUE);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.size()>=0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser.getResultXsdSchemas());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,parser.getResultXsdSchemas().count());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,parser.getResultXsdSchemas().count());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(parser.getResultXsdSchemas().findAny().isPresent());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(parser.getResultXsdSchemas().allMatch(schema->schema.getFilePath()!=null));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",markup.markdown("STR").replace("STR","STR").replace("STR","STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",markup.markdown("STR").replaceAll("STR","STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.parseHtml("STR").contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(actualOutput.startsWith(expectedOutput));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(0,markup.markdown("STR").length());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("STR").isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(!markup.markdown("STR").isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").contains("STR")&&markup.markdown("STR").contains("STR")&&markup.markdown("STR").contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").contains("STR")&&markup.markdown("STR").contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(expected,actual);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(true);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn.getData());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(tokenBytes.length>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(0,tokenBytes.length);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.getData()==null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(handler);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(tokenBytes.length==0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotSame(db.getUser(),null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getId()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(db.getClusterNames().size()>0);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.get(12)==1);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.size(),keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndexByIntegerKey);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndexByKey,propertyIndexByValue);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(addedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(propertyIndexByKey.getIndexBy(),OPropertyMapIndexDefinition.INDEX_BY.KEY);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.hashCode(),keysToRemove.hashCode());	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.STRING));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length==1&&result[0]==OType.STRING);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.BOOLEAN,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(Arrays.asList(result).isEmpty());	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.DOUBLE,result[0]);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()>0);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.toJSON().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().length()>0);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().length()>10);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().startsWith("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().endsWith("STR"));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertArrayEquals(data,buffer.array(),"STR");	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.capacity()>=stringSerializer.getObjectSize(OBJECT)+serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(data.length,buffer.remaining(),"STR");	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(walChanges);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(data.length>0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertSame(OWALChangesTree.class,walChanges.getClass());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,buffer.capacity());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertFalse(buffer.hasArray());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotSame(stringSerializer,walChanges);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertFalse(data.length==0);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1);	1
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(2,set.size());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(nest1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertFalse(base1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(set.contains(doc1));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(doc1,doc2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotEquals(0,base1.getVersion());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	1
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>=0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotNull(customer);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(customer.getDefaultClusterId(),provider.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer,provider);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()!=-1);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(customer.getDefaultClusterId(),knows.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer,knows);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getDefaultClusterId(),knows.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(provider,knows);	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertTrue("STR".contains("STR"));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(true);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBuildUrl().replaceAll("STR","STR"));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals(null,serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotSame(null,serviceMock.getJobId());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(null,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(poller.getScheduler()==null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertFalse(poller.getScheduler()!=null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(null,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(null,poller.getScheduler());	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(MyClass.isEmpty(null));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(MyClass.isEmpty(null));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(MyClass.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(MyClass.isEmpty("STR"));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(4,p.getDistanceToGoal());	1
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotNull(p);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(-1,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()!=-1);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(100,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(15,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(20,p.getDistanceToGoal());	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes()),0));	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap("STR".getBytes()),0));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR").isEmpty());	1
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.containsKey("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,connection.getUrl().getConnectTimeout());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getUrl().getPort()>0);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getUrl().getUniqueKey()!=null&&!connection.getUrl().getUniqueKey().isEmpty());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertSame(url,connection.getUrl());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.isFine());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString().replace("STR","STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(17,macAddress.toString().length());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(-1,macAddress.toString().indexOf("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue("STR"+macAddress.toString(),macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(-1,macAddress.toString().indexOf("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(0,macAddress.toString().indexOf("STR"));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison<0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(MULTICAST_ADDRESS,macAddress.toString());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress.getBytes());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(macAddress.isMulticast());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(6,macAddress.getBytes().length);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse("STR".equals("STR"));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse("STR".equals("STR"));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected.toUpperCase(),actual.toUpperCase());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.endsWith(expected));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertSame(java.util.ArrayList.class,res.getClass());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(String.class,helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredFields().length==0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(java.util.Collection.class,helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getSimpleName().contains("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.getBestWordform());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotSame(null,stum.getBestWordform());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.getBestWordform());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").startsWith("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotNull(Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertFalse(Records.rec("STR","STR").isEmpty());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").contains("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotNull(macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(-1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(Integer.MIN_VALUE,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=Integer.MIN_VALUE);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(Integer.MAX_VALUE,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=Integer.MAX_VALUE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals("STR"));	1
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey,"STR");	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(97,multiKey.hashCode());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.offset==0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer.bytes);	1
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(0,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(100,bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.copy().getClass()==BytesContainer.class);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.copy().bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.fitBytes().length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(bytesContainer.offset<0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.stream().anyMatch(row->"STR".equals((String)row.getProperty("STR"))));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().noneMatch(row->"STR".equals((String)row.getProperty("STR"))));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(0,qResult.stream().filter(row->"STR".equals((String)row.getProperty("STR"))).count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().noneMatch(row->"STR".equals((String)row.getProperty("STR"))));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR")!=null);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR")==null);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNull(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(execute.isEmpty());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals("STR",next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals(0,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(!execute.isEmpty());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertEquals("STR",mockAgentProperties.getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertSame(mockJmxMbeanConnection,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertTrue(mockSystemProperties.getProperty("STR").equals("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(this.mockSystemProperties);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(this.mockAttacher);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(this.mockVirtualMachine);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertFalse(mockAgentProperties.containsKey("STR"));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(this.factory.getJmxServiceUrlFactory().equals(mockJmxServiceUrlFactory));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(this.factory.getJmxServiceUrlFactory()==null);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals(12,result.length());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.length()!=0);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getAttributeSetters());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeNames().contains("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(objectQueryInfo.getAttributeSetters().isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeSetters().size()!=0);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals("STR",objectQueryInfo.getObjectName().toString());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(oname,null);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeList.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.target);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(2,this.attributeList.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotSame(this.attributeSetters.get("STR"),this.attributeSetters.get("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeSetters.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeList.size()>0);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.attributeSetters.get("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.objectName);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals("STR",this.objectName.getCanonicalName());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.poller.getLog());	1
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(this.mockLogger,this.poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(this.mockMBeanAccessConnectionFactory!=this.poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(this.mockObjectQueryPreparer,this.poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(this.mockScheduler,this.poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertFalse(java.util.Objects.equals(this.mockBatchPollProcessor,this.poller.getLog()));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(mockAttributeInjector,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(this.mockTestHooks!=this.poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(mockAccessConnection,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.mockBatchCapableAccessConnection);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(same.equals(same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(different.toString().contains("STR"));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(first.equals(different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(first.keySet(),same.keySet());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNull(different.get("STR"));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(first.entrySet().containsAll(same.entrySet()));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(first.entrySet().isEmpty());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(first.size(),same.size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.nodes().isEmpty());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(null,graph);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.nodes().size()==0);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(2,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(Arrays.asList("STR","STR","STR").containsAll(graph.nodes()));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")||edge.getTo().equals("STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.edges().isEmpty());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR",null));	1
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(!VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(!Wildcards.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotNull(draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString()!=null&&draft_6455.toString().length()>0);	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString().trim());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isEmpty());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals(CommUtil.bitSet("STR".getBytes()),b);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(b);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals(13,CommUtil.bitSet("STR".getBytes()).cardinality());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(CommUtil.bitSet("STR".getBytes()).isEmpty());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.bitSet("STR".getBytes()).length()>0);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.bitSet("STR".getBytes()).intersects(CommUtil.bitSet("STR".getBytes())));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(CommUtil.bitSet("STR".getBytes()).equals(CommUtil.bitSet("STR".getBytes())));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.bitSet("STR".getBytes()).get(2));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.bitSet("STR".getBytes()).get(3));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").toString());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(Label.markdown("STR").toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals("STR",Label.markdown("STR").toString());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals(0,Label.markdown("STR").toString().length());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue("STR".contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").toString());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue("STR".contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals("STR",Label.markdown("STR").toString());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(sizes[0]>0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(-293,sizes[sizes.length-1]);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(sizes);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(sizes[sizes.length-1]<sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(startPosition<bb.position());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,be.headerSize);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.dataOffset>be.offset);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(7,Math.abs(bb.position()-startPosition));	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(60,sizes[sizes.length-2]);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals(1,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.wordforms);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(!w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertSame(Wordform.class,w.wordforms.get(0).getClass());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=1);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.size()==0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotSame(0,w.wordforms.size());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(0,matcher.regionEnd());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(pattern.pattern().isEmpty());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(pattern.flags().isEmpty());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrRUR.convert(123.45));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrUAHRUS.convert(100.25));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER100.convert(10.50));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrRUR.convert(123.45));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse("STR"+moneyToStrEURRUS.convert(250.75),moneyToStrEURRUS.convert(250.75).startsWith("STR"));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(false,macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(6,macAddress.getBytes().length);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(null,macAddress.toString());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.getBytes()!=null&&macAddress.getBytes().length>0);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast()||!macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.toString().isEmpty());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(expectedValue,squareRoot.apply(input));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(pf.isDefinedAt(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(result);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(0,result.size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(result.contains(Math.sqrt(25)));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(result.size()>0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(5,result.size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(2,result.size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(result.contains(Math.sqrt(4)));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(-12345,Integer.parseInt(result));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR")||result.equals("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR")&&result.indexOf("STR")==0);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotSame(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(e->true));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.stream().allMatch(e->false));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(e->e!=null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result.stream().findFirst().orElse(null));	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext()&&qResult.getExecutionPlan()!=null);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotSame(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult==null);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotSame(null,db);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges.getBinaryValue(buffer,0,FIELD_SIZE));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(5,serializationOffset);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,buffer.remaining());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(data.length==FIELD_SIZE);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(null,walChanges);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(-1,buffer.position());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(!result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(null,result);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.isMandatory());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(companyClass.getProperty(PROP_OFFICERS));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals(0,nameProperty.getName().length());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.getName().startsWith("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotSame(PROP_OFFICERS,nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.getProperty(PROP_OFFICERS).isNotNull());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(EMBEDDEDLIST,companyClass.getProperty(PROP_OFFICERS).getType());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotSame(0,companyClass.getProperty(PROP_OFFICERS).getMin());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.getName().contains("STR"));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>0);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.stream(result).allMatch(Objects::nonNull));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(0,result.length);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertSame(OType.STRING,result[1]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(OType.INTEGER,result[0]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotSame(OType.DATE,result[0]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertFalse(Arrays.asList(result).contains(OType.FLOAT));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(schema.getClass("STR").existsProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(classA.existsProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(OType.STRING,classA.getProperty("STR").getType());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",classA.getName());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(0,schema.getClasses().size());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.isNotNull());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isIndexed());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(category,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(category.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.size()==category.size());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertArrayEquals(expected.toString().toCharArray(),actual.toString().toCharArray());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected.entrySet(),actual.entrySet());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(System.identityHashCode(expected),System.identityHashCode(actual));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(expected==actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual.equals(context));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context,substatement.getContext());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual==context);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual.equals(substatement.getContext()));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(substatement.getContext());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected.toASCIIString(),actual.toASCIIString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertArrayEquals(expected.toASCIIString().toCharArray(),actual.toASCIIString().toCharArray());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected.getScheme(),actual.getScheme());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(expected.toASCIIString().contains(actual.getHost()));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame("STR",statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(statement.getVersion().startsWith("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(statement.getVersion().isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertSame("STR",statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame("STR",statement.getVersion()+"STR");	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(statement.getVersion().contains("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame("STR",statement.getVersion()+"STR");	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(!props.isEmpty());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream!=null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.endsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.startsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(0,keyStorePath.length());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertFalse(keyStorePath.isEmpty());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(thrown);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(-1,keyStorePath.indexOf("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.trim().length()>0);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertEquals("STR",keyStorePath);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK||response.getStatus()==ResponseStatus.REPLAYED_OTP);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getOtp().startsWith("STR"));	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null&&!response.getNonce().isEmpty());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getOtp().length()>20);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getSignature());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getSignature().length()>0);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.equals("STR")||filterResult==null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult.substring(0,filterResult.length()));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals(-1,filterResult.indexOf("STR"));	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.estimateSize()>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(4,a.computeSeekHeadSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,a.estimateSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(10,a.estimateSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(5,a.computeSeekHeadSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.computeSeekHeadSize()>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(3,a.computeSeekHeadSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertFalse(a.estimateSize()<0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(10,a.computeSeekHeadSize());	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(5,8)>=0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,estimeteSeekSize(10,4));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(41,estimeteSeekSize(6,7));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(3,5)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(-1,estimeteSeekSize(8,6));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(4,3)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(13,estimeteSeekSize(2,4));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(7,9)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(15,estimeteSeekSize(3,6));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(25,estimeteSeekSize(5,10));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.capacity()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.remaining()>=0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(3,buf3.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.limit()>buf2.limit());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertFalse(buf1.equals(buf3));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotSame(buf1,buf2);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotEquals(expectedValue,actualValue);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(3,coordinatorAddress().getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(7,agentAddress(7).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(2,agentAddress(2).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(1,agentAddress(1).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(4,agentAddress(4).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(9,agentAddress(9).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(8,agentAddress(8).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(10,agentAddress(10).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(12,agentAddress(12).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(13,agentAddress(13).getAddressIndex());	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(pool);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(-1,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(5,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(10,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertFalse(cm.count("STR")<0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(20,cm.count("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.stream().map(doc->doc!=null?doc.field("STR"):null).filter(status->status!=null).allMatch(status->status.equals("STR")));	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>=1);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty()&&res.size()>0);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsValue(1));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.containsKey("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,((List<Map<String,String>>)extr.field("STR")).size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(0,coll.size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(document.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(document.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(0,serializerVersion);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(coll.contains(map2));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(((Map<String,String>)((List<Map<String,String>>)extr.field("STR")).get(0)).containsKey("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(((ODatabaseDocumentTx)db).getClusterIdByName(cluster)>0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(((ODatabaseDocumentTx)db).getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-1,((ODatabaseDocumentTx)db).getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals(cluster,"STR");	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertFalse(((ODatabaseDocumentTx)db).getStorage().addCluster("STR")<0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,((ODatabaseDocumentTx)db).getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(((ODatabaseDocumentTx)db).getClusterIdByName("STR")<0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(123,((ODatabaseDocumentTx)db).getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(0,((ODatabaseDocumentTx)db).getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(((com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx)db).getClusterIdByName(cluster)>=0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(1,operations.size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(0,request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(!operations.isEmpty());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(channel);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(false);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()>0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,operations.size());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(null,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertTrue(resultinstanceofInteger);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals()`statementcomparestheactualvaluereturnedbythe`getMonitorId()`methodwiththeexpectedvalueof10. -IftheactualmonitorIDreturnedbythemethodmatchestheexpectedvalueof10,theassertionwillpass;	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequestRead);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(events.size()>0);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(3,events.size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(0,pushRequest.getMonitorId());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().contains(events.get(1)));	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(10,pushRequest.getMonitorId());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().stream().anyMatch(event->event.getEventType()==OLiveQueryResult.DELETE_EVENT));	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().get(0).getEventType()==OLiveQueryResult.CREATE_EVENT);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().size()==3);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2,ob1.getFriend());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob1.getFriend());	1
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertFalse(ob1.getFriend()==ob1);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1.getFriend(),ob1);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getName().contains("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals("STR",ob1.getName());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNull(null);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(operations.isEmpty());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(1,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(0,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals("STR",executor.getClass().getSimpleName());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(operations.stream().anyMatch(operation->operation.getRecord().equals(rec)&&operation.getType()==ORecordOperation.CREATED));	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertSame(server,executor.getServer());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotSame(orientDb,executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(null,executor.getClass().getSimpleName());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	1
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.getMetadata().getSchema().existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.getMetadata().getSchema().existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(!database.getMetadata().getSchema().existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotNull(database.getMetadata().getSchema().getClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(0,database.getMetadata().getSchema().getClass("STR").getClusterIds().length);	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.getMetadata().getSchema().getClass("STR").areIndexed("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertEquals("STR",database.getMetadata().getSchema().getClass("STR").getName());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().getClass("STR").getName().equalsIgnoreCase("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().getClass("STR").getSuperClasses().isEmpty());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals(text.toString(),yourObject.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotNull(yourObject.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(yourObject.toString().contains("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals("STR",yourObject.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotSame(originalTextObject,yourObject.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals(null,yourObject.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(yourObject.toString().endsWith("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertFalse(yourObject.toString().isEmpty());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(yourObject.toString().startsWith("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals("STR",yourObject.toString());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(4,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.size()>0);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR")||(result.contains("STR")&&result.contains("STR")&&result.contains("STR")));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(4,result.size()+1);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotSame(5,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotSame(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertSame(3,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotSame(4,result.size());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.getBoolean("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.getChild("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.getString("STR").equalsIgnoreCase("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(22,(int)config.getInteger("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.isNull("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.isNull("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(true,config.getBoolean("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.getString("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getHistory(),b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getActualCost());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.getBranches().isEmpty());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getHistory(),b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.getActualCost()>=0);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.getBranches().size(),3);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(b.getBranches());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.isSolution()&&b.isSolution());	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(m.decodeBin(64)==0);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(2,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(m);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertFalse(m.decodeBin(64)>1);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotSame(1,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotSame(3,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertSame(0,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.decodeBin(64));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertFalse(m.decodeBin(64)==1);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(activityDefinition);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.endsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotSame("STR",actual.toString());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(!actual.getDisplay().isEmpty());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals(1,actual.getDisplay().size());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(this.factory.createConnection());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotSame(this.mockJmxMbeanConnection,this.factory.createConnection());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertFalse(this.mockJmxMbeanConnection==this.factory.createConnection());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotSame(this.mockJmxMbeanConnection,this.factory.createConnection());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getObjectName().toString());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(result.getAttributeSetters().isEmpty());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(this.testTarget002,result.getTarget());	1
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget001,result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getAttributeSetters().size()>0);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeSetters());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeNames());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(2,result.getAttributeNames().size());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(result.getAttributeNames().isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals(6,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals(6,result.codePointCount(0,result.length()));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.lastIndexOf("STR"));	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.stream().allMatch(schema->schema!=null));	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser.getResultXsdSchemas());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().count()>0);	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(parser.getResultXsdSchemas().count()==0);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,parser.getResultXsdSchemas().count());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().findAny().isPresent());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(java.util.stream.Stream.of("STR","STR","STR").anyMatch(element->element.equals("STR")));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(java.util.stream.Stream.of("STR","STR","STR").noneMatch(s->s.isEmpty()));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(java.util.stream.Stream.of(1,2,3,4,5).allMatch(num->num<0));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(java.util.stream.Stream.of("STR","STR","STR").allMatch(day->day.length()>9));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(3,java.util.stream.Stream.of("STR","STR","STR").filter(fruit->fruit.length()>4).count());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(3,java.util.stream.Stream.of("STR","STR","STR").sorted().count());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(java.util.stream.Stream.of(1,2,3,4,5).anyMatch(num->num%2==0));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(java.util.stream.Stream.of(5,10,15,20).allMatch(num->num<0));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestInstance()==null);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",testContainer.getTestCase().getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(userDir.exists());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(test);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame("STR",testContainer.getTestCase().getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(test.getClass().getSimpleName().startsWith("STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame("STR",testContainer.getTestInstance());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(0,userDir.listFiles().length);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(5,options.size());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(options.containsKey(OSQLFunctionAstar.PARAM_DIRECTION));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(result.isEmpty());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals("STR",functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(result);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(3,options.size());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotSame("STR",functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(result.contains(v1));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotSame(7,options.get("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(options.isEmpty());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(true,result.hasNext());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(result);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(result);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext()||!result.hasNext());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotSame(0,database.countClass("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(database.countClass("STR")==0);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").startsWith("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	1
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(objects,subObjects);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(subObjects);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,objects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(document.containsField("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,objects.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.stream().allMatch(doc->doc.field("STR")!=null));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(-1,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.contains(null));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(pictureHbd.getData(),resultHbd.getData());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(picture.getWidth(),resultHbd.getWidth());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(picture.getColor(),resultHbd.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(resultHbd.getCrop());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(picture.getColor(),resultHbd.getColor().toString());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(picture.getData()!=null&&resultHbd.getData()!=null);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(picture.getPlaneData(0),resultHbd.getPlaneData(1));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(pictureHbd.getBitDepth(),resultHbd.getBitDepth());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(picture.getPlaneData(2).length==resultHbd.getPlaneData(2).length);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(picture.getWidth(),resultHbd.getWidth()+5);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals(0,baos.size());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame(12345,baos.size());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertFalse(result.trim().isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame(0,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals(1,result.length());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(0,testCore.warehouseDir().toString().length());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir()!=null);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().toString().isEmpty());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().isAbsolute());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(testCore.warehouseDir(),java.nio.file.Paths.get("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||filterResult.isEmpty());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(null);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||filterResult.trim().isEmpty());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult==null||filterResult.matches("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertFalse("STR".equals(filterResult));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.size()>0);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(8,metadata.size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.size()>0);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getMatchingWordform("STR",true));	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals(1,1);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.wordforms!=null&&vairāki.wordforms.size()>0);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized());	1
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(0,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals("STR",nopūzdamās.getToken());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().startsWith("STR"));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().contains("STR"));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.getToken().isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().endsWith("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.getToken().contains("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.wordforms.size()>0);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.getToken().startsWith("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.wordforms.isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.getToken().length()<=10);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.getToken().equalsIgnoreCase("STR"));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(MORE,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertSame(MORE,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(expected.equalsIgnoreCase(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame(System.identityHashCode(expected),System.identityHashCode(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId().replace("STR","STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getDisplay().get("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getDisplay().containsKey("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.serialize().isJsonObject());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.toString());	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getId().startsWith("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getId());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.toUpperCase().contains(expected.toUpperCase()));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isBlank(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(!StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(!StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(Deflater.class,deflateExtension.getDeflater().getClass());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(null,deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater()!=null);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(System.currentTimeMillis(),deflateExtension.getDeflater().getBytesWritten());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(deflateExtension.getDeflater().getBytesWritten(),0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().finished());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getBytesRead()==0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(0,deflateExtension.getDeflater().getAdler());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll(poolKey).size());	1
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()<=10);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey)!=null);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(!cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>=0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(null,cm.getAll(poolKey));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(node.getPath(),"STR");	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR","STR"+node.getPath()+"STR");	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(node.getPath(),"STR");	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().length()>0);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().equals("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(expectedPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertFalse(resultPublicId.isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testOtp,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.length()>0);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.matches("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testOtp.length()-32,resultPublicId.length());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.getAbsolutePath().contains("STR"));	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canRead());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile.getParentFile(),configFile.getParentFile());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotSame(calendar.getTime(),d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertFalse(d.before(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals("STR",d.toString());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals(0,d.getTime());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(calendar);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertSame(1,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(qResult.size()+1,2);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0&&qResult.size()<=10);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(-1,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count<0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.properties().size()>0);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(OType.LINK,prop.getType());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.getName().startsWith("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(prop.getFullName().contains("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(schema.getClass("STR"));	1
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.declaredProperties().contains(prop));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals("STR",classA.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(classA.equals(classLinked));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.position()>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(size>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(linkSerializer.getObjectSizeInByteBuffer(buffer)>0);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.contains(null));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,results.size());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame(defaultExtension.toString(),defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(defaultExtension.getProvidedExtensionAsClient().contains("STR"));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.getClass(),defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),System.identityHashCode(defaultExtension1));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.getClass()==defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension0.hashCode());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(parser.parse(sample1Array).toString().isEmpty());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotSame(sample1Array,parser.parse(sample1Array).toString());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(parser.parse(sample1Array)!=null);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,sample1Array.length);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,parser.hashCode());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>0);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.ERROR,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level==Logger.Level.FATAL);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.INFO,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().equalsIgnoreCase("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().contains("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level.equals(Logger.Level.ERROR));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.level.toString().toUpperCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotSame(Logger.Level.WARN,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(null,config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(0,config.hashCode());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(config.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.DEBUG,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	1
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(0,logger.hashCode());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(8,actual.toString().length());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.mastered());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(expected);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()>0||actual.size()>0);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertFalse(expected.isEmpty()&&actual.isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals("STR",String.valueOf(parseBuf));	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertFalse(parseBuf<0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(42,parseBuf);	1
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertArrayEquals("STR".getBytes(),ByteBuffer.wrap("STR".getBytes()).array());	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf,0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf==42);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getH(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getTimestamp(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(null,response.getSl(),"STR");	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.getState()==Thread.State.WAITING||serverStartThread.getState()==Thread.State.TIMED_WAITING);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isDaemon());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(System.out,System.err);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(stdIn,System.in);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive()||serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(stdIn);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(-1,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isInterrupted());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(content.length>0);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame(robotsTxt,sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame("STR",sha1str.substring(6));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(robotsTxt.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(robotsTxt.getBytes(StandardCharsets.UTF_8),content);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals(0,content.length);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(0,normalizedUrl.length());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals("STR",matcher.pattern().pattern());	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find(1));	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(0,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse((Boolean)bind0(testObject,"STR","STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotNull(result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals(Integer.parseInt("STR"),Integer.parseInt(result.toString()));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(result,15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotNull(result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(10,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>=0&&result<=15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result!=0&&result!=20);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result==5||result==10);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertFalse(result<0);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(-1,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(0,result);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(789));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.size()>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(999));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(456));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotSame(db,result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(-1,query.indexOf("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(DB_STORAGE.isEmpty());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().endsWith("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,query.length());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().contains("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().startsWith("STR"));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertSame(mapResult,multiKeyMap.get(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap.values().iterator().next());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(mapResult);	1
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(0,multiKeyMap.hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.equals(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(false,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(!handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data,result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(0,result.size());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.get(0).getName().equals("STR"));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals("STR",result.get(1).getName());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).anyMatch(name->name.equals("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).noneMatch(name->name.equals("STR")));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_RECONNECT_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1!=client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(128526626,client1.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1==null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1.hashCode(),client2.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals("STR",System.getProperty(Configs.CONN_RECONNECT_SWITCH));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(0,m.markdown("STR").length());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null).trim());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(actual<=expected);	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(ID,verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame("STR",verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb.getId(),"STR");	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(!"STR".equals(verb.getId()));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotSame("STR",body);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.endsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.startsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body.trim().replaceAll("STR","STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals(null,properties.get("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsValue(properties.getProperty("STR")));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.stringPropertyNames().contains("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals(3,properties.size());	1
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties.getProperty("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getActualCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle().swapBlank(2));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getEstimatedCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.getActualCost()<0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.getActualCost()>=0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.isSolution());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(injector.getAttributeList());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(3,attributeList.size());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(injector.getLog()==null);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeList.contains(newAttribute("STR","STR")));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(mockLogger,injector.getLog());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").where("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").where("STR").toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toUpperCase().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toLowerCase().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR".replaceAll("STR","STR"),sql.select().from("STR").where("STR").toString().replaceAll("STR","STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(!result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertSame(list.get(0),result.get(0));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()>0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.containsAll(list));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(true,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(!YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(Boolean.TRUE,Boolean.valueOf(YubicoClient.isValidOTPFormat(otp)));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(3,4);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.toString().contains("STR"));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNull(crap.getCorrectWordform());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(5,10);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(true);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals("STR","STR");	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsValue("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(6,filter(env).size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(3,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotNull(fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotSame(metadata,fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.isEmpty());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filter);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",url.toExternalForm());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.length()>10);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(30,filterResult.length());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR")||(fields.containsKey("STR")&&fields.get("STR").startsWith("STR")));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,(int)fields.size());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals("STR",URI.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",URI.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(URI.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(URI.create("STR")!=null);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(this.polledObjects));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertSame(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()!=0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertArrayEquals(this.polledObjects.toArray(),poller.getPolledObjects().toArray());	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(2310,java.util.stream.LongStream.of(2,3,5,7,11).reduce(1,(a,b)->a*b));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,DevUtil.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotNull(DevUtil.parseNetworks("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals("STR",DevUtil.parseNetworks("STR")[0]);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(DevUtil.parseNetworks("STR")!=null);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	1
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(DevUtil.parseNetworks("STR")!=null);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()<=10);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(5,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>=1);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager2.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getUpdateRecords()==null||manager.getUpdateRecords().isEmpty());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReferences());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(0,manager.getReferences().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager!=null);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc1));	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(ODocument.class,doc.getClass());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc!=null);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().toString().length());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals("STR",doc.getClassName());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(live);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getURL().isEmpty());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(item.getIdentity());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(item.getPropertyNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(listener);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals("STR",item.getProperty("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.getClusterNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(database.getTransaction());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(doc1.getClassName(),doc2.getClassName());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc1.field("STR"),doc2.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(doc1,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(doc.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(3,db.countClass("STR"));	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY.toString(),binary.getOpcode().toString());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.PING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode()!=null);	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode().equals(Opcode.BINARY));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.TEXT,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.CLOSING,binary.getOpcode());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(expected.contains(config.toYaml("STR")));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").endsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR","STR");	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertFalse(rpcServer.port()<0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()!=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(null,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(0,rpcServer.port());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(agentsFile);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(agentsFile.exists());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()<=1);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().matches("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(2,actual.getAsJsonObject().entrySet().size());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals("STR",expected);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,"STR");	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual.getAsJsonObject().get("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(0,response.getEntity().getContentLength());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",response.toString());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getEntity().getContentLength()>100);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR".replaceAll("STR","STR"),EntityUtils.toString(response.getEntity()).replaceAll("STR","STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(EntityUtils.toString(response.getEntity()).isEmpty());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(EntityUtils.toString(response.getEntity()).contains("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(policyResponse.capacity(),buf.capacity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.equals("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(first);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.startsWith("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(12,response.readableBytes());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(policyResponse.equals(buf));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.capacity()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(resultedTag,service.newerTag(latestTag,oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag==latestTag||resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(service.newerTag(latestTag,oldTag)));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertFalse(resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(null,logger.sender);	1
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(factory.getConnectorFactoryDelegate()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockJmxServiceUrl);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockConnectorFactoryDelegate);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(this.factory.getAttacher()==null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher().getClass());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(this.factory.getAttacher()!=null);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotNull(process);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(process.equals(null));	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(0,processes.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(executionSlips.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.markSupported());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()==0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.available()>0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.available():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.read():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream);	1
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.read()>=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()<=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(1024,resourceAsStream!=null?resourceAsStream.available():0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.read()==-1);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains("STR")||normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().startsWith("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.getMetadata().getSchema().getClasses().size()>0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(script.toString());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().contains("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.isActiveOnCurrentThread());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(script.length(),0);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(Locale.GERMANY.getLanguage());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(null,rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(0,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",className);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(words);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(-1,words.indexOf("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(0,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(0));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(words.size()-1));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(words.isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.size()>5);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.get(0).startsWith("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(3,testSuite.getMaxTestCaseIdLength());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(1,testSuite.size());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertFalse(testSuite.isFailFast());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals("STR",testSuite.toString().replaceAll("STR","STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertTrue(testSuite.size()>0);	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getTestCaseList());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals("STR",testSuite.getDurationSeconds());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.size()>0);	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(14,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(3,Charsetfunctions.asciiBytes("STR").length);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem.getBestWordform(),simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals(1,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.wordforms.isEmpty());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem,locītājs.analyze("STR"));	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(0,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNull(simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.getBestWordform());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(3,c.leftModes[0]);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(c.leftModes[0]==0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.leftModes.length>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(decoder);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(blSz>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,miCol);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes!=null);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(0,miRow);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.miTileStartCol>=0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes.length==16);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsValue(3));	0