{
    "projects": [
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetType",
                            "startLn": 162,
                            "endLn": 169,
                            "testMethod": "@Test\n public void testSetType ( ) {\n     String expected = \"STR\" ; \n     activityDefinition . setType ( expected ) ; \n     String actual = activityDefinition . getType ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getType",
                            "focalStartLn": 119,
                            "focalEndLn": 121,
                            "focalMethod": " public String getType ( ) { \n return type ; \n } "
                        },
                        {
                            "testName": "testSetChoices",
                            "startLn": 263,
                            "endLn": 277,
                            "testMethod": "@Test\n public void testSetChoices ( ) {\n     ArrayList < InteractionComponent > expected = new ArrayList < InteractionComponent > ( ) ; \n     InteractionComponent e = new InteractionComponent ( ) ; \n     String id = \"STR\" ; \n     e . setId ( id ) ; \n     HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n     desc . put ( \"STR\" , \"STR\" ) ; \n     e . setDescription ( desc ) ; \n     expected . add ( e ) ; \n     activityDefinition . setChoices ( expected ) ; \n     ArrayList < InteractionComponent > actual = activityDefinition . getChoices ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getChoices",
                            "focalStartLn": 160,
                            "focalEndLn": 162,
                            "focalMethod": " public ArrayList < InteractionComponent > getChoices ( ) { \n return choices ; \n } "
                        },
                        {
                            "testName": "testSetTarget",
                            "startLn": 356,
                            "endLn": 370,
                            "testMethod": "@Test\n public void testSetTarget ( ) {\n     ArrayList < InteractionComponent > expected = new ArrayList < InteractionComponent > ( ) ; \n     InteractionComponent e = new InteractionComponent ( ) ; \n     String id = \"STR\" ; \n     e . setId ( id ) ; \n     HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n     desc . put ( \"STR\" , \"STR\" ) ; \n     e . setDescription ( desc ) ; \n     expected . add ( e ) ; \n     activityDefinition . setTarget ( expected ) ; \n     ArrayList < InteractionComponent > actual = activityDefinition . getTarget ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getTarget",
                            "focalStartLn": 184,
                            "focalEndLn": 186,
                            "focalMethod": " public ArrayList < InteractionComponent > getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbsTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testVoided",
                            "startLn": 181,
                            "endLn": 186,
                            "testMethod": "@Test\n public void testVoided ( ) {\n     Verb actual = Verbs . voided ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "voided",
                            "focalStartLn": 88,
                            "focalEndLn": 90,
                            "focalMethod": " public static Verb voided ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        },
                        {
                            "testName": "testRegistered",
                            "startLn": 132,
                            "endLn": 137,
                            "testMethod": "@Test\n public void testRegistered ( ) {\n     Verb actual = Verbs . registered ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "registered",
                            "focalStartLn": 67,
                            "focalEndLn": 69,
                            "focalMethod": " public static Verb registered ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        },
                        {
                            "testName": "testImported",
                            "startLn": 76,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testImported ( ) {\n     Verb actual = Verbs . imported ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "imported",
                            "focalStartLn": 43,
                            "focalEndLn": 45,
                            "focalMethod": " public static Verb imported ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        },
                        {
                            "testName": "testInitialized",
                            "startLn": 83,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testInitialized ( ) {\n     Verb actual = Verbs . initialized ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "initialized",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public static Verb initialized ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SubStatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/SubStatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 47,
                        "endLn": 86,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n substatement = new SubStatement ( ) ; \n substatement . setTimestamp ( TIME ) ; \n actor = new Agent ( ) ; \n actor . setMbox ( MBOX ) ; \n HashMap < String , String > display = new HashMap < String , String > ( ) ; \n display . put ( \"STR\" , EN_VERB ) ; \n verb = new Verb ( ID , display ) ; \n activity = new Activity ( TEST_IRI ) ; \n substatement . setActor ( actor ) ; \n substatement . setVerb ( verb ) ; \n substatement . setObject ( activity ) ; \n result = new Result ( ) ; \n result . setSuccess ( false ) ; \n substatement . setResult ( result ) ; \n context = new Context ( ) ; \n context . setLanguage ( LANGUAGE ) ; \n substatement . setContext ( context ) ; \n attachments = new ArrayList < Attachment > ( ) ; \n Attachment att = new Attachment ( ) ; \n HashMap < String , String > attDisplay = new HashMap < String , String > ( ) ; \n attDisplay . put ( \"STR\" , \"STR\" ) ; \n att . setDisplay ( attDisplay ) ; \n HashMap < String , String > description = new HashMap < String , String > ( ) ; \n description . put ( \"STR\" , \"STR\" ) ; \n att . setDescription ( description ) ; \n URI usageType = new URI ( \"STR\" ) ; \n att . setUsageType ( usageType ) ; \n String attach = \"STR\" ; \n String contentType = \"STR\" ; \n att . addAttachment ( attach , contentType ) ; \n attachments . add ( att ) ; \n substatement . setAttachments ( attachments ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTimestamp",
                            "startLn": 98,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testGetTimestamp ( ) {\n     String expected = TIME ; \n     String actual = substatement . getTimestamp ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java",
                            "focalName": "getTimestamp",
                            "focalStartLn": 16,
                            "focalEndLn": 18,
                            "focalMethod": " public String getTimestamp ( ) { \n return timestamp ; \n } "
                        },
                        {
                            "testName": "testGetVerb",
                            "startLn": 170,
                            "endLn": 177,
                            "testMethod": "@Test\n public void testGetVerb ( ) {\n     Verb expected = verb ; \n     Verb actual = substatement . getVerb ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java",
                            "focalName": "getVerb",
                            "focalStartLn": 40,
                            "focalEndLn": 42,
                            "focalMethod": " public Verb getVerb ( ) { \n return verb ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScoreTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ScoreTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 23,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n score = new Score ( ) ; \n score . setMax ( MAX ) ; \n score . setMin ( MIN ) ; \n score . setRaw ( RAW ) ; \n score . setScaled ( SCALED ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetRaw",
                            "startLn": 59,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testSetRaw ( ) {\n     float expected = 7 ; \n     score . setRaw ( expected ) ; \n     float actual = score . getRaw ( ) ; \n     assertEquals(expected,actual,0);\n}",
                            "oracle": "assertEquals(expected,actual,0);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "getRaw",
                            "focalStartLn": 18,
                            "focalEndLn": 20,
                            "focalMethod": " public float getRaw ( ) { \n return raw ; \n } "
                        },
                        {
                            "testName": "testSerialize",
                            "startLn": 97,
                            "endLn": 107,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     JsonElement actual = score . serialize ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "serialize",
                            "focalStartLn": 37,
                            "focalEndLn": 44,
                            "focalMethod": " public JsonElement serialize ( ) { \n JsonObject obj = new JsonObject ( ) ; \n obj . addProperty ( \"STR\" , this . scaled ) ; \n obj . addProperty ( \"STR\" , this . raw ) ; \n obj . addProperty ( \"STR\" , this . min ) ; \n obj . addProperty ( \"STR\" , this . max ) ; \n return obj ; \n } "
                        }
                    ]
                },
                {
                    "className": "ResultTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ResultTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 22,
                        "endLn": 34,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n result = new Result ( ) ; \n result . setCompletion ( true ) ; \n result . setDuration ( DURATION ) ; \n result . setResponse ( RESPONSE ) ; \n Score score = new Score ( ) ; \n result . setScore ( score ) ; \n result . setSuccess ( true ) ; \n JsonObject extensions = new JsonObject ( ) ; \n extensions . addProperty ( IRI , \"STR\" ) ; \n result . setExtensions ( extensions ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetDuration",
                            "startLn": 106,
                            "endLn": 112,
                            "testMethod": "@Test\n public void testGetDuration ( ) {\n     String expected = DURATION ; \n     String actual = result . getDuration ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Result.java",
                            "focalName": "getDuration",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public String getDuration ( ) { \n return duration ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAuthority",
                            "startLn": 129,
                            "endLn": 135,
                            "testMethod": "@Test\n public void testGetAuthority ( ) {\n     statement . setAuthority ( agent ) ; \n     Actor actual = statement . getAuthority ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getAuthority",
                            "focalStartLn": 44,
                            "focalEndLn": 46,
                            "focalMethod": " public Actor getAuthority ( ) { \n return authority ; \n } "
                        },
                        {
                            "testName": "testToString",
                            "startLn": 309,
                            "endLn": 320,
                            "testMethod": "@Test\n public void testToString ( ) {\n     String verb = \"STR\" ; \n     String activity = TEST_IRI + UUID . randomUUID ( ) . toString ( ) ; \n     Verb v = new Verb ( verb ) ; \n     Activity act = new Activity ( activity ) ; \n     Statement actual = new Statement ( agent , v , act ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "Statement",
                            "focalStartLn": 25,
                            "focalEndLn": 30,
                            "focalMethod": " public Statement ( Actor actor , Verb verb , IStatementObject object ) { \n this . id = UUID . randomUUID ( ) . toString ( ) ; \n this . actor = actor ; \n this . verb = verb ; \n this . object = object ; \n } "
                        },
                        {
                            "testName": "testGetObject",
                            "startLn": 271,
                            "endLn": 278,
                            "testMethod": "@Test\n public void testGetObject ( ) {\n     Activity expected = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n     statement . setObject ( expected ) ; \n     Activity actual = ( Activity ) statement . getObject ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getObject",
                            "focalStartLn": 86,
                            "focalEndLn": 88,
                            "focalMethod": " public IStatementObject getObject ( ) { \n return object ; \n } "
                        },
                        {
                            "testName": "testGetId",
                            "startLn": 217,
                            "endLn": 224,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = ID ; \n     statement . setId ( expected ) ; \n     String actual = statement . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getId",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        }
                    ]
                },
                {
                    "className": "ActivityTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String id = \"STR\" ; \n ActivityDefinition definition = new ActivityDefinition ( ) ; \n HashMap < String , String > name = new HashMap < String , String > ( ) ; \n name . put ( \"STR\" , \"STR\" ) ; \n definition . setName ( name ) ; \n activity = new Activity ( id , definition ) ; \n assertNotNull ( activity ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetObjectType",
                            "startLn": 59,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testGetObjectType ( ) {\n     String expected = \"STR\" ; \n     String actual = activity . getObjectType ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Activity.java",
                            "focalName": "getObjectType",
                            "focalStartLn": 23,
                            "focalEndLn": 25,
                            "focalMethod": " public String getObjectType ( ) { \n return ACTIVITY ; \n } "
                        }
                    ]
                },
                {
                    "className": "PersonTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/PersonTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n person = new Person ( ) ; \n person . setName ( NAME ) ; \n person . setMbox ( MBOX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetMbox_sha1sum",
                            "startLn": 92,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testGetMbox_sha1sum ( ) {\n     String [ ] expected = MBOX_SHA1SUM ; \n     person . setMbox ( null ) ; \n     person . setMbox_sha1sum ( expected ) ; \n     String [ ] actual = person . getMbox_sha1sum ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getMbox_sha1sum",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public String [ ] getMbox_sha1sum ( ) { \n return this . mbox_sha1sum ; \n } "
                        },
                        {
                            "testName": "testGetObjectType",
                            "startLn": 47,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testGetObjectType ( ) {\n     String expected = \"STR\" ; \n     String actual = person . getObjectType ( ) ; \n     assertEquals(expected,actual);\n}",
                            "oracle": "assertEquals(expected,actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getObjectType",
                            "focalStartLn": 18,
                            "focalEndLn": 20,
                            "focalMethod": " public String getObjectType ( ) { \n return OBJECTTYPE ; \n } "
                        }
                    ]
                },
                {
                    "className": "AboutTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AboutTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n about = new About ( ) ; \n ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n String expected = \"STR\" ; \n versionInput . add ( expected ) ; \n about . setVersion ( versionInput ) ; \n JsonObject extension = new JsonObject ( ) ; \n extension . addProperty ( \"STR\" , \"STR\" ) ; \n about . setExtensions ( extension ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetExtensions",
                            "startLn": 47,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testGetExtensions ( ) {\n     JsonObject expected = new JsonObject ( ) ; \n     expected . addProperty ( \"STR\" , \"STR\" ) ; \n     JsonObject actual = about . getExtensions ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java",
                            "focalName": "getExtensions",
                            "focalStartLn": 17,
                            "focalEndLn": 19,
                            "focalMethod": " public JsonObject getExtensions ( ) { \n return extensions ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementReferenceTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 22,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n statementRef = new StatementReference ( ID ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStatementReferenceString",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testStatementReferenceString ( ) {\n     String id = UUID . randomUUID ( ) . toString ( ) ; \n     StatementReference statementRef = new StatementReference ( id ) ; \n     assertNotNull(statementRef);\n}",
                            "oracle": "assertNotNull(statementRef);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementReference.java",
                            "focalName": "StatementReference",
                            "focalStartLn": 13,
                            "focalEndLn": 15,
                            "focalMethod": " public StatementReference ( String id ) { \n this . id = id ; \n } "
                        }
                    ]
                },
                {
                    "className": "GroupTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/GroupTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n members = new ArrayList < Agent > ( ) ; \n members . add ( new Agent ( NAME , MBOX ) ) ; \n group = new Group ( members ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetMember",
                            "startLn": 84,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testSetMember ( ) {\n     ArrayList < Agent > expected = new ArrayList < Agent > ( ) ; \n     expected . add ( new Agent ( \"STR\" + NAME , MBOX ) ) ; \n     group . setMember ( expected ) ; \n     ArrayList < Agent > actual = group . getMember ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Group.java",
                            "focalName": "getMember",
                            "focalStartLn": 23,
                            "focalEndLn": 25,
                            "focalMethod": " public ArrayList < Agent > getMember ( ) { \n return member ; \n } "
                        }
                    ]
                },
                {
                    "className": "ContentActivitiesTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 28,
                        "endLn": 47,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n category = new ArrayList < Activity > ( ) ; \n category . add ( new Activity ( ID ) ) ; \n grouping = new ArrayList < Activity > ( ) ; \n grouping . add ( new Activity ( ID ) ) ; \n other = new ArrayList < Activity > ( ) ; \n other . add ( new Activity ( ID ) ) ; \n parent = new ArrayList < Activity > ( ) ; \n parent . add ( new Activity ( ID ) ) ; \n contextActivities = new ContextActivities ( ) ; \n contextActivities . setCategory ( category ) ; \n contextActivities . setGrouping ( grouping ) ; \n contextActivities . setOther ( other ) ; \n contextActivities . setParent ( parent ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetCategory",
                            "startLn": 109,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testSetCategory ( ) {\n     String newID = \"STR\" + ID ; \n     ArrayList < Activity > expected = category ; \n     expected . add ( new Activity ( newID ) ) ; \n     contextActivities . setCategory ( expected ) ; \n     ArrayList < Activity > actual = contextActivities . getCategory ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java",
                            "focalName": "getCategory",
                            "focalStartLn": 28,
                            "focalEndLn": 30,
                            "focalMethod": " public ArrayList < Activity > getCategory ( ) { \n return category ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n HashMap < String , String > display = new HashMap < String , String > ( ) ; \n display . put ( \"STR\" , EN_VERB ) ; \n display . put ( \"STR\" , ES_VERB ) ; \n verb = new Verb ( ID , display ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetDisplay",
                            "startLn": 95,
                            "endLn": 103,
                            "testMethod": "@Test\n public void testSetDisplay ( ) {\n     HashMap < String , String > expected = new HashMap < String , String > ( ) ; \n     expected . put ( \"STR\" , \"STR\" ) ; \n     verb . setDisplay ( expected ) ; \n     HashMap < String , String > actual = verb . getDisplay ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verb.java",
                            "focalName": "getDisplay",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public HashMap < String , String > getDisplay ( ) { \n return display ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ODatabaseDocumentTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String url = \"STR\" + ODatabaseDocumentTxTest . class . getSimpleName ( ) ; \n db = new ODatabaseDocumentTx ( url ) . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testReturnDeclaredIntent",
                            "startLn": 226,
                            "endLn": 231,
                            "testMethod": "@Test\n public void testReturnDeclaredIntent ( ) {\n     db . declareIntent ( new OIntentMassiveInsert ( ) ) ; \n     assertNotNull(db.getActiveIntent());\n}",
                            "oracle": "assertNotNull(db.getActiveIntent());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "getActiveIntent",
                            "focalStartLn": 1043,
                            "focalEndLn": 1048,
                            "focalMethod": "@Override\n public OIntent getActiveIntent ( ) { \n if ( internal == null ) return intent ; \n return internal . getActiveIntent ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OByteBufferUtilsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/util/OByteBufferUtilsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n buffer1 = ByteBuffer . allocate ( 10 ) ; \n buffer2 = ByteBuffer . allocate ( 10 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSplitShort",
                            "startLn": 41,
                            "endLn": 62,
                            "testMethod": "@Test\n public void testSplitShort ( ) throws Exception {\n     short var = 42 ; \n     buffer1 . position ( 9 ) ; \n     buffer2 . position ( 0 ) ; \n     OByteBufferUtils . splitShortToBuffers ( buffer1 , buffer2 , var ) ; \n     buffer1 . position ( 9 ) ; \n     buffer2 . position ( 0 ) ; \n     short storedVar = OByteBufferUtils . mergeShortFromBuffers ( buffer1 , buffer2 ) ; \n     assertEquals(storedVar,var);\n}",
                            "oracle": "assertEquals(storedVar,var);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OByteBufferUtils.java",
                            "focalName": "mergeShortFromBuffers",
                            "focalStartLn": 49,
                            "focalEndLn": 55,
                            "focalMethod": " public static short mergeShortFromBuffers ( final ByteBuffer buffer , final ByteBuffer buffer1 ) { \n short result = 0 ; \n result = ( short ) ( result | ( buffer . get ( ) & MASK ) ) ; \n result = ( short ) ( result << SIZE_OF_BYTE_IN_BITS ) ; \n result = ( short ) ( result | ( buffer1 . get ( ) & MASK ) ) ; \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 29,
                        "endLn": 63,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMaxDepthArrow",
                            "startLn": 604,
                            "endLn": 634,
                            "testMethod": "@Test\n public void testMaxDepthArrow ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(2,qResult.size());\n}",
                            "oracle": "assertEquals(2,qResult.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testManager",
                            "startLn": 636,
                            "endLn": 649,
                            "testMethod": "@Test\n public void testManager ( ) {\n     assertEquals(\"STR\",getManager(\"STR\").field(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",getManager(\"STR\").field(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testAliasesWithSubquery",
                            "startLn": 1367,
                            "endLn": 1374,
                            "testMethod": "@Test\n public void testAliasesWithSubquery ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}",
                            "oracle": "assertEquals(1,qResult.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSimpleKeyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER , OType . STRING ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testParamCountOneItem",
                            "startLn": 114,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testParamCountOneItem ( ) {\n     final OSimpleKeyIndexDefinition keyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER ) ; \n     Assert.assertEquals(keyIndexDefinition.getParamCount(),1);\n}",
                            "oracle": "Assert.assertEquals(keyIndexDefinition.getParamCount(),1);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java",
                            "focalName": "getParamCount",
                            "focalStartLn": 107,
                            "focalEndLn": 109,
                            "focalMethod": " public int getParamCount ( ) { \n return keyTypes . length ; \n } "
                        },
                        {
                            "testName": "testNullParamItem",
                            "startLn": 97,
                            "endLn": 102,
                            "testMethod": "@Test\n public void testNullParamItem ( ) {\n     final Object result = simpleKeyIndexDefinition . createValue ( \"STR\" , null ) ; \n     Assert.assertNull(result);\n}",
                            "oracle": "Assert.assertNull(result);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 87,
                            "focalEndLn": 105,
                            "focalMethod": " public Object createValue ( final Object ... params ) { \n if ( params == null || params . length == 0 ) return null ; \n if ( keyTypes . length == 1 ) return OType . convert ( params [ 0 ] , keyTypes [ 0 ] . getDefaultJavaType ( ) ) ; \n final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n for ( int i = 0 ; \n i < params . length ; \n ++ i ) { \n final Comparable < ? > paramValue = ( Comparable < ? > ) OType . convert ( params [ i ] , keyTypes [ i ] . getDefaultJavaType ( ) ) ; \n if ( paramValue == null ) return null ; \n compositeKey . addKey ( paramValue ) ; \n } return compositeKey ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODirtyManagerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testLink",
                            "startLn": 45,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testLink ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc2 ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(2,manager.getNewRecords().size());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        },
                        {
                            "testName": "testLinkCollectionRemove",
                            "startLn": 115,
                            "endLn": 135,
                            "testMethod": "@Test\n public void testLinkCollectionRemove ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     List < ODocument > lst = new ArrayList < ODocument > ( ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     lst . add ( doc1 ) ; \n     doc . field ( \"STR\" , lst ) ; \n     doc . removeField ( \"STR\" ) ; \n     Set < ODocument > set = new HashSet < ODocument > ( ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     set . add ( doc2 ) ; \n     doc . field ( \"STR\" , set ) ; \n     doc . removeField ( \"STR\" ) ; \n     ODocumentInternal . convertAllMultiValuesToTrackedVersions ( doc ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(1,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(1,manager.getNewRecords().size());",
                            "oracleLn": 14,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLFieldTransformerTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testExpression",
                            "startLn": 52,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testExpression ( ) {\n     configure ( \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(1,getResult().size());\n}",
                            "oracle": "assertEquals(1,getResult().size());",
                            "oracleLn": 2,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLet1Long",
                            "startLn": 2033,
                            "endLn": 2043,
                            "testMethod": "@Test\n public void testLet1Long ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedListTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddAllNotificationThree",
                            "startLn": 158,
                            "endLn": 185,
                            "testMethod": "@Test\n public void testAddAllNotificationThree ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFriendsWithNameArrows",
                            "startLn": 595,
                            "endLn": 603,
                            "testMethod": "@Test\n public void testFriendsWithNameArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testMaxDepthArrow",
                            "startLn": 695,
                            "endLn": 716,
                            "testMethod": "@Test\n public void testMaxDepthArrow ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(2,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(2,size(qResult));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TrackedSetTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRemoveNotificationOne",
                            "startLn": 106,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testRemoveNotificationOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        },
                        {
                            "testName": "testClearOne",
                            "startLn": 211,
                            "endLn": 249,
                            "testMethod": "@Test\n public void testClearOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        },
                        {
                            "testName": "testRemoveNotificationThree",
                            "startLn": 156,
                            "endLn": 182,
                            "testMethod": "@Test\n public void testRemoveNotificationThree ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "AlterPropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 20,
                        "endLn": 24,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + AlterPropertyTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRemoveLinkedClass",
                            "startLn": 88,
                            "endLn": 97,
                            "testMethod": "@Test\n public void testRemoveLinkedClass ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OClass classLinked = schema . createClass ( \"STR\" ) ; \n     OProperty prop = classA . createProperty ( \"STR\" , OType . LINK , classLinked ) ; \n     assertNotNull(prop.getLinkedClass());\n}",
                            "oracle": "assertNotNull(prop.getLinkedClass());",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getLinkedClass",
                            "focalStartLn": 59,
                            "focalEndLn": 59,
                            "focalMethod": " public OClass getLinkedClass ( ) ; \n"
                        },
                        {
                            "testName": "testPropertyRenamingReload",
                            "startLn": 43,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testPropertyRenamingReload ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OProperty property = classA . createProperty ( \"STR\" , OType . STRING ) ; \n     assertEquals(property,classA.getProperty(\"STR\"));\n}",
                            "oracle": "assertEquals(property,classA.getProperty(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getProperty",
                            "focalStartLn": 113,
                            "focalEndLn": 113,
                            "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OrientGraphFactoryTest",
                    "classPath": "graphdb/src/test/java/com/tinkerpop/blueprints/impls/orient/OrientGraphFactoryTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) { \n OrientBaseGraph . clearInitStack ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "createTxPoolNestedCreations",
                            "startLn": 38,
                            "endLn": 58,
                            "testMethod": "@Test\n public void createTxPoolNestedCreations ( ) {\n     OrientGraph graph = new OrientGraph ( \"STR\" ) ; \n     graph . shutdown ( ) ; \n     OrientGraphFactory factory = new OrientGraphFactory ( \"STR\" ) ; \n     factory . setupPool ( 5 , 10 ) ; \n     OrientBaseGraph g = factory . getTx ( ) ; \n     assertEquals(g.getClass(),OrientGraph.class);\n}",
                            "oracle": "assertEquals(g.getClass(),OrientGraph.class);",
                            "oracleLn": 5,
                            "focalFile": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientGraphFactory.java",
                            "focalName": "getTx",
                            "focalStartLn": 218,
                            "focalEndLn": 229,
                            "focalMethod": " public OrientGraph getTx ( ) { \n final OrientGraph g ; \n if ( pool == null ) { \n g = ( OrientGraph ) getTxGraphImplFactory ( ) . getGraph ( getDatabase ( ) , user , password , settings ) ; \n } else { \n g = ( OrientGraph ) getTxGraphImplFactory ( ) . getGraph ( pool , settings ) ; \n } initGraph ( g ) ; \n return g ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testSetFieldAtListIndex",
                            "startLn": 244,
                            "endLn": 272,
                            "testMethod": "@Test\n public void testSetFieldAtListIndex ( ) {\n     ODocument doc = new ODocument ( ) ; \n     Map < String , Object > data = new HashMap < String , Object > ( ) ; \n     List < Object > parentArray = new ArrayList < Object > ( ) ; \n     parentArray . add ( 1 ) ; \n     parentArray . add ( 2 ) ; \n     parentArray . add ( 3 ) ; \n     Map < String , Object > object4 = new HashMap < String , Object > ( ) ; \n     object4 . put ( \"STR\" , \"STR\" ) ; \n     parentArray . add ( object4 ) ; \n     data . put ( \"STR\" , parentArray ) ; \n     doc . field ( \"STR\" , data ) ; \n     assertEquals(doc.field(\"STR\"),\"STR\");\n}",
                            "oracle": "assertEquals(doc.field(\"STR\"),\"STR\");",
                            "oracleLn": 11,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "BinaryComparatorCompareTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BinaryComparatorCompareTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testDatetime",
                            "startLn": 49,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testDatetime ( ) throws ParseException {\n     testCompareNumber ( OType . DATETIME , 10l ) ; \n     final SimpleDateFormat format = new SimpleDateFormat ( OStorageConfiguration . DEFAULT_DATETIME_FORMAT ) ; \n     String now1 = format . format ( new Date ( ) ) ; \n     Date now = format . parse ( now1 ) ; \n     Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);\n}",
                            "oracle": "Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "compare",
                            "focalStartLn": 51,
                            "focalEndLn": 51,
                            "focalMethod": " int compare ( OBinaryField iValue1 , OBinaryField iValue2 ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OJsonWithCustom",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OJsonWithCustom.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCustomFieldDisabled",
                            "startLn": 37,
                            "endLn": 50,
                            "testMethod": "@ Test ( expected = ODatabaseException . class ) public void testCustomFieldDisabled ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , String . class , OType . CUSTOM ) ; \n     String json = doc . toJSON ( ) ; \n     System . out . println ( json ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . fromJSON ( json ) ; \n     assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));\n}",
                            "oracle": "assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyListIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventAddTwoTimesInvValue",
                            "startLn": 255,
                            "endLn": 275,
                            "testMethod": "@Test\n public void testProcessChangeEventAddTwoTimesInvValue ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < Integer , Integer > multiValueChangeEventOne = new OMultiValueChangeEvent < Integer , Integer > ( OMultiValueChangeEvent . OChangeType . ADD , 0 , 42 ) ; \n     final OMultiValueChangeEvent < Integer , Integer > multiValueChangeEventTwo = new OMultiValueChangeEvent < Integer , Integer > ( OMultiValueChangeEvent . OChangeType . ADD , 1 , 555 ) ; \n     propertyIndex . processChangeEvent ( multiValueChangeEventOne , keysToAdd , keysToRemove ) ; \n     propertyIndex . processChangeEvent ( multiValueChangeEventTwo , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     addedKeys . put ( 42 , 1 ) ; \n     addedKeys . put ( 555 , 1 ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 92,
                            "focalEndLn": 111,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n switch ( changeEvent . getChangeType ( ) ) { \n case ADD : { \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case REMOVE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case UPDATE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } default : throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testCreateValueSingleParameter",
                            "startLn": 24,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testCreateValueSingleParameter ( ) {\n     final Object result = propertyIndex . createValue ( Collections . singletonList ( Arrays . asList ( \"STR\" , \"STR\" ) ) ) ; \n     Assert.assertTrue(resultinstanceofCollection);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofCollection);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 50,
                            "focalEndLn": 61,
                            "focalMethod": "@Override\n public Object createValue ( List < ? > params ) { \n if ( ! ( params . get ( 0 ) instanceof Collection ) ) params = ( List ) Collections . singletonList ( params ) ; \n final Collection < ? > multiValueCollection = ( Collection < ? > ) params . get ( 0 ) ; \n final List < Object > values = new ArrayList < > ( multiValueCollection . size ( ) ) ; \n for ( final Object item : multiValueCollection ) { \n values . add ( createSingleValue ( item ) ) ; \n } return values ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreateEdgeTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OCommandExecutorSQLCreateEdgeTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 33,
                        "endLn": 55,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n OCommandManager . instance ( ) . registerExecutor ( OCommandScript . class , OCommandExecutorScript . class ) ; \n db = new ODatabaseDocumentTx ( \"STR\" + OCommandExecutorSQLCreateEdgeTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n db . drop ( ) ; \n } db . create ( ) ; \n final OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n schema . createClass ( \"STR\" , schema . getClass ( \"STR\" ) ) ; \n schema . createClass ( \"STR\" , schema . getClass ( \"STR\" ) ) ; \n owner1 = new ODocument ( \"STR\" ) ; \n owner1 . field ( \"STR\" , 1 ) ; \n owner1 . save ( ) ; \n owner2 = new ODocument ( \"STR\" ) ; \n owner2 . field ( \"STR\" , 2 ) ; \n owner2 . save ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testParametersBinding",
                            "startLn": 66,
                            "endLn": 75,
                            "testMethod": "@Test\n public void testParametersBinding ( ) throws Exception {\n     db . command ( new OCommandSQL ( \"STR\" + owner1 . getIdentity ( ) + \"STR\" + owner2 . getIdentity ( ) + \"STR\" ) ) . execute ( \"STR\" ) ; \n     final List < ODocument > list = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     Assert.assertEquals(list.size(),1);\n}",
                            "oracle": "Assert.assertEquals(list.size(),1);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLimitMinusOneOrdered",
                            "startLn": 815,
                            "endLn": 820,
                            "testMethod": "@Test\n public void testLimitMinusOneOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(26,results.size());\n}",
                            "oracle": "assertEquals(26,results.size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testLimit",
                            "startLn": 510,
                            "endLn": 514,
                            "testMethod": "@Test\n public void testLimit ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),3);\n}",
                            "oracle": "assertEquals(qResult.size(),3);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOrderByEmbeddedParams2",
                            "startLn": 939,
                            "endLn": 949,
                            "testMethod": "@Test\n public void testOrderByEmbeddedParams2 ( ) {\n     Map < String , Object > parameters = new HashMap < String , Object > ( ) ; \n     parameters . put ( \"STR\" , \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( parameters ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessBinarySerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createSerializer",
                        "startLn": 67,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void createSerializer ( ) { \n if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) ) serializer = new ORecordSerializerNetwork ( ) ; \n else if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) + 1 ) serializer = new ORecordSerializerNetworkV37 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFieldNamesRaw",
                            "startLn": 871,
                            "endLn": 883,
                            "testMethod": "@Test\n public void testFieldNamesRaw ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . fields ( \"STR\" , 1 , \"STR\" , 2 , \"STR\" , 3 ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     final String [ ] fields = serializer . getFieldNamesRoot ( document , res ) ; \n     assertNotNull(fields);\n}",
                            "oracle": "assertNotNull(fields);",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/ORecordSerializer.java",
                            "focalName": "getFieldNamesRoot",
                            "focalStartLn": 37,
                            "focalEndLn": 37,
                            "focalMethod": " String [ ] getFieldNamesRoot ( ODocument reference , byte [ ] iSource ) ; \n"
                        },
                        {
                            "testName": "testListOfMapsWithNull",
                            "startLn": 965,
                            "endLn": 987,
                            "testMethod": "@Test\n public void testListOfMapsWithNull ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     List lista = new ArrayList < > ( ) ; \n     Map mappa = new LinkedHashMap < > ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     mappa . put ( \"STR\" , null ) ; \n     lista . add ( mappa ) ; \n     mappa = new HashMap ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     lista . add ( mappa ) ; \n     document . setProperty ( \"STR\" , lista ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 13,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLCSVExtractorTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNegativeFloat",
                            "startLn": 429,
                            "endLn": 439,
                            "testMethod": "@Test\n public void testNegativeFloat ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 4,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        },
                        {
                            "testName": "testFloat",
                            "startLn": 134,
                            "endLn": 146,
                            "testMethod": "@Test\n public void testFloat ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 4,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestNullFieldQuery",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/select/TestNullFieldQuery.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" + TestNullFieldQuery . class . getSimpleName ( ) ) ; \n database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryNullValue",
                            "startLn": 35,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testQueryNullValue ( ) {\n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , ( Object ) null ) ; \n     database . save ( doc ) ; \n     List < ODocument > res = database . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue(res.isEmpty());\n}",
                            "oracle": "assertTrue(res.isEmpty());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OVarIntSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "serializePositive",
                            "startLn": 27,
                            "endLn": 33,
                            "testMethod": "@Test\n public void serializePositive ( ) {\n     BytesContainer bytes = new BytesContainer ( ) ; \n     OVarIntSerializer . write ( bytes , 20432343 ) ; \n     bytes . offset = 0 ; \n     assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);\n}",
                            "oracle": "assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OVarIntSerializer.java",
                            "focalName": "readAsLong",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public static long readAsLong ( final BytesContainer bytes ) { \n return readSignedVarLong ( bytes ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SBTreeLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/SBTreeLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 49,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBucket < Long , OIdentifiable > treeBucket = new OSBTreeBucket < > ( cacheEntry , true , OLongSerializer . INSTANCE , null , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeBucket.java",
                            "focalName": "size",
                            "focalStartLn": 201,
                            "focalEndLn": 203,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( SIZE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OServerDatabaseOperationsTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OServerDatabaseOperationsTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 38,
                        "endLn": 59,
                        "setupMethod": "@Before\n public void before ( ) throws ClassNotFoundException , MalformedObjectNameException , InstanceAlreadyExistsException , NotCompliantMBeanException , MBeanRegistrationException , NoSuchMethodException , IOException , InvocationTargetException , IllegalAccessException , InstantiationException { \n OLogManager . instance ( ) . setConsoleLevel ( Level . OFF . getName ( ) ) ; \n OServerConfiguration conf = new OServerConfiguration ( ) ; \n conf . handlers = new ArrayList < OServerHandlerConfiguration > ( ) ; \n OServerUserConfiguration rootUser = new OServerUserConfiguration ( ) ; \n rootUser . name = \"STR\" ; \n rootUser . password = \"STR\" ; \n rootUser . resources = \"STR\" ; \n conf . users = new OServerUserConfiguration [ ] { \n rootUser } ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( conf ) ; \n server . activate ( ) ; \n ODocument securityConfig = new ODocument ( ) ; \n securityConfig . fromJSON ( OIOUtils . readStreamAsString ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"STR\" ) ) , \"STR\" ) ; \n server . getSecurity ( ) . reload ( securityConfig ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateOpenDatabase",
                            "startLn": 75,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testCreateOpenDatabase ( ) {\n     server . createDatabase ( \"STR\" , ODatabaseType . MEMORY , OrientDBConfig . defaultConfig ( ) ) ; \n     assertTrue(server.existsDatabase(\"STR\"));\n}",
                            "oracle": "assertTrue(server.existsDatabase(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/OServer.java",
                            "focalName": "existsDatabase",
                            "focalStartLn": 1230,
                            "focalEndLn": 1232,
                            "focalMethod": " public boolean existsDatabase ( String databaseName ) { \n return databases . exists ( databaseName , null , null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testEqualNotSameKeys",
                            "startLn": 31,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testEqualNotSameKeys ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertFalse(compositeKey.equals(anotherCompositeKey));\n}",
                            "oracle": "assertFalse(compositeKey.equals(anotherCompositeKey));",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "equals",
                            "focalStartLn": 138,
                            "focalEndLn": 148,
                            "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OCompositeKey that = ( OCompositeKey ) o ; \n return keys . equals ( that . keys ) ; \n } "
                        },
                        {
                            "testName": "testAddKeyComparable",
                            "startLn": 64,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testAddKeyComparable ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     assertEquals(compositeKey.getKeys().size(),1);\n}",
                            "oracle": "assertEquals(compositeKey.getKeys().size(),1);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "getKeys",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public List < Object > getKeys ( ) { \n return Collections . unmodifiableList ( keys ) ; \n } "
                        },
                        {
                            "testName": "testEqualSameKeys",
                            "startLn": 16,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testEqualSameKeys ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertTrue(compositeKey.equals(anotherCompositeKey));\n}",
                            "oracle": "assertTrue(compositeKey.equals(anotherCompositeKey));",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "equals",
                            "focalStartLn": 138,
                            "focalEndLn": 148,
                            "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OCompositeKey that = ( OCompositeKey ) o ; \n return keys . equals ( that . keys ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 21,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n compositeIndex = new OCompositeIndexDefinition ( \"STR\" ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateCollectionValueSuccessfulThree",
                            "startLn": 194,
                            "endLn": 210,
                            "testMethod": "@Test\n public void testCreateCollectionValueSuccessfulThree ( ) {\n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n     final Object result = compositeIndexDefinition . createValue ( 12 , Arrays . asList ( 1 , 2 ) , \"STR\" ) ; \n     final ArrayList < OCompositeKey > expectedResult = new ArrayList < OCompositeKey > ( ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 1 , \"STR\" ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 2 , \"STR\" ) ) ; \n     Assert.assertEquals(result,expectedResult);\n}",
                            "oracle": "Assert.assertEquals(result,expectedResult);",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testDocumentToIndexCollectionValueEmptyOneNullValuesSupport",
                            "startLn": 375,
                            "endLn": 390,
                            "testMethod": "@Test\n public void testDocumentToIndexCollectionValueEmptyOneNullValuesSupport ( ) {\n     final ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , 12 ) ; \n     document . field ( \"STR\" , Collections . emptyList ( ) ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . setNullValuesIgnored ( false ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     Assert.assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));\n}",
                            "oracle": "Assert.assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testCreateCollectionValueSuccessfulOne",
                            "startLn": 66,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testCreateCollectionValueSuccessfulOne ( ) {\n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     final Object result = compositeIndexDefinition . createValue ( 12 , Arrays . asList ( 1 , 2 ) ) ; \n     final ArrayList < OCompositeKey > expectedResult = new ArrayList < OCompositeKey > ( ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 1 ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 2 ) ) ; \n     Assert.assertEquals(result,expectedResult);\n}",
                            "oracle": "Assert.assertEquals(result,expectedResult);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testIfNotExists",
                            "startLn": 455,
                            "endLn": 476,
                            "testMethod": "@Test\n public void testIfNotExists ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty property = companyClass . getProperty ( \"STR\" ) ; \n     assertEquals(property.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(property.getName(),PROP_NAME);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testNonStrict",
                            "startLn": 363,
                            "endLn": 391,
                            "testMethod": "@Test\n public void testNonStrict ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . getStorage ( ) . setProperty ( OStatement . CUSTOM_STRICT_SQL , \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 289,
                            "endLn": 313,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODocumentTrackingNestedCollectionsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/ODocumentTrackingNestedCollectionsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + ODocumentTrackingNestedCollectionsTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testChangesValuesNestedTrackingSet",
                            "startLn": 69,
                            "endLn": 97,
                            "testMethod": "@Test\n public void testChangesValuesNestedTrackingSet ( ) {\n     ODocument document = new ODocument ( ) ; \n     Set objects = new HashSet ( ) ; \n     document . field ( \"STR\" , objects ) ; \n     Set subObjects = new HashSet ( ) ; \n     objects . add ( subObjects ) ; \n     ODocument nestedDoc = new ODocument ( ) ; \n     subObjects . add ( nestedDoc ) ; \n     document . save ( db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     objects = document . field ( \"STR\" ) ; \n     subObjects = ( Set ) objects . iterator ( ) . next ( ) ; \n     subObjects . add ( \"STR\" ) ; \n     OMultiValueChangeTimeLine < Object , Object > timeLine = document . getCollectionTimeLine ( \"STR\" ) ; \n     assertEquals(1,timeLine.getMultiValueChangeEvents().size());\n}",
                            "oracle": "assertEquals(1,timeLine.getMultiValueChangeEvents().size());",
                            "oracleLn": 12,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/OMultiValueChangeTimeLine.java",
                            "focalName": "getMultiValueChangeEvents",
                            "focalStartLn": 40,
                            "focalEndLn": 42,
                            "focalMethod": " public List < OMultiValueChangeEvent < K , V > > getMultiValueChangeEvents ( ) { \n return Collections . unmodifiableList ( multiValueChangeEvents ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OAlterClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCustom",
                            "startLn": 181,
                            "endLn": 191,
                            "testMethod": "@Test\n public void testCustom ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getCustom",
                            "focalStartLn": 437,
                            "focalEndLn": 437,
                            "focalMethod": " String getCustom ( String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueByKeyTwoParameters",
                            "startLn": 63,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testCreateValueByKeyTwoParameters ( ) {\n     final Object result = propertyIndexByKey . createValue ( Arrays . asList ( mapToTest , \"STR\" ) ) ; \n     Assert.assertTrue(resultinstanceofCollection);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofCollection);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 64,
                            "focalEndLn": 76,
                            "focalMethod": "@Override\n public Object createValue ( List < ? > params ) { \n if ( ! ( params . get ( 0 ) instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params . get ( 0 ) ) ; \n final List < Object > result = new ArrayList < Object > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n result . add ( createSingleValue ( mapParam ) ) ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testCreateSingleValueByKey",
                            "startLn": 239,
                            "endLn": 243,
                            "testMethod": "@Test\n public void testCreateSingleValueByKey ( ) {\n     final Object result = propertyIndexByKey . createSingleValue ( \"STR\" ) ; \n     Assert.assertEquals(result,\"STR\");\n}",
                            "oracle": "Assert.assertEquals(result,\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createSingleValue",
                            "focalStartLn": 138,
                            "focalEndLn": 140,
                            "focalMethod": " public Object createSingleValue ( final Object ... param ) { \n return OType . convert ( param [ 0 ] , keyType . getDefaultJavaType ( ) ) ; \n } "
                        },
                        {
                            "testName": "testCreateDDLByKey",
                            "startLn": 261,
                            "endLn": 265,
                            "testMethod": "@Test\n public void testCreateDDLByKey ( ) {\n     final String ddl = propertyIndexByKey . toCreateIndexDDL ( \"STR\" , \"STR\" , null ) . toLowerCase ( Locale . ENGLISH ) ; \n     Assert.assertEquals(ddl,\"STR\");\n}",
                            "oracle": "Assert.assertEquals(ddl,\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "toCreateIndexDDL",
                            "focalStartLn": 205,
                            "focalEndLn": 221,
                            "focalMethod": "@Override\n public String toCreateIndexDDL ( String indexName , String indexType , String engine ) { \n final StringBuilder ddl = new StringBuilder ( \"STR\" ) ; \n ddl . append ( indexName ) . append ( \"STR\" ) ; \n ddl . append ( className ) . append ( \"STR\" ) . append ( field ) . append ( \"STR\" ) ; \n if ( indexBy == INDEX_BY . KEY ) ddl . append ( \"STR\" ) ; \n else ddl . append ( \"STR\" ) ; \n ddl . append ( \"STR\" ) ; \n ddl . append ( indexType ) ; \n return ddl . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 17,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTypes",
                            "startLn": 74,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testGetTypes ( ) {\n     final OType [ ] result = propertyIndex . getTypes ( ) ; \n     Assert.assertEquals(result.length,1);\n}",
                            "oracle": "Assert.assertEquals(result.length,1);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java",
                            "focalName": "getTypes",
                            "focalStartLn": 133,
                            "focalEndLn": 135,
                            "focalMethod": " public OType [ ] getTypes ( ) { \n return new OType [ ] { \n keyType } ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneGeoUpdateTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneGeoUpdateTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdate",
                            "startLn": 30,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testUpdate ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(2,index.getSize());\n}",
                            "oracle": "Assert.assertEquals(2,index.getSize());",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "getSize",
                            "focalStartLn": 115,
                            "focalEndLn": 115,
                            "focalMethod": " long getSize ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionAbsoluteValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 26,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionAbsoluteValue ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPositiveBigDecimal",
                            "startLn": 124,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testPositiveBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OLiveCommandResultListenerTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OLiveCommandResultListenerTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 63,
                        "endLn": 81,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n MockitoAnnotations . initMocks ( this ) ; \n Mockito . when ( server . getContextConfiguration ( ) ) . thenReturn ( new OContextConfiguration ( ) ) ; \n db = new ODatabaseDocumentTx ( \"STR\" + OLiveCommandResultListenerTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n OClientConnectionManager manager = new OClientConnectionManager ( server ) ; \n protocol = new ONetworkProtocolBinary ( server ) ; \n protocol . initVariables ( server , channelBinary ) ; \n connection = manager . connect ( protocol ) ; \n OTokenHandlerImpl tokenHandler = new OTokenHandlerImpl ( server ) ; \n byte [ ] token = tokenHandler . getSignedBinaryToken ( db , db . getUser ( ) , connection . getData ( ) ) ; \n connection = manager . connect ( protocol , connection , token , tokenHandler ) ; \n connection . setDatabase ( db ) ; \n connection . getData ( ) . setSerializationImpl ( ORecordSerializerNetwork . NAME ) ; \n Mockito . when ( server . getClientConnectionManager ( ) ) . thenReturn ( manager ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNetworkError",
                            "startLn": 91,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testNetworkError ( ) throws IOException {\n     Mockito . when ( channelBinary . writeInt ( Mockito . anyInt ( ) ) ) . thenThrow ( new IOException ( \"STR\" ) ) ; \n     OLiveCommandResultListener listener = new OLiveCommandResultListener ( server , connection , new TestResultListener ( ) ) ; \n     OLiveQueryHook . subscribe ( 10 , rawListener , db ) ; \n     assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));\n}",
                            "oracle": "assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/query/live/OLiveQueryQueueThread.java",
                            "focalName": "hasToken",
                            "focalStartLn": 103,
                            "focalEndLn": 105,
                            "focalMethod": " public boolean hasToken ( Integer key ) { \n return subscribers . containsKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OClassImplTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void setUp ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OClassImplTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n } else db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateNoLinkedClass",
                            "startLn": 75,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testCreateNoLinkedClass ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null , true ) ; \n     assertNotNull(oClass.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(oClass.getProperty(\"STR\"));",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getProperty",
                            "focalStartLn": 113,
                            "focalEndLn": 113,
                            "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "FloatSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n floatSerializer = new OFloatSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeWALChanges",
                            "startLn": 93,
                            "endLn": 106,
                            "testMethod": "@Test\n public void testSerializeWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     byte [ ] data = new byte [ FIELD_SIZE ] ; \n     floatSerializer . serializeNative ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 135,
                            "focalEndLn": 138,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return FLOAT_SIZE ; \n } "
                        },
                        {
                            "testName": "testSerializeNative",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testSerializeNative ( ) {\n     floatSerializer . serializeNative ( OBJECT , stream , 0 ) ; \n     Float v = floatSerializer . deserializeNative ( stream , 0 ) ; \n     Assert.assertEquals(v,OBJECT);\n}",
                            "oracle": "Assert.assertEquals(v,OBJECT);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "deserializeNative",
                            "focalStartLn": 83,
                            "focalEndLn": 85,
                            "focalMethod": " public float deserializeNative ( final byte [ ] stream , final int startPosition ) { \n return Float . intBitsToFloat ( CONVERTER . getInt ( stream , startPosition , ByteOrder . nativeOrder ( ) ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMultiValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/collection/OMultiValueTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testArrayFirstLast",
                            "startLn": 42,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testArrayFirstLast ( ) {\n     String [ ] collection = new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ; \n     Assert.assertEquals(OMultiValue.getFirstValue(collection),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(OMultiValue.getFirstValue(collection),\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/collection/OMultiValue.java",
                            "focalName": "getFirstValue",
                            "focalStartLn": 116,
                            "focalEndLn": 138,
                            "focalMethod": " public static Object getFirstValue ( final Object iObject ) { \n if ( iObject == null ) return null ; \n if ( ! isMultiValue ( iObject ) || getSize ( iObject ) == 0 ) return null ; \n try { \n if ( iObject instanceof List < ? > ) return ( ( List < Object > ) iObject ) . get ( 0 ) ; \n else if ( iObject instanceof Iterable < ? > ) return ( ( Iterable < Object > ) iObject ) . iterator ( ) . next ( ) ; \n else if ( iObject instanceof Map < ? , ? > ) return ( ( Map < ? , Object > ) iObject ) . values ( ) . iterator ( ) . next ( ) ; \n else if ( iObject . getClass ( ) . isArray ( ) ) return Array . get ( iObject , 0 ) ; \n } catch ( RuntimeException e ) { \n OLogManager . instance ( ) . debug ( iObject , \"STR\" , iObject , e ) ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneInheritanceQueryTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneInheritanceQueryTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQuery",
                            "startLn": 41,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testQuery ( ) {\n     createSchema ( db ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc ) ; \n     List < ODocument > vertices = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(1,vertices.size());\n}",
                            "oracle": "Assert.assertEquals(1,vertices.size());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "RemoteTransactionSupportTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 50,
                        "endLn": 70,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . CLASS_MINIMUM_CLUSTERS . setValue ( 1 ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n orientDB = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( RemoteTransactionSupportTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = orientDB . open ( RemoteTransactionSupportTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n OClass klass = database . createClass ( \"STR\" ) ; \n klass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n OClass uniqueClass = database . createClass ( \"STR\" ) ; \n uniqueClass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . UNIQUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryDeleteTxSQLTransaction",
                            "startLn": 201,
                            "endLn": 219,
                            "testMethod": "@Test\n public void testQueryDeleteTxSQLTransaction ( ) {\n     OElement someTx = database . newElement ( \"STR\" ) ; \n     someTx . setProperty ( \"STR\" , \"STR\" ) ; \n     someTx . save ( ) ; \n     database . begin ( ) ; \n     database . command ( \"STR\" ) ; \n     database . commit ( ) ; \n     OResultSet result = database . command ( \"STR\" ) ; \n     assertFalse(result.hasNext());\n}",
                            "oracle": "assertFalse(result.hasNext());",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ByteSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/ByteSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n byteSerializer = new OByteSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerialize",
                            "startLn": 48,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     byteSerializer . serialize ( OBJECT , stream , 0 ) ; \n     Assert.assertEquals(byteSerializer.deserialize(stream,0),OBJECT);\n}",
                            "oracle": "Assert.assertEquals(byteSerializer.deserialize(stream,0),OBJECT);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OByteSerializer.java",
                            "focalName": "deserialize",
                            "focalStartLn": 53,
                            "focalEndLn": 55,
                            "focalMethod": " public Byte deserialize ( final byte [ ] stream , final int startPosition ) { \n return stream [ startPosition ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORidBagAtomicUpdateTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/ridbag/sbtree/ORidBagAtomicUpdateTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n database . declareIntent ( new OIntentMassiveInsert ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n topThreshold = OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . getValueAsInteger ( ) ; \n bottomThreshold = OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . getValueAsInteger ( ) ; \n OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . setValue ( - 1 ) ; \n OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . setValue ( - 1 ) ; \n } @Before\n public void beforeClass ( ) { \n final String dbName = this . getClass ( ) . getSimpleName ( ) ; \n final String storageType = getStorageType ( ) ; \n final String buildDirectory = System . getProperty ( \"STR\" , \"STR\" ) ; \n database = new ODatabaseDocumentTx ( storageType + \"STR\" + buildDirectory + \"STR\" + dbName ) ; \n if ( database . exists ( ) ) { \n database . open ( \"STR\" , \"STR\" ) ; \n database . drop ( ) ; \n } database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAddTwoSavedDocuments",
                            "startLn": 291,
                            "endLn": 315,
                            "testMethod": "@Test\n public void testAddTwoSavedDocuments ( ) {\n     long recordsCount = database . countClusterElements ( database . getDefaultClusterId ( ) ) ; \n     database . begin ( ) ; \n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     ODocument docOne = new ODocument ( ) ; \n     docOne . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     docTwo . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ridBag . add ( docOne ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . rollback ( ) ; \n     Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);\n}",
                            "oracle": "Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);",
                            "oracleLn": 13,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "countClusterElements",
                            "focalStartLn": 1165,
                            "focalEndLn": 1169,
                            "focalMethod": "@Override\n public long countClusterElements ( int iCurrentClusterId ) { \n checkOpenness ( ) ; \n return internal . countClusterElements ( iCurrentClusterId ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CreateClassMultipleClusterTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/CreateClassMultipleClusterTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 16,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + CreateClassMultipleClusterTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateClassSQLSpecifiedClusters",
                            "startLn": 41,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testCreateClassSQLSpecifiedClusters ( ) {\n     int s = db . addCluster ( \"STR\" ) ; \n     int t = db . addCluster ( \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + s + \"STR\" + t ) ) . execute ( ) ; \n     final OClass clazzV = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     assertEquals(2,clazzV.getClusterIds().length);\n}",
                            "oracle": "assertEquals(2,clazzV.getClusterIds().length);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getClusterIds",
                            "focalStartLn": 157,
                            "focalEndLn": 157,
                            "focalMethod": " int [ ] getClusterIds ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OClientConnectionManagerTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionManagerTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 32,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void before ( ) throws NoSuchAlgorithmException , InvalidKeyException , IOException { \n MockitoAnnotations . initMocks ( this ) ; \n Mockito . when ( handler . parseBinaryToken ( Mockito . any ( byte [ ] . class ) ) ) . thenReturn ( token ) ; \n Mockito . when ( protocol . getServer ( ) ) . thenReturn ( server ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleConnectDisconnect",
                            "startLn": 39,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testSimpleConnectDisconnect ( ) throws IOException {\n     OClientConnectionManager manager = new OClientConnectionManager ( server ) ; \n     OClientConnection ret = manager . connect ( protocol ) ; \n     assertNotNull(ret);\n}",
                            "oracle": "assertNotNull(ret);",
                            "oracleLn": 2,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java",
                            "focalName": "connect",
                            "focalStartLn": 139,
                            "focalEndLn": 149,
                            "focalMethod": " public OClientConnection connect ( final ONetworkProtocol iProtocol ) { \n final OClientConnection connection ; \n connection = new OClientConnection ( connectionSerial . incrementAndGet ( ) , iProtocol ) ; \n connections . put ( connection . getId ( ) , connection ) ; \n OLogManager . instance ( ) . config ( this , \"STR\" + connection ) ; \n OServerPluginHelper . invokeHandlerCallbackOnClientConnection ( iProtocol . getServer ( ) , connection ) ; \n return connection ; \n } "
                        }
                    ]
                },
                {
                    "className": "OQueryRequestTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OQueryRequestTest.java",
                    "subRepo": "client",
                    "before": {
                        "setupName": "before",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@Before\n public void before ( ) { \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithNamedParams",
                            "startLn": 46,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testWithNamedParams ( ) throws IOException {\n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     params . put ( \"STR\" , 12 ) ; \n     OQueryRequest request = new OQueryRequest ( \"STR\" , \"STR\" , params , OQueryRequest . QUERY , ORecordSerializerNetworkFactory . INSTANCE . current ( ) , 123 ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     OQueryRequest other = new OQueryRequest ( ) ; \n     other . read ( channel , - 1 , ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n     Assert.assertEquals(request.getCommand(),other.getCommand());\n}",
                            "oracle": "Assert.assertEquals(request.getCommand(),other.getCommand());",
                            "oracleLn": 9,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OQueryRequest.java",
                            "focalName": "getCommand",
                            "focalStartLn": 118,
                            "focalEndLn": 121,
                            "focalMethod": "@Override\n public byte getCommand ( ) { \n return OChannelBinaryProtocol . REQUEST_QUERY ; \n } "
                        }
                    ]
                },
                {
                    "className": "OElementTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OElementTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 22,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetProperty",
                            "startLn": 33,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testGetSetProperty ( ) {\n     OElement elem = db . newElement ( ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     Set < String > names = elem . getPropertyNames ( ) ; \n     Assert.assertTrue(names.contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(names.contains(\"STR\"));",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/OElement.java",
                            "focalName": "getPropertyNames",
                            "focalStartLn": 37,
                            "focalEndLn": 37,
                            "focalMethod": " public Set < String > getPropertyNames ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "HttpCommandTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpCommandTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "createDatabase",
                        "startLn": 37,
                        "endLn": 46,
                        "setupMethod": "@Before\n public void createDatabase ( ) throws Exception { \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n Assert . assertEquals ( post ( \"STR\" + getDatabaseName ( ) + \"STR\" ) . setUserName ( \"STR\" ) . setUserPassword ( \"STR\" ) . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) , 200 ) ; \n onAfterDatabaseCreated ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "commandWithPosParams",
                            "startLn": 46,
                            "endLn": 60,
                            "testMethod": "@Test\n public void commandWithPosParams ( ) throws IOException {\n     Assert.assertEquals(post(\"STR\"+getDatabaseName()+\"STR\").payload(\"STR\",CONTENT.TEXT).setUserName(\"STR\").setUserPassword(\"STR\").getResponse().getStatusLine().getStatusCode(),200);\n}",
                            "oracle": "Assert.assertEquals(post(\"STR\"+getDatabaseName()+\"STR\").payload(\"STR\",CONTENT.TEXT).setUserName(\"STR\").setUserPassword(\"STR\").getResponse().getStatusLine().getStatusCode(),200);",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "TxNonUniqueIndexWithCollationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/TxNonUniqueIndexWithCollationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 41,
                        "endLn": 52,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) . createProperty ( \"STR\" , OType . STRING ) . setCollate ( \"STR\" ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIn",
                            "startLn": 90,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testIn ( ) {\n     db . begin ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final OLegacyResultSet < ODocument > r = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(4,r.size());\n}",
                            "oracle": "assertEquals(4,r.size());",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OLuceneManualIndexTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/tests/OLuceneManualIndexTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 41,
                        "endLn": 49,
                        "setupMethod": "@Before\n public void init ( ) { \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n } @Before\n public void setupDatabase ( ) { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n setupDatabase ( config ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCreateManualIndexWithJavaApi",
                            "startLn": 51,
                            "endLn": 76,
                            "testMethod": "@Test\n public void shouldCreateManualIndexWithJavaApi ( ) throws Exception {\n     ODocument meta = new ODocument ( ) . field ( \"STR\" , StandardAnalyzer . class . getName ( ) ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . createIndex ( \"STR\" , OClass . INDEX_TYPE . FULLTEXT . toString ( ) , new OSimpleKeyIndexDefinition ( OType . STRING , OType . STRING ) , null , null , meta , OLuceneIndexFactory . LUCENE_ALGORITHM ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     Assert.assertEquals(index.getSize(),4);\n}",
                            "oracle": "Assert.assertEquals(index.getSize(),4);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "getSize",
                            "focalStartLn": 115,
                            "focalEndLn": 115,
                            "focalMethod": " long getSize ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CollectionsTest",
                    "classPath": "src/test/java/org/jcodec/common/CollectionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIntObjectMap",
                            "startLn": 10,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testIntObjectMap ( ) {\n     IntObjectMap < Integer > test = new IntObjectMap < Integer > ( ) ; \n     test . put ( 24 , 11 ) ; \n     assertEquals(Integer.valueOf(11),test.get(24));\n}",
                            "oracle": "assertEquals(Integer.valueOf(11),test.get(24));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/common/IntObjectMap.java",
                            "focalName": "get",
                            "focalStartLn": 35,
                            "focalEndLn": 38,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public T get ( int key ) { \n return key >= storage . length ? null : ( T ) storage [ key ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "ModeInfoTest",
                    "classPath": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testUVMode",
                            "startLn": 61,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testUVMode ( ) {\n     MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder ( new int [ ] { \n 144 , 11 , 54 , 157 , 195 , 130 } , new int [ ] { \n 1 , 1 , 1 , 0 , 1 , 1 } ) ; \n     DecodingContext c = new DecodingContext ( ) ; \n     int intraMode = 0 ; \n     Assert.assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));\n}",
                            "oracle": "Assert.assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/jcodec/codecs/vpx/vp9/ModeInfo.java",
                            "focalName": "readInterIntraUvMode",
                            "focalStartLn": 250,
                            "focalEndLn": 253,
                            "focalMethod": " public int readInterIntraUvMode ( int yMode , VPXBooleanDecoder decoder , DecodingContext c ) { \n short [ ] [ ] probs = c . getKfUVModeProbs ( ) ; \n return decoder . readTree ( TREE_INTRA_MODE , probs [ yMode ] ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "NalUnitTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCanWriteNalUnitFromValidNal",
                            "startLn": 24,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testCanWriteNalUnitFromValidNal ( ) {\n     byte [ ] data = new byte [ ] { \n ( byte ) 0x7C , ( byte ) 0x81 } ; \n     final NALUnit actual = NALUnit . read ( ByteBuffer . wrap ( data ) ) ; \n     assertEquals(\"STR\",3,actual.nal_ref_idc);\n}",
                            "oracle": "assertEquals(\"STR\",3,actual.nal_ref_idc);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnit.java",
                            "focalName": "read",
                            "focalStartLn": 23,
                            "focalEndLn": 30,
                            "focalMethod": " public static NALUnit read ( ByteBuffer _in ) { \n int nalu = _in . get ( ) & 0xff ; \n int nal_ref_idc = ( nalu > > 5 ) & 0x3 ; \n int nb = nalu & 0x1f ; \n NALUnitType type = NALUnitType . fromValue ( nb ) ; \n return new NALUnit ( type , nal_ref_idc ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ToJSONTest",
                    "classPath": "src/test/java/org/jcodec/common/tools/ToJSONTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCycle",
                            "startLn": 40,
                            "endLn": 53,
                            "testMethod": "@ Test ( timeout = 1000 ) public void testCycle ( ) {\n     Cl1 cl1 = new Cl1 ( ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     Assert.assertEquals(\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\",ToJSON.toJSON(cl1));\n}",
                            "oracle": "Assert.assertEquals(\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\",ToJSON.toJSON(cl1));",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/org/jcodec/common/tools/ToJSON.java",
                            "focalName": "toJSON",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " public static String toJSON ( Object obj ) { \n StringBuilder builder = new StringBuilder ( ) ; \n IntArrayList stack = IntArrayList . createIntArrayList ( ) ; \n toJSONSub ( obj , stack , builder ) ; \n return builder . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SeekHeadFactoryTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEstimeteSeekSize",
                            "startLn": 168,
                            "endLn": 173,
                            "testMethod": "@Test\n public void testEstimeteSeekSize ( ) throws Exception {\n     assertEquals(14,estimeteSeekSize(4,1));\n}",
                            "oracle": "assertEquals(14,estimeteSeekSize(4,1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/SeekHeadFactory.java",
                            "focalName": "estimeteSeekSize",
                            "focalStartLn": 120,
                            "focalEndLn": 126,
                            "focalMethod": " public static int estimeteSeekSize ( int idLength , int offsetSizeInBytes ) { \n int seekIdSize = SeekID . id . length + EbmlUtil . ebmlLength ( idLength ) + idLength ; \n int seekPositionSize = SeekPosition . id . length + EbmlUtil . ebmlLength ( offsetSizeInBytes ) + offsetSizeInBytes ; \n int seekSize = Seek . id . length + EbmlUtil . ebmlLength ( seekIdSize + seekPositionSize ) + seekIdSize + seekPositionSize ; \n return seekSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "H264UtilsTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/H264UtilsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAvcCToAnnexB",
                            "startLn": 44,
                            "endLn": 57,
                            "testMethod": "@Test\n public void testAvcCToAnnexB ( ) {\n     ArrayList < ByteBuffer > spsList = new ArrayList < ByteBuffer > ( ) ; \n     spsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 's' , 't' , 'a' , 'n' } ) ) ; \n     spsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 't' , 'h' , 'e' } ) ) ; \n     ArrayList < ByteBuffer > ppsList = new ArrayList < ByteBuffer > ( ) ; \n     ppsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 'm' , 'a' , 'n' } ) ) ; \n     ppsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 'c' , 'o' , 'o' , 'l' } ) ) ; \n     AvcCBox avcCBox = AvcCBox . createAvcCBox ( 66 , 0 , 42 , 0 , spsList , ppsList ) ; \n     byte [ ] res = NIOUtils . toArray ( H264Utils . avcCToAnnexB ( avcCBox ) ) ; \n     Assert.assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);",
                            "oracleLn": 8,
                            "focalFile": "src/main/java/org/jcodec/common/io/NIOUtils.java",
                            "focalName": "toArray",
                            "focalStartLn": 146,
                            "focalEndLn": 150,
                            "focalMethod": " public static byte [ ] toArray ( ByteBuffer buffer ) { \n byte [ ] result = new byte [ buffer . remaining ( ) ] ; \n buffer . duplicate ( ) . get ( result ) ; \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "InterModeInfoTest",
                    "classPath": "src/test/java/org/jcodec/codecs/vpx/vp9/InterModeInfoTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadIntraMode",
                            "startLn": 155,
                            "endLn": 166,
                            "testMethod": "@Test\n public void testReadIntraMode ( ) {\n     MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder ( new int [ ] { \n 44 , 68 , 18 , 165 , 217 } , new int [ ] { \n 1 , 1 , 1 , 0 , 0 } ) ; \n     DecodingContext c = new DecodingContext ( ) ; \n     int miCol = 9 ; \n     int miRow = 1 ; \n     int blSz = 3 ; \n     ArrayUtil . fill2D ( c . yModeProbs , Y_MODE_PROBS , 0 ) ; \n     Assert.assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));\n}",
                            "oracle": "Assert.assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/org/jcodec/codecs/vpx/vp9/InterModeInfo.java",
                            "focalName": "readInterIntraMode",
                            "focalStartLn": 1088,
                            "focalEndLn": 1091,
                            "focalMethod": " protected int readInterIntraMode ( int miCol , int miRow , int blSz , VPXBooleanDecoder decoder , DecodingContext c ) { \n short [ ] [ ] probs = c . getYModeProbs ( ) ; \n return decoder . readTree ( TREE_INTRA_MODE , probs [ size_group_lookup [ blSz ] ] ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "MkvBlockTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadingSignedInt",
                            "startLn": 143,
                            "endLn": 147,
                            "testMethod": "@Test\n public void testReadingSignedInt ( ) throws Exception {\n     Assert.assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));\n}",
                            "oracle": "Assert.assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java",
                            "focalName": "ebmlDecodeSigned",
                            "focalStartLn": 345,
                            "focalEndLn": 360,
                            "focalMethod": " static public long ebmlDecodeSigned ( ByteBuffer source ) { \n byte firstByte = source . get ( ) ; \n int size = EbmlUtil . computeLength ( firstByte ) ; \n if ( size == 0 ) throw new RuntimeException ( \"STR\" ) ; \n long value = firstByte & ( 0xFF > > > size ) ; \n int remaining = size - 1 ; \n while ( remaining > 0 ) { \n value = ( value << 8 ) | ( source . get ( ) & 0xff ) ; \n remaining -- ; \n } return value - signedComplement [ size ] ; \n } "
                        },
                        {
                            "testName": "testEbml",
                            "startLn": 38,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testEbml ( ) {\n     int [ ] _in = new int [ ] { \n 187 , 630 , 255 , 60 , 0xFFFFFF } ; \n     long [ ] expecteds = new long [ ] { \n 187 , 443 , - 375 , - 195 } ; \n     assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));\n}",
                            "oracle": "assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java",
                            "focalName": "calcEbmlLacingDiffs",
                            "focalStartLn": 362,
                            "focalEndLn": 370,
                            "focalMethod": " public static long [ ] calcEbmlLacingDiffs ( int [ ] laceSizes ) { \n int lacesCount = laceSizes . length - 1 ; \n long [ ] out = new long [ lacesCount ] ; \n out [ 0 ] = ( int ) laceSizes [ 0 ] ; \n for ( int i = 1 ; \n i < lacesCount ; \n i ++ ) { \n out [ i ] = laceSizes [ i ] - laceSizes [ i - 1 ] ; \n } return out ; \n } "
                        }
                    ]
                },
                {
                    "className": "Yuv444jToYuv420jTest",
                    "classPath": "src/test/java/org/jcodec/scale/Yuv444jToYuv420jTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEvenEven",
                            "startLn": 10,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testEvenEven ( ) {\n     byte [ ] [ ] srcPix = { \n { \n 30 , 50 , 100 , 120 } , { \n 40 , 90 , 20 , 50 } , { \n 30 , 60 , 100 , 120 } } ; \n     byte [ ] [ ] expPix = { \n { \n 30 , 50 , 100 , 120 } , { \n 50 } , { \n 78 } } ; \n     Picture src = Picture . createPicture ( 2 , 2 , srcPix , ColorSpace . YUV444J ) ; \n     Picture dst = Picture . create ( 2 , 2 , ColorSpace . YUV420J ) ; \n     Transform transform = ColorUtil . getTransform ( src . getColor ( ) , dst . getColor ( ) ) ; \n     Assert.assertNotNull(transform);\n}",
                            "oracle": "Assert.assertNotNull(transform);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/org/jcodec/scale/ColorUtil.java",
                            "focalName": "getTransform",
                            "focalStartLn": 60,
                            "focalEndLn": 64,
                            "focalMethod": " public static Transform getTransform ( ColorSpace from , ColorSpace to ) { \n Map < ColorSpace , Transform > map2 = map . get ( from ) ; \n return map2 == null ? null : map2 . get ( to ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EbmlUtilTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/EbmlUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEbmlBytes",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testEbmlBytes ( ) throws Exception {\n     Assert.assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/util/EbmlUtil.java",
                            "focalName": "ebmlEncode",
                            "focalStartLn": 41,
                            "focalEndLn": 43,
                            "focalMethod": " public static byte [ ] ebmlEncode ( long value ) { \n return ebmlEncodeLen ( value , ebmlLength ( value ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EbmlSintTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testBytePacking",
                            "startLn": 41,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testBytePacking ( ) throws Exception {\n     Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java",
                            "focalName": "convertToBytes",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " public static byte [ ] convertToBytes ( long val ) { \n int num = ebmlSignedLength ( val ) ; \n val += signedComplement [ num ] ; \n return EbmlUtil . ebmlEncodeLen ( val , num ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "KindAndNameTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/KindAndNameTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "equalsTest",
                            "startLn": 39,
                            "endLn": 61,
                            "testMethod": "@Test\n public void equalsTest ( ) {\n     KindAndName kindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName secondKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName thirdKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName fourthKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName fifthKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     assertTrue(kindAndName.equals(kindAndName));\n}",
                            "oracle": "assertTrue(kindAndName.equals(kindAndName));",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/KindAndName.java",
                            "focalName": "equals",
                            "focalStartLn": 54,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public boolean equals ( Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n KindAndName that = ( KindAndName ) o ; \n if ( ! kind . equals ( that . kind ) ) return false ; \n return name . equals ( that . name ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EnricherConfigTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/EnricherConfigTest.java",
                    "subRepo": "enricher/api",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 42,
                            "endLn": 52,
                            "testMethod": "@Test\n public void simple ( ) throws Exception {\n     Map < String , TreeMap > configMap = new HashMap < > ( ) ; \n     TreeMap map = new TreeMap ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     configMap . put ( \"STR\" , map ) ; \n     EnricherConfig config = new EnricherConfig ( \"STR\" , new Configuration . Builder ( ) . processorConfig ( new ProcessorConfig ( null , null , configMap ) ) . build ( ) ) ; \n     assertEquals(\"STR\",config.get(Config.type));\n}",
                            "oracle": "assertEquals(\"STR\",config.get(Config.type));",
                            "oracleLn": 5,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/EnricherConfig.java",
                            "focalName": "get",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public String get ( Configs . Key key ) { \n return get ( key , key . def ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorConfigTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "incAndExc",
                            "startLn": 47,
                            "endLn": 54,
                            "testMethod": "@Test\n public void incAndExc ( ) {\n     ProcessorConfig pConfig = new ProcessorConfig ( includes , excludes , config ) ; \n     List < TestNamed > filtered = pConfig . prepareProcessors ( getAllTestData ( ) , \"STR\" ) ; \n     assertTrue(contains(filtered,\"STR\"));\n}",
                            "oracle": "assertTrue(contains(filtered,\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        },
                        {
                            "testName": "inc",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void inc ( ) {\n     ProcessorConfig pConfig = new ProcessorConfig ( includes , null , config ) ; \n     List < TestNamed > filtered = pConfig . prepareProcessors ( getAllTestData ( ) , \"STR\" ) ; \n     assertTrue(contains(filtered,\"STR\"));\n}",
                            "oracle": "assertTrue(contains(filtered,\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProfileUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "multiple",
                            "startLn": 60,
                            "endLn": 66,
                            "testMethod": "@Test\n public void multiple ( ) throws IOException {\n     InputStream is = getClass ( ) . getResourceAsStream ( \"STR\" ) ; \n     assertNotNull(is);\n}",
                            "oracle": "assertNotNull(is);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/ProfileUtil.java",
                            "focalName": "fromYaml",
                            "focalStartLn": 233,
                            "focalEndLn": 236,
                            "focalMethod": " public static List < Profile > fromYaml ( InputStream is ) throws IOException { \n TypeReference < List < Profile > > typeRef = new TypeReference < List < Profile > > ( ) { \n } ; \n return mapper . readValue ( is , typeRef ) ; \n } "
                        },
                        {
                            "testName": "fromClasspath",
                            "startLn": 68,
                            "endLn": 73,
                            "testMethod": "@Test\n public void fromClasspath ( ) throws IOException {\n     List < Profile > profiles = ProfileUtil . readAllFromClasspath ( \"STR\" , \"STR\" ) ; \n     assertEquals(1,profiles.size());\n}",
                            "oracle": "assertEquals(1,profiles.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/ProfileUtil.java",
                            "focalName": "readAllFromClasspath",
                            "focalStartLn": 186,
                            "focalEndLn": 198,
                            "focalMethod": " public static List < Profile > readAllFromClasspath ( String name , String ext ) throws IOException { \n List < Profile > ret = new ArrayList < > ( ) ; \n for ( String location : getMetaInfProfilePaths ( ext ) ) { \n for ( String url : ClassUtil . getResources ( location ) ) { \n for ( Profile profile : fromYaml ( new URL ( url ) . openStream ( ) ) ) { \n if ( name . equals ( profile . getName ( ) ) ) { \n ret . add ( profile ) ; \n } } } } return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "InitContainerHandlerTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java",
                    "subRepo": "enricher/api",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 50,
                        "endLn": 53,
                        "setupMethod": "@Before\n public void setUp ( ) { \n handler = new InitContainerHandler ( log ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "removeOne",
                            "startLn": 84,
                            "endLn": 93,
                            "testMethod": "@Test\n public void removeOne ( ) {\n     PodTemplateSpecBuilder builder = getPodTemplateBuilder ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertTrue(handler.hasInitContainer(builder,\"STR\"));\n}",
                            "oracle": "assertTrue(handler.hasInitContainer(builder,\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java",
                            "focalName": "hasInitContainer",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public boolean hasInitContainer ( PodTemplateSpecBuilder builder , String name ) { \n return getInitContainer ( builder , name ) != null ; \n } "
                        },
                        {
                            "testName": "append",
                            "startLn": 65,
                            "endLn": 73,
                            "testMethod": "@Test\n public void append ( ) {\n     PodTemplateSpecBuilder builder = getPodTemplateBuilder ( \"STR\" , \"STR\" ) ; \n     assertFalse(handler.hasInitContainer(builder,\"STR\"));\n}",
                            "oracle": "assertFalse(handler.hasInitContainer(builder,\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java",
                            "focalName": "hasInitContainer",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public boolean hasInitContainer ( PodTemplateSpecBuilder builder , String name ) { \n return getInitContainer ( builder , name ) != null ; \n } "
                        }
                    ]
                },
                {
                    "className": "MapUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testPutIfAbsent",
                            "startLn": 40,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testPutIfAbsent ( ) {\n     Map < String , String > map = createMap ( \"STR\" , \"STR\" ) ; \n     MapUtil . putIfAbsent ( map , \"STR\" , \"STR\" ) ; \n     assertEquals(1,map.size());\n}",
                            "oracle": "assertEquals(1,map.size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java",
                            "focalName": "putIfAbsent",
                            "focalStartLn": 30,
                            "focalEndLn": 34,
                            "focalMethod": " public static void putIfAbsent ( Map < String , String > map , String name , String value ) { \n if ( map != null && ! map . containsKey ( name ) ) { \n map . put ( name , value ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ImageStreamServiceTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/service/openshift/ImageStreamServiceTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "should_return_newer_tag",
                            "startLn": 153,
                            "endLn": 165,
                            "testMethod": "@Test\n public void should_return_newer_tag ( ) throws Exception {\n     ImageStreamService service = new ImageStreamService ( client , log ) ; \n     TagEvent oldTag = new TagEvent ( \"STR\" , null , null , null ) ; \n     TagEvent latestTag = new TagEvent ( \"STR\" , null , null , null ) ; \n     TagEvent resultedTag = service . newerTag ( oldTag , latestTag ) ; \n     Assert.assertEquals(latestTag,resultedTag);\n}",
                            "oracle": "Assert.assertEquals(latestTag,resultedTag);",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/service/openshift/ImageStreamService.java",
                            "focalName": "newerTag",
                            "focalStartLn": 238,
                            "focalEndLn": 251,
                            "focalMethod": " public TagEvent newerTag ( TagEvent tag1 , TagEvent tag2 ) { \n Date tag1Date = extractDate ( tag1 ) ; \n Date tag2Date = extractDate ( tag2 ) ; \n if ( tag1Date == null ) { \n return tag2 ; \n } if ( tag2Date == null ) { \n return tag1 ; \n } return tag1Date . compareTo ( tag2Date ) > 0 ? tag1 : tag2 ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CucumberProResultsUrlBuilderTest",
                    "classPath": "src/test/java/io/cucumber/pro/results/CucumberProResultsUrlBuilderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "builds_url_for_saas_by_default",
                            "startLn": 12,
                            "endLn": 17,
                            "testMethod": "@Test\n public void builds_url_for_saas_by_default ( ) {\n     Config config = createConfig ( ) ; \n     String url = CucumberProResultsUrlBuilder . buildCucumberProUrl ( config , \"STR\" ) ; \n     assertEquals(\"STR\",url);\n}",
                            "oracle": "assertEquals(\"STR\",url);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/results/CucumberProResultsUrlBuilder.java",
                            "focalName": "buildCucumberProUrl",
                            "focalStartLn": 12,
                            "focalEndLn": 14,
                            "focalMethod": " static String buildCucumberProUrl ( final Config config , final String projectName ) { \n return getCucumberProUrl ( config ) + \"STR\" + encodeURIComponent ( projectName ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ConfigTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/ConfigTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "unset_value_is_null",
                            "startLn": 50,
                            "endLn": 55,
                            "testMethod": "@Test\n public void unset_value_is_null ( ) {\n     Config config = new Config ( ) ; \n     assertTrue(config.isNull(\"STR\"));\n}",
                            "oracle": "assertTrue(config.isNull(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "isNull",
                            "focalStartLn": 29,
                            "focalEndLn": 31,
                            "focalMethod": " public boolean isNull ( String key ) { \n return getIn ( normalize ( key ) , true ) . isNull ( ) ; \n } "
                        },
                        {
                            "testName": "set_value_is_not_null",
                            "startLn": 57,
                            "endLn": 64,
                            "testMethod": "@Test\n public void set_value_is_not_null ( ) {\n     Config config = new Config ( ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     assertFalse(config.isNull(\"STR\"));\n}",
                            "oracle": "assertFalse(config.isNull(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "isNull",
                            "focalStartLn": 29,
                            "focalEndLn": 31,
                            "focalMethod": " public boolean isNull ( String key ) { \n return getIn ( normalize ( key ) , true ) . isNull ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CiEnvironmentTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/CiEnvironmentTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "recognises_jenkins",
                            "startLn": 45,
                            "endLn": 56,
                            "testMethod": "@Test\n public void recognises_jenkins ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        },
                        {
                            "testName": "recognises_circle",
                            "startLn": 31,
                            "endLn": 43,
                            "testMethod": "@Test\n public void recognises_circle ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        },
                        {
                            "testName": "is_inactive_by_default",
                            "startLn": 12,
                            "endLn": 16,
                            "testMethod": "@Test\n public void is_inactive_by_default ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     assertNull(CIEnvironment.detect(env));\n}",
                            "oracle": "assertNull(CIEnvironment.detect(env));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "detect",
                            "focalStartLn": 21,
                            "focalEndLn": 30,
                            "focalMethod": " public static CIEnvironment detect ( Map < String , String > env ) { \n CIEnvironment ci ; \n if ( ( ci = detectBamboo ( env ) ) != null ) return ci ; \n if ( ( ci = detectCircle ( env ) ) != null ) return ci ; \n if ( ( ci = detectJenkins ( env ) ) != null ) return ci ; \n if ( ( ci = detectTfs ( env ) ) != null ) return ci ; \n if ( ( ci = detectTravis ( env ) ) != null ) return ci ; \n if ( ( ci = detectWercker ( env ) ) != null ) return ci ; \n return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "BambooEnvironmentVariablesTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "duplicates_bamboo_prefixed_env_vars_with_prefixless_copy",
                            "startLn": 11,
                            "endLn": 20,
                            "testMethod": "@Test\n public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy ( ) {\n     HashMap < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Map < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ; \n     assertEquals(\"STR\",convertedEnv.get(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java",
                            "focalName": "convert",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public Map < String , String > convert ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( String key : env . keySet ( ) ) { \n Matcher matcher = BAMBOO_PATTERN . matcher ( key ) ; \n if ( matcher . lookingAt ( ) ) { \n String value = env . get ( key ) ; \n String strippedVar = matcher . group ( 1 ) ; \n result . put ( strippedVar , value ) ; \n } } result . putAll ( env ) ; \n return result ; \n } "
                        },
                        {
                            "testName": "prefixless_env_var_takes_precendence",
                            "startLn": 22,
                            "endLn": 32,
                            "testMethod": "@Test\n public void prefixless_env_var_takes_precendence ( ) {\n     HashMap < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Map < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ; \n     assertEquals(\"STR\",convertedEnv.get(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java",
                            "focalName": "convert",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public Map < String , String > convert ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( String key : env . keySet ( ) ) { \n Matcher matcher = BAMBOO_PATTERN . matcher ( key ) ; \n if ( matcher . lookingAt ( ) ) { \n String value = env . get ( key ) ; \n String strippedVar = matcher . group ( 1 ) ; \n result . put ( strippedVar , value ) ; \n } } result . putAll ( env ) ; \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "EnvFilterTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "allows_overriding_mask",
                            "startLn": 39,
                            "endLn": 64,
                            "testMethod": "@Test\n public void allows_overriding_mask ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Config config = createConfig ( ) ; \n     new EnvironmentVariablesConfigLoader ( env ) . load ( config ) ; \n     EnvFilter envFilter = new EnvFilter ( config ) ; \n     Map < String , String > expectedEnv = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     assertEquals(expectedEnv,envFilter.filter(env));\n}",
                            "oracle": "assertEquals(expectedEnv,envFilter.filter(env));",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/EnvFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 18,
                            "focalEndLn": 25,
                            "focalMethod": " public Map < String , String > filter ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( Map . Entry < String , String > entry : env . entrySet ( ) ) { \n if ( ! maskPattern . matcher ( entry . getKey ( ) ) . matches ( ) ) result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "SystemLoggerTest",
                    "classPath": "src/test/java/io/cucumber/pro/SystemLoggerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "defaults_to_WARN_when_unknown_log_level_is_set",
                            "startLn": 30,
                            "endLn": 36,
                            "testMethod": "@Test\n public void defaults_to_WARN_when_unknown_log_level_is_set ( ) {\n     Config config = createConfig ( ) ; \n     config . set ( Keys . CUCUMBERPRO_LOGGING , \"STR\" ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.WARN,logger.level);\n}",
                            "oracle": "assertEquals(Logger.Level.WARN,logger.level);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "set",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public void set ( String key , String value ) { \n setIn ( normalize ( key ) , RealValue . fromString ( value ) ) ; \n } "
                        },
                        {
                            "testName": "is_info_level_by_default",
                            "startLn": 15,
                            "endLn": 20,
                            "testMethod": "@Test\n public void is_info_level_by_default ( ) {\n     Config config = createConfig ( ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.INFO,logger.level);\n}",
                            "oracle": "assertEquals(Logger.Level.INFO,logger.level);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/Keys.java",
                            "focalName": "createConfig",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public static Config createConfig ( ) { \n Config config = new Config ( ) ; \n config . set ( CUCUMBERPRO_CONNECTION_TIMEOUT , 5000 ) ; \n config . set ( CUCUMBERPRO_ENVMASK , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_LOGFILE ) ; \n config . set ( CUCUMBERPRO_LOGGING , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_PROFILE ) ; \n config . setNull ( CUCUMBERPRO_PROJECTNAME ) ; \n config . setNull ( CUCUMBERPRO_TOKEN ) ; \n config . set ( CUCUMBERPRO_URL , \"STR\" ) ; \n return config ; \n } "
                        }
                    ]
                },
                {
                    "className": "YamlConfigLoaderTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "merges",
                            "startLn": 29,
                            "endLn": 46,
                            "testMethod": "@Test\n public void merges ( ) {\n     Config config = new Config ( ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     String yaml = \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     assertEquals(yaml,config.toYaml(\"STR\"));\n}",
                            "oracle": "assertEquals(yaml,config.toYaml(\"STR\"));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "toYaml",
                            "focalStartLn": 100,
                            "focalEndLn": 108,
                            "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCleanupServerEnvBak",
                            "startLn": 115,
                            "endLn": 132,
                            "testMethod": "@Test\n public void testCleanupServerEnvBak ( ) throws Exception {\n     File serverEnv = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( serverEnv . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File serverEnvBak = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( serverEnvBak . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(serverEnv.exists());\n}",
                            "oracle": "assertTrue(serverEnv.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "cleanUpServerEnv",
                            "focalStartLn": 1923,
                            "focalEndLn": 1945,
                            "focalMethod": " public void cleanUpServerEnv ( ) { \n File serverEnvFile ; \n File serverEnvBackup ; \n try { \n serverEnvBackup = new File ( serverDirectory . getCanonicalPath ( ) + \"STR\" ) ; \n serverEnvFile = new File ( serverDirectory . getCanonicalPath ( ) + \"STR\" ) ; \n if ( serverEnvBackup . exists ( ) ) { \n try { \n Files . copy ( serverEnvBackup . toPath ( ) , serverEnvFile . toPath ( ) , StandardCopyOption . REPLACE_EXISTING ) ; \n } catch ( IOException e ) { \n error ( \"STR\" + e . getMessage ( ) ) ; \n } serverEnvBackup . delete ( ) ; \n } else { \n serverEnvFile . delete ( ) ; \n } } catch ( IOException e ) { \n error ( \"STR\" + e . getMessage ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testReadFileToString",
                            "startLn": 329,
                            "endLn": 336,
                            "testMethod": "@Test\n public void testReadFileToString ( ) throws Exception {\n     File tempFile = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( tempFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     String fileString = util . readFile ( tempFile ) ; \n     assertTrue(fileString.equals(\"STR\"));\n}",
                            "oracle": "assertTrue(fileString.equals(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "readFile",
                            "focalStartLn": 4015,
                            "focalEndLn": 4017,
                            "focalMethod": " public String readFile ( File file ) throws IOException { \n return FileUtils . readFileToString ( file , StandardCharsets . UTF_8 ) ; \n } "
                        },
                        {
                            "testName": "testCopyFile",
                            "startLn": 338,
                            "endLn": 347,
                            "testMethod": "@Test\n public void testCopyFile ( ) throws Exception {\n     File configFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( configFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     util . copyFile ( configFile , srcDir , targetDir , \"STR\" ) ; \n     File targetFile = new File ( targetDir , \"STR\" ) ; \n     assertTrue(targetFile.exists());\n}",
                            "oracle": "assertTrue(targetFile.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "copyFile",
                            "focalStartLn": 4093,
                            "focalEndLn": 4104,
                            "focalMethod": " public void copyFile ( File fileChanged , File srcDir , File targetDir , String targetFileName ) throws IOException { \n File targetResource = getTargetFile ( fileChanged , srcDir , targetDir , targetFileName ) ; \n try { \n FileUtils . copyFile ( fileChanged , targetResource ) ; \n info ( \"STR\" + fileChanged . getCanonicalPath ( ) + \"STR\" + targetResource . getCanonicalPath ( ) ) ; \n } catch ( FileNotFoundException ex ) { \n debug ( \"STR\" + fileChanged . getCanonicalPath ( ) ) ; \n } catch ( Exception ex ) { \n debug ( ex ) ; \n } } "
                        },
                        {
                            "testName": "testNotGeneratedConfigFiles",
                            "startLn": 428,
                            "endLn": 437,
                            "testMethod": "@Test\n public void testNotGeneratedConfigFiles ( ) throws Exception {\n     File sourceFile = new File ( configDirectory , \"STR\" ) ; \n     createTargetFile ( sourceFile . getName ( ) , false ) ; \n     assertFalse(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));\n}",
                            "oracle": "assertFalse(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "isGeneratedConfigFile",
                            "focalStartLn": 3989,
                            "focalEndLn": 3992,
                            "focalMethod": " protected boolean isGeneratedConfigFile ( File fileChanged , File srcDir , File targetDir ) throws IOException { \n return ( fileChanged . getName ( ) . equals ( \"STR\" ) || fileChanged . getName ( ) . equals ( \"STR\" ) ) && isGeneratedTargetFile ( fileChanged , srcDir , targetDir ) ; \n } "
                        },
                        {
                            "testName": "testCleanTargetDir",
                            "startLn": 366,
                            "endLn": 388,
                            "testMethod": "@Test\n public void testCleanTargetDir ( ) throws Exception {\n     File tempClass = new File ( targetDir , \"STR\" ) ; \n     Files . write ( tempClass . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(tempClass.exists());\n}",
                            "oracle": "assertTrue(tempClass.exists());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "cleanTargetDir",
                            "focalStartLn": 4155,
                            "focalEndLn": 4170,
                            "focalMethod": " protected void cleanTargetDir ( File outputDirectory ) { \n File [ ] fList = outputDirectory . listFiles ( ) ; \n if ( fList != null ) { \n for ( File file : fList ) { \n if ( file . isFile ( ) && file . getName ( ) . toLowerCase ( ) . endsWith ( \"STR\" ) ) { \n file . delete ( ) ; \n info ( \"STR\" + file ) ; \n } else if ( file . isDirectory ( ) ) { \n cleanTargetDir ( file ) ; \n } } } if ( outputDirectory . listFiles ( ) . length == 0 ) { \n outputDirectory . delete ( ) ; \n } } "
                        },
                        {
                            "testName": "testRemoveSurroundingQuotes",
                            "startLn": 450,
                            "endLn": 471,
                            "testMethod": "@Test\n public void testRemoveSurroundingQuotes ( ) {\n     assertEquals(\"STR\",DevUtil.removeSurroundingQuotes(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",DevUtil.removeSurroundingQuotes(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "removeSurroundingQuotes",
                            "focalStartLn": 1681,
                            "focalEndLn": 1686,
                            "focalMethod": " protected static String removeSurroundingQuotes ( String str ) { \n if ( str != null && str . length ( ) >= 2 && ( ( str . startsWith ( \"STR\" ) && str . endsWith ( \"STR\" ) ) || ( str . startsWith ( \"STR\" ) && str . endsWith ( \"STR\" ) ) ) ) { \n return str . substring ( 1 , str . length ( ) - 1 ) ; \n } return str ; \n } "
                        },
                        {
                            "testName": "testGetFileFromConfigDirectory",
                            "startLn": 390,
                            "endLn": 399,
                            "testMethod": "@Test\n public void testGetFileFromConfigDirectory ( ) throws Exception {\n     DevUtil util = new DevTestUtil ( null , null , null , this . configDirectory , null , false , false ) ; \n     File tempTextFile = new File ( configDirectory , \"STR\" ) ; \n     Files . write ( tempTextFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File configFile = util . getFileFromConfigDirectory ( \"STR\" ) ; \n     assertTrue(configFile.exists());\n}",
                            "oracle": "assertTrue(configFile.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "getFileFromConfigDirectory",
                            "focalStartLn": 4277,
                            "focalEndLn": 4283,
                            "focalMethod": " protected File getFileFromConfigDirectory ( String file ) { \n File f = new File ( configDirectory , file ) ; \n if ( configDirectory != null && f . exists ( ) ) { \n return f ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "JavaCompilerOptionsTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSource",
                            "startLn": 55,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testSource ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     jco . setSource ( \"STR\" ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(3,result.size());\n}",
                            "oracle": "assertEquals(3,result.size());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java",
                            "focalName": "getOptions",
                            "focalStartLn": 51,
                            "focalEndLn": 60,
                            "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "tradier",
            "repoName": "dropwizard-raven",
            "subRepos": [],
            "commitSHA": "117c78b4879ba930d0187ae2874773646213d3d2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DroppingRavenLoggingFilterTest",
                    "classPath": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "verifyFilterDeniesSentryLoggers",
                            "startLn": 11,
                            "endLn": 19,
                            "testMethod": "@Test\n public void verifyFilterDeniesSentryLoggers ( ) {\n     final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter ( ) ; \n     filter . start ( ) ; \n     final LoggingEvent evt = new LoggingEvent ( ) ; \n     evt . setLoggerName ( \"STR\" ) ; \n     assertEquals(FilterReply.DENY,filter.decide(evt));\n}",
                            "oracle": "assertEquals(FilterReply.DENY,filter.decide(evt));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/tradier/raven/filters/DroppingRavenLoggingFilter.java",
                            "focalName": "decide",
                            "focalStartLn": 8,
                            "focalEndLn": 15,
                            "focalMethod": "@Override\n public FilterReply decide ( ILoggingEvent event ) { \n if ( event . getLoggerName ( ) . startsWith ( \"STR\" ) ) { \n return FilterReply . DENY ; \n } else { \n return FilterReply . NEUTRAL ; \n } } "
                        },
                        {
                            "testName": "verifyFilterAllowsNonSentryLoggers",
                            "startLn": 21,
                            "endLn": 29,
                            "testMethod": "@Test\n public void verifyFilterAllowsNonSentryLoggers ( ) {\n     final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter ( ) ; \n     filter . start ( ) ; \n     final LoggingEvent evt = new LoggingEvent ( ) ; \n     evt . setLoggerName ( \"STR\" ) ; \n     assertEquals(FilterReply.NEUTRAL,filter.decide(evt));\n}",
                            "oracle": "assertEquals(FilterReply.NEUTRAL,filter.decide(evt));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/tradier/raven/filters/DroppingRavenLoggingFilter.java",
                            "focalName": "decide",
                            "focalStartLn": 8,
                            "focalEndLn": 15,
                            "focalMethod": "@Override\n public FilterReply decide ( ILoggingEvent event ) { \n if ( event . getLoggerName ( ) . startsWith ( \"STR\" ) ) { \n return FilterReply . DENY ; \n } else { \n return FilterReply . NEUTRAL ; \n } } "
                        }
                    ]
                },
                {
                    "className": "RavenAppenderFactoryTest",
                    "classPath": "src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "hasValidDefaults",
                            "startLn": 27,
                            "endLn": 38,
                            "testMethod": "@Test\n public void hasValidDefaults ( ) throws IOException , ConfigurationException {\n     final RavenAppenderFactory factory = new RavenAppenderFactory ( ) ; \n     assertNull(\"STR\",factory.getDsn());\n}",
                            "oracle": "assertNull(\"STR\",factory.getDsn());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java",
                            "focalName": "getDsn",
                            "focalStartLn": 50,
                            "focalEndLn": 52,
                            "focalMethod": " public String getDsn ( ) { \n return dsn ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testQuerySort",
                            "startLn": 147,
                            "endLn": 155,
                            "testMethod": "@Test\n public void testQuerySort ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testRemoveAllQueryParams",
                            "startLn": 107,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testRemoveAllQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testProperURLEncodingWithBackSlash",
                            "startLn": 222,
                            "endLn": 233,
                            "testMethod": "@Test\n public void testProperURLEncodingWithBackSlash ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     String urlWithEscapedCharacters = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     URL testSourceUrl = new URL ( urlWithEscapedCharacters ) ; \n     String testUrl = urlWithEscapedCharacters ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testBothAnchorAndQueryFilter",
                            "startLn": 137,
                            "endLn": 145,
                            "testMethod": "@Test\n public void testBothAnchorAndQueryFilter ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testRemoveDupeQueryParams",
                            "startLn": 117,
                            "endLn": 125,
                            "testMethod": "@Test\n public void testRemoveDupeQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testLowerCasing",
                            "startLn": 265,
                            "endLn": 281,
                            "testMethod": "@Test\n public void testLowerCasing ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( false , false ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String inputURL = \"STR\" ; \n     String expectedResult = inputURL . toLowerCase ( ) ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                },
                {
                    "className": "WARCRecordFormatTest",
                    "classPath": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java",
                    "subRepo": "external/warc",
                    "classTests": [
                        {
                            "testName": "testGetDigestSha1RobotsTxt",
                            "startLn": 42,
                            "endLn": 49,
                            "testMethod": "@Test\n public void testGetDigestSha1RobotsTxt ( ) {\n     String robotsTxt = \"STR\" ; \n     byte [ ] content = robotsTxt . getBytes ( StandardCharsets . UTF_8 ) ; \n     String sha1str = \"STR\" ; \n     assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content));\n}",
                            "oracle": "assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content));",
                            "oracleLn": 3,
                            "focalFile": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java",
                            "focalName": "getDigestSha1",
                            "focalStartLn": 77,
                            "focalEndLn": 79,
                            "focalMethod": " public static String getDigestSha1 ( byte [ ] bytes ) { \n return \"STR\" + base32 . encodeAsString ( DigestUtils . sha1 ( bytes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicIndexingTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupIndexerBolt",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupIndexerBolt ( ) { \n bolt = new DummyIndexer ( ) ; \n setupIndexerBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFilterDocumentWithMetadata",
                            "startLn": 155,
                            "endLn": 173,
                            "testMethod": "@Test\n public void testFilterDocumentWithMetadata ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . metadataFilterParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "setValue",
                            "focalStartLn": 125,
                            "focalEndLn": 129,
                            "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } "
                        },
                        {
                            "testName": "testRelativeCanonicalURL",
                            "startLn": 76,
                            "endLn": 94,
                            "testMethod": "@Test\n public void testRelativeCanonicalURL ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . canonicalMetadataParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "setValue",
                            "focalStartLn": 125,
                            "focalEndLn": 129,
                            "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SiteMapParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/SiteMapParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 37,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new SiteMapParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNonSitemapParsing",
                            "startLn": 231,
                            "endLn": 239,
                            "testMethod": "@Test\n public void testNonSitemapParsing ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     parse ( \"STR\" , \"STR\" , new Metadata ( ) ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}",
                            "oracle": "Assert.assertEquals(1,output.getEmitted().size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FeedParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/FeedParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 34,
                        "endLn": 38,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new FeedParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNonFeedParsing",
                            "startLn": 93,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testNonFeedParsing ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     parse ( \"STR\" , \"STR\" , new Metadata ( ) ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}",
                            "oracle": "Assert.assertEquals(1,output.getEmitted().size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "WorkerQueryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n list = new LinkedList < WorkerData > ( ) ; \n agent1 = agentAddress ( 1 ) ; \n agent2 = agentAddress ( 2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "workerTags",
                            "startLn": 82,
                            "endLn": 93,
                            "testMethod": "@Test\n public void workerTags ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     WorkerQuery query = new WorkerQuery ( ) . setWorkerTags ( toMap ( \"STR\" , \"STR\" ) ) ; \n     List < WorkerData > result = query . execute ( list ) ; \n     assertEquals(asList(list.get(0),list.get(2)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(0),list.get(2)),result);",
                            "oracleLn": 6,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "SimulatorUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/SimulatorUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n setupFakeEnvironment ( ) ; \n agentsFile = ensureExistingFile ( getUserDir ( ) , \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLoadComponentRegister_emptyFile_withoutSizeCheck",
                            "startLn": 54,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testLoadComponentRegister_emptyFile_withoutSizeCheck ( ) {\n     registry = loadComponentRegister ( agentsFile , false ) ; \n     assertEquals(0,registry.agentCount());\n}",
                            "oracle": "assertEquals(0,registry.agentCount());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AgentsFileTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 29,
                        "endLn": 32,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n agentsFile = ensureExistingFile ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSave",
                            "startLn": 125,
                            "endLn": 143,
                            "testMethod": "@Test\n public void testSave ( ) {\n     registry = load ( agentsFile ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     assertEquals(2,registry.agentCount());\n}",
                            "oracle": "assertEquals(2,registry.agentCount());",
                            "oracleLn": 3,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimulatorPropertiesTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/SimulatorPropertiesTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 28,
                        "endLn": 32,
                        "setupMethod": "@Before\n public void before ( ) { \n this . simulatorHome = setupFakeEnvironment ( ) ; \n this . simulatorProperties = new SimulatorProperties ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetCoordinatorPort",
                            "startLn": 210,
                            "endLn": 213,
                            "testMethod": "@Test\n public void testGetCoordinatorPort ( ) {\n     assertEquals(0,simulatorProperties.getCoordinatorPort());\n}",
                            "oracle": "assertEquals(0,simulatorProperties.getCoordinatorPort());",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/SimulatorProperties.java",
                            "focalName": "getCoordinatorPort",
                            "focalStartLn": 219,
                            "focalEndLn": 221,
                            "focalMethod": " public int getCoordinatorPort ( ) { \n return parseInt ( get ( \"STR\" , \"STR\" ) ) ; \n } "
                        },
                        {
                            "testName": "testGet_withDefaultValue_defaultIsUsed",
                            "startLn": 190,
                            "endLn": 193,
                            "testMethod": "@Test\n public void testGet_withDefaultValue_defaultIsUsed ( ) {\n     assertEquals(\"STR\",simulatorProperties.get(\"STR\",\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",simulatorProperties.get(\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/SimulatorProperties.java",
                            "focalName": "get",
                            "focalStartLn": 271,
                            "focalEndLn": 303,
                            "focalMethod": " public String get ( String name , String defaultValue ) { \n Value value = properties . get ( name ) ; \n String result = null ; \n if ( value != null && ! value . isDefault ) { \n result = value . text ; \n } if ( result == null ) { \n result = System . getProperty ( name ) ; \n } if ( result == null ) { \n result = System . getenv ( name ) ; \n } if ( result == null && value != null ) { \n result = value . text ; \n } if ( result == null ) { \n result = defaultValue ; \n } return fixValue ( name , result ) ; \n } "
                        },
                        {
                            "testName": "testGet_CLOUD_IDENTITY",
                            "startLn": 220,
                            "endLn": 229,
                            "testMethod": "@Test\n public void testGet_CLOUD_IDENTITY ( ) {\n     File identityFile = new File ( simulatorHome , \"STR\" ) ; \n     appendText ( \"STR\" , identityFile ) ; \n     File customFile = new File ( simulatorHome , \"STR\" ) ; \n     initProperty ( customFile , CLOUD_IDENTITY , identityFile . getAbsolutePath ( ) ) ; \n     assertEquals(\"STR\",simulatorProperties.getCloudIdentity());\n}",
                            "oracle": "assertEquals(\"STR\",simulatorProperties.getCloudIdentity());",
                            "oracleLn": 4,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/SimulatorProperties.java",
                            "focalName": "getCloudIdentity",
                            "focalStartLn": 239,
                            "focalEndLn": 241,
                            "focalMethod": " public String getCloudIdentity ( ) { \n return loadDirectOrFile ( CLOUD_IDENTITY ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestExceptionTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testConstructor_withMessageFormat_withException",
                            "startLn": 38,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testConstructor_withMessageFormat_withException ( ) {\n     Throwable cause = new RuntimeException ( ) ; \n     TestException exception = new TestException ( \"STR\" , 1 , 2 , \"STR\" , cause ) ; \n     assertEquals(\"STR\",exception.getMessage());\n}",
                            "oracle": "assertEquals(\"STR\",exception.getMessage());",
                            "oracleLn": 2,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/test/TestException.java",
                            "focalName": "TestException",
                            "focalStartLn": 35,
                            "focalEndLn": 42,
                            "focalMethod": " public TestException ( String message , Object ... args ) { \n super ( format ( message , args ) ) ; \n Object lastArg = args [ args . length - 1 ] ; \n if ( lastArg instanceof Throwable ) { \n initCause ( ( Throwable ) lastArg ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ExceptionReporterTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ExceptionReporterTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 22,
                        "endLn": 26,
                        "setupMethod": "@Before\n public void before ( ) { \n setupFakeUserDir ( ) ; \n ExceptionReporter . reset ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testReport",
                            "startLn": 47,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testReport ( ) {\n     report ( \"STR\" , new RuntimeException ( \"STR\" ) ) ; \n     File exceptionFile = new File ( getUserDir ( ) , \"STR\" ) ; \n     assertTrue(exceptionFile.exists());\n}",
                            "oracle": "assertTrue(exceptionFile.exists());",
                            "oracleLn": 2,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/FileUtils.java",
                            "focalName": "getUserDir",
                            "focalStartLn": 356,
                            "focalEndLn": 359,
                            "focalMethod": " public static File getUserDir ( ) { \n String userDirTest = System . getProperty ( \"STR\" ) ; \n return userDirTest == null ? new File ( System . getProperty ( \"STR\" ) ) : new File ( userDirTest ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_bind0_NumericalTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_Short",
                            "startLn": 63,
                            "endLn": 70,
                            "testMethod": "@Test\n public void bind_Short ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        },
                        {
                            "testName": "bind_shortWithUnderscore",
                            "startLn": 51,
                            "endLn": 55,
                            "testMethod": "@Test\n public void bind_shortWithUnderscore ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        },
                        {
                            "testName": "bind_Float",
                            "startLn": 150,
                            "endLn": 157,
                            "testMethod": "@Test\n public void bind_Float ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        },
                        {
                            "testName": "bind_long",
                            "startLn": 109,
                            "endLn": 113,
                            "testMethod": "@Test\n public void bind_long ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        },
                        {
                            "testName": "bind_Double",
                            "startLn": 176,
                            "endLn": 183,
                            "testMethod": "@Test\n public void bind_Double ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        },
                        {
                            "testName": "bind_int_whitespace",
                            "startLn": 89,
                            "endLn": 93,
                            "testMethod": "@Test\n public void bind_int_whitespace ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "TestContainer_BasicTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n ExceptionReporter . reset ( ) ; \n userDir = setupFakeUserDir ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTestInstance",
                            "startLn": 48,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testGetTestInstance ( ) {\n     BaseTest test = new BaseTest ( ) ; \n     testContainer = createTestContainer ( test ) ; \n     assertEquals(test,testContainer.getTestInstance());\n}",
                            "oracle": "assertEquals(test,testContainer.getTestInstance());",
                            "oracleLn": 2,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "getTestInstance",
                            "focalStartLn": 145,
                            "focalEndLn": 147,
                            "focalMethod": " public Object getTestInstance ( ) { \n return testInstance ; \n } "
                        }
                    ]
                },
                {
                    "className": "RegistryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetTest",
                            "startLn": 317,
                            "endLn": 329,
                            "testMethod": "@Test\n public void testGetTest ( ) {\n     TestSuite testSuite = new TestSuite ( ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     registry . addTests ( testSuite ) ; \n     TestData testData = registry . getTest ( \"STR\" ) ; \n     assertEquals(2,testData.getTestIndex());\n}",
                            "oracle": "assertEquals(2,testData.getTestIndex());",
                            "oracleLn": 6,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/TestData.java",
                            "focalName": "getTestIndex",
                            "focalStartLn": 72,
                            "focalEndLn": 74,
                            "focalMethod": " public int getTestIndex ( ) { \n return testIndex ; \n } "
                        }
                    ]
                },
                {
                    "className": "CloudProviderUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CloudProviderUtilsTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testIsLocal_withLocal",
                            "startLn": 44,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testIsLocal_withLocal ( ) {\n     assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));\n}",
                            "oracle": "assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CloudProviderUtils.java",
                            "focalName": "isLocal",
                            "focalStartLn": 55,
                            "focalEndLn": 57,
                            "focalMethod": " public static boolean isLocal ( String cloudProvider ) { \n return PROVIDER_LOCAL . equals ( cloudProvider ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "WorkerProcessManagerTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/agent/workerprocess/WorkerProcessManagerTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 45,
                        "setupMethod": "@Before\n public void before ( ) { \n workerAddress1 = workerAddress ( 1 , 1 ) ; \n workerAddress2 = workerAddress ( 1 , 2 ) ; \n workerProcess1 = new WorkerProcess ( workerAddress1 , workerAddress1 . toString ( ) , null ) ; \n workerProcess1 . setProcess ( mock ( Process . class ) ) ; \n workerProcess2 = new WorkerProcess ( workerAddress2 , workerAddress2 . toString ( ) , null ) ; \n workerProcess2 . setProcess ( mock ( Process . class ) ) ; \n Server server = mock ( Server . class ) ; \n workerProcessManager = new WorkerProcessManager ( server , workerAddress1 . getParent ( ) , \"STR\" ) ; \n workerProcessManager . add ( workerAddress1 , workerProcess1 ) ; \n workerProcessManager . add ( workerAddress2 , workerProcess2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate",
                            "startLn": 80,
                            "endLn": 90,
                            "testMethod": "@Test\n public void testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate ( ) {\n     long firstLastSeen = workerProcess1 . getLastSeen ( ) ; \n     long secondLastSeen = workerProcess2 . getLastSeen ( ) ; \n     sleepMillis ( 100 ) ; \n     workerProcessManager . updateLastSeenTimestamp ( workerAddress1 ) ; \n     assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());\n}",
                            "oracle": "assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());",
                            "oracleLn": 4,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/agent/workerprocess/WorkerProcess.java",
                            "focalName": "getLastSeen",
                            "focalStartLn": 55,
                            "focalEndLn": 57,
                            "focalMethod": " public long getLastSeen ( ) { \n return lastSeen ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimulatorAddressTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testToString_whenAgent",
                            "startLn": 113,
                            "endLn": 116,
                            "testMethod": "@Test\n public void testToString_whenAgent ( ) {\n     assertEquals(\"STR\",agentAddress(5).toString());\n}",
                            "oracle": "assertEquals(\"STR\",agentAddress(5).toString());",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "toString",
                            "focalStartLn": 162,
                            "focalEndLn": 171,
                            "focalMethod": "@Override\n public String toString ( ) { \n if ( addressLevel == COORDINATOR ) { \n return COORDINATOR_STRING ; \n } else if ( addressLevel == AGENT ) { \n return \"STR\" + agentIndex ; \n } else { \n return \"STR\" + agentIndex + \"STR\" + workerIndex ; \n } } "
                        },
                        {
                            "testName": "testToString_whenCoordinator",
                            "startLn": 108,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testToString_whenCoordinator ( ) {\n     assertEquals(\"STR\",coordinatorAddress().toString());\n}",
                            "oracle": "assertEquals(\"STR\",coordinatorAddress().toString());",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "toString",
                            "focalStartLn": 162,
                            "focalEndLn": 171,
                            "focalMethod": "@Override\n public String toString ( ) { \n if ( addressLevel == COORDINATOR ) { \n return COORDINATOR_STRING ; \n } else if ( addressLevel == AGENT ) { \n return \"STR\" + agentIndex ; \n } else { \n return \"STR\" + agentIndex + \"STR\" + workerIndex ; \n } } "
                        }
                    ]
                },
                {
                    "className": "BaseThreadStateTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/test/BaseThreadStateTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "setup",
                        "startLn": 12,
                        "endLn": 15,
                        "setupMethod": "@Before\n public void setup ( ) { \n state = new BaseThreadState ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "randomInt_withBound",
                            "startLn": 17,
                            "endLn": 22,
                            "testMethod": "@Test\n public void randomInt_withBound ( ) {\n     int value = state . randomInt ( 100 ) ; \n     assertTrue(value>=0);\n}",
                            "oracle": "assertTrue(value>=0);",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/test/BaseThreadState.java",
                            "focalName": "randomInt",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public int randomInt ( int bound ) { \n return random . nextInt ( bound ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ReflectionUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetField_typeMismatch",
                            "startLn": 83,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testGetField_typeMismatch ( ) {\n     Field field = getField ( GetFieldTest . class , \"STR\" , Integer . TYPE ) ; \n     assertNull(field);\n}",
                            "oracle": "assertNull(field);",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionUtils.java",
                            "focalName": "getField",
                            "focalStartLn": 47,
                            "focalEndLn": 58,
                            "focalMethod": " public static Field getField ( Class classType , String fieldName , Class fieldType ) { \n Field field ; \n do { \n field = findField ( classType , fieldName , fieldType ) ; \n if ( field != null ) { \n return field ; \n } classType = classType . getSuperclass ( ) ; \n } while ( classType != null ) ; \n return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "CliUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CliUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n oldSecurityManager = System . getSecurityManager ( ) ; \n System . setSecurityManager ( new ExitExceptionSecurityManager ( true ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInitOptionsWithHelp_noArgs",
                            "startLn": 45,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testInitOptionsWithHelp_noArgs ( ) {\n     OptionSet options = initOptionsWithHelp ( parser , new String [ ] { \n } ) ; \n     assertNotNull(options);\n}",
                            "oracle": "assertNotNull(options);",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CliUtils.java",
                            "focalName": "initOptionsWithHelp",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static OptionSet initOptionsWithHelp ( OptionParser parser , String [ ] args ) { \n return initOptionsWithHelp ( parser , null , args ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CommonUtils_SleepTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testSleepRandomNanosMinDelayZero",
                            "startLn": 173,
                            "endLn": 182,
                            "testMethod": "@Test\n public void testSleepRandomNanosMinDelayZero ( ) {\n     long started = System . nanoTime ( ) ; \n     sleepRandomNanos ( new Random ( ) , 0 ) ; \n     long duration = System . nanoTime ( ) - started ; \n     long durationLimit = ONE_SECOND_TO_NANOS ; \n     assertTrue(format(\"STR\",duration),duration>0);\n}",
                            "oracle": "assertTrue(format(\"STR\",duration),duration>0);",
                            "oracleLn": 4,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CommonUtils.java",
                            "focalName": "sleepRandomNanos",
                            "focalStartLn": 223,
                            "focalEndLn": 229,
                            "focalMethod": " public static void sleepRandomNanos ( Random random , long maxDelayNanos ) { \n if ( maxDelayNanos <= 0 ) { \n return ; \n } long randomValue = Math . abs ( random . nextLong ( ) + 1 ) ; \n sleepNanos ( randomValue % maxDelayNanos ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AnnotatedMethodRetrieverTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAtMostOneVoidMethodSkipArgsCheck",
                            "startLn": 18,
                            "endLn": 24,
                            "testMethod": "@Test\n public void testGetAtMostOneVoidMethodSkipArgsCheck ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkPER100",
                            "startLn": 448,
                            "endLn": 456,
                            "testMethod": "@Test\n public void checkPER100 ( ) {\n     assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkRURUKR",
                            "startLn": 280,
                            "endLn": 293,
                            "testMethod": "@Test\n public void checkRURUKR ( ) {\n     assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkUSDRUS",
                            "startLn": 342,
                            "endLn": 353,
                            "testMethod": "@Test\n public void checkUSDRUS ( ) {\n     assertEquals(\"STR\",moneyToStrUSDRUS.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUSDRUS.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkUAHRUS",
                            "startLn": 244,
                            "endLn": 255,
                            "testMethod": "@Test\n public void checkUAHRUS ( ) {\n     assertEquals(\"STR\",moneyToStrUAHRUS.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAHRUS.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "percentToStr",
                            "startLn": 465,
                            "endLn": 470,
                            "testMethod": "@Test\n public void percentToStr ( ) {\n     assertEquals(\"STR\",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));\n}",
                            "oracle": "assertEquals(\"STR\",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "percentToStr",
                            "focalStartLn": 390,
                            "focalEndLn": 392,
                            "focalMethod": " public static String percentToStr ( Double amount , Language lang ) { \n return percentToStr ( amount , lang , Pennies . TEXT ) ; \n } "
                        },
                        {
                            "testName": "checkEURRUS",
                            "startLn": 356,
                            "endLn": 367,
                            "testMethod": "@Test\n public void checkEURRUS ( ) {\n     assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkUAHRUSMinus",
                            "startLn": 258,
                            "endLn": 262,
                            "testMethod": "@Test\n public void checkUAHRUSMinus ( ) {\n     assertEquals(\"STR\",moneyToStrUAHRUS.convert(-V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAHRUS.convert(-V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkUAHUKMinus",
                            "startLn": 237,
                            "endLn": 241,
                            "testMethod": "@Test\n public void checkUAHUKMinus ( ) {\n     assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RpcConnectionManagerTest",
                    "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 81,
                        "endLn": 91,
                        "setupMethod": "@Before\n public void init ( ) { \n cm = new DefaultClientConnectionManager ( connectionSelectStrategy , connectionFactory , connectionEventHandler , connectionEventListener ) ; \n cm . setAddressParser ( addressParser ) ; \n cm . startup ( ) ; \n server = new BoltServer ( port ) ; \n server . start ( ) ; \n server . addConnectionEventProcessor ( ConnectionEventType . CONNECT , serverConnectProcessor ) ; \n this . addressParser . initUrlArgs ( url ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAddWconnithPoolKey_multiPoolKey",
                            "startLn": 117,
                            "endLn": 140,
                            "testMethod": "@Test\n public void testAddWconnithPoolKey_multiPoolKey ( ) throws InterruptedException {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn , poolKey ) ; \n     cm . add ( conn , \"STR\" ) ; \n     cm . add ( conn , \"STR\" ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(1,cm.count(poolKey));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        },
                        {
                            "testName": "testAddWithPoolKey",
                            "startLn": 110,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testAddWithPoolKey ( ) {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn , poolKey ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(1,cm.count(poolKey));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        },
                        {
                            "testName": "testAdd",
                            "startLn": 103,
                            "endLn": 108,
                            "testMethod": "@Test\n public void testAdd ( ) {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(1,cm.count(poolKey));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ClassCustomSerializerTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/serializer/ClassCustomSerializerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 76,
                        "endLn": 89,
                        "setupMethod": "@Before\n public void init ( ) { \n server = new BoltServer ( port ) ; \n server . start ( ) ; \n server . addConnectionEventProcessor ( ConnectionEventType . CONNECT , serverConnectProcessor ) ; \n server . addConnectionEventProcessor ( ConnectionEventType . CLOSE , serverDisConnectProcessor ) ; \n server . registerUserProcessor ( serverUserProcessor ) ; \n client = new RpcClient ( ) ; \n client . addConnectionEventProcessor ( ConnectionEventType . CONNECT , clientConnectProcessor ) ; \n client . addConnectionEventProcessor ( ConnectionEventType . CLOSE , clientDisConnectProcessor ) ; \n client . registerUserProcessor ( clientUserProcessor ) ; \n client . init ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInvokeContextCustomSerializer_SYNC",
                            "startLn": 369,
                            "endLn": 392,
                            "testMethod": "@Test\n public void testInvokeContextCustomSerializer_SYNC ( ) throws Exception {\n     NormalRequestBodyCustomSerializer_InvokeContext s1 = new NormalRequestBodyCustomSerializer_InvokeContext ( ) ; \n     NormalStringCustomSerializer_InvokeContext s2 = new NormalStringCustomSerializer_InvokeContext ( ) ; \n     CustomSerializerManager . registerCustomSerializer ( RequestBody . class . getName ( ) , s1 ) ; \n     CustomSerializerManager . registerCustomSerializer ( String . class . getName ( ) , s2 ) ; \n     RequestBody body = new RequestBody ( 1 , \"STR\" ) ; \n     InvokeContext invokeContext = new InvokeContext ( ) ; \n     invokeContext . putIfAbsent ( NormalRequestBodyCustomSerializer_InvokeContext . SERIALTYPE_KEY , NormalRequestBodyCustomSerializer_InvokeContext . SERIALTYPE1_value ) ; \n     String ret = ( String ) client . invokeSync ( addr , body , invokeContext , 1000 ) ; \n     Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+\"STR\",ret);\n}",
                            "oracle": "Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+\"STR\",ret);",
                            "oracleLn": 8,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "invokeSync",
                            "focalStartLn": 222,
                            "focalEndLn": 229,
                            "focalMethod": "@Override\n public Object invokeSync ( final String address , final Object request , final InvokeContext invokeContext , final int timeoutMillis ) throws RemotingException , InterruptedException { \n ensureStarted ( ) ; \n return this . rpcRemoting . invokeSync ( address , request , invokeContext , timeoutMillis ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GlobalSwitchTest",
                    "classPath": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "initClass",
                        "startLn": 38,
                        "endLn": 40,
                        "setupMethod": "@BeforeClass\n public static void initClass ( ) { \n } @Before\n public void init ( ) { \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSystemSettings_takesEffect_before_defaultvalue",
                            "startLn": 67,
                            "endLn": 78,
                            "testMethod": "@Test\n public void testSystemSettings_takesEffect_before_defaultvalue ( ) {\n     System . setProperty ( Configs . CONN_RECONNECT_SWITCH , \"STR\" ) ; \n     System . setProperty ( Configs . CONN_MONITOR_SWITCH , \"STR\" ) ; \n     client1 = new RpcClient ( ) ; \n     client2 = new RpcClient ( ) ; \n     Assert.assertTrue(client1.isConnectionMonitorSwitchOn());\n}",
                            "oracle": "Assert.assertTrue(client1.isConnectionMonitorSwitchOn());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "isConnectionMonitorSwitchOn",
                            "focalStartLn": 558,
                            "focalEndLn": 562,
                            "focalMethod": "@Override\n@Deprecated\n public boolean isConnectionMonitorSwitchOn ( ) { \n return option ( BoltClientOption . CONN_MONITOR_SWITCH ) ; \n } "
                        },
                        {
                            "testName": "testDefaultvalue",
                            "startLn": 54,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testDefaultvalue ( ) {\n     System . clearProperty ( Configs . CONN_RECONNECT_SWITCH ) ; \n     System . clearProperty ( Configs . CONN_MONITOR_SWITCH ) ; \n     client1 = new RpcClient ( ) ; \n     client2 = new RpcClient ( ) ; \n     Assert.assertFalse(client1.isConnectionMonitorSwitchOn());\n}",
                            "oracle": "Assert.assertFalse(client1.isConnectionMonitorSwitchOn());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "isConnectionMonitorSwitchOn",
                            "focalStartLn": 558,
                            "focalEndLn": 562,
                            "focalMethod": "@Override\n@Deprecated\n public boolean isConnectionMonitorSwitchOn ( ) { \n return option ( BoltClientOption . CONN_MONITOR_SWITCH ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LifeCycleTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/LifeCycleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAvailabilityCheck",
                            "startLn": 33,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testAvailabilityCheck ( ) {\n     Assert.assertTrue(testFunctionAvailable(false));\n}",
                            "oracle": "Assert.assertTrue(testFunctionAvailable(false));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "shutdown",
                            "focalStartLn": 99,
                            "focalEndLn": 118,
                            "focalMethod": "@Override\n public void shutdown ( ) { \n super . shutdown ( ) ; \n this . connectionManager . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n this . taskScanner . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n if ( reconnectManager != null ) { \n reconnectManager . shutdown ( ) ; \n } if ( connectionMonitor != null ) { \n connectionMonitor . shutdown ( ) ; \n } for ( UserProcessor < ? > userProcessor : userProcessors . values ( ) ) { \n if ( userProcessor . isStarted ( ) ) { \n userProcessor . shutdown ( ) ; \n } } } "
                        }
                    ]
                },
                {
                    "className": "RpcAddressParserTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testParserConnectTimeout",
                            "startLn": 70,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testParserConnectTimeout ( ) throws RemotingException {\n     String url = \"STR\" ; \n     RpcAddressParser parser = new RpcAddressParser ( ) ; \n     Url btUrl = parser . parse ( url ) ; \n     Assert.assertEquals(\"STR\",btUrl.getIp());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",btUrl.getIp());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/alipay/remoting/Url.java",
                            "focalName": "getIp",
                            "focalStartLn": 168,
                            "focalEndLn": 170,
                            "focalMethod": " public String getIp ( ) { \n return ip ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorManagerTest",
                    "classPath": "src/test/java/com/alipay/remoting/ProcessorManagerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testRegisterProcessor",
                            "startLn": 36,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testRegisterProcessor ( ) {\n     ProcessorManager processorManager = new ProcessorManager ( ) ; \n     CommandCode cmd1 = RpcCommandCode . RPC_REQUEST ; \n     CommandCode cmd2 = RpcCommandCode . RPC_REQUEST ; \n     RpcRequestProcessor rpcRequestProcessor1 = new RpcRequestProcessor ( ) ; \n     RpcRequestProcessor rpcRequestProcessor2 = new RpcRequestProcessor ( ) ; \n     processorManager . registerProcessor ( cmd1 , rpcRequestProcessor1 ) ; \n     processorManager . registerProcessor ( cmd2 , rpcRequestProcessor2 ) ; \n     Assert.assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);\n}",
                            "oracle": "Assert.assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/com/alipay/remoting/ProcessorManager.java",
                            "focalName": "getProcessor",
                            "focalStartLn": 103,
                            "focalEndLn": 109,
                            "focalMethod": " public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { \n RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; \n if ( processor != null ) { \n return processor ; \n } return this . defaultProcessor ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testGroupByCustomEquality",
                            "startLn": 175,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testGroupByCustomEquality ( ) {\n     final AEquality equality = new AEquality ( ) { \n @Override\n public boolean equals ( Object o1 , Object o2 ) { \n return ( ( Integer ) o1 ) % 2 == ( ( Integer ) o2 ) % 2 ; \n } @Override\n public int hashCode ( Object o ) { \n return 0 ; \n } } ; \n     final AFunction1NoThrow < String , Integer > len = new AFunction1NoThrow < String , Integer > ( ) { \n @Override\n public Integer apply ( String param ) { \n return param . length ( ) ; \n } } ; \n     final Map < AEqualsWrapper < Integer > , List < String > > grouped = ACollectionHelper . groupBy ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) , len , equality ) ; \n     assertEquals(2,grouped.size());\n}",
                            "oracle": "assertEquals(2,grouped.size());",
                            "oracleLn": 3,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "groupBy",
                            "focalStartLn": 498,
                            "focalEndLn": 510,
                            "focalMethod": " public static < T , X , E extends Throwable > Map < AEqualsWrapper < X > , List < T > > groupBy ( List < T > coll , AFunction1 < ? super T , ? extends X , E > f , AEquality keyEquality ) throws E { \n final Map < AEqualsWrapper < X > , List < T > > result = new HashMap < > ( ) ; \n for ( T o : coll ) { \n final AEqualsWrapper < X > key = new AEqualsWrapper < > ( keyEquality , f . apply ( o ) ) ; \n List < T > perKey = result . get ( key ) ; \n if ( perKey == null ) { \n perKey = createEmptyListOfType ( coll , false ) ; \n result . put ( key , perKey ) ; \n } perKey . add ( o ) ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testFlatten",
                            "startLn": 131,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testFlatten ( ) {\n     final Set < Set < String > > set = new HashSet < > ( ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ) ; \n     final Collection < String > flattened = ACollectionHelper . flatten ( set ) ; \n     assertEquals(5,flattened.size());\n}",
                            "oracle": "assertEquals(5,flattened.size());",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "flatten",
                            "focalStartLn": 245,
                            "focalEndLn": 253,
                            "focalMethod": " public static < T > Collection < T > flatten ( Iterable < ? extends Iterable < T > > coll ) { \n final List < T > result = new ArrayList < > ( ) ; \n for ( Iterable < T > o : coll ) { \n for ( T el : o ) { \n result . add ( el ) ; \n } } return result ; \n } "
                        },
                        {
                            "testName": "testMkStringFull",
                            "startLn": 37,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testMkStringFull ( ) {\n     assertEquals(\"STR\",ACollectionHelper.mkString(Arrays.asList(),\"STR\",\"STR\",\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",ACollectionHelper.mkString(Arrays.asList(),\"STR\",\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "mkString",
                            "focalStartLn": 72,
                            "focalEndLn": 88,
                            "focalMethod": " public static String mkString ( Iterable < ? > iterable , String prefix , String separator , String suffix ) { \n final StringBuilder result = new StringBuilder ( prefix ) ; \n boolean first = true ; \n for ( Object o : iterable ) { \n if ( first ) { \n first = false ; \n } else { \n result . append ( separator ) ; \n } result . append ( o ) ; \n } result . append ( suffix ) ; \n return result . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testFilter",
                            "startLn": 146,
                            "endLn": 158,
                            "testMethod": "@Test\n public void testFilter ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));\n}",
                            "oracle": "assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "filter",
                            "focalStartLn": 348,
                            "focalEndLn": 356,
                            "focalMethod": " public static < T , E extends Throwable > List < T > filter ( List < T > coll , APredicate < ? super T , E > pred ) throws E { \n final List < T > result = createEmptyListOfType ( coll , false ) ; \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n result . add ( o ) ; \n } } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "ADiGraphTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testForest",
                            "startLn": 135,
                            "endLn": 146,
                            "testMethod": "@Test\n public void testForest ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Arrays . asList ( edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) ) ) ; \n     assertFalse(graph.hasCycles());\n}",
                            "oracle": "assertFalse(graph.hasCycles());",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java",
                            "focalName": "hasCycles",
                            "focalStartLn": 301,
                            "focalEndLn": 303,
                            "focalMethod": " public boolean hasCycles ( ) { \n return ! minimalCycles ( ) . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "testEmpty",
                            "startLn": 184,
                            "endLn": 212,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Collections . < ASimpleEdge < String > > emptyList ( ) ) ; \n     assertTrue(graph.edges().isEmpty());\n}",
                            "oracle": "assertTrue(graph.edges().isEmpty());",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java",
                            "focalName": "edges",
                            "focalStartLn": 83,
                            "focalEndLn": 85,
                            "focalMethod": " public Collection < E > edges ( ) { \n return new ArrayIterable < > ( edges ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AJsonSerHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testArray3",
                            "startLn": 213,
                            "endLn": 226,
                            "testMethod": "@Test\n public void testArray3 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeBooleanLiteral ( true ) ; \n     ser . writeNumberLiteral ( 1 , 0 ) ; \n     ser . writeStringLiteral ( \"STR\" ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 8,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "endArray",
                            "focalStartLn": 67,
                            "focalEndLn": 72,
                            "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testDoubleWithFrac1",
                            "startLn": 60,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testDoubleWithFrac1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( 1.23 , 1 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "writeNumberLiteral",
                            "focalStartLn": 133,
                            "focalEndLn": 137,
                            "focalMethod": " public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testNegativeDouble",
                            "startLn": 119,
                            "endLn": 128,
                            "testMethod": "@Test\n public void testNegativeDouble ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( - 1.23 , 9 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "writeNumberLiteral",
                            "focalStartLn": 133,
                            "focalEndLn": 137,
                            "focalMethod": " public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; \n afterValueWritten ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StringHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/util/StringHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testBytesToHexString",
                            "startLn": 12,
                            "endLn": 19,
                            "testMethod": "@Test\n public void testBytesToHexString ( ) {\n     assertEquals(null,StringHelper.bytesToHexString(null));\n}",
                            "oracle": "assertEquals(null,StringHelper.bytesToHexString(null));",
                            "oracleLn": 0,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/util/StringHelper.java",
                            "focalName": "bytesToHexString",
                            "focalStartLn": 9,
                            "focalEndLn": 22,
                            "focalMethod": " public static String bytesToHexString ( byte [ ] bytes ) { \n if ( bytes == null ) { \n return null ; \n } final char [ ] hexChars = new char [ bytes . length * 2 ] ; \n int v ; \n for ( int j = 0 ; \n j < bytes . length ; \n j ++ ) { \n v = bytes [ j ] & 0xFF ; \n hexChars [ j * 2 ] = hexArray [ v > > > 4 ] ; \n hexChars [ j * 2 + 1 ] = hexArray [ v & 0x0F ] ; \n } return new String ( hexChars ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AsArrayViewTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsArrayViewTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFlatMapTokens",
                            "startLn": 59,
                            "endLn": 72,
                            "testMethod": "@Test\n@Override\n public void testFlatMapTokens ( ) {\n     final AFunction1NoThrow < String , List < String > > tokens = new AFunction1NoThrow < String , List < String > > ( ) { \n @Override\n public List < String > apply ( String param ) { \n return Arrays . asList ( param . split ( \"STR\" ) ) ; \n } } ; \n     assertEquals(createColl(),create().flatMap(tokens));\n}",
                            "oracle": "assertEquals(createColl(),create().flatMap(tokens));",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java",
                            "focalName": "flatMap",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": "@Override\n < X , E extends Throwable > ACollection < X > flatMap ( AFunction1 < ? super T , ? extends Iterable < X > , E > f ) throws E ; \n"
                        }
                    ]
                },
                {
                    "className": "AHashMapTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AHashMapTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testEqualityIdentity",
                            "startLn": 250,
                            "endLn": 279,
                            "testMethod": "@ SuppressWarnings ( \"STR\" ) @Test\n public void testEqualityIdentity ( ) {\n     AMap < String , String > map = AHashMap . empty ( AEquality . IDENTITY ) ; \n     final String key1 = new String ( \"STR\" ) ; \n     final String key2 = new String ( \"STR\" ) ; \n     final String key3 = new String ( \"STR\" ) ; \n     assertEquals(key1,key2);\n}",
                            "oracle": "assertEquals(key1,key2);",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AHashMap.java",
                            "focalName": "empty",
                            "focalStartLn": 41,
                            "focalEndLn": 47,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < K , V > AHashMap < K , V > empty ( AEquality equality ) { \n if ( equality == AEquality . EQUALS ) return ( AHashMap < K , V > ) emptyEquals ; \n if ( equality == AEquality . IDENTITY ) return ( AHashMap < K , V > ) emptyIdentity ; \n return new AHashMap < > ( equality ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoaderTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/LoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jarInClassPathNotModified",
                            "startLn": 63,
                            "endLn": 66,
                            "testMethod": "@Test\n public void jarInClassPathNotModified ( ) {\n     assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));\n}",
                            "oracle": "assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        },
                        {
                            "testName": "jarInClassPath",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void jarInClassPath ( ) {\n     assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));\n}",
                            "oracle": "assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        },
                        {
                            "testName": "fileNok",
                            "startLn": 125,
                            "endLn": 130,
                            "testMethod": "@ Test ( expected = ResourceNotFoundException . class ) public void fileNok ( ) {\n     final URL resource = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( \"STR\" ) ; \n     assertEquals(\"STR\",resource.getProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",resource.getProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/FileLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 34,
                            "focalEndLn": 43,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n try { \n final File file = new File ( base , name ) ; \n return file . lastModified ( ) > ifModifiedSince ? new FileInputStream ( file ) : null ; \n } catch ( FileNotFoundException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "JsonSchemaTest",
                    "classPath": "src/test/java/guru/nidi/loader/use/jsonschema/JsonSchemaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jsonSchemaWithLoader",
                            "startLn": 35,
                            "endLn": 39,
                            "testMethod": "@Test\n public void jsonSchemaWithLoader ( ) throws IOException , ProcessingException {\n     final JsonSchemaFactory factory = LoaderUriDownloader . createJsonSchemaFactory ( loader ) ; \n     assertTrue(validate(factory).isSuccess());\n}",
                            "oracle": "assertTrue(validate(factory).isSuccess());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/use/jsonschema/LoaderUriDownloader.java",
                            "focalName": "createJsonSchemaFactory",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static JsonSchemaFactory createJsonSchemaFactory ( Loader loader ) { \n return createJsonSchemaFactory ( loader , null , null , null ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "invalidMessageTypesTest",
                            "startLn": 307,
                            "endLn": 316,
                            "testMethod": "@Test\n public void invalidMessageTypesTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        },
                        {
                            "testName": "validMessageWithoutValidationTest",
                            "startLn": 123,
                            "endLn": 133,
                            "testMethod": "@Test\n public void validMessageWithoutValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     Assert.assertNotNull(parser.parse(sample1));\n}",
                            "oracle": "Assert.assertNotNull(parser.parse(sample1));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 121,
                            "focalEndLn": 123,
                            "focalMethod": " public CommonEvent parse ( String cefString ) { \n return this . parse ( cefString , false ) ; \n } "
                        },
                        {
                            "testName": "validStringMessageWithLocaleAndValidationTest",
                            "startLn": 196,
                            "endLn": 207,
                            "testMethod": "@Test\n public void validStringMessageWithLocaleAndValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));\n}",
                            "oracle": "Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 146,
                            "focalEndLn": 148,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate , Locale locale ) { \n return this . parse ( cefString , validate , false , locale ) ; \n } "
                        },
                        {
                            "testName": "invalidMessageValidationTest",
                            "startLn": 293,
                            "endLn": 305,
                            "testMethod": "@Test\n public void invalidMessageValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "MacAddressTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddressPeriodSeparator",
                            "startLn": 73,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testAddressPeriodSeparator ( ) {\n     final MacAddress macAddress = new MacAddress ( PERIOD_SEPARATOR ) ; \n     assertEquals(NORMALIZED_ADDRESS,macAddress.toString());\n}",
                            "oracle": "assertEquals(NORMALIZED_ADDRESS,macAddress.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "toString",
                            "focalStartLn": 93,
                            "focalEndLn": 104,
                            "focalMethod": "@Override\n public String toString ( ) { \n final StringBuilder builder = new StringBuilder ( ) ; \n for ( int i = 0 ; \n i < address . length ; \n i ++ ) { \n if ( i != 0 ) { \n builder . append ( STANDARD_SEPARATOR ) ; \n } builder . append ( String . format ( \"STR\" , address [ i ] ) ) ; \n } return builder . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testAddressCompareToNotEqual",
                            "startLn": 132,
                            "endLn": 137,
                            "testMethod": "@Test\n public void testAddressCompareToNotEqual ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     final int comparison = macAddress . compareTo ( new MacAddress ( LOCAL_ADDRESS ) ) ; \n     assertNotEquals(0,comparison);\n}",
                            "oracle": "assertNotEquals(0,comparison);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "compareTo",
                            "focalStartLn": 140,
                            "focalEndLn": 152,
                            "focalMethod": "@Override\n public int compareTo ( final MacAddress macAddress ) { \n int comparison = 0 ; \n for ( int i = 0 ; \n i < ADDRESS_LENGTH ; \n i ++ ) { \n comparison = address [ i ] - macAddress . address [ i ] ; \n if ( comparison != 0 ) { \n break ; \n } } return comparison ; \n } "
                        },
                        {
                            "testName": "testAddressMulticastNotLocal",
                            "startLn": 107,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testAddressMulticastNotLocal ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));\n}",
                            "oracle": "assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "equals",
                            "focalStartLn": 112,
                            "focalEndLn": 122,
                            "focalMethod": "@Override\n public boolean equals ( final Object object ) { \n boolean equals = false ; \n if ( object instanceof MacAddress ) { \n final MacAddress macAddress = ( MacAddress ) object ; \n equals = Arrays . equals ( address , macAddress . address ) ; \n } return equals ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHaving",
                            "startLn": 34,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testHaving ( ) {\n     sql . select ( \"STR\" , \"STR\" ) . from ( \"STR\" ) . groupBy ( \"STR\" ) . having ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        },
                        {
                            "testName": "testWhere",
                            "startLn": 26,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testWhere ( ) {\n     sql . select ( ) . from ( \"STR\" ) . where ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        },
                        {
                            "testName": "testSort",
                            "startLn": 44,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testSort ( ) {\n     sql . select ( ) . from ( \"STR\" ) . orderBy ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "SeqTest",
                    "classPath": "src/test/java/me/zzp/util/SeqTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAssignAt",
                            "startLn": 75,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testAssignAt ( ) {\n     int [ ] a = new int [ 5 ] ; \n     Seq . assignAt ( a , Seq . array ( 0 , 2 , 3 ) , 1 , 3 , 4 ) ; \n     Seq . assignAt ( a , Seq . array ( - 1 , - 4 ) , 5 , 2 ) ; \n     Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);\n}",
                            "oracle": "Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "assignAt",
                            "focalStartLn": 206,
                            "focalEndLn": 221,
                            "focalMethod": " public static int [ ] assignAt ( int [ ] a , Integer [ ] indexes , int ... values ) { \n if ( indexes . length != values . length ) { \n throw new IllegalArgumentException ( String . format ( \"STR\" , indexes . length , values . length ) ) ; \n } for ( int i = 0 ; \n i < indexes . length ; \n i ++ ) { \n int index = indexes [ i ] ; \n if ( 0 <= index && index < a . length ) { \n a [ index ] = values [ i ] ; \n } else if ( - a . length <= index && index < 0 ) { \n a [ a . length + index ] = values [ i ] ; \n } else { \n throw new ArrayIndexOutOfBoundsException ( index ) ; \n } } return a ; \n } "
                        },
                        {
                            "testName": "testJoinListNull",
                            "startLn": 19,
                            "endLn": 22,
                            "testMethod": "@Test\n public void testJoinListNull ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "join",
                            "focalStartLn": 83,
                            "focalEndLn": 102,
                            "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testConstantMap",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testConstantMap ( ) {\n     String [ ] actuals = Seq . map ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) , \"STR\" ) . toArray ( new String [ 0 ] ) ; \n     Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);\n}",
                            "oracle": "Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "map",
                            "focalStartLn": 256,
                            "focalEndLn": 262,
                            "focalMethod": " public static List < String > map ( Collection < ? > from , String format ) { \n List < String > to = new ArrayList < > ( from . size ( ) ) ; \n for ( Object e : from ) { \n to . add ( String . format ( format , e ) ) ; \n } return to ; \n } "
                        },
                        {
                            "testName": "testJoinDelimiterNull",
                            "startLn": 29,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testJoinDelimiterNull ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),null));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),null));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "join",
                            "focalStartLn": 83,
                            "focalEndLn": 102,
                            "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testCommaList",
                            "startLn": 39,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testCommaList ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "join",
                            "focalStartLn": 83,
                            "focalEndLn": 102,
                            "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trung",
            "repoName": "InMemoryJavaCompiler",
            "subRepos": [],
            "commitSHA": "d84c404975dc308ee5a418c5af8a6629c5e6c995",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InMemoryJavaCompilerTest",
                    "classPath": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "compile_WhenIgnoreWarnings",
                            "startLn": 88,
                            "endLn": 99,
                            "testMethod": "@Test\n public void compile_WhenIgnoreWarnings ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . ignoreWarnings ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     List < ? > res = ( List < ? > ) helloClass . getMethod ( \"STR\" ) . invoke ( helloClass . newInstance ( ) ) ; \n     Assert.assertEquals(0,res.size());\n}",
                            "oracle": "Assert.assertEquals(0,res.size());",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        },
                        {
                            "testName": "compile_WhenTypical",
                            "startLn": 19,
                            "endLn": 31,
                            "testMethod": "@Test\n public void compile_WhenTypical ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     Assert.assertNotNull(helloClass);\n}",
                            "oracle": "Assert.assertNotNull(helloClass);",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        },
                        {
                            "testName": "compile_WhenSourceContainsInnerClasses",
                            "startLn": 48,
                            "endLn": 61,
                            "testMethod": "@Test\n public void compile_WhenSourceContainsInnerClasses ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     Assert.assertNotNull(helloClass);\n}",
                            "oracle": "Assert.assertNotNull(helloClass);",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "ce\u013cu",
                            "startLn": 165,
                            "endLn": 176,
                            "testMethod": "@Test\n public void ce\u013cu ( ) {\n     Word ce\u013cu = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(ce\u013cu.isRecognized());\n}",
                            "oracle": "assertTrue(ce\u013cu.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "gunta19dec_3",
                            "startLn": 1809,
                            "endLn": 1827,
                            "testMethod": "@Test\n public void gunta19dec_3 ( ) {\n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableVocative = true ; \n     loc\u012bt\u0101js . guessVerbs = false ; \n     loc\u012bt\u0101js . guessParticiples = false ; \n     loc\u012bt\u0101js . guessAdjectives = false ; \n     loc\u012bt\u0101js . guessInflexibleNouns = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     Word v\u0101rds = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(v\u0101rds.isRecognized());\n}",
                            "oracle": "assertTrue(v\u0101rds.isRecognized());",
                            "oracleLn": 8,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "l\u016bz\u012bs",
                            "startLn": 1026,
                            "endLn": 1031,
                            "testMethod": "@Test\n public void l\u016bz\u012bs ( ) {\n     Word l\u016bz\u012bs = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(l\u016bz\u012bs.isRecognized());\n}",
                            "oracle": "assertTrue(l\u016bz\u012bs.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "izskanjas",
                            "startLn": 2157,
                            "endLn": 2169,
                            "testMethod": "@Test\n public void izskanjas ( ) {\n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableVocative = false ; \n     loc\u012bt\u0101js . guessVerbs = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     Word austrumlatvija = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(austrumlatvija.isRecognized());\n}",
                            "oracle": "assertTrue(austrumlatvija.isRecognized());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "pl\u0101ns_B",
                            "startLn": 2896,
                            "endLn": 2901,
                            "testMethod": "@Test\n public void pl\u0101ns_B ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "inflexible_genitive_generation",
                            "startLn": 3865,
                            "endLn": 3870,
                            "testMethod": "@Test\n public void inflexible_genitive_generation ( ) {\n     List < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     assertEquals(1,formas.size());\n}",
                            "oracle": "assertEquals(1,formas.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java",
                            "focalName": "generateInflections",
                            "focalStartLn": 639,
                            "focalEndLn": 641,
                            "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } "
                        },
                        {
                            "testName": "l\u012bstiiet",
                            "startLn": 2345,
                            "endLn": 2364,
                            "testMethod": "@Test\n public void l\u012bstiiet ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "laura_20130605",
                            "startLn": 1972,
                            "endLn": 1991,
                            "testMethod": "@Test\n public void laura_20130605 ( ) {\n     Word vi\u0146\u0161 = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(vi\u0146\u0161.isRecognized());\n}",
                            "oracle": "assertTrue(vi\u0146\u0161.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana",
                            "startLn": 2403,
                            "endLn": 2407,
                            "testMethod": "@Test\n public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana ( ) {\n     List < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     assertEquals(1,formas.size());\n}",
                            "oracle": "assertEquals(1,formas.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java",
                            "focalName": "generateInflections",
                            "focalStartLn": 639,
                            "focalEndLn": 641,
                            "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } "
                        },
                        {
                            "testName": "j\u0101m\u0101k",
                            "startLn": 706,
                            "endLn": 717,
                            "testMethod": "@Test\n public void j\u0101m\u0101k ( ) {\n     Word j\u0101m\u0101k = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(j\u0101m\u0101k.isRecognized());\n}",
                            "oracle": "assertTrue(j\u0101m\u0101k.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "\u017eirafe",
                            "startLn": 2791,
                            "endLn": 2797,
                            "testMethod": "@Test\n public void \u017eirafe ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JmxAttributePollerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 77,
                        "endLn": 111,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . polled001 = new TestDataClass001 ( ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polledObjects . add ( \"STR\" ) ; \n this . polledObjects . add ( polled001 ) ; \n this . mockMBeanAccessConnectionFactory = Mockito . mock ( MBeanAccessConnectionFactory . class ) ; \n this . mockScheduler = Mockito . mock ( Scheduler . class ) ; \n this . mockBatchCapableAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanAccessConnection . class ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockBatchPollProcessor = Mockito . mock ( BatchPollProcessor . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockTestHooks = Mockito . mock ( JmxAttributePoller . ConcurrencyTestHooks . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . poller = new JmxAttributePoller ( this . polledObjects ) ; \n this . processes = new LinkedList < > ( ) ; \n this . executionSlips = new LinkedList < > ( ) ; \n Answer < SchedulerProcessExecutionSlip > startProcessAnswer = createProcessExecutionSlipAnswer ( null , null ) ; \n Mockito . when ( this . mockScheduler . startProcess ( Mockito . any ( SchedulerProcess . class ) ) ) . thenAnswer ( startProcessAnswer ) ; \n this . testObjectName001 = new ObjectName ( this . TEST_ONAME_001_STR ) ; \n this . accessConnectionFactoryDesc = \"STR\" ; \n Mockito . when ( this . mockMBeanAccessConnectionFactory . getTargetDescription ( ) ) . thenReturn ( this . accessConnectionFactoryDesc ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetObjectQueryPreparer",
                            "startLn": 161,
                            "endLn": 168,
                            "testMethod": "@Test\n public void testGetSetObjectQueryPreparer ( ) throws Exception {\n     assertNotNull(this.poller.getObjectQueryPreparer());\n}",
                            "oracle": "assertNotNull(this.poller.getObjectQueryPreparer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java",
                            "focalName": "getObjectQueryPreparer",
                            "focalStartLn": 123,
                            "focalEndLn": 125,
                            "focalMethod": " public ObjectQueryPreparer getObjectQueryPreparer ( ) { \n return objectQueryPreparer ; \n } "
                        }
                    ]
                },
                {
                    "className": "JolokiaConnectionTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JolokiaConnectionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 76,
                        "endLn": 122,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJ4pClient = Mockito . mock ( J4pClient . class ) ; \n this . mockJ4pReadResponse1 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pReadResponse2 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pSearchResponse = PowerMockito . mock ( J4pSearchResponse . class ) ; \n this . jolokiaConnection = new JolokiaConnection ( this . mockJ4pClient ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . objectName1 = new ObjectName ( \"STR\" ) ; \n this . objectName2 = new ObjectName ( \"STR\" ) ; \n this . queryExp = new ObjectName ( \"STR\" ) ; \n this . att1 = \"STR\" ; \n this . att2 = \"STR\" ; \n this . att3 = \"STR\" ; \n this . att4 = \"STR\" ; \n this . value1 = \"STR\" ; \n this . value2 = \"STR\" ; \n this . value3 = \"STR\" ; \n this . value4 = \"STR\" ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att4 ) ) . thenReturn ( this . value4 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName1 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName2 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att4 ) ) . thenReturn ( this . value4 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetLogger",
                            "startLn": 131,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetSetLogger ( ) throws Exception {\n     assertNotNull(this.jolokiaConnection.getLog());\n}",
                            "oracle": "assertNotNull(this.jolokiaConnection.getLog());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JolokiaConnection.java",
                            "focalName": "getLog",
                            "focalStartLn": 60,
                            "focalEndLn": 62,
                            "focalMethod": " public Logger getLog ( ) { \n return log ; \n } "
                        }
                    ]
                },
                {
                    "className": "ObjectQueryPreparerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 61,
                        "endLn": 71,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . preparer = new ObjectQueryPreparer ( ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . mockParameterReplacer = Mockito . mock ( ParameterReplacer . class ) ; \n this . testTarget001 = new TestClass001 ( ) ; \n this . testTarget002 = new TestClass002 ( ) ; \n this . testTarget003 = new TestClass003 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPrepareObjectNoSetters",
                            "startLn": 166,
                            "endLn": 176,
                            "testMethod": "@Test\n public void testPrepareObjectNoSetters ( ) throws Exception {\n     this . initPreparer ( ) ; \n     ObjectQueryInfo result = this . preparer . prepareObjectQuery ( this . testTarget003 ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java",
                            "focalName": "prepareObjectQuery",
                            "focalStartLn": 69,
                            "focalEndLn": 109,
                            "focalMethod": " public ObjectQueryInfo prepareObjectQuery ( Object obj ) throws MalformedObjectNameException { \n ObjectQueryInfo result ; \n String onamePattern = MBeanAnnotationUtil . getLocationONamePattern ( obj ) ; \n if ( onamePattern != null ) { \n Map < String , Method > attributeSetters = MBeanAnnotationUtil . getAttributes ( obj ) ; \n if ( attributeSetters . size ( ) > 0 ) { \n String onameString ; \n if ( obj instanceof MBeanLocationParameterSource ) { \n onameString = this . parameterReplacer . replaceObjectNameParameters ( onamePattern , ( MBeanLocationParameterSource ) obj ) ; \n } else { \n onameString = onamePattern ; \n } ObjectName oname = new ObjectName ( onameString ) ; \n result = new ObjectQueryInfo ( obj , oname , attributeSetters ) ; \n } else { \n this . logNoAttributeThrottle . warn ( log , \"STR\" , onamePattern ) ; \n result = null ; \n } } else { \n log . warn ( \"STR\" ) ; \n result = null ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testGetSetParameterReplacer",
                            "startLn": 92,
                            "endLn": 99,
                            "testMethod": "@Test\n public void testGetSetParameterReplacer ( ) throws Exception {\n     assertNotNull(this.preparer.getParameterReplacer());\n}",
                            "oracle": "assertNotNull(this.preparer.getParameterReplacer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java",
                            "focalName": "getParameterReplacer",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public ParameterReplacer getParameterReplacer ( ) { \n return parameterReplacer ; \n } "
                        }
                    ]
                },
                {
                    "className": "DefaultJmxServiceUrlFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/DefaultJmxServiceUrlFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCreateJMXServiceUrl",
                            "startLn": 34,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testCreateJMXServiceUrl ( ) throws Exception {\n     DefaultJmxServiceUrlFactory factory = new DefaultJmxServiceUrlFactory ( ) ; \n     JMXServiceURL result ; \n     result = factory . createJMXServiceUrl ( \"STR\" ) ; \n     assertNotNull(result);\n}",
                            "oracle": "assertNotNull(result);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/DefaultJmxServiceUrlFactory.java",
                            "focalName": "createJMXServiceUrl",
                            "focalStartLn": 28,
                            "focalEndLn": 31,
                            "focalMethod": "@Override\n public JMXServiceURL createJMXServiceUrl ( String url ) throws MalformedURLException { \n return new JMXServiceURL ( url ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXJvmIdConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 54,
                        "endLn": 78,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . factory = new JMXJvmIdConnectionFactory ( \"STR\" ) ; \n this . mockVirtualMachine = Mockito . mock ( VirtualMachine . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAttacher = Mockito . mock ( VirtualMachineAttacher . class ) ; \n this . mockJmxServiceUrlFactory = Mockito . mock ( JMXServiceUrlFactory . class ) ; \n this . mockJmxConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMbeanConnectorFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMbeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockAgentProperties = Mockito . mock ( Properties . class ) ; \n this . mockSystemProperties = Mockito . mock ( Properties . class ) ; \n Mockito . when ( this . mockJmxServiceUrlFactory . createJMXServiceUrl ( \"STR\" ) ) . thenReturn ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockJmxConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMbeanConnectorFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMbeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetJmxServiceFactory",
                            "startLn": 97,
                            "endLn": 103,
                            "testMethod": "@Test\n public void testGetSetJmxServiceFactory ( ) {\n     assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);\n}",
                            "oracle": "assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java",
                            "focalName": "getJmxServiceUrlFactory",
                            "focalStartLn": 80,
                            "focalEndLn": 82,
                            "focalMethod": " public JMXServiceUrlFactory getJmxServiceUrlFactory ( ) { \n return jmxServiceUrlFactory ; \n } "
                        }
                    ]
                },
                {
                    "className": "MBeanAnnotationUtilTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . withoutAnnotation = new Object ( ) ; \n this . testAnnotation1 = new TestAnnotation1 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAttributes",
                            "startLn": 49,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testGetAttributes ( ) throws Exception {\n     Map < String , Method > atts = MBeanAnnotationUtil . getAttributes ( this . testAnnotation1 ) ; \n     assertEquals(2,atts.size());\n}",
                            "oracle": "assertEquals(2,atts.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtil.java",
                            "focalName": "getAttributes",
                            "focalStartLn": 37,
                            "focalEndLn": 54,
                            "focalMethod": " public static Map < String , Method > getAttributes ( Object mbeanLocation ) { \n Map < String , Method > result = new TreeMap < String , Method > ( ) ; \n Method [ ] methods = mbeanLocation . getClass ( ) . getMethods ( ) ; \n for ( Method oneMethod : methods ) { \n MBeanAttribute attribute = oneMethod . getAnnotation ( MBeanAttribute . class ) ; \n if ( attribute != null ) { \n result . put ( attribute . name ( ) , oneMethod ) ; \n } } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "BatchPollProcessorTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 64,
                        "endLn": 102,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . processor = new BatchPollProcessor ( ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polled001 = Mockito . mock ( TestClass001 . class ) ; \n this . polledObjects . add ( this . polled001 ) ; \n this . mockObjectQueryInfo001 = Mockito . mock ( ObjectQueryInfo . class ) ; \n this . objectName001 = Mockito . mock ( ObjectName . class ) ; \n this . attributeNames001 = new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . attributeSetters001 = new HashMap < > ( ) ; \n this . queryAttributeMap = new HashMap < > ( ) ; \n this . resultAttributeMap = new HashMap < > ( ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , String . class ) ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , int . class ) ) ; \n this . queryAttributeMap . put ( this . objectName001 , Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . resultAttributeMap . put ( this . objectName001 , Arrays . asList ( new Attribute ( \"STR\" , \"STR\" ) , new Attribute ( \"STR\" , 11 ) ) ) ; \n Mockito . when ( this . mockObjectQueryPreparer . prepareObjectQuery ( this . polled001 ) ) . thenReturn ( this . mockObjectQueryInfo001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getTarget ( ) ) . thenReturn ( this . polled001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getObjectName ( ) ) . thenReturn ( this . objectName001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeNames ( ) ) . thenReturn ( this . attributeNames001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeSetters ( ) ) . thenReturn ( this . attributeSetters001 ) ; \n Mockito . when ( this . mockAccessConnection . batchQueryAttributes ( this . createAttributeMapMatcher ( this . queryAttributeMap ) ) ) . thenReturn ( this . resultAttributeMap ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetObjectQueryPreparer",
                            "startLn": 123,
                            "endLn": 131,
                            "testMethod": "@Test\n public void testGetSetObjectQueryPreparer ( ) throws Exception {\n     assertNotNull(this.processor.getObjectQueryPreparer());\n}",
                            "oracle": "assertNotNull(this.processor.getObjectQueryPreparer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java",
                            "focalName": "getObjectQueryPreparer",
                            "focalStartLn": 54,
                            "focalEndLn": 56,
                            "focalMethod": " public ObjectQueryPreparer getObjectQueryPreparer ( ) { \n return objectQueryPreparer ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXRemoteUrlConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 48,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMBeanConnectionFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMBeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . factory = new JMXRemoteUrlConnectionFactory ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMBeanConnectionFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMBeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTargetDescription",
                            "startLn": 145,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetTargetDescription ( ) throws Exception {\n     Mockito . when ( this . mockJmxServiceUrl . toString ( ) ) . thenReturn ( \"STR\" ) ; \n     assertEquals(\"STR\",this.factory.getTargetDescription());\n}",
                            "oracle": "assertEquals(\"STR\",this.factory.getTargetDescription());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java",
                            "focalName": "getTargetDescription",
                            "focalStartLn": 100,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n public String getTargetDescription ( ) { \n return \"STR\" + this . url ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHandlerSetters",
                            "startLn": 557,
                            "endLn": 577,
                            "testMethod": "@Test\n public void testHandlerSetters ( ) throws Exception {\n     final UriResponder notFoundHandler = new GeneralHandler ( ) { \n } ; \n     final UriResponder notImplementedHandler = new GeneralHandler ( ) { \n } ; \n     TestRouter router = new TestRouter ( ) ; \n     RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD ( 9999 ) ; \n     Field routerField = RouterNanoHTTPD . class . getDeclaredField ( \"STR\" ) ; \n     routerField . setAccessible ( true ) ; \n     routerField . set ( routerNanoHttpd , router ) ; \n     routerNanoHttpd . setNotFoundHandler ( notFoundHandler . getClass ( ) ) ; \n     routerNanoHttpd . setNotImplementedHandler ( notImplementedHandler . getClass ( ) ) ; \n     Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);\n}",
                            "oracle": "Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);",
                            "oracleLn": 9,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "setNotImplementedHandler",
                            "focalStartLn": 653,
                            "focalEndLn": 655,
                            "focalMethod": " public < T extends UriResponder > void setNotImplementedHandler ( Class < T > handler ) { \n router . setNotImplemented ( handler ) ; \n } "
                        },
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullUri",
                            "startLn": 476,
                            "endLn": 482,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullUri ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 1,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        },
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullHandler",
                            "startLn": 484,
                            "endLn": 490,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullHandler ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 1,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CookieTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/CookieTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCookieWithExpiresString",
                            "startLn": 69,
                            "endLn": 78,
                            "testMethod": "@Test\n public void testCookieWithExpiresString ( ) {\n     Random random = new Random ( ) ; \n     int randomExpirationTime = random . nextInt ( 100 ) ; \n     String expiresString = Cookie . getHTTPTime ( randomExpirationTime ) ; \n     Cookie cookie = new Cookie ( \"STR\" , \"STR\" , expiresString ) ; \n     assertTrue(\"STR\",cookie.getHTTPHeader().contains(expiresString));\n}",
                            "oracle": "assertTrue(\"STR\",cookie.getHTTPHeader().contains(expiresString));",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "getHTTPHeader",
                            "focalStartLn": 74,
                            "focalEndLn": 77,
                            "focalMethod": " public String getHTTPHeader ( ) { \n String fmt = \"STR\" ; \n return String . format ( fmt , this . n , this . v , this . e ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CookieIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/CookieIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testCookieSentBackToClient",
                            "startLn": 89,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testCookieSentBackToClient ( ) throws Exception {\n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     HttpGet httpget = new HttpGet ( \"STR\" ) ; \n     ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; \n     this . httpclient . execute ( httpget , responseHandler ) ; \n     CookieStore cookies = this . httpclient . getCookieStore ( ) ; \n     assertEquals(1,cookies.getCookies().size());\n}",
                            "oracle": "assertEquals(1,cookies.getCookies().size());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "Cookie",
                            "focalStartLn": 62,
                            "focalEndLn": 66,
                            "focalMethod": " public Cookie ( String name , String value , int numDays ) { \n this . n = name ; \n this . v = value ; \n this . e = getHTTPTime ( numDays ) ; \n } "
                        },
                        {
                            "testName": "testServerReceivesCookiesSentFromClient",
                            "startLn": 125,
                            "endLn": 139,
                            "testMethod": "@Test\n public void testServerReceivesCookiesSentFromClient ( ) throws Exception {\n     BasicClientCookie clientCookie = new BasicClientCookie ( \"STR\" , \"STR\" ) ; \n     Calendar calendar = Calendar . getInstance ( ) ; \n     calendar . add ( Calendar . DAY_OF_YEAR , 100 ) ; \n     clientCookie . setExpiryDate ( calendar . getTime ( ) ) ; \n     clientCookie . setDomain ( \"STR\" ) ; \n     this . httpclient . getCookieStore ( ) . addCookie ( clientCookie ) ; \n     HttpGet httpget = new HttpGet ( \"STR\" ) ; \n     ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; \n     this . httpclient . execute ( httpget , responseHandler ) ; \n     assertEquals(1,this.testServer.cookiesReceived.size());\n}",
                            "oracle": "assertEquals(1,this.testServer.cookiesReceived.size());",
                            "oracleLn": 9,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "getHTTPHeader",
                            "focalStartLn": 74,
                            "focalEndLn": 77,
                            "focalMethod": " public String getHTTPHeader ( ) { \n String fmt = \"STR\" ; \n return String . format ( fmt , this . n , this . v , this . e ) ; \n } "
                        },
                        {
                            "testName": "testMultipleCookieSentBackToClient",
                            "startLn": 102,
                            "endLn": 113,
                            "testMethod": "@Test\n public void testMultipleCookieSentBackToClient ( ) throws Exception {\n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     HttpGet httpget = new HttpGet ( \"STR\" ) ; \n     ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; \n     this . httpclient . execute ( httpget , responseHandler ) ; \n     assertEquals(4,this.httpclient.getCookieStore().getCookies().size());\n}",
                            "oracle": "assertEquals(4,this.httpclient.getCookieStore().getCookies().size());",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "Cookie",
                            "focalStartLn": 62,
                            "focalEndLn": 66,
                            "focalMethod": " public Cookie ( String name , String value , int numDays ) { \n this . n = name ; \n this . v = value ; \n this . e = getHTTPTime ( numDays ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GZipIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "contentShouldNotBeGzippedIfContentLengthIsAddedManually",
                            "startLn": 152,
                            "endLn": 163,
                            "testMethod": "@Test\n public void contentShouldNotBeGzippedIfContentLengthIsAddedManually ( ) throws IOException {\n     testServer . response = Response . newFixedLengthResponse ( \"STR\" ) ; \n     testServer . response . addHeader ( \"STR\" , \"STR\" + ( \"STR\" . getBytes ( \"STR\" ) . length ) ) ; \n     HttpGet request = new HttpGet ( \"STR\" ) ; \n     request . addHeader ( \"STR\" , \"STR\" ) ; \n     HttpResponse response = httpclient . execute ( request ) ; \n     Header contentEncoding = response . getFirstHeader ( \"STR\" ) ; \n     assertNull(\"STR\",contentEncoding);\n}",
                            "oracle": "assertNull(\"STR\",contentEncoding);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "addHeader",
                            "focalStartLn": 175,
                            "focalEndLn": 177,
                            "focalMethod": " public void addHeader ( String name , String value ) { \n this . header . put ( name , value ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTwoQueries",
                            "startLn": 129,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testTwoQueries ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());",
                            "oracleLn": 2,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        },
                        {
                            "testName": "testGoodAndBadUrls",
                            "startLn": 149,
                            "endLn": 159,
                            "testMethod": "@Test\n public void testGoodAndBadUrls ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     client . setWsapiUrls ( new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ) ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());",
                            "oracleLn": 3,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        },
                        {
                            "testName": "testLongOTP",
                            "startLn": 123,
                            "endLn": 127,
                            "testMethod": "@Test\n public void testLongOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}",
                            "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));",
                            "oracleLn": 1,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "isValidOTPFormat",
                            "focalStartLn": 222,
                            "focalEndLn": 233,
                            "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } "
                        },
                        {
                            "testName": "testShortOTP",
                            "startLn": 117,
                            "endLn": 121,
                            "testMethod": "@Test\n public void testShortOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}",
                            "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));",
                            "oracleLn": 1,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "isValidOTPFormat",
                            "focalStartLn": 222,
                            "focalEndLn": 233,
                            "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } "
                        },
                        {
                            "testName": "testBadSignature",
                            "startLn": 103,
                            "endLn": 109,
                            "testMethod": "@Test\n public void testBadSignature ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     client . setKey ( \"STR\" ) ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());",
                            "oracleLn": 3,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        },
                        {
                            "testName": "testBadOTP",
                            "startLn": 76,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testBadOTP ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertNotNull(response);\n}",
                            "oracle": "assertNotNull(response);",
                            "oracleLn": 2,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "verify",
                            "focalStartLn": 70,
                            "focalEndLn": 70,
                            "focalMethod": " public abstract VerificationResponse verify ( String otp ) throws YubicoVerificationException , YubicoValidationFailure ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBuildUrl",
                            "startLn": 70,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testGetBuildUrl ( ) {\n     assertEquals(\"STR\",newShippable(env()).getBuildUrl());\n}",
                            "oracle": "assertEquals(\"STR\",newShippable(env()).getBuildUrl());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getBuildUrl",
                            "focalStartLn": 66,
                            "focalEndLn": 69,
                            "focalMethod": "@Override\n public String getBuildUrl ( ) { \n return \"STR\" + getProperty ( SHIPPABLE_BUILD_ID ) ; \n } "
                        },
                        {
                            "testName": "testGetEnvironment",
                            "startLn": 92,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testGetEnvironment ( ) {\n     Properties properties = new Shippable ( env ( ) ) . getEnvironment ( ) ; \n     assertEquals(5,properties.size());\n}",
                            "oracle": "assertEquals(5,properties.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getEnvironment",
                            "focalStartLn": 85,
                            "focalEndLn": 94,
                            "focalMethod": "@Override\n public Properties getEnvironment ( ) { \n Properties environment = new Properties ( ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_NUMBER ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_ID ) ) ; \n addProperty ( environment , \"STR\" , getBuildUrl ( ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BRANCH ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_COMMIT ) ) ; \n return environment ; \n } "
                        }
                    ]
                },
                {
                    "className": "TimestampParserTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testParseNull",
                            "startLn": 72,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testParseNull ( ) throws Exception {\n     Date parsed = new TimestampParser ( null ) . parse ( null ) ; \n     assertNull(parsed);\n}",
                            "oracle": "assertNull(parsed);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/TimestampParser.java",
                            "focalName": "parse",
                            "focalStartLn": 59,
                            "focalEndLn": 68,
                            "focalMethod": " public Date parse ( final String timestamp ) throws ProcessingException { \n if ( StringUtils . isBlank ( timestamp ) ) { \n return null ; \n } try { \n return parser . parse ( timestamp ) ; \n } catch ( Exception ex ) { \n throw new ProcessingException ( \"STR\" + timestamp + \"STR\" , ex ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ValidationExceptionTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/validation/ValidationExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExceptionWithMessage",
                            "startLn": 47,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testExceptionWithMessage ( ) {\n     ValidationException exception = new ValidationException ( MESSAGE ) ; \n     assertEquals(MESSAGE,exception.getMessage());\n}",
                            "oracle": "assertEquals(MESSAGE,exception.getMessage());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/validation/ValidationException.java",
                            "focalName": "ValidationException",
                            "focalStartLn": 35,
                            "focalEndLn": 37,
                            "focalMethod": " public ValidationException ( final String s ) { \n super ( s ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CoverallsProxyClientTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsProxyClientTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructorWithProxy",
                            "startLn": 41,
                            "endLn": 49,
                            "testMethod": "@Test\n public void testConstructorWithProxy ( ) {\n     Proxy proxy = new Proxy ( ) ; \n     proxy . setHost ( \"STR\" ) ; \n     proxy . setPort ( 8080 ) ; \n     proxy . setProtocol ( \"STR\" ) ; \n     assertNotNull(newCoverallsProxyClient(\"STR\",proxy));\n}",
                            "oracle": "assertNotNull(newCoverallsProxyClient(\"STR\",proxy));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsProxyClient.java",
                            "focalName": "CoverallsProxyClient",
                            "focalStartLn": 34,
                            "focalEndLn": 36,
                            "focalMethod": " public CoverallsProxyClient ( final String coverallsUrl , final Proxy proxy ) { \n super ( coverallsUrl , new HttpClientFactory ( coverallsUrl ) . proxy ( proxy ) . create ( ) , new ObjectMapper ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GeneralTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 60,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newGeneral(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newGeneral(env()).getName());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/General.java",
                            "focalName": "getName",
                            "focalStartLn": 52,
                            "focalEndLn": 55,
                            "focalMethod": "@Override\n public String getName ( ) { \n return getProperty ( CI_NAME ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SourceLoaderFactoryTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 65,
                        "endLn": 76,
                        "setupMethod": "@Before\n public void init ( ) throws Exception { \n rootSources = new File ( folder . getRoot ( ) , \"STR\" ) ; \n m1Sources = folder . newFolder ( \"STR\" , \"STR\" ) ; \n m2Sources = folder . newFolder ( \"STR\" , \"STR\" ) ; \n when ( root . getCollectedProjects ( ) ) . thenReturn ( Arrays . asList ( m1 , m2 ) ) ; \n when ( m1 . getCollectedProjects ( ) ) . thenReturn ( Collections . < MavenProject > emptyList ( ) ) ; \n when ( m2 . getCollectedProjects ( ) ) . thenReturn ( Collections . < MavenProject > emptyList ( ) ) ; \n when ( root . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( rootSources . getAbsolutePath ( ) ) ) ; \n when ( m1 . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( m1Sources . getAbsolutePath ( ) ) ) ; \n when ( m2 . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( m2Sources . getAbsolutePath ( ) ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateSourceLoaderWithAdditionalSourceDirectories",
                            "startLn": 84,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testCreateSourceLoaderWithAdditionalSourceDirectories ( ) throws Exception {\n     File s1 = new File ( folder . getRoot ( ) , \"STR\" ) ; \n     File s2 = folder . newFolder ( \"STR\" ) ; \n     SourceLoader sourceLoader = createSourceLoaderFactory ( \"STR\" ) . withSourceDirectories ( Arrays . asList ( s1 , s2 ) ) . createSourceLoader ( ) ; \n     assertNotNull(sourceLoader);\n}",
                            "oracle": "assertNotNull(sourceLoader);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactory.java",
                            "focalName": "createSourceLoader",
                            "focalStartLn": 63,
                            "focalEndLn": 92,
                            "focalMethod": " public SourceLoader createSourceLoader ( ) { \n MultiSourceLoader multiSourceLoader = new MultiSourceLoader ( ) ; \n List < File > directories = new ArrayList < > ( ) ; \n List < MavenProject > modules = new MavenProjectCollector ( project ) . collect ( ) ; \n for ( MavenProject module : modules ) { \n for ( String sourceRoot : module . getCompileSourceRoots ( ) ) { \n File sourceDirectory = new File ( sourceRoot ) ; \n directories . add ( sourceDirectory ) ; \n } } if ( sourceDirectories != null ) { \n directories . addAll ( sourceDirectories ) ; \n } for ( File directory : directories ) { \n if ( directory . exists ( ) && directory . isDirectory ( ) ) { \n DirectorySourceLoader moduleSourceLoader = new DirectorySourceLoader ( baseDir , directory , sourceEncoding ) ; \n multiSourceLoader . add ( moduleSourceLoader ) ; \n } } if ( scanForSources ) { \n for ( File directory : directories ) { \n if ( directory . exists ( ) && directory . isDirectory ( ) ) { \n ScanSourceLoader scanSourceLoader = new ScanSourceLoader ( baseDir , directory , sourceEncoding ) ; \n multiSourceLoader . add ( scanSourceLoader ) ; \n } } } return multiSourceLoader ; \n } "
                        }
                    ]
                },
                {
                    "className": "WerckerTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/WerckerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBranch",
                            "startLn": 74,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testGetBranch ( ) {\n     assertEquals(\"STR\",newWercker(env()).getBranch());\n}",
                            "oracle": "assertEquals(\"STR\",newWercker(env()).getBranch());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Wercker.java",
                            "focalName": "getBranch",
                            "focalStartLn": 68,
                            "focalEndLn": 71,
                            "focalMethod": "@Override\n public String getBranch ( ) { \n return getProperty ( WERCKER_BRANCH ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CircleTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIsSelectedForCircle",
                            "startLn": 55,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testIsSelectedForCircle ( ) {\n     assertTrue(newCircle(env()).isSelected());\n}",
                            "oracle": "assertTrue(newCircle(env()).isSelected());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java",
                            "focalName": "isSelected",
                            "focalStartLn": 49,
                            "focalEndLn": 52,
                            "focalMethod": "@Override\n public boolean isSelected ( ) { \n return ( getProperty ( CIRCLE ) != null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "JenkinsTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIsSelectedForNothing",
                            "startLn": 51,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testIsSelectedForNothing ( ) {\n     assertFalse(newJenkins(newHashMap<String,String>()).isSelected());\n}",
                            "oracle": "assertFalse(newJenkins(newHashMap<String,String>()).isSelected());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Jenkins.java",
                            "focalName": "isSelected",
                            "focalStartLn": 50,
                            "focalEndLn": 53,
                            "focalMethod": "@Override\n public boolean isSelected ( ) { \n return ( getProperty ( JENKINS_URL ) != null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BambooTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/BambooTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newBamboo(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newBamboo(env()).getName());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Bamboo.java",
                            "focalName": "getName",
                            "focalStartLn": 52,
                            "focalEndLn": 55,
                            "focalMethod": "@Override\n public String getName ( ) { \n return BAMBOO_NAME ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "puzzle_has_blank",
                            "startLn": 57,
                            "endLn": 62,
                            "testMethod": "@Test\n public void puzzle_has_blank ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     assertEquals(8,p.getBlankIndex());\n}",
                            "oracle": "assertEquals(8,p.getBlankIndex());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "getBlankIndex",
                            "focalStartLn": 80,
                            "focalEndLn": 87,
                            "focalMethod": " public int getBlankIndex ( ) { \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n if ( cells [ i ] == blank ) { \n return i ; \n } } return - 1 ; \n } "
                        },
                        {
                            "testName": "distance_to_solution_is_zero_when_solved",
                            "startLn": 160,
                            "endLn": 165,
                            "testMethod": "@Test\n public void distance_to_solution_is_zero_when_solved ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     assertEquals(0,p.getDistanceToGoal());\n}",
                            "oracle": "assertEquals(0,p.getDistanceToGoal());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "getDistanceToGoal",
                            "focalStartLn": 108,
                            "focalEndLn": 116,
                            "focalMethod": " public int getDistanceToGoal ( ) { \n int distance = 0 ; \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n distance += getDistance ( i , cells [ i ] ) ; \n } return distance ; \n } "
                        },
                        {
                            "testName": "same_cells_means_same_puzzle",
                            "startLn": 106,
                            "endLn": 112,
                            "testMethod": "@Test\n public void same_cells_means_same_puzzle ( ) {\n     Puzzle a = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     Puzzle b = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     assertEquals(a,b);\n}",
                            "oracle": "assertEquals(a,b);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "Puzzle",
                            "focalStartLn": 15,
                            "focalEndLn": 18,
                            "focalMethod": " public Puzzle ( int [ ] cells ) { \n this . cells = cells ; \n } "
                        }
                    ]
                },
                {
                    "className": "MultiTurtlePanelTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddTurtle",
                            "startLn": 53,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testAddTurtle ( ) throws Exception {\n     JUnitUtils . assumeNotHeadless ( ) ; \n     MultiTurtleWindow panel = new MultiTurtleWindow ( ) ; \n     panel . addTurtle ( new Turtle ( ) ) ; \n     assertEquals(1,panel.getTurtleCount());\n}",
                            "oracle": "assertEquals(1,panel.getTurtleCount());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/teachingextensions/WindowUtils/MultiTurtleWindow.java",
                            "focalName": "getTurtleCount",
                            "focalStartLn": 63,
                            "focalEndLn": 66,
                            "focalMethod": " public int getTurtleCount ( ) { \n return this . turtles . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PuzzleStateTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "equal_even_with_different_history",
                            "startLn": 148,
                            "endLn": 156,
                            "testMethod": "@Test\n public void equal_even_with_different_history ( ) {\n     Stack < PuzzleState . Direction > history = new Stack < > ( ) ; \n     history . add ( PuzzleState . Direction . Right ) ; \n     PuzzleState a = new PuzzleState ( getPuzzle ( 3 ) , history ) ; \n     PuzzleState b = new PuzzleState ( getPuzzle ( 3 ) ) ; \n     assertEquals(a,b);\n}",
                            "oracle": "assertEquals(a,b);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java",
                            "focalName": "PuzzleState",
                            "focalStartLn": 16,
                            "focalEndLn": 19,
                            "focalMethod": " public PuzzleState ( Puzzle puzzle ) { \n this ( puzzle , new Stack < Direction > ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FizzBuzzTDDTest",
                    "classPath": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "test10ReturnsBuzz",
                            "startLn": 40,
                            "endLn": 45,
                            "testMethod": "@Test\n public void test10ReturnsBuzz ( ) {\n     String result = FizzBuzzTDD . convert ( 10 ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingkidsprogramming/recipes/completed/section09final/FizzBuzzTDD.java",
                            "focalName": "convert",
                            "focalStartLn": 9,
                            "focalEndLn": 15,
                            "focalMethod": " public static String convert ( int i ) { \n if ( 0 == i % 15 ) { \n return \"STR\" ; \n } if ( 0 == i % 5 ) { \n return \"STR\" ; \n } if ( 0 == i % 3 ) { \n return \"STR\" ; \n } return \"STR\" + i ; \n } "
                        },
                        {
                            "testName": "test15ReturnsFizzBuzz",
                            "startLn": 46,
                            "endLn": 51,
                            "testMethod": "@Test\n public void test15ReturnsFizzBuzz ( ) {\n     String result = FizzBuzzTDD . convert ( 15 ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingkidsprogramming/recipes/completed/section09final/FizzBuzzTDD.java",
                            "focalName": "convert",
                            "focalStartLn": 9,
                            "focalEndLn": 15,
                            "focalMethod": " public static String convert ( int i ) { \n if ( 0 == i % 15 ) { \n return \"STR\" ; \n } if ( 0 == i % 5 ) { \n return \"STR\" ; \n } if ( 0 == i % 3 ) { \n return \"STR\" ; \n } return \"STR\" + i ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSameChars",
                            "startLn": 65,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "repeatChar",
                            "focalStartLn": 1233,
                            "focalEndLn": 1239,
                            "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } "
                        },
                        {
                            "testName": "testBitValue",
                            "startLn": 109,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testBitValue ( ) {\n     String bs = \"STR\" ; \n     BitSet b = CommUtil . bitSet ( bs . getBytes ( ) ) ; \n     Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "hexdump",
                            "focalStartLn": 1178,
                            "focalEndLn": 1195,
                            "focalMethod": " public static String hexdump ( final byte [ ] bytes ) { \n if ( bytes == null || bytes . length < 1 ) return \"STR\" ; \n int length = bytes . length ; \n int temp ; \n char [ ] hex = new char [ length * 2 ] ; \n for ( int i = 0 ; \n i < length ; \n i ++ ) { \n temp = bytes [ i ] & 0xFF ; \n hex [ i * 2 ] = HEXARRAY [ temp > > > 4 ] ; \n hex [ i * 2 + 1 ] = HEXARRAY [ temp & 0x0F ] ; \n } return new String ( hex ) ; \n } "
                        },
                        {
                            "testName": "testEscape",
                            "startLn": 36,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testEscape ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.escapeJava(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.escapeJava(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "escapeJava",
                            "focalStartLn": 738,
                            "focalEndLn": 743,
                            "focalMethod": " public static String escapeJava ( String str ) { \n if ( isBlank ( str ) ) { \n return str ; \n } return StringEscapeUtils . escapeJava ( str ) ; \n } "
                        },
                        {
                            "testName": "testBC",
                            "startLn": 74,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testBC ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.toDBC(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.toDBC(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "toDBC",
                            "focalStartLn": 982,
                            "focalEndLn": 1000,
                            "focalMethod": " public static String toDBC ( String sbcString ) { \n if ( isBlank ( sbcString ) ) { \n return \"STR\" ; \n } StringBuilder sb = new StringBuilder ( ) ; \n for ( int i = 0 ; \n i < sbcString . length ( ) ; \n i ++ ) { \n int index = ArrayUtil . indexOf ( SBC , sbcString . charAt ( i ) ) ; \n if ( index != - 1 ) { \n sb . append ( DBC [ index ] ) ; \n } else { \n sb . append ( sbcString . charAt ( i ) ) ; \n } } return sb . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ReflexUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/ReflexUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIntefaceGenericTypeClass",
                            "startLn": 110,
                            "endLn": 116,
                            "testMethod": "@Test\n public void testIntefaceGenericTypeClass ( ) {\n     Class < ? > [ ] clazz = ReflexUtil . getInterfacesGenricClasses ( TestInClass . class ) ; \n     Class [ ] exp = { \n String . class , Long . class , Integer . class } ; \n     Assert.assertArrayEquals(clazz,exp);\n}",
                            "oracle": "Assert.assertArrayEquals(clazz,exp);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ReflexUtil.java",
                            "focalName": "getInterfacesGenricClasses",
                            "focalStartLn": 386,
                            "focalEndLn": 395,
                            "focalMethod": " public static Class < ? > [ ] getInterfacesGenricClasses ( final Class < ? > clazz ) { \n Type [ ] types = getInterfacesGenricTypes ( clazz ) ; \n Class < ? > [ ] clazzs = new Class < ? > [ types . length ] ; \n for ( int i = 0 ; \n i < types . length ; \n i ++ ) { \n clazzs [ i ] = ( Class < ? > ) types [ i ] ; \n } return clazzs ; \n } "
                        },
                        {
                            "testName": "testGetInstance",
                            "startLn": 35,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testGetInstance ( ) {\n     Map < String , Object > map = new HashMap < String , Object > ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     map . put ( \"STR\" , 21 ) ; \n     map . put ( \"STR\" , null ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     TestVo obj = ReflexUtil . getBasicInstance ( TestVo . class , map , false ) ; \n     Assert.assertEquals(21,obj.getAge());\n}",
                            "oracle": "Assert.assertEquals(21,obj.getAge());",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ReflexUtil.java",
                            "focalName": "getBasicInstance",
                            "focalStartLn": 427,
                            "focalEndLn": 449,
                            "focalMethod": " public static < T > T getBasicInstance ( final Class < T > clazz , final Map < String , Object > paramsMap , boolean accessible ) { \n if ( clazz != null && paramsMap != null && paramsMap . size ( ) > 0 ) { \n T instance = ClassUtil . getInstance ( clazz , accessible ) ; \n for ( Map . Entry < String , Object > entry : paramsMap . entrySet ( ) ) { \n String key = entry . getKey ( ) ; \n if ( CommUtil . isBlank ( key ) ) { \n continue ; \n } key = CommUtil . uncapitalize ( key ) ; \n setFieldValue ( instance , key , entry . getValue ( ) , false ) ; \n } return instance ; \n } else { \n return null ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OPLogTest",
                    "classPath": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testDescription",
                            "startLn": 35,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testDescription ( ) throws SecurityException , NoSuchMethodException {\n     Plog annotation = ( Plog ) ClassUtil . getDeclaredMethod ( getClass ( ) , false , \"STR\" ) . getAnnotation ( Plog . class ) ; \n     String value = annotation . value ( ) ; \n     Assert.assertEquals(\"STR\",value);\n}",
                            "oracle": "Assert.assertEquals(\"STR\",value);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ClassUtil.java",
                            "focalName": "getDeclaredMethod",
                            "focalStartLn": 239,
                            "focalEndLn": 255,
                            "focalMethod": " public static Method getDeclaredMethod ( Class < ? > clazz , boolean recursively , String methodName , Class < ? > ... parameterTypes ) { \n try { \n return clazz . getDeclaredMethod ( methodName , parameterTypes ) ; \n } catch ( NoSuchMethodException e ) { \n Class < ? > superClass = clazz . getSuperclass ( ) ; \n if ( superClass != null && recursively ) { \n return getDeclaredMethod ( superClass , true , methodName , parameterTypes ) ; \n } } catch ( SecurityException e ) { \n log . error ( \"STR\" , e . getMessage ( ) , e ) ; \n } return null ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluent",
            "repoName": "fluent-logger-java",
            "subRepos": [],
            "commitSHA": "2e5fdf2dbed59cc5af88442ceae6cbe72f321060",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestFluentLogFactory",
                    "classPath": "src/test/java/org/fluentd/logger/TestFluentLogFactory.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 15,
                        "endLn": 18,
                        "setupMethod": "@Before\n public void setup ( ) { \n loggerFactory = new FluentLoggerFactory ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetLogger",
                            "startLn": 20,
                            "endLn": 31,
                            "testMethod": "@Test\n public void testGetLogger ( ) {\n     FluentLogger loggerA0 = loggerFactory . getLogger ( \"STR\" ) ; \n     FluentLogger loggerA1 = loggerFactory . getLogger ( \"STR\" ) ; \n     FluentLogger loggerB0 = loggerFactory . getLogger ( \"STR\" ) ; \n     FluentLogger loggerA_lh0 = loggerFactory . getLogger ( \"STR\" , \"STR\" , 1234 ) ; \n     FluentLogger loggerA_lh1 = loggerFactory . getLogger ( \"STR\" , \"STR\" , 1234 ) ; \n     assertTrue(loggerA0==loggerA1);\n}",
                            "oracle": "assertTrue(loggerA0==loggerA1);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/org/fluentd/logger/FluentLoggerFactory.java",
                            "focalName": "getLogger",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public FluentLogger getLogger ( String tagPrefix , String host , int port ) { \n return getLogger ( tagPrefix , host , port , 3 * 1000 , 1 * 1024 * 1024 , new ExponentialDelayReconnector ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestBugfixes",
                    "classPath": "src/test/java/org/fluentd/logger/TestBugfixes.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters",
                            "startLn": 12,
                            "endLn": 30,
                            "testMethod": "@Test\n public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters ( ) {\n     System . setProperty ( Config . FLUENT_SENDER_CLASS , \"STR\" ) ; \n     FluentLogger logger = FluentLogger . getLogger ( \"STR\" ) ; \n     logger . log ( \"STR\" , Collections . < String , Object > emptyMap ( ) ) ; \n     logger . close ( ) ; \n     assertEquals(null,logger.sender);\n}",
                            "oracle": "assertEquals(null,logger.sender);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/fluentd/logger/FluentLogger.java",
                            "focalName": "close",
                            "focalStartLn": 109,
                            "focalEndLn": 116,
                            "focalMethod": " public void close ( ) { \n if ( sender != null ) { \n sender . flush ( ) ; \n sender . close ( ) ; \n sender = null ; \n } factory . purgeLogger ( this ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "StyleTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "tapered",
                            "startLn": 30,
                            "endLn": 34,
                            "testMethod": "@Test\n void tapered ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",5.0),attr(\"STR\",\"STR\")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",5.0),attr(\"STR\",\"STR\")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        },
                        {
                            "testName": "wedged",
                            "startLn": 36,
                            "endLn": 40,
                            "testMethod": "@Test\n void wedged ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),attrs(Style.wedged(Color.RED,Color.GREEN)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),attrs(Style.wedged(Color.RED,Color.GREEN)));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizServerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizServerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "cmdLineSimple",
                            "startLn": 36,
                            "endLn": 40,
                            "testMethod": "@Test\n void cmdLineSimple ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer.java",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        },
                        {
                            "testName": "cmdLineArgs",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n void cmdLineArgs ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer.java",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        }
                    ]
                },
                {
                    "className": "RankTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "combine",
                            "startLn": 49,
                            "endLn": 54,
                            "testMethod": "@Test\n void combine ( ) {\n     assertEquals(attrs(attr(\"STR\",true),attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",true),attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        },
                        {
                            "testName": "dir",
                            "startLn": 33,
                            "endLn": 36,
                            "testMethod": "@Test\n void dir ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Rank.dir(LEFT_TO_RIGHT)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Rank.dir(LEFT_TO_RIGHT)));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EndLabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/EndLabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "attrTail",
                            "startLn": 50,
                            "endLn": 55,
                            "testMethod": "@Test\n void attrTail ( ) {\n     final EndLabel tail = EndLabel . tail ( Label . of ( \"STR\" ) , 1d , 2d ) ; \n     assertEquals(attrs(attr(\"STR\",tail),attr(\"STR\",1d),attr(\"STR\",2d)),attrs(tail));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",tail),attr(\"STR\",1d),attr(\"STR\",2d)),attrs(tail));",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 29,
                            "endLn": 32,
                            "testMethod": "@Test\n void simple ( ) {\n     assertEquals(attrs(attr(\"STR\",label)),attrs(label));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",label)),attrs(label));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        },
                        {
                            "testName": "markdown",
                            "startLn": 113,
                            "endLn": 117,
                            "testMethod": "@Test\n void markdown ( ) {\n     assertEquals(\"STR\",Label.markdown(\"STR\").value);\n}",
                            "oracle": "assertEquals(\"STR\",Label.markdown(\"STR\").value);",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Label.java",
                            "focalName": "markdown",
                            "focalStartLn": 171,
                            "focalEndLn": 181,
                            "focalMethod": " public static Label markdown ( String value ) { \n return html ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( value . replace ( \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) . replaceAll ( \"STR\" , \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimpleTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SimpleTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 28,
                        "endLn": 31,
                        "setupMethod": "@BeforeAll\n static void init ( ) { \n Graphviz . useEngine ( new GraphvizV8Engine ( ) , new GraphvizJdkEngine ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 38,
                            "endLn": 42,
                            "testMethod": "@Test\n void simple ( ) {\n     final Graphviz viz = Graphviz . fromString ( \"STR\" ) ; \n     assertNotNull(viz.render(SVG).toString());\n}",
                            "oracle": "assertNotNull(viz.render(SVG).toString());",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/Renderer.java",
                            "focalName": "toString",
                            "focalStartLn": 51,
                            "focalEndLn": 56,
                            "focalMethod": " public String toString ( ) { \n return execute ( ) . map ( file -> { \n throw new IllegalArgumentException ( \"STR\" + \"STR\" ) ; \n } , string -> string ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SvgSizeAnalyzerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "svgWithoutChanges",
                            "startLn": 42,
                            "endLn": 46,
                            "testMethod": "@Test\n void svgWithoutChanges ( ) {\n     final SvgSizeAnalyzer a = SvgSizeAnalyzer . svg ( SVG ) ; \n     assertEquals(SVG,a.getSvg());\n}",
                            "oracle": "assertEquals(SVG,a.getSvg());",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgSizeAnalyzer.java",
                            "focalName": "getSvg",
                            "focalStartLn": 67,
                            "focalEndLn": 73,
                            "focalMethod": " public String getSvg ( ) { \n final String size = width == null ? \"STR\" + getWidth ( ) + getUnit ( ) + \"STR\" + getHeight ( ) + getUnit ( ) + \"STR\" : \"STR\" + width + \"STR\" + height + \"STR\" ; \n return matcher . replaceFirst ( \"STR\" + size + matcher . group ( \"STR\" ) + \"STR\" + getTransform ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RecordsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "of",
                            "startLn": 35,
                            "endLn": 38,
                            "testMethod": "@Test\n void of ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.of(\"STR\",\"STR\",\"STR\"));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.of(\"STR\",\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java",
                            "focalName": "of",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static Attributes < ForNode > of ( String ... recs ) { \n return attrs ( attr ( SHAPE , RECORD ) , attr ( LABEL , String . join ( \"STR\" , recs ) ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FillStyleTest",
                    "classPath": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java",
                    "subRepo": "graphviz-rough",
                    "classTests": [
                        {
                            "testName": "zigzag",
                            "startLn": 47,
                            "endLn": 53,
                            "testMethod": "@Test\n void zigzag ( ) {\n     assertEquals(map(\"STR\",\"STR\"),FillStyle.zigzag().values);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),FillStyle.zigzag().values);",
                            "oracleLn": 0,
                            "focalFile": "graphviz-rough/src/main/java/guru/nidi/graphviz/rough/FillStyle.java",
                            "focalName": "zigzag",
                            "focalStartLn": 188,
                            "focalEndLn": 190,
                            "focalMethod": " public static Zigzag zigzag ( ) { \n return new Zigzag ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CharacterProtectorTest",
                    "classPath": "core/src/test/java/org/markdownj/test/CharacterProtectorTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createCharacterProtector",
                        "startLn": 17,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void createCharacterProtector ( ) { \n characterProtector = new CharacterProtector ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAllEncodedTokens",
                            "startLn": 28,
                            "endLn": 37,
                            "testMethod": "@Test\n public void testGetAllEncodedTokens ( ) {\n     Collection tokens = characterProtector . getAllEncodedTokens ( ) ; \n     assertEquals(0,tokens.size());\n}",
                            "oracle": "assertEquals(0,tokens.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/CharacterProtector.java",
                            "focalName": "getAllEncodedTokens",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public Collection < String > getAllEncodedTokens ( ) { \n return Collections . unmodifiableSet ( unprotectMap . keySet ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EmailAddresses",
                    "classPath": "core/src/test/java/org/markdownj/test/EmailAddresses.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDecoder",
                            "startLn": 52,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testDecoder ( ) {\n     String encoded = \"STR\" ; \n     String billg = \"STR\" ; \n     assertEquals(billg,HTMLDecoder.decode(encoded));\n}",
                            "oracle": "assertEquals(billg,HTMLDecoder.decode(encoded));",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/org/markdownj/HTMLDecoder.java",
                            "focalName": "decode",
                            "focalStartLn": 42,
                            "focalEndLn": 63,
                            "focalMethod": " public static String decode ( String html ) { \n TextEditor ed = new TextEditor ( html ) ; \n Pattern p1 = Pattern . compile ( \"STR\" ) ; \n ed . replaceAll ( p1 , new Replacement ( ) { \n public String replacement ( Matcher m ) { \n String charDecimal = m . group ( 1 ) ; \n char ch = ( char ) Integer . parseInt ( charDecimal ) ; \n return Character . toString ( ch ) ; \n } } ) ; \n Pattern p2 = Pattern . compile ( \"STR\" ) ; \n ed . replaceAll ( p2 , new Replacement ( ) { \n public String replacement ( Matcher m ) { \n String charHex = m . group ( 1 ) ; \n char ch = ( char ) Integer . parseInt ( charHex , 16 ) ; \n return Character . toString ( ch ) ; \n } } ) ; \n return ed . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EdgeCases",
                    "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNull",
                            "startLn": 62,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testNull ( ) {\n     assertEquals(\"STR\",m.markdown(null));\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(null));",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testSpaces",
                            "startLn": 57,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testSpaces ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LineConventions",
                    "classPath": "core/src/test/java/org/markdownj/test/LineConventions.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMacLineConventions",
                            "startLn": 63,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testMacLineConventions ( ) {\n     MarkdownProcessor markup = new MarkdownProcessor ( ) ; \n     assertEquals(EXPECTED,markup.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(EXPECTED,markup.markdown(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testWindowsLineConventions",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testWindowsLineConventions ( ) {\n     MarkdownProcessor markup = new MarkdownProcessor ( ) ; \n     assertEquals(EXPECTED,markup.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(EXPECTED,markup.markdown(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "HandleHtmlInlineTagsTest",
                    "classPath": "core/src/test/java/org/markdownj/test/HandleHtmlInlineTagsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 11,
                        "endLn": 14,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInlineTagsWithMarkdown",
                            "startLn": 16,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testInlineTagsWithMarkdown ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\").trim());\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\").trim());",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InvalidHandshakeExceptionTest",
                    "classPath": "src/test/java/org/java_websocket/exceptions/InvalidHandshakeExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructor",
                            "startLn": 38,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testConstructor ( ) {\n     InvalidHandshakeException invalidHandshakeException = new InvalidHandshakeException ( ) ; \n     assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());\n}",
                            "oracle": "assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/exceptions/InvalidDataException.java",
                            "focalName": "getCloseCode",
                            "focalStartLn": 91,
                            "focalEndLn": 93,
                            "focalMethod": " public int getCloseCode ( ) { \n return closecode ; \n } "
                        }
                    ]
                },
                {
                    "className": "Draft_6455Test",
                    "classPath": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetExtension",
                            "startLn": 124,
                            "endLn": 129,
                            "testMethod": "@Test\n public void testGetExtension ( ) throws Exception {\n     Draft_6455 draft_6455 = new Draft_6455 ( ) ; \n     assertNotNull(draft_6455.getExtension());\n}",
                            "oracle": "assertNotNull(draft_6455.getExtension());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/drafts/Draft_6455.java",
                            "focalName": "getExtension",
                            "focalStartLn": 339,
                            "focalEndLn": 341,
                            "focalMethod": " public IExtension getExtension ( ) { \n return extension ; \n } "
                        }
                    ]
                },
                {
                    "className": "DefaultSSLWebSocketServerFactoryTest",
                    "classPath": "src/test/java/org/java_websocket/server/DefaultSSLWebSocketServerFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCreateWebSocket",
                            "startLn": 58,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testCreateWebSocket ( ) throws NoSuchAlgorithmException {\n     DefaultSSLWebSocketServerFactory webSocketServerFactory = new DefaultSSLWebSocketServerFactory ( SSLContext . getDefault ( ) ) ; \n     CustomWebSocketAdapter webSocketAdapter = new CustomWebSocketAdapter ( ) ; \n     WebSocketImpl webSocketImpl = webSocketServerFactory . createWebSocket ( webSocketAdapter , new Draft_6455 ( ) ) ; \n     assertNotNull(\"STR\",webSocketImpl);\n}",
                            "oracle": "assertNotNull(\"STR\",webSocketImpl);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/java_websocket/server/DefaultSSLWebSocketServerFactory.java",
                            "focalName": "createWebSocket",
                            "focalStartLn": 78,
                            "focalEndLn": 81,
                            "focalMethod": "@Override\n public WebSocketImpl createWebSocket ( WebSocketAdapter a , Draft d ) { \n return new WebSocketImpl ( a , d ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PerMessageDeflateExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProvidedExtensionAsServer",
                            "startLn": 115,
                            "endLn": 120,
                            "testMethod": "@Test\n public void testGetProvidedExtensionAsServer ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertEquals(\"STR\",deflateExtension.getProvidedExtensionAsServer());\n}",
                            "oracle": "assertEquals(\"STR\",deflateExtension.getProvidedExtensionAsServer());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "getProvidedExtensionAsServer",
                            "focalStartLn": 301,
                            "focalEndLn": 306,
                            "focalMethod": "@Override\n public String getProvidedExtensionAsServer ( ) { \n return EXTENSION_REGISTERED_NAME + \"STR\" + SERVER_NO_CONTEXT_TAKEOVER + ( clientNoContextTakeover ? \"STR\" + CLIENT_NO_CONTEXT_TAKEOVER : \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "DefaultExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testHashCode",
                            "startLn": 137,
                            "endLn": 142,
                            "testMethod": "@Test\n public void testHashCode ( ) throws Exception {\n     DefaultExtension defaultExtension0 = new DefaultExtension ( ) ; \n     DefaultExtension defaultExtension1 = new DefaultExtension ( ) ; \n     assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());\n}",
                            "oracle": "assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/java_websocket/extensions/DefaultExtension.java",
                            "focalName": "hashCode",
                            "focalStartLn": 94,
                            "focalEndLn": 97,
                            "focalMethod": "@Override\n public int hashCode ( ) { \n return getClass ( ) . hashCode ( ) ; \n } "
                        },
                        {
                            "testName": "testToString",
                            "startLn": 131,
                            "endLn": 135,
                            "testMethod": "@Test\n public void testToString ( ) throws Exception {\n     DefaultExtension defaultExtension = new DefaultExtension ( ) ; \n     assertEquals(\"STR\",defaultExtension.toString());\n}",
                            "oracle": "assertEquals(\"STR\",defaultExtension.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/extensions/DefaultExtension.java",
                            "focalName": "toString",
                            "focalStartLn": 89,
                            "focalEndLn": 92,
                            "focalMethod": "@Override\n public String toString ( ) { \n return getClass ( ) . getSimpleName ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CloseFrameTest",
                    "classPath": "src/test/java/org/java_websocket/framing/CloseFrameTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExtends",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testExtends ( ) {\n     CloseFrame frame = new CloseFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofControlFrame);\n}",
                            "oracle": "assertEquals(\"STR\",true,frameinstanceofControlFrame);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/framing/CloseFrame.java",
                            "focalName": "CloseFrame",
                            "focalStartLn": 168,
                            "focalEndLn": 172,
                            "focalMethod": " public CloseFrame ( ) { \n super ( Opcode . CLOSING ) ; \n setReason ( \"STR\" ) ; \n setCode ( CloseFrame . NORMAL ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProtocolTest",
                    "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProvidedProtocol",
                            "startLn": 66,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testGetProvidedProtocol ( ) throws Exception {\n     Protocol protocol0 = new Protocol ( \"STR\" ) ; \n     assertEquals(\"STR\",protocol0.getProvidedProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",protocol0.getProvidedProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/protocols/Protocol.java",
                            "focalName": "getProvidedProtocol",
                            "focalStartLn": 72,
                            "focalEndLn": 75,
                            "focalMethod": "@Override\n public String getProvidedProtocol ( ) { \n return this . providedProtocol ; \n } "
                        }
                    ]
                },
                {
                    "className": "HeadersTest",
                    "classPath": "src/test/java/org/java_websocket/client/HeadersTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "test_Add_RemoveHeaders",
                            "startLn": 72,
                            "endLn": 103,
                            "testMethod": "@Test\n public void test_Add_RemoveHeaders ( ) throws URISyntaxException {\n     Map < String , String > httpHeaders = null ; \n     WebSocketClient client = new WebSocketClient ( new URI ( \"STR\" ) , httpHeaders ) { \n @Override\n public void onOpen ( ServerHandshake handshakedata ) { \n } @Override\n public void onMessage ( String message ) { \n } @Override\n public void onClose ( int code , String reason , boolean remote ) { \n } @Override\n public void onError ( Exception ex ) { \n } } ; \n     client . addHeader ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",client.removeHeader(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",client.removeHeader(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/java_websocket/client/WebSocketClient.java",
                            "focalName": "removeHeader",
                            "focalStartLn": 284,
                            "focalEndLn": 289,
                            "focalMethod": " public String removeHeader ( String key ) { \n if ( headers == null ) { \n return null ; \n } return headers . remove ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FramedataImpl1Test",
                    "classPath": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSetters",
                            "startLn": 75,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testSetters ( ) {\n     FramedataImpl1 frame = FramedataImpl1 . get ( Opcode . BINARY ) ; \n     frame . setFin ( false ) ; \n     assertEquals(\"STR\",false,frame.isFin());\n}",
                            "oracle": "assertEquals(\"STR\",false,frame.isFin());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java",
                            "focalName": "isFin",
                            "focalStartLn": 109,
                            "focalEndLn": 112,
                            "focalMethod": "@Override\n public boolean isFin ( ) { \n return fin ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "gvlasov",
            "repoName": "collections-utils",
            "subRepos": [],
            "commitSHA": "82f20efc8e53ea876896b779e35ed33633ec2e23",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CollectorsTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/CollectorsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "toImmutableSet",
                            "startLn": 11,
                            "endLn": 18,
                            "testMethod": "@Test\n public void toImmutableSet ( ) {\n     Assert.assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));\n}",
                            "oracle": "Assert.assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/Collectors.java",
                            "focalName": "toImmutableSet",
                            "focalStartLn": 11,
                            "focalEndLn": 13,
                            "focalMethod": " public static < T > Collector < T , ? , ImmutableSet < T > > toImmutableSet ( ) { \n return new ImmutableSetCollector < > ( ) ; \n } "
                        },
                        {
                            "testName": "toImmutableList",
                            "startLn": 20,
                            "endLn": 27,
                            "testMethod": "@Test\n public void toImmutableList ( ) {\n     Assert.assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));\n}",
                            "oracle": "Assert.assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/Collectors.java",
                            "focalName": "toImmutableList",
                            "focalStartLn": 15,
                            "focalEndLn": 17,
                            "focalMethod": " public static < T > Collector < T , ? , ImmutableList < T > > toImmutableList ( ) { \n return new ImmutableListCollector < > ( ) ; \n } "
                        },
                        {
                            "testName": "toLinkedHashSet",
                            "startLn": 29,
                            "endLn": 40,
                            "testMethod": "@Test\n public void toLinkedHashSet ( ) {\n     final LinkedHashSet < Integer > expected = new LinkedHashSet < > ( ) ; \n     expected . add ( 1 ) ; \n     expected . add ( 2 ) ; \n     expected . add ( 3 ) ; \n     Assert.assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));\n}",
                            "oracle": "Assert.assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/Collectors.java",
                            "focalName": "toLinkedHashSet",
                            "focalStartLn": 19,
                            "focalEndLn": 21,
                            "focalMethod": " public static < T > Collector < T , ? , LinkedHashSet < T > > toLinkedHashSet ( ) { \n return java . util . stream . Collectors . toCollection ( LinkedHashSet :: new ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ZippedMapTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/ZippedMapTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "constructsFromEquallySizedLists",
                            "startLn": 14,
                            "endLn": 26,
                            "testMethod": "@Test\n public void constructsFromEquallySizedLists ( ) throws Exception {\n     final ZippedMap < String , Integer > map = new ZippedMap < > ( ImmutableList . of ( \"STR\" , \"STR\" , \"STR\" ) , ImmutableList . of ( 7 , 9 , 15 ) ) ; \n     Assert.assertTrue(map.containsKey(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(map.containsKey(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/ZippedMap.java",
                            "focalName": "containsKey",
                            "focalStartLn": 53,
                            "focalEndLn": 56,
                            "focalMethod": "@Override\n public boolean containsKey ( Object o ) { \n return this . delegate . containsKey ( o ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StreamIterableTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/StreamIterableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "containsRightElements",
                            "startLn": 11,
                            "endLn": 26,
                            "testMethod": "@Test\n public void containsRightElements ( ) {\n     final Iterator < Integer > iterator = new StreamIterable < > ( Arrays . asList ( 1 , 2 , 3 , 4 ) . stream ( ) ) . iterator ( ) ; \n     Assert.assertTrue(iterator.hasNext());\n}",
                            "oracle": "Assert.assertTrue(iterator.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/StreamIterable.java",
                            "focalName": "iterator",
                            "focalStartLn": 13,
                            "focalEndLn": 16,
                            "focalMethod": "@Override\n public Iterator < T > iterator ( ) { \n return stream . iterator ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "IterableToStreamTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "iterableToStream",
                            "startLn": 9,
                            "endLn": 17,
                            "testMethod": "@Test\n public void iterableToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 10,
                            "focalEndLn": 18,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterable < T > iterable ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterable . iterator ( ) , Spliterator . ORDERED ) , false ) ; \n } "
                        },
                        {
                            "testName": "iteratorToStream",
                            "startLn": 19,
                            "endLn": 27,
                            "testMethod": "@Test\n public void iteratorToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 19,
                            "focalEndLn": 27,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterator < T > iterator ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator , Spliterator . ORDERED ) , false ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RegressionTest",
                    "classPath": "src/test/java/com/basistech/tclre/RegressionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testStockSymbol",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testStockSymbol ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}",
                            "oracle": "assertTrue(matcher.find());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "find",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": " boolean find ( ) ; \n"
                        },
                        {
                            "testName": "cannotFindSimpleDate",
                            "startLn": 82,
                            "endLn": 93,
                            "testMethod": "@Test\n public void cannotFindSimpleDate ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     matcher . reset ( new String ( \"STR\" . toCharArray ( ) , 0 , \"STR\" . length ( ) ) ) ; \n     matcher . region ( 0 , 8 ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ColorMapTest",
                    "classPath": "src/test/java/com/basistech/tclre/ColorMapTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 62,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testEmpty ( ) throws Exception {\n     ColorMap cm = new ColorMap ( compiler ) ; \n     cm . okcolors ( nfa ) ; \n     assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));\n}",
                            "oracle": "assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/RuntimeColorMap.java",
                            "focalName": "getcolor",
                            "focalStartLn": 80,
                            "focalEndLn": 82,
                            "focalMethod": " short getcolor ( char c ) { \n return bmpMap [ c ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "MatcherTest",
                    "classPath": "src/test/java/apitests/MatcherTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "reset",
                            "startLn": 48,
                            "endLn": 65,
                            "testMethod": "@Test\n public void reset ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}",
                            "oracle": "assertTrue(matcher.find());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "find",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": " boolean find ( ) ; \n"
                        },
                        {
                            "testName": "lookingAtAREDirector",
                            "startLn": 115,
                            "endLn": 120,
                            "testMethod": "@Test\n public void lookingAtAREDirector ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        },
                        {
                            "testName": "lookingAt",
                            "startLn": 95,
                            "endLn": 106,
                            "testMethod": "@Test\n public void lookingAt ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testNormalize",
                            "startLn": 33,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testNormalize ( ) {\n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.normalize(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.normalize(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "normalize",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public static CharSequence normalize ( CharSequence text ) { \n return OpenKoreanTextProcessor . normalize ( text ) ; \n } "
                        },
                        {
                            "testName": "testTokensToJavaKoreanTokenList",
                            "startLn": 135,
                            "endLn": 164,
                            "testMethod": "@Test\n public void testTokensToJavaKoreanTokenList ( ) throws Exception {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\"+\"STR\",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());\n}",
                            "oracle": "assertEquals(\"STR\"+\"STR\",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/KoreanTokenJava.java",
                            "focalName": "isUnknown",
                            "focalStartLn": 57,
                            "focalEndLn": 59,
                            "focalMethod": " public boolean isUnknown ( ) { \n return unknown ; \n } "
                        },
                        {
                            "testName": "testRemoveWordsFromDictionary",
                            "startLn": 113,
                            "endLn": 133,
                            "testMethod": "@Test\n public void testRemoveWordsFromDictionary ( ) {\n     String text = \"STR\" ; \n     ArrayList < String > nouns = new ArrayList < > ( ) ; \n     nouns . add ( \"STR\" ) ; \n     OpenKoreanTextProcessorJava . addWordsToDictionary ( KoreanPosJava . Noun , nouns ) ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "addWordsToDictionary",
                            "focalStartLn": 76,
                            "focalEndLn": 78,
                            "focalMethod": " public static void addWordsToDictionary ( KoreanPosJava pos , List < String > words ) { \n OpenKoreanTextProcessor . addWordsToDictionary ( KoreanPos . withName ( pos . toString ( ) ) , JavaConverters . asScalaBufferConverter ( words ) . asScala ( ) ) ; \n } "
                        },
                        {
                            "testName": "testAddWordsToDictionary",
                            "startLn": 89,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testAddWordsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/KoreanTokenJava.java",
                            "focalName": "getPos",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public KoreanPosJava getPos ( ) { \n return pos ; \n } "
                        },
                        {
                            "testName": "testAddNounsToDictionary",
                            "startLn": 70,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testAddNounsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "addNounsToDictionary",
                            "focalStartLn": 66,
                            "focalEndLn": 68,
                            "focalMethod": " public static void addNounsToDictionary ( List < String > words ) { \n OpenKoreanTextProcessor . addNounsToDictionary ( JavaConverters . asScalaBufferConverter ( words ) . asScala ( ) ) ; \n } "
                        },
                        {
                            "testName": "testDetokenizer",
                            "startLn": 200,
                            "endLn": 208,
                            "testMethod": "@Test\n public void testDetokenizer ( ) {\n     List < String > words = Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "detokenize",
                            "focalStartLn": 182,
                            "focalEndLn": 184,
                            "focalMethod": " public static String detokenize ( List < String > tokens ) { \n return OpenKoreanTextProcessor . detokenize ( JavaConverters . asScalaBufferConverter ( tokens ) . asScala ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "xmlet",
            "repoName": "XsdParser",
            "subRepos": [],
            "commitSHA": "8dce9914aac46eea527f6c773a753175e93ad709",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "IssuesTest",
                    "classPath": "src/test/java/org/xmlet/xsdparser/IssuesTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIssue23",
                            "startLn": 134,
                            "endLn": 141,
                            "testMethod": "@Test\n public void testIssue23 ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertTrue(true);\n}",
                            "oracle": "Assert.assertTrue(true);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java",
                            "focalName": "getResultXsdSchemas",
                            "focalStartLn": 413,
                            "focalEndLn": 420,
                            "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } "
                        },
                        {
                            "testName": "testIssue27Attributes",
                            "startLn": 322,
                            "endLn": 359,
                            "testMethod": "@Test\n public void testIssue27Attributes ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertEquals(1,schemas.size());\n}",
                            "oracle": "Assert.assertEquals(1,schemas.size());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java",
                            "focalName": "getResultXsdSchemas",
                            "focalStartLn": 413,
                            "focalEndLn": 420,
                            "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "spring-cloud",
            "repoName": "spring-cloud-security",
            "subRepos": [
                "spring-cloud-security",
                "spring-cloud-starter-security",
                "spring-cloud-starter-oauth2"
            ],
            "commitSHA": "d5dac0e77e1d9ef17a75fd6b34dfc62685da50e7",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OAuth2FeignRequestInterceptorTests",
                    "classPath": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java",
                    "subRepo": "spring-cloud-security",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 51,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void setUp ( ) { \n oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new MockOAuth2ClientContext ( \"STR\" ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n requestTemplate = new RequestTemplate ( ) . method ( HttpMethod . GET ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "applyAuthorizationHeader",
                            "startLn": 59,
                            "endLn": 67,
                            "testMethod": "@Test\n public void applyAuthorizationHeader ( ) {\n     oAuth2FeignRequestInterceptor . apply ( requestTemplate ) ; \n     Map < String , Collection < String > > headers = requestTemplate . headers ( ) ; \n     Assert.assertTrue(\"STR\",headers.containsKey(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(\"STR\",headers.containsKey(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "apply",
                            "focalStartLn": 105,
                            "focalEndLn": 109,
                            "focalMethod": "@Override\n public void apply ( RequestTemplate template ) { \n template . header ( header ) ; \n template . header ( header , extract ( tokenType ) ) ; \n } "
                        },
                        {
                            "testName": "configureAccessTokenProvider",
                            "startLn": 79,
                            "endLn": 86,
                            "testMethod": "@Test\n public void configureAccessTokenProvider ( ) {\n     OAuth2AccessToken mockedToken = new MockOAuth2AccessToken ( \"STR\" ) ; \n     oAuth2FeignRequestInterceptor . setAccessTokenProvider ( new MockAccessTokenProvider ( mockedToken ) ) ; \n     Assert.assertEquals(\"STR\",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "acquireAccessToken",
                            "focalStartLn": 157,
                            "focalEndLn": 184,
                            "focalMethod": " protected OAuth2AccessToken acquireAccessToken ( ) throws UserRedirectRequiredException { \n AccessTokenRequest tokenRequest = oAuth2ClientContext . getAccessTokenRequest ( ) ; \n if ( tokenRequest == null ) { \n throw new AccessTokenRequiredException ( \"STR\" + resource . getId ( ) + \"STR\" , resource ) ; \n } String stateKey = tokenRequest . getStateKey ( ) ; \n if ( stateKey != null ) { \n tokenRequest . setPreservedState ( oAuth2ClientContext . removePreservedState ( stateKey ) ) ; \n } OAuth2AccessToken existingToken = oAuth2ClientContext . getAccessToken ( ) ; \n if ( existingToken != null ) { \n oAuth2ClientContext . setAccessToken ( existingToken ) ; \n } OAuth2AccessToken obtainableAccessToken ; \n obtainableAccessToken = accessTokenProvider . obtainAccessToken ( resource , tokenRequest ) ; \n if ( obtainableAccessToken == null || obtainableAccessToken . getValue ( ) == null ) { \n throw new IllegalStateException ( \"STR\" ) ; \n } oAuth2ClientContext . setAccessToken ( obtainableAccessToken ) ; \n return obtainableAccessToken ; \n } "
                        },
                        {
                            "testName": "tryToAcquireToken",
                            "startLn": 69,
                            "endLn": 77,
                            "testMethod": "@ Test ( expected = OAuth2AccessDeniedException . class ) public void tryToAcquireToken ( ) {\n     oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new DefaultOAuth2ClientContext ( ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n     OAuth2AccessToken oAuth2AccessToken = oAuth2FeignRequestInterceptor . getToken ( ) ; \n     Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);\n}",
                            "oracle": "Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "getToken",
                            "focalStartLn": 128,
                            "focalEndLn": 149,
                            "focalMethod": " public OAuth2AccessToken getToken ( ) { \n OAuth2AccessToken accessToken = oAuth2ClientContext . getAccessToken ( ) ; \n if ( accessToken == null || accessToken . isExpired ( ) ) { \n try { \n accessToken = acquireAccessToken ( ) ; \n } catch ( UserRedirectRequiredException e ) { \n oAuth2ClientContext . setAccessToken ( null ) ; \n String stateKey = e . getStateKey ( ) ; \n if ( stateKey != null ) { \n Object stateToPreserve = e . getStateToPreserve ( ) ; \n if ( stateToPreserve == null ) { \n stateToPreserve = \"STR\" ; \n } oAuth2ClientContext . setPreservedState ( stateKey , stateToPreserve ) ; \n } throw e ; \n } } return accessToken ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "1337joe",
            "repoName": "cubesensors-for-java",
            "subRepos": [],
            "commitSHA": "f3ba432d36b744e68b916682d7ef24afaff447f8",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestPressure",
                    "classPath": "src/test/java/com/w3asel/cubesensors/api/v1/format/TestPressure.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testToMillibar",
                            "startLn": 14,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testToMillibar ( ) {\n     String expected , actual ; \n     expected = \"STR\" ; \n     actual = Pressure . toMilliBar ( 802 ) ; \n     Assert.assertEquals(expected,actual);\n}",
                            "oracle": "Assert.assertEquals(expected,actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/w3asel/cubesensors/api/v1/format/Pressure.java",
                            "focalName": "toMilliBar",
                            "focalStartLn": 22,
                            "focalEndLn": 25,
                            "focalMethod": " public static String toMilliBar ( final int apiValue ) { \n return String . valueOf ( apiValue ) ; \n } "
                        },
                        {
                            "testName": "testToInHg",
                            "startLn": 24,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testToInHg ( ) {\n     String expected , actual ; \n     expected = \"STR\" ; \n     actual = Pressure . toInHg ( 802 ) ; \n     Assert.assertEquals(expected,actual);\n}",
                            "oracle": "Assert.assertEquals(expected,actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/w3asel/cubesensors/api/v1/format/Pressure.java",
                            "focalName": "toInHg",
                            "focalStartLn": 32,
                            "focalEndLn": 34,
                            "focalMethod": " public static String toInHg ( final int apiValue ) { \n return toInHg ( apiValue , 1 ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jribble",
            "repoName": "Java-Websockify",
            "subRepos": [],
            "commitSHA": "3aa62299b11023676dada7ec3b8214960c5dcce2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "FlashPolicyHandlerTest",
                    "classPath": "src/test/java/com/netiq/websockify/FlashPolicyHandlerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 24,
                        "setupMethod": "@Before\n public void setUp ( ) { \n embedder = new DecoderEmbedder < FlashPolicyRequest > ( new FlashPolicyHandler ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDecodeCustomResponse",
                            "startLn": 41,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testDecodeCustomResponse ( ) {\n     String XML = \"STR\" ; \n     ChannelBuffer policyResponse = ChannelBuffers . copiedBuffer ( XML , CharsetUtil . UTF_8 ) ; \n     embedder = new DecoderEmbedder < FlashPolicyRequest > ( new FlashPolicyHandler ( policyResponse ) ) ; \n     String request = \"STR\" ; \n     byte [ ] b = request . getBytes ( ) ; \n     ChannelBuffer buf = wrappedBuffer ( b ) ; \n     embedder . offer ( buf ) ; \n     Object first = embedder . poll ( ) ; \n     ChannelBuffer response = ( ChannelBuffer ) first ; \n     String resp = new String ( response . array ( ) , 0 , response . readableBytes ( ) ) ; \n     assertTrue(XML.equals(resp));\n}",
                            "oracle": "assertTrue(XML.equals(resp));",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/com/netiq/websockify/FlashPolicyHandler.java",
                            "focalName": "FlashPolicyHandler",
                            "focalStartLn": 46,
                            "focalEndLn": 49,
                            "focalMethod": " public FlashPolicyHandler ( ChannelBuffer policyResponse ) { \n super ( ) ; \n this . policyResponse = policyResponse ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "phax",
            "repoName": "ph-genericode",
            "subRepos": [],
            "commitSHA": "5e28716fa68c642a6dec8011346229a00a6721e4",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExcelSheetToCodeList04Test",
                    "classPath": "src/test/java/com/helger/genericode/excel/ExcelSheetToCodeList04Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadExcel",
                            "startLn": 44,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testReadExcel ( ) throws URISyntaxException {\n     final IReadableResource aXls = new ClassPathResource ( \"STR\" ) ; \n     assertTrue(aXls.exists());\n}",
                            "oracle": "assertTrue(aXls.exists());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/helger/genericode/Genericode04CodeListMarshaller.java",
                            "focalName": "Genericode04CodeListMarshaller",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": " public Genericode04CodeListMarshaller ( ) { \n super ( CodeListDocument . class , CGenericode . GENERICODE_04_XSDS , o -> new ObjectFactory ( ) . createCodeList ( o ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ExcelSheetToCodeList10Test",
                    "classPath": "src/test/java/com/helger/genericode/excel/ExcelSheetToCodeList10Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadExcel",
                            "startLn": 44,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testReadExcel ( ) throws URISyntaxException {\n     final IReadableResource aXls = new ClassPathResource ( \"STR\" ) ; \n     assertTrue(aXls.exists());\n}",
                            "oracle": "assertTrue(aXls.exists());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/helger/genericode/Genericode10CodeListMarshaller.java",
                            "focalName": "Genericode10CodeListMarshaller",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": " public Genericode10CodeListMarshaller ( ) { \n super ( CodeListDocument . class , CGenericode . GENERICODE_10_XSDS , o -> new ObjectFactory ( ) . createCodeList ( o ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rhwayfun",
            "repoName": "spring-boot-rocketmq-starter",
            "subRepos": [],
            "commitSHA": "642a6745434e3f7ea2e6bca42d3b8f450590441c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RocketMqAutoConfigurationTest",
                    "classPath": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "defaultRocketMqProducer",
                            "startLn": 40,
                            "endLn": 54,
                            "testMethod": "@Test\n public void defaultRocketMqProducer ( ) {\n     load ( \"STR\" + TEST_NAME_SERVER , \"STR\" + TEST_PRODUCER_GROUP ) ; \n     Assert.assertTrue(this.context.containsBean(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(this.context.containsBean(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/github/rhwayfun/springboot/rocketmq/starter/common/DefaultRocketMqProducer.java",
                            "focalName": "getProducer",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " public DefaultMQProducer getProducer ( ) { \n return producer ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "AlejandroRivera",
            "repoName": "embedded-rabbitmq",
            "subRepos": [],
            "commitSHA": "79615bf3e8e738ba756ebb44e6bf456610de4520",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExtractorFactoryTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 14,
                        "endLn": 17,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n builder = new EmbeddedRabbitMqConfig . Builder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "withCaching",
                            "startLn": 27,
                            "endLn": 33,
                            "testMethod": "@Test\n public void withCaching ( ) throws Exception {\n     builder . useCachedDownload ( true ) ; \n     Extractor extractor = new ExtractorFactory ( builder . build ( ) ) . getNewInstance ( ) ; \n     assertTrue(extractor.getClass().equals(CachedExtractor.class));\n}",
                            "oracle": "assertTrue(extractor.getClass().equals(CachedExtractor.class));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactory.java",
                            "focalName": "getNewInstance",
                            "focalStartLn": 16,
                            "focalEndLn": 22,
                            "focalMethod": " public Extractor getNewInstance ( ) { \n Extractor extractor = new BasicExtractor ( config ) ; \n if ( config . shouldCachedDownload ( ) ) { \n extractor = new CachedExtractor ( extractor , config ) ; \n } return extractor ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "retog",
            "repoName": "wymiwyg-commons-core",
            "subRepos": [],
            "commitSHA": "5b5ba4fef4e810b8cea0ac08ce105fa402eaee3c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MultiPathNodeTest",
                    "classPath": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "commonPath",
                            "startLn": 35,
                            "endLn": 41,
                            "testMethod": "@Test\n public void commonPath ( ) {\n     MultiPathNode node = new MultiPathNode ( nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) ) ; \n     Assert.assertEquals(\"STR\",node.getPath());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",node.getPath());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/wymiwyg/commons/util/dirbrowser/MultiPathNode.java",
                            "focalName": "getPath",
                            "focalStartLn": 212,
                            "focalEndLn": 218,
                            "focalMethod": " public String getPath ( ) { \n String currentLongest = nodes [ 0 ] . getPath ( ) ; \n for ( int i = 1 ; \n i < nodes . length ; \n i ++ ) { \n currentLongest = getLongestCommonSuffix ( currentLongest , nodes [ i ] . getPath ( ) ) ; \n } return currentLongest ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "vdmeer",
            "repoName": "execs",
            "subRepos": [],
            "commitSHA": "ac73170bfd449de1f460248d56ece57ff3b0c761",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "Test_ExecS",
                    "classPath": "src/test/java/de/vandermeer/execs/Test_ExecS.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCliAppName",
                            "startLn": 31,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testCliAppName ( ) {\n     ExecS execs = new ExecS ( ) ; \n     assertEquals(\"STR\",execs.getAppName());\n}",
                            "oracle": "assertEquals(\"STR\",execs.getAppName());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/de/vandermeer/execs/ExecS.java",
                            "focalName": "getAppName",
                            "focalStartLn": 282,
                            "focalEndLn": 284,
                            "focalMethod": " public final String getAppName ( ) { \n return this . appName ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}