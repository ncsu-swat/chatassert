{
    "1": [
        "Assert.assertEquals(expected,actual)",
        "Assert.assertArrayEquals(expected,actual)"
    ],
    "2": [
        "Assert.assertNull(getHazelcastVersionFromJarOrNull(file))",
        "Assert.assertNull(Hazelcast.getHazelcastVersionFromJarOrNull(file))",
        "Assert.assertNull(hazelcastVersionFromJarOrNull(file))"
    ],
    "3": [
        "Assert.assertEquals(trackedSet.getTrackedValues(),original)",
        "Assert.assertEquals(original,trackedSet.getOriginal())",
        "Assert.assertEquals(\"value1\",trackedSet.get(0))",
        "Assert.assertEquals(trackedSet.getOriginal(),original)",
        "Assert.assertEquals(\"value1\",doc.getField(\"value1\").getValue())"
    ],
    "4": [
        "Assert.assertEquals(Turpm\u0101kaj\u0101.lemma(),\"Turpam\u0101kaj\u0101\")",
        "Assert.assertEquals(Turpms2,Turpms2.getWord())",
        "Assert.assertEquals(\"Turpm\u0101kaj\u0101\",Turpm\u0101kaj\u0101.word())",
        "Assert.assertEquals(\"Turpm\u0101kaj\u0101\",Turpm\u0101kaj\u0101.getText())",
        "Assert.assertEquals(\"Turpm\u0101kaj\u0101\",Turpm\u0101kaj\u0101.getWord())"
    ],
    "5": [
        "Assert.assertEquals(buffer.getInt(0),stream.length)",
        "Assert.assertEquals(OBJECT,ByteSerializer.deserializeNative(buffer,0))",
        "Assert.assertEquals(buffer.capacity(),stream.length)",
        "Assert.assertEquals(OBJECT,byteSerializer.deserializeNative(buffer))",
        "Assert.assertEquals(stream.length,buffer.limit())",
        "Assert.assertEquals(OBJECT,byteSerializer.deserializeNative(buffer,0))"
    ],
    "6": [
        "Assert.assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(\"b\"))))",
        "Assert.assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(\"b\"))))}@TestpublicvoidtestEqualsDifferentKeys()",
        "Assert.assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(\"a\"))))",
        "Assert.assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(\"a\")))"
    ],
    "7": [
        "Assert.assertEquals(method,\"method\")",
        "Assert.assertEquals(method,\"tearDown\")",
        "Assert.assertEquals(method,method)",
        "Assert.assertEquals(method,TestMethods.methodWithVoidReturnType())",
        "Assert.assertEquals(method,\"teardown\")",
        "Assert.assertTrue(method.isAnnotationPresent(Teardown.class))",
        "Assert.assertEquals(method,\"testLocalTeardownFilter\")"
    ],
    "8": [
        "Assert.assertEquals(manager.getDirtyFields().get(\"test1\"),null)",
        "Assert.assertTrue(manager.isDirty())",
        "Assert.assertEquals(manager.getDirtyCount(),1)",
        "Assert.assertNull(manager.getDirtyLink(\"test1\"))",
        "Assert.assertEquals(manager.getFieldValue(\"test1\"),null)",
        "Assert.assertEquals(manager.getDirtyFields().size(),1)"
    ],
    "9": [
        "Assert.assertEquals(\"hula\",head.getLabel().getName())",
        "Assert.assertEquals(\"hula\",head.label)",
        "Assert.assertEquals(\"hula\",head.label.get())",
        "Assert.assertEquals(head,Label.of(\"hula\",1d,2d))",
        "Assert.assertEquals(\"hula\",head.getLabel())"
    ],
    "10": [
        "Assert.assertFalse(OTP.verifyOTP(otp))",
        "Assert.assertEquals(otp,OTP.generateOTP(OTP.generateOTP(otp)))",
        "Assert.assertFalse(otp.matches(\"^[0-9]{6}$\"))",
        "Assert.assertEquals(\"InvalidOTP\",otp,otpService.getShortOTP(otp))",
        "Assert.assertEquals(otp,otpService.generateOTP(otp))",
        "Assert.assertEquals(otp,JwtUtils.getShortOTP(otp))",
        "Assert.assertEquals(otp,otpUtil.generateOTP(otp.length()))",
        "Assert.assertEquals(otp,otpGenerator.generateOTP())",
        "Assert.assertEquals(otp,UserService.getOTP(null))"
    ]
}